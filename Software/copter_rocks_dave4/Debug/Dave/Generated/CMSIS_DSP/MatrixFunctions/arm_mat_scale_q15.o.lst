   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_mat_scale_q15.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.arm_mat_scale_q15,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_mat_scale_q15
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_mat_scale_q15:
  26              	.LFB139:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c"
   1:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** /* ----------------------------------------------------------------------    
   2:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** * Copyright (C) 2010-2014 ARM Limited. All rights reserved.    
   3:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** *    
   4:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** * $Date:        31. July 2014
   5:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** * $Revision: 	V1.4.4
   6:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** *    
   7:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** * Project: 	    CMSIS DSP Library    
   8:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** * Title:	    arm_mat_scale_q15.c    
   9:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** *    
  10:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** * Description:	Multiplies a Q15 matrix by a scalar.    
  11:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** *    
  12:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** * Target Processor: Cortex-M4/Cortex-M3/Cortex-M0
  13:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** *  
  14:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** * Redistribution and use in source and binary forms, with or without 
  15:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** * modification, are permitted provided that the following conditions
  16:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** * are met:
  17:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** *   - Redistributions of source code must retain the above copyright
  18:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** *     notice, this list of conditions and the following disclaimer.
  19:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** *   - Redistributions in binary form must reproduce the above copyright
  20:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** *     notice, this list of conditions and the following disclaimer in
  21:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** *     the documentation and/or other materials provided with the 
  22:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** *     distribution.
  23:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** *   - Neither the name of ARM LIMITED nor the names of its contributors
  24:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** *     may be used to endorse or promote products derived from this
  25:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** *     software without specific prior written permission.
  26:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** *
  27:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  28:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  29:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  30:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE 
  31:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  32:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  33:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  34:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  35:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  36:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** * POSSIBILITY OF SUCH DAMAGE.  
  39:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** * -------------------------------------------------------------------- */
  40:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
  41:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  42:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
  43:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** /**    
  44:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * @ingroup groupMatrix    
  45:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  */
  46:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
  47:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** /**    
  48:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * @addtogroup MatrixScale    
  49:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * @{    
  50:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  */
  51:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
  52:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** /**    
  53:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * @brief Q15 matrix scaling.    
  54:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * @param[in]       *pSrc points to input matrix    
  55:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * @param[in]       scaleFract fractional portion of the scale factor    
  56:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * @param[in]       shift number of bits to shift the result by    
  57:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * @param[out]      *pDst points to output matrix structure    
  58:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * @return     		The function returns either    
  59:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of siz
  60:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  *    
  61:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * @details    
  62:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * <b>Scaling and Overflow Behavior:</b>    
  63:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * \par    
  64:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * The input data <code>*pSrc</code> and <code>scaleFract</code> are in 1.15 format.    
  65:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * These are multiplied to yield a 2.30 intermediate result and this is shifted with saturation to 
  66:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  */
  67:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
  68:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** arm_status arm_mat_scale_q15(
  69:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   const arm_matrix_instance_q15 * pSrc,
  70:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   q15_t scaleFract,
  71:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   int32_t shift,
  72:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   arm_matrix_instance_q15 * pDst)
  73:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** {
  28              	 .loc 1 73 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33 0000 80B4     	 push {r7}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 4
  36              	 .cfi_offset 7,-4
  37 0002 A5B0     	 sub sp,sp,#148
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 152
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
  43 0006 F860     	 str r0,[r7,#12]
  44 0008 7A60     	 str r2,[r7,#4]
  45 000a 3B60     	 str r3,[r7]
  46 000c 0B46     	 mov r3,r1
  47 000e 7B81     	 strh r3,[r7,#10]
  74:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   q15_t *pIn = pSrc->pData;                      /* input data matrix pointer */
  48              	 .loc 1 74 0
  49 0010 FB68     	 ldr r3,[r7,#12]
  50 0012 5B68     	 ldr r3,[r3,#4]
  51 0014 C7F88C30 	 str r3,[r7,#140]
  75:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   q15_t *pOut = pDst->pData;                     /* output data matrix pointer */
  52              	 .loc 1 75 0
  53 0018 3B68     	 ldr r3,[r7]
  54 001a 5B68     	 ldr r3,[r3,#4]
  55 001c C7F88830 	 str r3,[r7,#136]
  76:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   uint32_t numSamples;                           /* total number of elements in the matrix */
  77:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   int32_t totShift = 15 - shift;                 /* total shift to apply after scaling */
  56              	 .loc 1 77 0
  57 0020 7B68     	 ldr r3,[r7,#4]
  58 0022 C3F10F03 	 rsb r3,r3,#15
  59 0026 FB67     	 str r3,[r7,#124]
  78:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   uint32_t blkCnt;                               /* loop counters */
  79:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   arm_status status;                             /* status of matrix scaling     */
  80:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
  81:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** #ifndef ARM_MATH_CM0_FAMILY
  82:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
  83:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   q15_t in1, in2, in3, in4;
  84:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   q31_t out1, out2, out3, out4;
  85:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   q31_t inA1, inA2;
  86:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
  87:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** #endif //     #ifndef ARM_MATH_CM0_FAMILY
  88:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
  89:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** #ifdef ARM_MATH_MATRIX_CHECK
  90:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   /* Check for matrix mismatch */
  91:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   if((pSrc->numRows != pDst->numRows) || (pSrc->numCols != pDst->numCols))
  60              	 .loc 1 91 0
  61 0028 FB68     	 ldr r3,[r7,#12]
  62 002a 1A88     	 ldrh r2,[r3]
  63 002c 3B68     	 ldr r3,[r7]
  64 002e 1B88     	 ldrh r3,[r3]
  65 0030 9A42     	 cmp r2,r3
  66 0032 05D1     	 bne .L2
  67              	 .loc 1 91 0 is_stmt 0 discriminator 1
  68 0034 FB68     	 ldr r3,[r7,#12]
  69 0036 5A88     	 ldrh r2,[r3,#2]
  70 0038 3B68     	 ldr r3,[r7]
  71 003a 5B88     	 ldrh r3,[r3,#2]
  72 003c 9A42     	 cmp r2,r3
  73 003e 03D0     	 beq .L3
  74              	.L2:
  92:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   {
  93:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     /* Set status as ARM_MATH_SIZE_MISMATCH */
  94:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     status = ARM_MATH_SIZE_MISMATCH;
  75              	 .loc 1 94 0 is_stmt 1
  76 0040 FD23     	 movs r3,#253
  77 0042 87F88330 	 strb r3,[r7,#131]
  78 0046 D5E0     	 b .L4
  79              	.L3:
  95:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   }
  96:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   else
  97:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** #endif //    #ifdef ARM_MATH_MATRIX_CHECK
  98:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   {
  99:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     /* Total number of samples in the input matrix */
 100:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
  80              	 .loc 1 100 0
  81 0048 FB68     	 ldr r3,[r7,#12]
  82 004a 1B88     	 ldrh r3,[r3]
  83 004c 1A46     	 mov r2,r3
  84 004e FB68     	 ldr r3,[r7,#12]
  85 0050 5B88     	 ldrh r3,[r3,#2]
  86 0052 03FB02F3 	 mul r3,r3,r2
  87 0056 BB67     	 str r3,[r7,#120]
 101:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 102:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** #ifndef ARM_MATH_CM0_FAMILY
 103:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 104:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     /* Run the below code for Cortex-M4 and Cortex-M3 */
 105:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     /* Loop Unrolling */
 106:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     blkCnt = numSamples >> 2;
  88              	 .loc 1 106 0
  89 0058 BB6F     	 ldr r3,[r7,#120]
  90 005a 9B08     	 lsrs r3,r3,#2
  91 005c C7F88430 	 str r3,[r7,#132]
 107:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 108:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
 109:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****      ** a second loop below computes the remaining 1 to 3 samples. */
 110:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     while(blkCnt > 0u)
  92              	 .loc 1 110 0
  93 0060 96E0     	 b .L5
  94              	.L6:
 111:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     {
 112:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       /* C(m,n) = A(m,n) * k */
 113:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       /* Scale, saturate and then store the results in the destination buffer. */
 114:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       /* Reading 2 inputs from memory */
 115:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       inA1 = _SIMD32_OFFSET(pIn);
  95              	 .loc 1 115 0
  96 0062 D7F88C30 	 ldr r3,[r7,#140]
  97 0066 1B68     	 ldr r3,[r3]
  98 0068 7B67     	 str r3,[r7,#116]
 116:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       inA2 = _SIMD32_OFFSET(pIn + 2);
  99              	 .loc 1 116 0
 100 006a D7F88C30 	 ldr r3,[r7,#140]
 101 006e 5B68     	 ldr r3,[r3,#4]
 102 0070 3B67     	 str r3,[r7,#112]
 117:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 118:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       /* C = A * scale */
 119:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       /* Scale the inputs and then store the 2 results in the destination buffer        
 120:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****        * in single cycle by packing the outputs */
 121:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       out1 = (q31_t) ((q15_t) (inA1 >> 16) * scaleFract);
 103              	 .loc 1 121 0
 104 0072 7B6F     	 ldr r3,[r7,#116]
 105 0074 1B14     	 asrs r3,r3,#16
 106 0076 9BB2     	 uxth r3,r3
 107 0078 1BB2     	 sxth r3,r3
 108 007a B7F90A20 	 ldrsh r2,[r7,#10]
 109 007e 02FB03F3 	 mul r3,r2,r3
 110 0082 FB66     	 str r3,[r7,#108]
 122:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       out2 = (q31_t) ((q15_t) inA1 * scaleFract);
 111              	 .loc 1 122 0
 112 0084 7B6F     	 ldr r3,[r7,#116]
 113 0086 9BB2     	 uxth r3,r3
 114 0088 1BB2     	 sxth r3,r3
 115 008a B7F90A20 	 ldrsh r2,[r7,#10]
 116 008e 02FB03F3 	 mul r3,r2,r3
 117 0092 BB66     	 str r3,[r7,#104]
 123:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       out3 = (q31_t) ((q15_t) (inA2 >> 16) * scaleFract);
 118              	 .loc 1 123 0
 119 0094 3B6F     	 ldr r3,[r7,#112]
 120 0096 1B14     	 asrs r3,r3,#16
 121 0098 9BB2     	 uxth r3,r3
 122 009a 1BB2     	 sxth r3,r3
 123 009c B7F90A20 	 ldrsh r2,[r7,#10]
 124 00a0 02FB03F3 	 mul r3,r2,r3
 125 00a4 7B66     	 str r3,[r7,#100]
 124:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       out4 = (q31_t) ((q15_t) inA2 * scaleFract);
 126              	 .loc 1 124 0
 127 00a6 3B6F     	 ldr r3,[r7,#112]
 128 00a8 9BB2     	 uxth r3,r3
 129 00aa 1BB2     	 sxth r3,r3
 130 00ac B7F90A20 	 ldrsh r2,[r7,#10]
 131 00b0 02FB03F3 	 mul r3,r2,r3
 132 00b4 3B66     	 str r3,[r7,#96]
 125:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 126:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       out1 = out1 >> totShift;
 133              	 .loc 1 126 0
 134 00b6 FA6E     	 ldr r2,[r7,#108]
 135 00b8 FB6F     	 ldr r3,[r7,#124]
 136 00ba 42FA03F3 	 asr r3,r2,r3
 137 00be FB66     	 str r3,[r7,#108]
 127:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       inA1 = _SIMD32_OFFSET(pIn + 4);
 138              	 .loc 1 127 0
 139 00c0 D7F88C30 	 ldr r3,[r7,#140]
 140 00c4 9B68     	 ldr r3,[r3,#8]
 141 00c6 7B67     	 str r3,[r7,#116]
 128:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       out2 = out2 >> totShift;
 142              	 .loc 1 128 0
 143 00c8 BA6E     	 ldr r2,[r7,#104]
 144 00ca FB6F     	 ldr r3,[r7,#124]
 145 00cc 42FA03F3 	 asr r3,r2,r3
 146 00d0 BB66     	 str r3,[r7,#104]
 129:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       inA2 = _SIMD32_OFFSET(pIn + 6);
 147              	 .loc 1 129 0
 148 00d2 D7F88C30 	 ldr r3,[r7,#140]
 149 00d6 DB68     	 ldr r3,[r3,#12]
 150 00d8 3B67     	 str r3,[r7,#112]
 130:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       out3 = out3 >> totShift;
 151              	 .loc 1 130 0
 152 00da 7A6E     	 ldr r2,[r7,#100]
 153 00dc FB6F     	 ldr r3,[r7,#124]
 154 00de 42FA03F3 	 asr r3,r2,r3
 155 00e2 7B66     	 str r3,[r7,#100]
 131:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       out4 = out4 >> totShift;
 156              	 .loc 1 131 0
 157 00e4 3A6E     	 ldr r2,[r7,#96]
 158 00e6 FB6F     	 ldr r3,[r7,#124]
 159 00e8 42FA03F3 	 asr r3,r2,r3
 160 00ec 3B66     	 str r3,[r7,#96]
 161              	.LBB2:
 132:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 133:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       in1 = (q15_t) (__SSAT(out1, 16));
 162              	 .loc 1 133 0
 163 00ee FB6E     	 ldr r3,[r7,#108]
 164 00f0 FB65     	 str r3,[r7,#92]
 165 00f2 FB6D     	 ldr r3,[r7,#92]
 166              	
 167 00f4 03F30F03 	 ssat r3,#16,r3
 168              	
 169              	 .thumb
 170 00f8 BB65     	 str r3,[r7,#88]
 171 00fa BB6D     	 ldr r3,[r7,#88]
 172              	.LBE2:
 173 00fc A7F85630 	 strh r3,[r7,#86]
 174              	.LBB3:
 134:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       in2 = (q15_t) (__SSAT(out2, 16));
 175              	 .loc 1 134 0
 176 0100 BB6E     	 ldr r3,[r7,#104]
 177 0102 3B65     	 str r3,[r7,#80]
 178 0104 3B6D     	 ldr r3,[r7,#80]
 179              	
 180 0106 03F30F03 	 ssat r3,#16,r3
 181              	
 182              	 .thumb
 183 010a FB64     	 str r3,[r7,#76]
 184 010c FB6C     	 ldr r3,[r7,#76]
 185              	.LBE3:
 186 010e A7F84A30 	 strh r3,[r7,#74]
 187              	.LBB4:
 135:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       in3 = (q15_t) (__SSAT(out3, 16));
 188              	 .loc 1 135 0
 189 0112 7B6E     	 ldr r3,[r7,#100]
 190 0114 7B64     	 str r3,[r7,#68]
 191 0116 7B6C     	 ldr r3,[r7,#68]
 192              	
 193 0118 03F30F03 	 ssat r3,#16,r3
 194              	
 195              	 .thumb
 196 011c 3B64     	 str r3,[r7,#64]
 197 011e 3B6C     	 ldr r3,[r7,#64]
 198              	.LBE4:
 199 0120 FB87     	 strh r3,[r7,#62]
 200              	.LBB5:
 136:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       in4 = (q15_t) (__SSAT(out4, 16));
 201              	 .loc 1 136 0
 202 0122 3B6E     	 ldr r3,[r7,#96]
 203 0124 BB63     	 str r3,[r7,#56]
 204 0126 BB6B     	 ldr r3,[r7,#56]
 205              	
 206 0128 03F30F03 	 ssat r3,#16,r3
 207              	
 208              	 .thumb
 209 012c 7B63     	 str r3,[r7,#52]
 210 012e 7B6B     	 ldr r3,[r7,#52]
 211              	.LBE5:
 212 0130 7B86     	 strh r3,[r7,#50]
 213              	.LBB6:
 137:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 138:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       _SIMD32_OFFSET(pOut) = __PKHBT(in2, in1, 16);
 214              	 .loc 1 138 0
 215 0132 B7F94A30 	 ldrsh r3,[r7,#74]
 216 0136 FB62     	 str r3,[r7,#44]
 217 0138 B7F95630 	 ldrsh r3,[r7,#86]
 218 013c BB62     	 str r3,[r7,#40]
 219 013e FB6A     	 ldr r3,[r7,#44]
 220 0140 BA6A     	 ldr r2,[r7,#40]
 221              	
 222 0142 C3EA0243 	 pkhbt r3,r3,r2,lsl#16
 223              	
 224              	 .thumb
 225 0146 7B62     	 str r3,[r7,#36]
 226 0148 7B6A     	 ldr r3,[r7,#36]
 227              	.LBE6:
 228 014a 1A46     	 mov r2,r3
 229 014c D7F88830 	 ldr r3,[r7,#136]
 230 0150 1A60     	 str r2,[r3]
 139:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       _SIMD32_OFFSET(pOut + 2) = __PKHBT(in4, in3, 16);
 231              	 .loc 1 139 0
 232 0152 D7F88830 	 ldr r3,[r7,#136]
 233 0156 0433     	 adds r3,r3,#4
 234              	.LBB7:
 235 0158 B7F93220 	 ldrsh r2,[r7,#50]
 236 015c 3A62     	 str r2,[r7,#32]
 237 015e B7F93E20 	 ldrsh r2,[r7,#62]
 238 0162 FA61     	 str r2,[r7,#28]
 239 0164 3A6A     	 ldr r2,[r7,#32]
 240 0166 F969     	 ldr r1,[r7,#28]
 241              	
 242 0168 C2EA0142 	 pkhbt r2,r2,r1,lsl#16
 243              	
 244              	 .thumb
 245 016c BA61     	 str r2,[r7,#24]
 246 016e BA69     	 ldr r2,[r7,#24]
 247              	.LBE7:
 248 0170 1A60     	 str r2,[r3]
 140:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 141:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       /* update pointers to process next sampels */
 142:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       pIn += 4u;
 249              	 .loc 1 142 0
 250 0172 D7F88C30 	 ldr r3,[r7,#140]
 251 0176 0833     	 adds r3,r3,#8
 252 0178 C7F88C30 	 str r3,[r7,#140]
 143:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       pOut += 4u;
 253              	 .loc 1 143 0
 254 017c D7F88830 	 ldr r3,[r7,#136]
 255 0180 0833     	 adds r3,r3,#8
 256 0182 C7F88830 	 str r3,[r7,#136]
 144:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 145:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 146:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       /* Decrement the numSamples loop counter */
 147:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       blkCnt--;
 257              	 .loc 1 147 0
 258 0186 D7F88430 	 ldr r3,[r7,#132]
 259 018a 013B     	 subs r3,r3,#1
 260 018c C7F88430 	 str r3,[r7,#132]
 261              	.L5:
 110:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     {
 262              	 .loc 1 110 0
 263 0190 D7F88430 	 ldr r3,[r7,#132]
 264 0194 002B     	 cmp r3,#0
 265 0196 7FF464AF 	 bne .L6
 148:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     }
 149:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 150:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     /* If the numSamples is not a multiple of 4, compute any remaining output samples here.        
 151:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****      ** No loop unrolling is used. */
 152:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     blkCnt = numSamples % 0x4u;
 266              	 .loc 1 152 0
 267 019a BB6F     	 ldr r3,[r7,#120]
 268 019c 03F00303 	 and r3,r3,#3
 269 01a0 C7F88430 	 str r3,[r7,#132]
 153:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 154:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** #else
 155:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 156:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     /* Run the below code for Cortex-M0 */
 157:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 158:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     /* Initialize blkCnt with number of samples */
 159:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     blkCnt = numSamples;
 160:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 161:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** #endif /* #ifndef ARM_MATH_CM0_FAMILY */
 162:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 163:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     while(blkCnt > 0u)
 270              	 .loc 1 163 0
 271 01a4 1FE0     	 b .L7
 272              	.L8:
 164:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     {
 165:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       /* C(m,n) = A(m,n) * k */
 166:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       /* Scale, saturate and then store the results in the destination buffer. */
 167:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       *pOut++ =
 273              	 .loc 1 167 0
 274 01a6 D7F88830 	 ldr r3,[r7,#136]
 275 01aa 9A1C     	 adds r2,r3,#2
 276 01ac C7F88820 	 str r2,[r7,#136]
 277              	.LBB8:
 168:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****         (q15_t) (__SSAT(((q31_t) (*pIn++) * scaleFract) >> totShift, 16));
 278              	 .loc 1 168 0
 279 01b0 D7F88C20 	 ldr r2,[r7,#140]
 280 01b4 911C     	 adds r1,r2,#2
 281 01b6 C7F88C10 	 str r1,[r7,#140]
 282 01ba 1288     	 ldrh r2,[r2]
 283 01bc 12B2     	 sxth r2,r2
 284 01be B7F90A10 	 ldrsh r1,[r7,#10]
 285 01c2 01FB02F1 	 mul r1,r1,r2
 286 01c6 FA6F     	 ldr r2,[r7,#124]
 287 01c8 41FA02F2 	 asr r2,r1,r2
 288 01cc 7A61     	 str r2,[r7,#20]
 289 01ce 7A69     	 ldr r2,[r7,#20]
 290              	
 291 01d0 02F30F02 	 ssat r2,#16,r2
 292              	
 293              	 .thumb
 294 01d4 3A61     	 str r2,[r7,#16]
 295 01d6 3A69     	 ldr r2,[r7,#16]
 296              	.LBE8:
 297 01d8 92B2     	 uxth r2,r2
 167:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****         (q15_t) (__SSAT(((q31_t) (*pIn++) * scaleFract) >> totShift, 16));
 298              	 .loc 1 167 0
 299 01da 1A80     	 strh r2,[r3]
 169:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 170:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       /* Decrement the numSamples loop counter */
 171:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       blkCnt--;
 300              	 .loc 1 171 0
 301 01dc D7F88430 	 ldr r3,[r7,#132]
 302 01e0 013B     	 subs r3,r3,#1
 303 01e2 C7F88430 	 str r3,[r7,#132]
 304              	.L7:
 163:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     {
 305              	 .loc 1 163 0
 306 01e6 D7F88430 	 ldr r3,[r7,#132]
 307 01ea 002B     	 cmp r3,#0
 308 01ec DBD1     	 bne .L8
 172:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     }
 173:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     /* Set status as ARM_MATH_SUCCESS */
 174:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     status = ARM_MATH_SUCCESS;
 309              	 .loc 1 174 0
 310 01ee 0023     	 movs r3,#0
 311 01f0 87F88330 	 strb r3,[r7,#131]
 312              	.L4:
 175:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   }
 176:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 177:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   /* Return to application */
 178:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   return (status);
 313              	 .loc 1 178 0
 314 01f4 97F88330 	 ldrb r3,[r7,#131]
 315 01f8 5BB2     	 sxtb r3,r3
 179:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** }
 316              	 .loc 1 179 0
 317 01fa 1846     	 mov r0,r3
 318 01fc 9437     	 adds r7,r7,#148
 319              	.LCFI3:
 320              	 .cfi_def_cfa_offset 4
 321 01fe BD46     	 mov sp,r7
 322              	.LCFI4:
 323              	 .cfi_def_cfa_register 13
 324              	 
 325 0200 5DF8047B 	 ldr r7,[sp],#4
 326              	.LCFI5:
 327              	 .cfi_restore 7
 328              	 .cfi_def_cfa_offset 0
 329 0204 7047     	 bx lr
 330              	 .cfi_endproc
 331              	.LFE139:
 333 0206 00BF     	 .text
 334              	.Letext0:
 335              	 .file 2 "c:\\davev4\\dave-4.1.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 336              	 .file 3 "c:\\davev4\\dave-4.1.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 337              	 .file 4 "C:\\Workspaces\\DAVE-4.1\\Flightcontroller_PWM_CopterRocks_Working\\Dave\\Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_mat_scale_q15.c
    {standard input}:20     .text.arm_mat_scale_q15:00000000 $t
    {standard input}:25     .text.arm_mat_scale_q15:00000000 arm_mat_scale_q15
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
