   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"PWMSP001.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.PWMSP001_Init,"ax",%progbits
  20              		.align	2
  21              		.global	PWMSP001_Init
  22              		.thumb
  23              		.thumb_func
  25              	PWMSP001_Init:
  26              	.LFB135:
  27              		.file 1 "../Dave/Generated/src/PWMSP001/PWMSP001.c"
   1:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
   2:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **  DAVE App Name : PWMSP001       App Version: 1.0.34               
   3:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **  This file is generated by DAVE, User modification to this file will be    **
   4:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **  overwritten at the next code generation.                                  **
   5:../Dave/Generated/src/PWMSP001/PWMSP001.c **** *******************************************************************************/
   6:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
   7:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
   8:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
   9:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*CODE_BLOCK_BEGIN[PWMSP001.c]*/
  10:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
  11:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
  12:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
  13:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  Copyright (c) 2014, Infineon Technologies AG                                 **
  14:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  All rights reserved.                                                         **
  15:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                                                               **
  16:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  Redistribution and use in source and binary forms, with or without           **
  17:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  modification,are permitted provided that the following conditions are met:   **
  18:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                                                               **
  19:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *Redistributions of source code must retain the above copyright notice,      **
  20:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  this list of conditions and the following disclaimer.                        **
  21:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *Redistributions in binary form must reproduce the above copyright notice,   **
  22:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  this list of conditions and the following disclaimer in the documentation    **
  23:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  and/or other materials provided with the distribution.                       **
  24:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *Neither the name of the copyright holders nor the names of its contributors **
  25:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  may be used to endorse or promote products derived from this software without**
  26:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  specific prior written permission.                                           **
  27:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                                                               **
  28:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  **
  29:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    **
  30:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   **
  31:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   **
  32:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         **
  33:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         **
  34:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    **
  35:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      **
  36:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       **
  37:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   **
  38:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  POSSIBILITY OF SUCH DAMAGE.                                                  **
  39:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                                                               **
  40:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  To improve the quality of the software, users are encouraged to share        **
  41:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  modifications, enhancements or bug fixes with Infineon Technologies AG       **
  42:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  dave@infineon.com).                                                          **
  43:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                                                               **
  44:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ********************************************************************************
  45:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  46:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  47:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** PLATFORM : Infineon XMC4000/XMC1000 Series                                 **
  48:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  49:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** COMPILER : Compiler Independent                                            **
  50:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  51:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** AUTHOR   : App Developer                                                   **
  52:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  53:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** MAY BE CHANGED BY USER [yes/no]: Yes                                       **
  54:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  55:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** MODIFICATION DATE : April 28, 2014                                         **
  56:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  57:../Dave/Generated/src/PWMSP001/PWMSP001.c **** *******************************************************************************/
  58:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
  59:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                      Author(s) Identity                                    **
  60:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ********************************************************************************
  61:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  62:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** Initials     Name                                                          **
  63:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** ---------------------------------------------------------------------------**
  64:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** KS           App Developer                                                 **
  65:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  66:../Dave/Generated/src/PWMSP001/PWMSP001.c **** *******************************************************************************/
  67:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
  68:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
  69:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @file  PWMSP001.c
  70:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *
  71:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This file contains implementations of all Public and Private functions
  72:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *        of Single Phase PWM without dead time APP.
  73:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *        This app generates the single PWM waveform without dead time. 
  74:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *        Duty cycle can be changed at runtime. And PWM frequency can be changed
  75:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *        when timer is not running.
  76:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
  77:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
  78:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* Revision History															  
  79:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 21 Nov 2012   v1.0.16   coding guidelines  
  80:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 10 Dec 2012   v1.0.18   DBG002 Macros are added
  81:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 1  Feb 2013   v1.0.20   PDR register constraints are added
  82:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 26 Mar 2013   v1.0.22   DAVE3.H inclusion
  83:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 22 Apr 2013   v1.0.24   MCSW300000628 utp w.r.t open drain port configuration
  84:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         is fixed
  85:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 						   MCSW300000629 utp w.r.t SetCompare API is fixed by 
  86:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         fetching period value from register instead from UI 
  87:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         parameter
  88:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 						   Removed the inclusion of other header files
  89:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                                                  (PWMSP001.h,PWMSP001_Conf.c)
  90:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 30 Aug 2013   v1.0.26   Defect 32385 fix: Duty cycle updation issue when not 
  91:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         using timer concatenation in 
  92:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         PWMSP001_SetPwmFreqAndDutyCycle() API is fixed.
  93:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 17 Feb 2014   v1.0.32   1.Trap enabling is shifted from PWMSP001_Start() to
  94:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                           PWMSP001_Init()
  95:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         2.In PWMSP001_lSetDutyEdgeAlignTimerConcat()compare
  96:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                          value calculation is updated.
  97:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         3.During Timer concatenation if single shot mode is 
  98:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                          enabled lower timer is made as free running.
  99:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 28 Apr 2014   v1.0.34   Removed the DBG002_FUNCTION_ENTRY() and 
 100:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         DBG002_FUNCTION_EXIT() from all the APIs.
 101:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         In PWMSP001_SetCompare() period value checks are 
 102:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         removed.
 103:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 104:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 105:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
 106:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                      Include Files                                         **
 107:../Dave/Generated/src/PWMSP001/PWMSP001.c **** *******************************************************************************/
 108:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #include <DAVE3.h>
 109:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 110:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 111:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*****************************************************************************
 112:../Dave/Generated/src/PWMSP001/PWMSP001.c ****               DUMMY DEFINTIONS OF DEBUG LOG MACROS
 113:../Dave/Generated/src/PWMSP001/PWMSP001.c **** *****************************************************************************/
 114:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*These definitions are included here to avoid compilation errors,
 115:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  since the DBG002 app is not part of the project. All the macros are defined
 116:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  as empty*/ 
 117:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #ifndef _DBG002_H_
 118:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 119:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_RegisterCallBack(A,B,C)
 120:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_I(e) 
 121:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IG(e,g) 
 122:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IH(e,h) 
 123:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IP(e,p) 
 124:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IGH(e,g,h) 
 125:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IGP(e,g,p) 
 126:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IHP(e,h,p) 
 127:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IGHP(e,g,h,p) 
 128:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_N(e) 
 129:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NG(e,g) 
 130:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NH(e,h) 
 131:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NP(e,p) 
 132:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NGH(e,g,h) 
 133:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NGP(e,g,p) 
 134:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NHP(e,h,p) 
 135:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NGHP(e,g,h,p) 
 136:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_ID(e) 
 137:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IS(e) 
 138:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_ISG(e,g) 
 139:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_SAFETY_CRITICAL(groupid,messageid,length,value)
 140:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_CRITICAL(groupid,messageid,length,value)
 141:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_ERROR(groupid,messageid,length,value)
 142:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_WARNING(groupid,messageid,length,value)
 143:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_INFO(groupid,messageid,length,value)
 144:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_TRACE(groupid,messageid,length,value)
 145:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_FUNCTION_ENTRY(GID, Status) 
 146:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_FUNCTION_EXIT(GID, Status) 
 147:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_MESSAGEID_LITERAL
 148:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #endif/* End of definitions of dummy Debug Log macros*/   
 149:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define APP_GID DBG002_GID_PWMSP001
 150:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 151:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define PWMSP001_STATUS_LEN 4U
 152:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
 153:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  **                 Private Function declarations                              **
 154:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *******************************************************************************/
 155:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 156:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @cond INTERNAL_DOCS
 157:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 158:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 159:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @ingroup PWMSP001_privatefunc
 160:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @{
 161:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 162:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 163:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 164:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will initialize second slice registers (in case of timer
 165:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * concatenation) with user configured value
 166:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]   HandlePtr Pointer to PWMSP001_HandleType structure
 167:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return void
 168:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 169:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lConfigureSecondSlice
 170:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 171:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr
 172:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 173:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 174:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 175:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if center aligned mode is selected.
 176:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 177:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Duty This is duty cycle in percentage
 178:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 179:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 180:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyCenterAlign
 181:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 182:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 183:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 184:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 185:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 186:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 187:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if edge aligned mode without timer concatenation is sel
 188:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 189:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Duty This is duty cycle in percentage
 190:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 191:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 192:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyEdgeAlign
 193:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 194:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 195:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 196:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 197:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 198:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 199:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if edge aligned mode with timer concatenation is suppor
 200:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 201:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Duty This is duty cycle in percentage
 202:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 203:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 204:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyEdgeAlignTimerConcat
 205:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 206:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 207:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 208:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 209:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 210:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 211:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if center aligned mode is selected.
 212:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 213:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Compare This is duty cycle in percentage
 214:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 215:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 216:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareCenterAlign
 217:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 218:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 219:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 220:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 221:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 222:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 223:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if edge aligned mode without timer concatenation is sel
 224:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 225:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Compare This is duty cycle in percentage
 226:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 227:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 228:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareEdgeAlign
 229:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 230:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 231:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 232:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 233:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 234:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 235:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if edge aligned mode with timer concatenation is suppor
 236:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 237:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Compare This is duty cycle in percentage
 238:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 239:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 240:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareEdgeAlignTimerConcat
 241:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 242:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 243:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 244:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 245:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 246:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 247:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set pwm frequency if timer concatenation is selected
 248:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 249:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  PwmTime This is PWM frequency in hertz.
 250:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t status
 251:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 252:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_lSetPwmFreqTimerConcat
 253:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 254:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 255:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t PwmTime
 256:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 257:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 258:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 259:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function initializes CCU4 slice as per GUI configurations.
 260:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 261:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t status
 262:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 263:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_lInit(const PWMSP001_HandleType* HandlePtr);
 264:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 265:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 266:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @}
 267:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 268:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 269:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
 270:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  **                 Function definitions                                       **
 271:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *******************************************************************************/
 272:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    
 273:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function initializes the app */
 274:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_Init(void)
 275:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
  28              		.loc 1 275 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 82B0     		sub	sp, sp, #8
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 16
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
 276:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Error = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
  43              		.loc 1 276 0
  44 0006 4FF00103 		mov	r3, #1
  45 000a 7B60     		str	r3, [r7, #4]
 277:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   CCU4GLOBAL_Init();
  46              		.loc 1 277 0
  47 000c FFF7FEFF 		bl	CCU4GLOBAL_Init
 278:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Error = PWMSP001_lInit((PWMSP001_HandleType*) &PWMSP001_Handle0);
  48              		.loc 1 278 0
  49 0010 40F20000 		movw	r0, #:lower16:PWMSP001_Handle0
  50 0014 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle0
  51 0018 FFF7FEFF 		bl	PWMSP001_lInit
  52 001c 7860     		str	r0, [r7, #4]
 279:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Start the app if "Start after initialization" is checked */
 280:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(Error == (uint32_t)DAVEApp_SUCCESS)
  53              		.loc 1 280 0
  54 001e 7B68     		ldr	r3, [r7, #4]
  55 0020 002B     		cmp	r3, #0
  56 0022 0DD1     		bne	.L2
 281:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {   
 282:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (PWMSP001_Handle0.StartControl == (uint8_t)SET)
  57              		.loc 1 282 0
  58 0024 40F20003 		movw	r3, #:lower16:PWMSP001_Handle0
  59 0028 C0F20003 		movt	r3, #:upper16:PWMSP001_Handle0
  60 002c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
  61 002e 012B     		cmp	r3, #1
  62 0030 06D1     		bne	.L2
 283:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 284:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Error = PWMSP001_Start((PWMSP001_HandleType*) &PWMSP001_Handle0);
  63              		.loc 1 284 0
  64 0032 40F20000 		movw	r0, #:lower16:PWMSP001_Handle0
  65 0036 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle0
  66 003a FFF7FEFF 		bl	PWMSP001_Start
  67 003e 7860     		str	r0, [r7, #4]
  68              	.L2:
 285:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       DBG002_N(Error != DAVEApp_SUCCESS);
 286:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 287:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 288:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 289:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /* Configuration of Direct Output Pin 1.0 based on User configuration */
 290:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->PDR0  &= (uint32_t)(~(PORT1_PDR0_PD0_Msk));
  69              		.loc 1 290 0
  70 0040 4FF40143 		mov	r3, #33024
  71 0044 C4F60203 		movt	r3, 18434
  72 0048 4FF40142 		mov	r2, #33024
  73 004c C4F60202 		movt	r2, 18434
  74 0050 126C     		ldr	r2, [r2, #64]
  75 0052 22F00702 		bic	r2, r2, #7
  76 0056 1A64     		str	r2, [r3, #64]
 291:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->PDR0  |= (((uint32_t)0 << (uint32_t)PORT1_PDR0_PD0_Pos) & \
  77              		.loc 1 291 0
  78 0058 4FF40143 		mov	r3, #33024
  79 005c C4F60203 		movt	r3, 18434
  80 0060 4FF40142 		mov	r2, #33024
  81 0064 C4F60202 		movt	r2, 18434
  82 0068 126C     		ldr	r2, [r2, #64]
  83 006a 1A64     		str	r2, [r3, #64]
 292:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                (uint32_t)PORT1_PDR0_PD0_Msk);
 293:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->IOCR0  &= (uint32_t)(~(PORT_IOCR_PC0_PO_Msk));
  84              		.loc 1 293 0
  85 006c 4FF40143 		mov	r3, #33024
  86 0070 C4F60203 		movt	r3, 18434
  87 0074 4FF40142 		mov	r2, #33024
  88 0078 C4F60202 		movt	r2, 18434
  89 007c 1269     		ldr	r2, [r2, #16]
  90 007e 22F04002 		bic	r2, r2, #64
  91 0082 1A61     		str	r2, [r3, #16]
 294:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->IOCR0  |= (((uint32_t)1 << (uint32_t)PORT_IOCR_PC0_PO_Pos) & \
  92              		.loc 1 294 0
  93 0084 4FF40143 		mov	r3, #33024
  94 0088 C4F60203 		movt	r3, 18434
  95 008c 4FF40142 		mov	r2, #33024
  96 0090 C4F60202 		movt	r2, 18434
  97 0094 1269     		ldr	r2, [r2, #16]
  98 0096 42F04002 		orr	r2, r2, #64
  99 009a 1A61     		str	r2, [r3, #16]
 295:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                    (uint32_t)PORT_IOCR_PC0_PO_Msk);
 296:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Error = PWMSP001_lInit((PWMSP001_HandleType*) &PWMSP001_Handle1);
 100              		.loc 1 296 0
 101 009c 40F20000 		movw	r0, #:lower16:PWMSP001_Handle1
 102 00a0 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle1
 103 00a4 FFF7FEFF 		bl	PWMSP001_lInit
 104 00a8 7860     		str	r0, [r7, #4]
 297:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Start the app if "Start after initialization" is checked */
 298:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(Error == (uint32_t)DAVEApp_SUCCESS)
 105              		.loc 1 298 0
 106 00aa 7B68     		ldr	r3, [r7, #4]
 107 00ac 002B     		cmp	r3, #0
 108 00ae 0DD1     		bne	.L3
 299:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {   
 300:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (PWMSP001_Handle1.StartControl == (uint8_t)SET)
 109              		.loc 1 300 0
 110 00b0 40F20003 		movw	r3, #:lower16:PWMSP001_Handle1
 111 00b4 C0F20003 		movt	r3, #:upper16:PWMSP001_Handle1
 112 00b8 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 113 00ba 012B     		cmp	r3, #1
 114 00bc 06D1     		bne	.L3
 301:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 302:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Error = PWMSP001_Start((PWMSP001_HandleType*) &PWMSP001_Handle1);
 115              		.loc 1 302 0
 116 00be 40F20000 		movw	r0, #:lower16:PWMSP001_Handle1
 117 00c2 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle1
 118 00c6 FFF7FEFF 		bl	PWMSP001_Start
 119 00ca 7860     		str	r0, [r7, #4]
 120              	.L3:
 303:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       DBG002_N(Error != DAVEApp_SUCCESS);
 304:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 305:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 306:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 307:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /* Configuration of Direct Output Pin 1.1 based on User configuration */
 308:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->PDR0  &= (uint32_t)(~(PORT1_PDR0_PD1_Msk));
 121              		.loc 1 308 0
 122 00cc 4FF40143 		mov	r3, #33024
 123 00d0 C4F60203 		movt	r3, 18434
 124 00d4 4FF40142 		mov	r2, #33024
 125 00d8 C4F60202 		movt	r2, 18434
 126 00dc 126C     		ldr	r2, [r2, #64]
 127 00de 22F07002 		bic	r2, r2, #112
 128 00e2 1A64     		str	r2, [r3, #64]
 309:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->PDR0  |= (((uint32_t)0 << (uint32_t)PORT1_PDR0_PD1_Pos) & \
 129              		.loc 1 309 0
 130 00e4 4FF40143 		mov	r3, #33024
 131 00e8 C4F60203 		movt	r3, 18434
 132 00ec 4FF40142 		mov	r2, #33024
 133 00f0 C4F60202 		movt	r2, 18434
 134 00f4 126C     		ldr	r2, [r2, #64]
 135 00f6 1A64     		str	r2, [r3, #64]
 310:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                (uint32_t)PORT1_PDR0_PD1_Msk);
 311:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->IOCR0  &= (uint32_t)(~(PORT_IOCR_PC1_PO_Msk));
 136              		.loc 1 311 0
 137 00f8 4FF40143 		mov	r3, #33024
 138 00fc C4F60203 		movt	r3, 18434
 139 0100 4FF40142 		mov	r2, #33024
 140 0104 C4F60202 		movt	r2, 18434
 141 0108 1269     		ldr	r2, [r2, #16]
 142 010a 22F48042 		bic	r2, r2, #16384
 143 010e 1A61     		str	r2, [r3, #16]
 312:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->IOCR0  |= (((uint32_t)1 << (uint32_t)PORT_IOCR_PC1_PO_Pos) & \
 144              		.loc 1 312 0
 145 0110 4FF40143 		mov	r3, #33024
 146 0114 C4F60203 		movt	r3, 18434
 147 0118 4FF40142 		mov	r2, #33024
 148 011c C4F60202 		movt	r2, 18434
 149 0120 1269     		ldr	r2, [r2, #16]
 150 0122 42F48042 		orr	r2, r2, #16384
 151 0126 1A61     		str	r2, [r3, #16]
 313:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                    (uint32_t)PORT_IOCR_PC1_PO_Msk);
 314:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Error = PWMSP001_lInit((PWMSP001_HandleType*) &PWMSP001_Handle2);
 152              		.loc 1 314 0
 153 0128 40F20000 		movw	r0, #:lower16:PWMSP001_Handle2
 154 012c C0F20000 		movt	r0, #:upper16:PWMSP001_Handle2
 155 0130 FFF7FEFF 		bl	PWMSP001_lInit
 156 0134 7860     		str	r0, [r7, #4]
 315:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Start the app if "Start after initialization" is checked */
 316:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(Error == (uint32_t)DAVEApp_SUCCESS)
 157              		.loc 1 316 0
 158 0136 7B68     		ldr	r3, [r7, #4]
 159 0138 002B     		cmp	r3, #0
 160 013a 0DD1     		bne	.L4
 317:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {   
 318:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (PWMSP001_Handle2.StartControl == (uint8_t)SET)
 161              		.loc 1 318 0
 162 013c 40F20003 		movw	r3, #:lower16:PWMSP001_Handle2
 163 0140 C0F20003 		movt	r3, #:upper16:PWMSP001_Handle2
 164 0144 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 165 0146 012B     		cmp	r3, #1
 166 0148 06D1     		bne	.L4
 319:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 320:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Error = PWMSP001_Start((PWMSP001_HandleType*) &PWMSP001_Handle2);
 167              		.loc 1 320 0
 168 014a 40F20000 		movw	r0, #:lower16:PWMSP001_Handle2
 169 014e C0F20000 		movt	r0, #:upper16:PWMSP001_Handle2
 170 0152 FFF7FEFF 		bl	PWMSP001_Start
 171 0156 7860     		str	r0, [r7, #4]
 172              	.L4:
 321:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       DBG002_N(Error != DAVEApp_SUCCESS);
 322:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 323:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 324:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 325:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /* Configuration of Direct Output Pin 1.2 based on User configuration */
 326:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->PDR0  &= (uint32_t)(~(PORT1_PDR0_PD2_Msk));
 173              		.loc 1 326 0
 174 0158 4FF40143 		mov	r3, #33024
 175 015c C4F60203 		movt	r3, 18434
 176 0160 4FF40142 		mov	r2, #33024
 177 0164 C4F60202 		movt	r2, 18434
 178 0168 126C     		ldr	r2, [r2, #64]
 179 016a 22F4E062 		bic	r2, r2, #1792
 180 016e 1A64     		str	r2, [r3, #64]
 327:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->PDR0  |= (((uint32_t)0 << (uint32_t)PORT1_PDR0_PD2_Pos) & \
 181              		.loc 1 327 0
 182 0170 4FF40143 		mov	r3, #33024
 183 0174 C4F60203 		movt	r3, 18434
 184 0178 4FF40142 		mov	r2, #33024
 185 017c C4F60202 		movt	r2, 18434
 186 0180 126C     		ldr	r2, [r2, #64]
 187 0182 1A64     		str	r2, [r3, #64]
 328:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                (uint32_t)PORT1_PDR0_PD2_Msk);
 329:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->IOCR0  &= (uint32_t)(~(PORT_IOCR_PC2_PO_Msk));
 188              		.loc 1 329 0
 189 0184 4FF40143 		mov	r3, #33024
 190 0188 C4F60203 		movt	r3, 18434
 191 018c 4FF40142 		mov	r2, #33024
 192 0190 C4F60202 		movt	r2, 18434
 193 0194 1269     		ldr	r2, [r2, #16]
 194 0196 22F48002 		bic	r2, r2, #4194304
 195 019a 1A61     		str	r2, [r3, #16]
 330:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->IOCR0  |= (((uint32_t)1 << (uint32_t)PORT_IOCR_PC2_PO_Pos) & \
 196              		.loc 1 330 0
 197 019c 4FF40143 		mov	r3, #33024
 198 01a0 C4F60203 		movt	r3, 18434
 199 01a4 4FF40142 		mov	r2, #33024
 200 01a8 C4F60202 		movt	r2, 18434
 201 01ac 1269     		ldr	r2, [r2, #16]
 202 01ae 42F48002 		orr	r2, r2, #4194304
 203 01b2 1A61     		str	r2, [r3, #16]
 331:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                    (uint32_t)PORT_IOCR_PC2_PO_Msk);
 332:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Error = PWMSP001_lInit((PWMSP001_HandleType*) &PWMSP001_Handle3);
 204              		.loc 1 332 0
 205 01b4 40F20000 		movw	r0, #:lower16:PWMSP001_Handle3
 206 01b8 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle3
 207 01bc FFF7FEFF 		bl	PWMSP001_lInit
 208 01c0 7860     		str	r0, [r7, #4]
 333:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Start the app if "Start after initialization" is checked */
 334:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(Error == (uint32_t)DAVEApp_SUCCESS)
 209              		.loc 1 334 0
 210 01c2 7B68     		ldr	r3, [r7, #4]
 211 01c4 002B     		cmp	r3, #0
 212 01c6 0DD1     		bne	.L5
 335:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {   
 336:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (PWMSP001_Handle3.StartControl == (uint8_t)SET)
 213              		.loc 1 336 0
 214 01c8 40F20003 		movw	r3, #:lower16:PWMSP001_Handle3
 215 01cc C0F20003 		movt	r3, #:upper16:PWMSP001_Handle3
 216 01d0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 217 01d2 012B     		cmp	r3, #1
 218 01d4 06D1     		bne	.L5
 337:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 338:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Error = PWMSP001_Start((PWMSP001_HandleType*) &PWMSP001_Handle3);
 219              		.loc 1 338 0
 220 01d6 40F20000 		movw	r0, #:lower16:PWMSP001_Handle3
 221 01da C0F20000 		movt	r0, #:upper16:PWMSP001_Handle3
 222 01de FFF7FEFF 		bl	PWMSP001_Start
 223 01e2 7860     		str	r0, [r7, #4]
 224              	.L5:
 339:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       DBG002_N(Error != DAVEApp_SUCCESS);
 340:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 341:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 342:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 343:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /* Configuration of Direct Output Pin 1.3 based on User configuration */
 344:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->PDR0  &= (uint32_t)(~(PORT1_PDR0_PD3_Msk));
 225              		.loc 1 344 0
 226 01e4 4FF40143 		mov	r3, #33024
 227 01e8 C4F60203 		movt	r3, 18434
 228 01ec 4FF40142 		mov	r2, #33024
 229 01f0 C4F60202 		movt	r2, 18434
 230 01f4 126C     		ldr	r2, [r2, #64]
 231 01f6 22F4E042 		bic	r2, r2, #28672
 232 01fa 1A64     		str	r2, [r3, #64]
 345:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->PDR0  |= (((uint32_t)0 << (uint32_t)PORT1_PDR0_PD3_Pos) & \
 233              		.loc 1 345 0
 234 01fc 4FF40143 		mov	r3, #33024
 235 0200 C4F60203 		movt	r3, 18434
 236 0204 4FF40142 		mov	r2, #33024
 237 0208 C4F60202 		movt	r2, 18434
 238 020c 126C     		ldr	r2, [r2, #64]
 239 020e 1A64     		str	r2, [r3, #64]
 346:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                (uint32_t)PORT1_PDR0_PD3_Msk);
 347:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->IOCR0  &= (uint32_t)(~(PORT_IOCR_PC3_PO_Msk));
 240              		.loc 1 347 0
 241 0210 4FF40143 		mov	r3, #33024
 242 0214 C4F60203 		movt	r3, 18434
 243 0218 4FF40142 		mov	r2, #33024
 244 021c C4F60202 		movt	r2, 18434
 245 0220 1269     		ldr	r2, [r2, #16]
 246 0222 22F08042 		bic	r2, r2, #1073741824
 247 0226 1A61     		str	r2, [r3, #16]
 348:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->IOCR0  |= (((uint32_t)0 << (uint32_t)PORT_IOCR_PC3_PO_Pos) & \
 248              		.loc 1 348 0
 249 0228 4FF40143 		mov	r3, #33024
 250 022c C4F60203 		movt	r3, 18434
 251 0230 4FF40142 		mov	r2, #33024
 252 0234 C4F60202 		movt	r2, 18434
 253 0238 1269     		ldr	r2, [r2, #16]
 254 023a 1A61     		str	r2, [r3, #16]
 349:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                    (uint32_t)PORT_IOCR_PC3_PO_Msk);
 350:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Error = PWMSP001_lInit((PWMSP001_HandleType*) &PWMSP001_Handle4);
 255              		.loc 1 350 0
 256 023c 40F20000 		movw	r0, #:lower16:PWMSP001_Handle4
 257 0240 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle4
 258 0244 FFF7FEFF 		bl	PWMSP001_lInit
 259 0248 7860     		str	r0, [r7, #4]
 351:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Start the app if "Start after initialization" is checked */
 352:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(Error == (uint32_t)DAVEApp_SUCCESS)
 260              		.loc 1 352 0
 261 024a 7B68     		ldr	r3, [r7, #4]
 262 024c 002B     		cmp	r3, #0
 263 024e 0DD1     		bne	.L6
 353:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {   
 354:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (PWMSP001_Handle4.StartControl == (uint8_t)SET)
 264              		.loc 1 354 0
 265 0250 40F20003 		movw	r3, #:lower16:PWMSP001_Handle4
 266 0254 C0F20003 		movt	r3, #:upper16:PWMSP001_Handle4
 267 0258 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 268 025a 012B     		cmp	r3, #1
 269 025c 06D1     		bne	.L6
 355:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 356:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Error = PWMSP001_Start((PWMSP001_HandleType*) &PWMSP001_Handle4);
 270              		.loc 1 356 0
 271 025e 40F20000 		movw	r0, #:lower16:PWMSP001_Handle4
 272 0262 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle4
 273 0266 FFF7FEFF 		bl	PWMSP001_Start
 274 026a 7860     		str	r0, [r7, #4]
 275              	.L6:
 357:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       DBG002_N(Error != DAVEApp_SUCCESS);
 358:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 359:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 360:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Error = PWMSP001_lInit((PWMSP001_HandleType*) &PWMSP001_Handle5);
 276              		.loc 1 360 0
 277 026c 40F20000 		movw	r0, #:lower16:PWMSP001_Handle5
 278 0270 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle5
 279 0274 FFF7FEFF 		bl	PWMSP001_lInit
 280 0278 7860     		str	r0, [r7, #4]
 361:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Start the app if "Start after initialization" is checked */
 362:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(Error == (uint32_t)DAVEApp_SUCCESS)
 281              		.loc 1 362 0
 282 027a 7B68     		ldr	r3, [r7, #4]
 283 027c 002B     		cmp	r3, #0
 284 027e 0DD1     		bne	.L7
 363:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {   
 364:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (PWMSP001_Handle5.StartControl == (uint8_t)SET)
 285              		.loc 1 364 0
 286 0280 40F20003 		movw	r3, #:lower16:PWMSP001_Handle5
 287 0284 C0F20003 		movt	r3, #:upper16:PWMSP001_Handle5
 288 0288 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 289 028a 012B     		cmp	r3, #1
 290 028c 06D1     		bne	.L7
 365:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 366:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Error = PWMSP001_Start((PWMSP001_HandleType*) &PWMSP001_Handle5);
 291              		.loc 1 366 0
 292 028e 40F20000 		movw	r0, #:lower16:PWMSP001_Handle5
 293 0292 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle5
 294 0296 FFF7FEFF 		bl	PWMSP001_Start
 295 029a 7860     		str	r0, [r7, #4]
 296              	.L7:
 367:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       DBG002_N(Error != DAVEApp_SUCCESS);
 368:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 369:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 370:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Error = PWMSP001_lInit((PWMSP001_HandleType*) &PWMSP001_Handle6);
 297              		.loc 1 370 0
 298 029c 40F20000 		movw	r0, #:lower16:PWMSP001_Handle6
 299 02a0 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle6
 300 02a4 FFF7FEFF 		bl	PWMSP001_lInit
 301 02a8 7860     		str	r0, [r7, #4]
 371:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Start the app if "Start after initialization" is checked */
 372:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(Error == (uint32_t)DAVEApp_SUCCESS)
 302              		.loc 1 372 0
 303 02aa 7B68     		ldr	r3, [r7, #4]
 304 02ac 002B     		cmp	r3, #0
 305 02ae 0DD1     		bne	.L8
 373:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {   
 374:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (PWMSP001_Handle6.StartControl == (uint8_t)SET)
 306              		.loc 1 374 0
 307 02b0 40F20003 		movw	r3, #:lower16:PWMSP001_Handle6
 308 02b4 C0F20003 		movt	r3, #:upper16:PWMSP001_Handle6
 309 02b8 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 310 02ba 012B     		cmp	r3, #1
 311 02bc 06D1     		bne	.L8
 375:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 376:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Error = PWMSP001_Start((PWMSP001_HandleType*) &PWMSP001_Handle6);
 312              		.loc 1 376 0
 313 02be 40F20000 		movw	r0, #:lower16:PWMSP001_Handle6
 314 02c2 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle6
 315 02c6 FFF7FEFF 		bl	PWMSP001_Start
 316 02ca 7860     		str	r0, [r7, #4]
 317              	.L8:
 377:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       DBG002_N(Error != DAVEApp_SUCCESS);
 378:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 379:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 380:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Error = PWMSP001_lInit((PWMSP001_HandleType*) &PWMSP001_Handle7);
 318              		.loc 1 380 0
 319 02cc 40F20000 		movw	r0, #:lower16:PWMSP001_Handle7
 320 02d0 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle7
 321 02d4 FFF7FEFF 		bl	PWMSP001_lInit
 322 02d8 7860     		str	r0, [r7, #4]
 381:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Start the app if "Start after initialization" is checked */
 382:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(Error == (uint32_t)DAVEApp_SUCCESS)
 323              		.loc 1 382 0
 324 02da 7B68     		ldr	r3, [r7, #4]
 325 02dc 002B     		cmp	r3, #0
 326 02de 0DD1     		bne	.L9
 383:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {   
 384:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (PWMSP001_Handle7.StartControl == (uint8_t)SET)
 327              		.loc 1 384 0
 328 02e0 40F20003 		movw	r3, #:lower16:PWMSP001_Handle7
 329 02e4 C0F20003 		movt	r3, #:upper16:PWMSP001_Handle7
 330 02e8 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 331 02ea 012B     		cmp	r3, #1
 332 02ec 06D1     		bne	.L9
 385:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 386:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Error = PWMSP001_Start((PWMSP001_HandleType*) &PWMSP001_Handle7);
 333              		.loc 1 386 0
 334 02ee 40F20000 		movw	r0, #:lower16:PWMSP001_Handle7
 335 02f2 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle7
 336 02f6 FFF7FEFF 		bl	PWMSP001_Start
 337 02fa 7860     		str	r0, [r7, #4]
 338              	.L9:
 387:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       DBG002_N(Error != DAVEApp_SUCCESS);
 388:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 389:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 390:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 391:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /* Configuration of Direct Output Pin 3.5 based on User configuration */
 392:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT3->PDR0  &= (uint32_t)(~(PORT3_PDR0_PD5_Msk));
 339              		.loc 1 392 0
 340 02fc 4FF40343 		mov	r3, #33536
 341 0300 C4F60203 		movt	r3, 18434
 342 0304 4FF40342 		mov	r2, #33536
 343 0308 C4F60202 		movt	r2, 18434
 344 030c 126C     		ldr	r2, [r2, #64]
 345 030e 22F4E002 		bic	r2, r2, #7340032
 346 0312 1A64     		str	r2, [r3, #64]
 393:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT3->PDR0  |= (((uint32_t)0 << (uint32_t)PORT3_PDR0_PD5_Pos) & \
 347              		.loc 1 393 0
 348 0314 4FF40343 		mov	r3, #33536
 349 0318 C4F60203 		movt	r3, 18434
 350 031c 4FF40342 		mov	r2, #33536
 351 0320 C4F60202 		movt	r2, 18434
 352 0324 126C     		ldr	r2, [r2, #64]
 353 0326 1A64     		str	r2, [r3, #64]
 394:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                (uint32_t)PORT3_PDR0_PD5_Msk);
 395:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT3->IOCR4  &= (uint32_t)(~(PORT_IOCR_PC1_PO_Msk));
 354              		.loc 1 395 0
 355 0328 4FF40343 		mov	r3, #33536
 356 032c C4F60203 		movt	r3, 18434
 357 0330 4FF40342 		mov	r2, #33536
 358 0334 C4F60202 		movt	r2, 18434
 359 0338 5269     		ldr	r2, [r2, #20]
 360 033a 22F48042 		bic	r2, r2, #16384
 361 033e 5A61     		str	r2, [r3, #20]
 396:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT3->IOCR4  |= (((uint32_t)0 << (uint32_t)PORT_IOCR_PC1_PO_Pos) & \
 362              		.loc 1 396 0
 363 0340 4FF40343 		mov	r3, #33536
 364 0344 C4F60203 		movt	r3, 18434
 365 0348 4FF40342 		mov	r2, #33536
 366 034c C4F60202 		movt	r2, 18434
 367 0350 5269     		ldr	r2, [r2, #20]
 368 0352 5A61     		str	r2, [r3, #20]
 397:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                    (uint32_t)PORT_IOCR_PC1_PO_Msk);
 398:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 369              		.loc 1 398 0
 370 0354 07F10807 		add	r7, r7, #8
 371 0358 BD46     		mov	sp, r7
 372 035a 80BD     		pop	{r7, pc}
 373              		.cfi_endproc
 374              	.LFE135:
 376              		.section	.text.PWMSP001_lInit,"ax",%progbits
 377              		.align	2
 378              		.global	PWMSP001_lInit
 379              		.thumb
 380              		.thumb_func
 382              	PWMSP001_lInit:
 383              	.LFB136:
 399:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 400:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_1>>>*/
 401:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function initializes an instance of the app */
 402:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_lInit(const PWMSP001_HandleType* HandlePtr)
 403:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 384              		.loc 1 403 0
 385              		.cfi_startproc
 386              		@ args = 0, pretend = 0, frame = 16
 387              		@ frame_needed = 1, uses_anonymous_args = 0
 388 0000 90B5     		push	{r4, r7, lr}
 389              	.LCFI3:
 390              		.cfi_def_cfa_offset 12
 391              		.cfi_offset 4, -12
 392              		.cfi_offset 7, -8
 393              		.cfi_offset 14, -4
 394 0002 85B0     		sub	sp, sp, #20
 395              	.LCFI4:
 396              		.cfi_def_cfa_offset 32
 397 0004 00AF     		add	r7, sp, #0
 398              	.LCFI5:
 399              		.cfi_def_cfa_register 7
 400 0006 7860     		str	r0, [r7, #4]
 404:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 401              		.loc 1 404 0
 402 0008 4FF00103 		mov	r3, #1
 403 000c FB60     		str	r3, [r7, #12]
 405:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 406:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   do
 407:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 408:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_1_1>>>*/
 409:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
 404              		.loc 1 409 0
 405 000e 7B68     		ldr	r3, [r7, #4]
 406 0010 DB6B     		ldr	r3, [r3, #60]
 407 0012 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 408 0014 002B     		cmp	r3, #0
 409 0016 40F06981 		bne	.L20
 410              	.L11:
 410:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 411:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 412:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 413:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TCCLR = PWMSP001_SLICE_CLEAR;
 411              		.loc 1 413 0
 412 001a 7B68     		ldr	r3, [r7, #4]
 413 001c 9B69     		ldr	r3, [r3, #24]
 414 001e 4FF00702 		mov	r2, #7
 415 0022 1A61     		str	r2, [r3, #16]
 414:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 415:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_1_3>>>*/
 416:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /* If external stop trigger is setelected */
 417:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kExtStopTrig == (uint8_t)SET)
 416              		.loc 1 417 0
 417 0024 7B68     		ldr	r3, [r7, #4]
 418 0026 DB7B     		ldrb	r3, [r3, #15]	@ zero_extendqisi2
 419 0028 012B     		cmp	r3, #1
 420 002a 27D1     		bne	.L13
 418:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 419:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->INS &= (uint32_t)~((uint32_t)CCU4_CC4_INS_EV1EM_Msk | CCU4_CC4_INS_LP
 421              		.loc 1 419 0
 422 002c 7B68     		ldr	r3, [r7, #4]
 423 002e 9A69     		ldr	r2, [r3, #24]
 424 0030 7B68     		ldr	r3, [r7, #4]
 425 0032 9B69     		ldr	r3, [r3, #24]
 426 0034 1B68     		ldr	r3, [r3, #0]
 427 0036 23F0C053 		bic	r3, r3, #402653184
 428 003a 23F44023 		bic	r3, r3, #786432
 429 003e 1360     		str	r3, [r2, #0]
 420:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->CMC &= (uint32_t)~CCU4_CC4_CMC_ENDS_Msk;
 430              		.loc 1 420 0
 431 0040 7B68     		ldr	r3, [r7, #4]
 432 0042 9B69     		ldr	r3, [r3, #24]
 433 0044 7A68     		ldr	r2, [r7, #4]
 434 0046 9269     		ldr	r2, [r2, #24]
 435 0048 5268     		ldr	r2, [r2, #4]
 436 004a 22F00C02 		bic	r2, r2, #12
 437 004e 5A60     		str	r2, [r3, #4]
 421:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->INS |= ((((uint32_t)HandlePtr->kStopEdge << (uint32_t)CCU4_CC4_INS_EV
 438              		.loc 1 421 0
 439 0050 7B68     		ldr	r3, [r7, #4]
 440 0052 9B69     		ldr	r3, [r3, #24]
 441 0054 7A68     		ldr	r2, [r7, #4]
 442 0056 9269     		ldr	r2, [r2, #24]
 443 0058 1168     		ldr	r1, [r2, #0]
 444 005a 7A68     		ldr	r2, [r7, #4]
 445 005c 92F82420 		ldrb	r2, [r2, #36]	@ zero_extendqisi2
 446 0060 4FEA8242 		lsl	r2, r2, #18
 422:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    & (uint32_t)CCU4_CC4_INS_EV1EM_Msk)| (((uint32_t)PWMSP001_LPF  << (uint32_t)CCU4_CC4_INS_LPF1M
 447              		.loc 1 422 0
 448 0064 02F44022 		and	r2, r2, #786432
 421:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->INS |= ((((uint32_t)HandlePtr->kStopEdge << (uint32_t)CCU4_CC4_INS_EV
 449              		.loc 1 421 0
 450 0068 0A43     		orrs	r2, r2, r1
 451 006a 1A60     		str	r2, [r3, #0]
 423:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  & (uint32_t)CCU4_CC4_INS_LPF1M_Msk));
 424:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 425:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->CMC |= (((uint32_t)PWMSP001_EVENT_1  <<
 452              		.loc 1 425 0
 453 006c 7B68     		ldr	r3, [r7, #4]
 454 006e 9B69     		ldr	r3, [r3, #24]
 455 0070 7A68     		ldr	r2, [r7, #4]
 456 0072 9269     		ldr	r2, [r2, #24]
 457 0074 5268     		ldr	r2, [r2, #4]
 458 0076 42F00802 		orr	r2, r2, #8
 459 007a 5A60     		str	r2, [r3, #4]
 460              	.L13:
 426:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)CCU4_CC4_CMC_ENDS_Pos)& (uint32_t)CCU4_CC4_CMC_ENDS_Msk);
 427:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }/*End of if (HandlePtr->kExtStopTrig == SET)*/
 428:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 429:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_1_4>>>*/
 430:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /* Trap configurations if trap is enabled */
 431:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((HandlePtr->kTrapEnable == (uint8_t)SET) &&\
 461              		.loc 1 431 0
 462 007c 7B68     		ldr	r3, [r7, #4]
 463 007e 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 464 0080 012B     		cmp	r3, #1
 465 0082 2BD1     		bne	.L14
 432:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         ((HandlePtr->kTimerConcatenation != (uint8_t)SET))
 466              		.loc 1 432 0 discriminator 1
 467 0084 7B68     		ldr	r3, [r7, #4]
 468 0086 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 431:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((HandlePtr->kTrapEnable == (uint8_t)SET) &&\
 469              		.loc 1 431 0 discriminator 1
 470 008a 012B     		cmp	r3, #1
 471 008c 26D0     		beq	.L14
 433:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     )
 434:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 435:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr -> INS &= ~((uint32_t)CCU4_CC4_INS_EV2EM_Msk | \
 472              		.loc 1 435 0
 473 008e 7B68     		ldr	r3, [r7, #4]
 474 0090 9A69     		ldr	r2, [r3, #24]
 475 0092 7B68     		ldr	r3, [r7, #4]
 476 0094 9B69     		ldr	r3, [r3, #24]
 477 0096 1B68     		ldr	r3, [r3, #0]
 478 0098 23F0C243 		bic	r3, r3, #1627389952
 479 009c 23F44013 		bic	r3, r3, #3145728
 480 00a0 1360     		str	r3, [r2, #0]
 436:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)CCU4_CC4_INS_EV2LM_Msk | (uint32_t)CCU4_CC4_INS_LPF2M_Msk);
 437:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->CMC &= (uint32_t)~CCU4_CC4_CMC_TS_Msk;
 481              		.loc 1 437 0
 482 00a2 7B68     		ldr	r3, [r7, #4]
 483 00a4 9B69     		ldr	r3, [r3, #24]
 484 00a6 7A68     		ldr	r2, [r7, #4]
 485 00a8 9269     		ldr	r2, [r2, #24]
 486 00aa 5268     		ldr	r2, [r2, #4]
 487 00ac 22F40032 		bic	r2, r2, #131072
 488 00b0 5A60     		str	r2, [r3, #4]
 438:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr -> INS |= ((((uint32_t)0 << (uint32_t)CCU4_CC4_INS_EV2EM_Pos)\
 489              		.loc 1 438 0
 490 00b2 7B68     		ldr	r3, [r7, #4]
 491 00b4 9B69     		ldr	r3, [r3, #24]
 492 00b6 7A68     		ldr	r2, [r7, #4]
 493 00b8 9269     		ldr	r2, [r2, #24]
 494 00ba 1168     		ldr	r1, [r2, #0]
 439:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    &(uint32_t)CCU4_CC4_INS_EV2EM_Msk) | (((uint32_t)HandlePtr->kTrapLevel  <<	\
 495              		.loc 1 439 0
 496 00bc 7A68     		ldr	r2, [r7, #4]
 497 00be 1278     		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 498 00c0 4FEA0262 		lsl	r2, r2, #24
 440:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_INS_EV2LM_Pos)& (uint32_t)CCU4_CC4_INS_EV2LM_Msk ) | \
 499              		.loc 1 440 0
 500 00c4 02F08072 		and	r2, r2, #16777216
 438:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr -> INS |= ((((uint32_t)0 << (uint32_t)CCU4_CC4_INS_EV2EM_Pos)\
 501              		.loc 1 438 0
 502 00c8 0A43     		orrs	r2, r2, r1
 503 00ca 1A60     		str	r2, [r3, #0]
 441:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		    (((uint32_t)0 << (uint32_t)CCU4_CC4_INS_LPF2M_Pos)& \
 442:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  (uint32_t)CCU4_CC4_INS_LPF2M_Msk));
 443:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 444:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->CMC |= ((uint32_t)1 << (uint32_t)CCU4_CC4_CMC_TS_Pos);
 504              		.loc 1 444 0
 505 00cc 7B68     		ldr	r3, [r7, #4]
 506 00ce 9B69     		ldr	r3, [r3, #24]
 507 00d0 7A68     		ldr	r2, [r7, #4]
 508 00d2 9269     		ldr	r2, [r2, #24]
 509 00d4 5268     		ldr	r2, [r2, #4]
 510 00d6 42F40032 		orr	r2, r2, #131072
 511 00da 5A60     		str	r2, [r3, #4]
 512              	.L14:
 445:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }/* End of  if (HandlePtr->kTrapEnable == (uint8_t)SET)*/
 446:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 447:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC &= ~((uint32_t)CCU4_CC4_TC_TCM_Msk | \
 513              		.loc 1 447 0
 514 00dc 7B68     		ldr	r3, [r7, #4]
 515 00de 9A69     		ldr	r2, [r3, #24]
 516 00e0 7B68     		ldr	r3, [r7, #4]
 517 00e2 9B69     		ldr	r3, [r3, #24]
 518 00e4 5B69     		ldr	r3, [r3, #20]
 519 00e6 23F4CE43 		bic	r3, r3, #26368
 520 00ea 23F00903 		bic	r3, r3, #9
 521 00ee 5361     		str	r3, [r2, #20]
 448:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	   (uint32_t)CCU4_CC4_TC_CMOD_Msk | (uint32_t)CCU4_CC4_TC_STRM_Msk | \
 449:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	   (uint32_t)CCU4_CC4_TC_ENDM_Msk | (uint32_t)CCU4_CC4_TC_DITHE_Msk);
 450:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 451:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC |= (((uint32_t)HandlePtr->CountingModeType << \
 522              		.loc 1 451 0
 523 00f0 7B68     		ldr	r3, [r7, #4]
 524 00f2 9B69     		ldr	r3, [r3, #24]
 525 00f4 7A68     		ldr	r2, [r7, #4]
 526 00f6 9269     		ldr	r2, [r2, #24]
 527 00f8 5169     		ldr	r1, [r2, #20]
 528 00fa 7A68     		ldr	r2, [r7, #4]
 529 00fc 92F83620 		ldrb	r2, [r2, #54]	@ zero_extendqisi2
 452:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)CCU4_CC4_TC_TCM_Pos)& (uint32_t)CCU4_CC4_TC_TCM_Msk)|\
 530              		.loc 1 452 0
 531 0100 02F00100 		and	r0, r2, #1
 453:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (((uint32_t)PWMSP001_COMPARE_MODE  << \
 454:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		    (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
 455:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  (((uint32_t)HandlePtr->ExtStartConfigType  << (uint32_t)CCU4_CC4_TC_STRM_Pos)\
 532              		.loc 1 455 0
 533 0104 7A68     		ldr	r2, [r7, #4]
 534 0106 92F83420 		ldrb	r2, [r2, #52]	@ zero_extendqisi2
 535 010a 4FEA8222 		lsl	r2, r2, #10
 456:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			    &(uint32_t)CCU4_CC4_TC_STRM_Msk)|(((uint32_t)HandlePtr->ExtStopConfigType <<\
 536              		.loc 1 456 0
 537 010e 02F48062 		and	r2, r2, #1024
 454:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		    (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
 538              		.loc 1 454 0
 539 0112 1043     		orrs	r0, r0, r2
 540              		.loc 1 456 0
 541 0114 7A68     		ldr	r2, [r7, #4]
 542 0116 92F83520 		ldrb	r2, [r2, #53]	@ zero_extendqisi2
 543 011a 4FEA0222 		lsl	r2, r2, #8
 457:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 				  (uint32_t)CCU4_CC4_TC_ENDM_Pos)& (uint32_t)CCU4_CC4_TC_ENDM_Msk);
 544              		.loc 1 457 0
 545 011e 02F44072 		and	r2, r2, #768
 456:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			    &(uint32_t)CCU4_CC4_TC_STRM_Msk)|(((uint32_t)HandlePtr->ExtStopConfigType <<\
 546              		.loc 1 456 0
 547 0122 0243     		orrs	r2, r2, r0
 451:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC |= (((uint32_t)HandlePtr->CountingModeType << \
 548              		.loc 1 451 0
 549 0124 0A43     		orrs	r2, r2, r1
 550 0126 5A61     		str	r2, [r3, #20]
 458:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*
 459:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      * If timer concatenation is enabled during single shot mode lower timer 
 460:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      * should be free running
 461:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      */
 462:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	if (HandlePtr->kTimerConcatenation != (uint8_t)SET)
 551              		.loc 1 462 0
 552 0128 7B68     		ldr	r3, [r7, #4]
 553 012a 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 554 012e 012B     		cmp	r3, #1
 555 0130 0ED0     		beq	.L15
 463:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	{
 464:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TSSM_Msk, \
 556              		.loc 1 464 0
 557 0132 7B68     		ldr	r3, [r7, #4]
 558 0134 9B69     		ldr	r3, [r3, #24]
 559 0136 7A68     		ldr	r2, [r7, #4]
 560 0138 127B     		ldrb	r2, [r2, #12]	@ zero_extendqisi2
 561 013a 4FEA4202 		lsl	r2, r2, #1
 562 013e 02F00201 		and	r1, r2, #2
 563 0142 7A68     		ldr	r2, [r7, #4]
 564 0144 9269     		ldr	r2, [r2, #24]
 565 0146 5269     		ldr	r2, [r2, #20]
 566 0148 22F00202 		bic	r2, r2, #2
 567 014c 0A43     		orrs	r2, r2, r1
 568 014e 5A61     		str	r2, [r3, #20]
 569              	.L15:
 465:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  		  (uint32_t)CCU4_CC4_TC_TSSM_Pos, HandlePtr->kTimerMode);
 466:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	} 
 467:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 468:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Set the dither mode setting*/
 469:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC |= ((uint32_t)HandlePtr->kDitherSetting << \
 570              		.loc 1 469 0
 571 0150 7B68     		ldr	r3, [r7, #4]
 572 0152 9B69     		ldr	r3, [r3, #24]
 573 0154 7A68     		ldr	r2, [r7, #4]
 574 0156 9269     		ldr	r2, [r2, #24]
 575 0158 5169     		ldr	r1, [r2, #20]
 576 015a 7A68     		ldr	r2, [r7, #4]
 577 015c 92F82120 		ldrb	r2, [r2, #33]	@ zero_extendqisi2
 578 0160 4FEA4232 		lsl	r2, r2, #13
 470:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)CCU4_CC4_TC_DITHE_Pos) & (uint32_t)CCU4_CC4_TC_DITHE_Msk ;
 579              		.loc 1 470 0
 580 0164 02F4C042 		and	r2, r2, #24576
 469:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC |= ((uint32_t)HandlePtr->kDitherSetting << \
 581              		.loc 1 469 0
 582 0168 0A43     		orrs	r2, r2, r1
 583 016a 5A61     		str	r2, [r3, #20]
 471:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 472:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     WR_REG(HandlePtr->CC4yRegsPtr->DITS,(uint32_t)CCU4_CC4_DITS_DCVS_Msk,\
 584              		.loc 1 472 0
 585 016c 7B68     		ldr	r3, [r7, #4]
 586 016e 9B69     		ldr	r3, [r3, #24]
 587 0170 7A68     		ldr	r2, [r7, #4]
 588 0172 527B     		ldrb	r2, [r2, #13]	@ zero_extendqisi2
 589 0174 02F00F01 		and	r1, r2, #15
 590 0178 7A68     		ldr	r2, [r7, #4]
 591 017a 9269     		ldr	r2, [r2, #24]
 592 017c 126A     		ldr	r2, [r2, #32]
 593 017e 22F00F02 		bic	r2, r2, #15
 594 0182 0A43     		orrs	r2, r2, r1
 595 0184 1A62     		str	r2, [r3, #32]
 473:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_DITS_DCVS_Pos, HandlePtr->kDitherCompare);
 474:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 475:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Configure Trap mode as per GUI*/
 476:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation != (uint8_t)SET)
 596              		.loc 1 476 0
 597 0186 7B68     		ldr	r3, [r7, #4]
 598 0188 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 599 018c 012B     		cmp	r3, #1
 600 018e 2CD0     		beq	.L16
 477:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 478:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*<<<DD_PWMSP001_API_1_6>>>*/
 479:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TRPSE_Msk,
 601              		.loc 1 479 0
 602 0190 7B68     		ldr	r3, [r7, #4]
 603 0192 9B69     		ldr	r3, [r3, #24]
 604 0194 7A68     		ldr	r2, [r7, #4]
 605 0196 927C     		ldrb	r2, [r2, #18]	@ zero_extendqisi2
 606 0198 4FEA4252 		lsl	r2, r2, #21
 607 019c 02F40011 		and	r1, r2, #2097152
 608 01a0 7A68     		ldr	r2, [r7, #4]
 609 01a2 9269     		ldr	r2, [r2, #24]
 610 01a4 5269     		ldr	r2, [r2, #20]
 611 01a6 22F40012 		bic	r2, r2, #2097152
 612 01aa 0A43     		orrs	r2, r2, r1
 613 01ac 5A61     		str	r2, [r3, #20]
 480:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)CCU4_CC4_TC_TRPSE_Pos, HandlePtr->kTrapSync);
 481:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 482:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TRPSW_Msk,
 614              		.loc 1 482 0
 615 01ae 7B68     		ldr	r3, [r7, #4]
 616 01b0 9B69     		ldr	r3, [r3, #24]
 617 01b2 7A68     		ldr	r2, [r7, #4]
 618 01b4 D27C     		ldrb	r2, [r2, #19]	@ zero_extendqisi2
 619 01b6 4FEA8252 		lsl	r2, r2, #22
 620 01ba 02F48001 		and	r1, r2, #4194304
 621 01be 7A68     		ldr	r2, [r7, #4]
 622 01c0 9269     		ldr	r2, [r2, #24]
 623 01c2 5269     		ldr	r2, [r2, #20]
 624 01c4 22F48002 		bic	r2, r2, #4194304
 625 01c8 0A43     		orrs	r2, r2, r1
 626 01ca 5A61     		str	r2, [r3, #20]
 483:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)CCU4_CC4_TC_TRPSW_Pos, HandlePtr->kTrapExitControl);
 484:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       
 485:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TRAPE_Msk, \
 627              		.loc 1 485 0
 628 01cc 7B68     		ldr	r3, [r7, #4]
 629 01ce 9B69     		ldr	r3, [r3, #24]
 630 01d0 7A68     		ldr	r2, [r7, #4]
 631 01d2 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 632 01d4 4FEA4242 		lsl	r2, r2, #17
 633 01d8 02F40031 		and	r1, r2, #131072
 634 01dc 7A68     		ldr	r2, [r7, #4]
 635 01de 9269     		ldr	r2, [r2, #24]
 636 01e0 5269     		ldr	r2, [r2, #20]
 637 01e2 22F40032 		bic	r2, r2, #131072
 638 01e6 0A43     		orrs	r2, r2, r1
 639 01e8 5A61     		str	r2, [r3, #20]
 640              	.L16:
 486:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_TC_TRAPE_Pos, HandlePtr->kTrapEnable);
 487:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 488:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Set the prescalar divider and passive level of the o/p signal.*/
 489:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     WR_REG(HandlePtr->CC4yRegsPtr->PSC, (uint32_t)CCU4_CC4_PSC_PSIV_Msk,\
 641              		.loc 1 489 0
 642 01ea 7B68     		ldr	r3, [r7, #4]
 643 01ec 9B69     		ldr	r3, [r3, #24]
 644 01ee 7A68     		ldr	r2, [r7, #4]
 645 01f0 92F82220 		ldrb	r2, [r2, #34]	@ zero_extendqisi2
 646 01f4 02F00F01 		and	r1, r2, #15
 647 01f8 7A68     		ldr	r2, [r7, #4]
 648 01fa 9269     		ldr	r2, [r2, #24]
 649 01fc 526A     		ldr	r2, [r2, #36]
 650 01fe 22F00F02 		bic	r2, r2, #15
 651 0202 0A43     		orrs	r2, r2, r1
 652 0204 5A62     		str	r2, [r3, #36]
 490:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_PSC_PSIV_Pos, HandlePtr->kCCUPrescalar);
 491:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PSL = HandlePtr->kPassiveLevel;
 653              		.loc 1 491 0
 654 0206 7B68     		ldr	r3, [r7, #4]
 655 0208 9B69     		ldr	r3, [r3, #24]
 656 020a 7A68     		ldr	r2, [r7, #4]
 657 020c 127C     		ldrb	r2, [r2, #16]	@ zero_extendqisi2
 658 020e 9A61     		str	r2, [r3, #24]
 492:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 493:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_1_7>>>*/
 494:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Setting period register's value*/
 495:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PRS = (uint32_t)(HandlePtr->kPeriodVal & 0xFFFFU);
 659              		.loc 1 495 0
 660 0210 7B68     		ldr	r3, [r7, #4]
 661 0212 9A69     		ldr	r2, [r3, #24]
 662 0214 7B68     		ldr	r3, [r7, #4]
 663 0216 9B6A     		ldr	r3, [r3, #40]
 664 0218 4FEA0343 		lsl	r3, r3, #16
 665 021c 4FEA1343 		lsr	r3, r3, #16
 666 0220 5363     		str	r3, [r2, #52]
 496:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Setting compare register's value*/
 497:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->CRS = (uint32_t)(HandlePtr->kCompareValue & 0xFFFFU);
 667              		.loc 1 497 0
 668 0222 7B68     		ldr	r3, [r7, #4]
 669 0224 9A69     		ldr	r2, [r3, #24]
 670 0226 7B68     		ldr	r3, [r7, #4]
 671 0228 9B68     		ldr	r3, [r3, #8]
 672 022a 4FEA0343 		lsl	r3, r3, #16
 673 022e 4FEA1343 		lsr	r3, r3, #16
 674 0232 D363     		str	r3, [r2, #60]
 498:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->SWR |= PWMSP001_ALL_CCU4_INTR_CLEAR;
 675              		.loc 1 498 0
 676 0234 7B68     		ldr	r3, [r7, #4]
 677 0236 9A69     		ldr	r2, [r3, #24]
 678 0238 7B68     		ldr	r3, [r7, #4]
 679 023a 9B69     		ldr	r3, [r3, #24]
 680 023c D3F8B030 		ldr	r3, [r3, #176]
 681 0240 43F47063 		orr	r3, r3, #3840
 682 0244 43F00F03 		orr	r3, r3, #15
 683 0248 C2F8B030 		str	r3, [r2, #176]
 499:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 500:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Applying register's settings for the second slice if timer concatenation
 501:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      * is set */
 502:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 684              		.loc 1 502 0
 685 024c 7B68     		ldr	r3, [r7, #4]
 686 024e 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 687 0252 012B     		cmp	r3, #1
 688 0254 0ED1     		bne	.L17
 503:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 504:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PWMSP001_lConfigureSecondSlice(HandlePtr);
 689              		.loc 1 504 0
 690 0256 7868     		ldr	r0, [r7, #4]
 691 0258 FFF7FEFF 		bl	PWMSP001_lConfigureSecondSlice
 505:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->INTE |= HandlePtr->InterruptControl;
 692              		.loc 1 505 0
 693 025c 7B68     		ldr	r3, [r7, #4]
 694 025e DB69     		ldr	r3, [r3, #28]
 695 0260 7A68     		ldr	r2, [r7, #4]
 696 0262 D269     		ldr	r2, [r2, #28]
 697 0264 D2F8A410 		ldr	r1, [r2, #164]
 698 0268 7A68     		ldr	r2, [r7, #4]
 699 026a 126B     		ldr	r2, [r2, #48]
 700 026c 0A43     		orrs	r2, r2, r1
 701 026e C3F8A420 		str	r2, [r3, #164]
 702 0272 0AE0     		b	.L18
 703              	.L17:
 506:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 507:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     } /*End of if (HandlePtr->kTimerConcatenation == SET)*/
 508:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 509:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 510:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->INTE |= HandlePtr->InterruptControl;
 704              		.loc 1 510 0
 705 0274 7B68     		ldr	r3, [r7, #4]
 706 0276 9B69     		ldr	r3, [r3, #24]
 707 0278 7A68     		ldr	r2, [r7, #4]
 708 027a 9269     		ldr	r2, [r2, #24]
 709 027c D2F8A410 		ldr	r1, [r2, #164]
 710 0280 7A68     		ldr	r2, [r7, #4]
 711 0282 126B     		ldr	r2, [r2, #48]
 712 0284 0A43     		orrs	r2, r2, r1
 713 0286 C3F8A420 		str	r2, [r3, #164]
 714              	.L18:
 511:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 512:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 513:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 514:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Request SW shadow transfer for period, compare, dither and prescalar level*/
 515:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)1 << ((uint32_t)4 * \
 715              		.loc 1 515 0
 716 028a 7B68     		ldr	r3, [r7, #4]
 717 028c 5B69     		ldr	r3, [r3, #20]
 718 028e 7A68     		ldr	r2, [r7, #4]
 719 0290 5269     		ldr	r2, [r2, #20]
 720 0292 1169     		ldr	r1, [r2, #16]
 516:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 <<(((uint32_t)4 * \
 721              		.loc 1 516 0
 722 0294 7A68     		ldr	r2, [r7, #4]
 723 0296 92F83720 		ldrb	r2, [r2, #55]	@ zero_extendqisi2
 515:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)1 << ((uint32_t)4 * \
 724              		.loc 1 515 0
 725 029a 4FEA8202 		lsl	r2, r2, #2
 726 029e 4FF00100 		mov	r0, #1
 727 02a2 00FA02F0 		lsl	r0, r0, r2
 517:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)HandlePtr->FirstSlice) + (uint32_t)1))| ((uint32_t)1 << \
 728              		.loc 1 517 0
 729 02a6 7A68     		ldr	r2, [r7, #4]
 730 02a8 92F83720 		ldrb	r2, [r2, #55]	@ zero_extendqisi2
 516:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 <<(((uint32_t)4 * \
 731              		.loc 1 516 0
 732 02ac 4FEA8202 		lsl	r2, r2, #2
 733              		.loc 1 517 0
 734 02b0 02F10102 		add	r2, r2, #1
 516:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 <<(((uint32_t)4 * \
 735              		.loc 1 516 0
 736 02b4 4FF00104 		mov	r4, #1
 737 02b8 04FA02F2 		lsl	r2, r4, r2
 738 02bc 1043     		orrs	r0, r0, r2
 518:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (((uint32_t)4 * (uint32_t)HandlePtr->FirstSlice) + (uint32_t)2)));
 739              		.loc 1 518 0
 740 02be 7A68     		ldr	r2, [r7, #4]
 741 02c0 92F83720 		ldrb	r2, [r2, #55]	@ zero_extendqisi2
 742 02c4 4FEA8202 		lsl	r2, r2, #2
 743 02c8 02F10202 		add	r2, r2, #2
 517:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)HandlePtr->FirstSlice) + (uint32_t)1))| ((uint32_t)1 << \
 744              		.loc 1 517 0
 745 02cc 4FF00104 		mov	r4, #1
 746 02d0 04FA02F2 		lsl	r2, r4, r2
 747 02d4 0243     		orrs	r2, r2, r0
 515:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)1 << ((uint32_t)4 * \
 748              		.loc 1 515 0
 749 02d6 0A43     		orrs	r2, r2, r1
 750 02d8 1A61     		str	r2, [r3, #16]
 519:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 520:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 751              		.loc 1 520 0
 752 02da 4FF00003 		mov	r3, #0
 753 02de FB60     		str	r3, [r7, #12]
 521:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->DynamicDataType->StateType = PWMSP001_INITIALIZED;
 754              		.loc 1 521 0
 755 02e0 7B68     		ldr	r3, [r7, #4]
 756 02e2 DB6B     		ldr	r3, [r3, #60]
 757 02e4 4FF00102 		mov	r2, #1
 758 02e8 1A70     		strb	r2, [r3, #0]
 759 02ea 00E0     		b	.L12
 760              	.L20:
 411:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 761              		.loc 1 411 0
 762 02ec 00BF     		nop
 763              	.L12:
 522:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   } while (0);
 523:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 524:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (Status != (uint32_t)DAVEApp_SUCCESS)
 525:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 526:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
 527:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 528:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 764              		.loc 1 528 0
 765 02ee FB68     		ldr	r3, [r7, #12]
 529:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 766              		.loc 1 529 0
 767 02f0 1846     		mov	r0, r3
 768 02f2 07F11407 		add	r7, r7, #20
 769 02f6 BD46     		mov	sp, r7
 770 02f8 90BD     		pop	{r4, r7, pc}
 771              		.cfi_endproc
 772              	.LFE136:
 774 02fa 00BF     		.section	.text.PWMSP001_Deinit,"ax",%progbits
 775              		.align	2
 776              		.global	PWMSP001_Deinit
 777              		.thumb
 778              		.thumb_func
 780              	PWMSP001_Deinit:
 781              	.LFB137:
 530:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 531:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_2>>>*/
 532:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function de-initializes the app */
 533:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_Deinit(const PWMSP001_HandleType* HandlePtr)
 534:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 782              		.loc 1 534 0
 783              		.cfi_startproc
 784              		@ args = 0, pretend = 0, frame = 32
 785              		@ frame_needed = 1, uses_anonymous_args = 0
 786              		@ link register save eliminated.
 787 0000 80B4     		push	{r7}
 788              	.LCFI6:
 789              		.cfi_def_cfa_offset 4
 790              		.cfi_offset 7, -4
 791 0002 89B0     		sub	sp, sp, #36
 792              	.LCFI7:
 793              		.cfi_def_cfa_offset 40
 794 0004 00AF     		add	r7, sp, #0
 795              	.LCFI8:
 796              		.cfi_def_cfa_register 7
 797 0006 7860     		str	r0, [r7, #4]
 535:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 798              		.loc 1 535 0
 799 0008 4FF00103 		mov	r3, #1
 800 000c FB61     		str	r3, [r7, #28]
 536:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 537:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
 538:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp3;
 539:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp4;
 540:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 541:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      /*<<<DD_PWMSP001_API_2_1>>>*/
 542:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
 801              		.loc 1 542 0
 802 000e 7B68     		ldr	r3, [r7, #4]
 803 0010 DB6B     		ldr	r3, [r3, #60]
 804 0012 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 805 0014 002B     		cmp	r3, #0
 806 0016 00F0AB80 		beq	.L22
 543:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 544:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_2_3>>>*/
 545:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TCCLR = PWMSP001_SLICE_CLEAR;
 807              		.loc 1 545 0
 808 001a 7B68     		ldr	r3, [r7, #4]
 809 001c 9B69     		ldr	r3, [r3, #24]
 810 001e 4FF00702 		mov	r2, #7
 811 0022 1A61     		str	r2, [r3, #16]
 546:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
 812              		.loc 1 546 0
 813 0024 7B68     		ldr	r3, [r7, #4]
 814 0026 9B69     		ldr	r3, [r3, #24]
 815 0028 40F60F72 		movw	r2, #3855
 816 002c C3F8B020 		str	r2, [r3, #176]
 547:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->INTE = 0x00U;
 817              		.loc 1 547 0
 818 0030 7B68     		ldr	r3, [r7, #4]
 819 0032 9B69     		ldr	r3, [r3, #24]
 820 0034 4FF00002 		mov	r2, #0
 821 0038 C3F8A420 		str	r2, [r3, #164]
 548:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 549:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Set IDLE mode for selected slice*/
 550:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)1<< ((uint32_t)CCU4_GIDLS_SS0I_Pos \
 822              		.loc 1 550 0
 823 003c 7B68     		ldr	r3, [r7, #4]
 824 003e 5B69     		ldr	r3, [r3, #20]
 825 0040 7A68     		ldr	r2, [r7, #4]
 826 0042 5269     		ldr	r2, [r2, #20]
 827 0044 9168     		ldr	r1, [r2, #8]
 551:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  +(uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 << (uint32_t)CCU4_GIDLS_CPRB_Pos)\
 828              		.loc 1 551 0
 829 0046 7A68     		ldr	r2, [r7, #4]
 830 0048 92F83720 		ldrb	r2, [r2, #55]	@ zero_extendqisi2
 550:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)1<< ((uint32_t)CCU4_GIDLS_SS0I_Pos \
 831              		.loc 1 550 0
 832 004c 4FF00100 		mov	r0, #1
 833 0050 00FA02F2 		lsl	r2, r0, r2
 834 0054 0A43     		orrs	r2, r2, r1
 835 0056 42F44072 		orr	r2, r2, #768
 836 005a 9A60     		str	r2, [r3, #8]
 552:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    |((uint32_t)1 << (uint32_t)CCU4_GIDLS_PSIC_Pos));
 553:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 554:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Clear all the registers*/
 555:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->INS = 0x00U;
 837              		.loc 1 555 0
 838 005c 7B68     		ldr	r3, [r7, #4]
 839 005e 9B69     		ldr	r3, [r3, #24]
 840 0060 4FF00002 		mov	r2, #0
 841 0064 1A60     		str	r2, [r3, #0]
 556:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->CMC = 0x00U;
 842              		.loc 1 556 0
 843 0066 7B68     		ldr	r3, [r7, #4]
 844 0068 9B69     		ldr	r3, [r3, #24]
 845 006a 4FF00002 		mov	r2, #0
 846 006e 5A60     		str	r2, [r3, #4]
 557:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC = 0x00U;
 847              		.loc 1 557 0
 848 0070 7B68     		ldr	r3, [r7, #4]
 849 0072 9B69     		ldr	r3, [r3, #24]
 850 0074 4FF00002 		mov	r2, #0
 851 0078 5A61     		str	r2, [r3, #20]
 558:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PSC = 0x00U;
 852              		.loc 1 558 0
 853 007a 7B68     		ldr	r3, [r7, #4]
 854 007c 9B69     		ldr	r3, [r3, #24]
 855 007e 4FF00002 		mov	r2, #0
 856 0082 5A62     		str	r2, [r3, #36]
 559:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PSL = 0x00U;
 857              		.loc 1 559 0
 858 0084 7B68     		ldr	r3, [r7, #4]
 859 0086 9B69     		ldr	r3, [r3, #24]
 860 0088 4FF00002 		mov	r2, #0
 861 008c 9A61     		str	r2, [r3, #24]
 560:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->DITS = 0x00U;
 862              		.loc 1 560 0
 863 008e 7B68     		ldr	r3, [r7, #4]
 864 0090 9B69     		ldr	r3, [r3, #24]
 865 0092 4FF00002 		mov	r2, #0
 866 0096 1A62     		str	r2, [r3, #32]
 561:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->CRS = 0x00U;
 867              		.loc 1 561 0
 868 0098 7B68     		ldr	r3, [r7, #4]
 869 009a 9B69     		ldr	r3, [r3, #24]
 870 009c 4FF00002 		mov	r2, #0
 871 00a0 DA63     		str	r2, [r3, #60]
 562:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PRS = 0x00U;
 872              		.loc 1 562 0
 873 00a2 7B68     		ldr	r3, [r7, #4]
 874 00a4 9B69     		ldr	r3, [r3, #24]
 875 00a6 4FF00002 		mov	r2, #0
 876 00aa 5A63     		str	r2, [r3, #52]
 563:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 564:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_2_2>>>*/
 565:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 877              		.loc 1 565 0
 878 00ac 7B68     		ldr	r3, [r7, #4]
 879 00ae 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 880 00b2 012B     		cmp	r3, #1
 881 00b4 54D1     		bne	.L23
 566:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 567:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*<<<DD_PWMSP001_API_2_3>>>*/
 568:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->TCCLR = PWMSP001_SLICE_CLEAR;
 882              		.loc 1 568 0
 883 00b6 7B68     		ldr	r3, [r7, #4]
 884 00b8 DB69     		ldr	r3, [r3, #28]
 885 00ba 4FF00702 		mov	r2, #7
 886 00be 1A61     		str	r2, [r3, #16]
 569:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
 887              		.loc 1 569 0
 888 00c0 7B68     		ldr	r3, [r7, #4]
 889 00c2 DB69     		ldr	r3, [r3, #28]
 890 00c4 40F60F72 		movw	r2, #3855
 891 00c8 C3F8B020 		str	r2, [r3, #176]
 570:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->INTE = 0x00U;
 892              		.loc 1 570 0
 893 00cc 7B68     		ldr	r3, [r7, #4]
 894 00ce DB69     		ldr	r3, [r3, #28]
 895 00d0 4FF00002 		mov	r2, #0
 896 00d4 C3F8A420 		str	r2, [r3, #164]
 571:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 572:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*Set IDLE mode for selected slice*/
 573:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp4 = ((uint32_t)0x01 << (uint32_t)CCU4_GIDLS_PSIC_Pos);
 897              		.loc 1 573 0
 898 00d8 4FF40073 		mov	r3, #512
 899 00dc BB61     		str	r3, [r7, #24]
 574:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp3 = ((uint32_t)0x01 << CCU4_GIDLS_CPRB_Pos);
 900              		.loc 1 574 0
 901 00de 4FF48073 		mov	r3, #256
 902 00e2 7B61     		str	r3, [r7, #20]
 575:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp2 = ((uint32_t)CCU4_GIDLS_SS0I_Pos + (uint32_t)HandlePtr->SecondSlice);
 903              		.loc 1 575 0
 904 00e4 7B68     		ldr	r3, [r7, #4]
 905 00e6 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 906 00ea 3B61     		str	r3, [r7, #16]
 576:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp1 = Temp3 | Temp4;
 907              		.loc 1 576 0
 908 00ec 7A69     		ldr	r2, [r7, #20]
 909 00ee BB69     		ldr	r3, [r7, #24]
 910 00f0 1343     		orrs	r3, r3, r2
 911 00f2 FB60     		str	r3, [r7, #12]
 577:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yKernRegsPtr->GIDLS |= (uint32_t)(((uint32_t)0x01 << Temp2 ) | Temp1);
 912              		.loc 1 577 0
 913 00f4 7B68     		ldr	r3, [r7, #4]
 914 00f6 5B69     		ldr	r3, [r3, #20]
 915 00f8 7A68     		ldr	r2, [r7, #4]
 916 00fa 5269     		ldr	r2, [r2, #20]
 917 00fc 9168     		ldr	r1, [r2, #8]
 918 00fe 3A69     		ldr	r2, [r7, #16]
 919 0100 4FF00100 		mov	r0, #1
 920 0104 00FA02F0 		lsl	r0, r0, r2
 921 0108 FA68     		ldr	r2, [r7, #12]
 922 010a 0243     		orrs	r2, r2, r0
 923 010c 0A43     		orrs	r2, r2, r1
 924 010e 9A60     		str	r2, [r3, #8]
 578:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*   Temp3 | Temp4 ); */
 579:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 580:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*Clear all the registers*/
 581:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->INS = 0x00U;
 925              		.loc 1 581 0
 926 0110 7B68     		ldr	r3, [r7, #4]
 927 0112 DB69     		ldr	r3, [r3, #28]
 928 0114 4FF00002 		mov	r2, #0
 929 0118 1A60     		str	r2, [r3, #0]
 582:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->CMC = 0x00U;
 930              		.loc 1 582 0
 931 011a 7B68     		ldr	r3, [r7, #4]
 932 011c DB69     		ldr	r3, [r3, #28]
 933 011e 4FF00002 		mov	r2, #0
 934 0122 5A60     		str	r2, [r3, #4]
 583:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->TC = 0x00U;
 935              		.loc 1 583 0
 936 0124 7B68     		ldr	r3, [r7, #4]
 937 0126 DB69     		ldr	r3, [r3, #28]
 938 0128 4FF00002 		mov	r2, #0
 939 012c 5A61     		str	r2, [r3, #20]
 584:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->PSC = 0x00U;
 940              		.loc 1 584 0
 941 012e 7B68     		ldr	r3, [r7, #4]
 942 0130 DB69     		ldr	r3, [r3, #28]
 943 0132 4FF00002 		mov	r2, #0
 944 0136 5A62     		str	r2, [r3, #36]
 585:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->PSL = 0x00U;
 945              		.loc 1 585 0
 946 0138 7B68     		ldr	r3, [r7, #4]
 947 013a DB69     		ldr	r3, [r3, #28]
 948 013c 4FF00002 		mov	r2, #0
 949 0140 9A61     		str	r2, [r3, #24]
 586:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->DITS = 0x00U;
 950              		.loc 1 586 0
 951 0142 7B68     		ldr	r3, [r7, #4]
 952 0144 DB69     		ldr	r3, [r3, #28]
 953 0146 4FF00002 		mov	r2, #0
 954 014a 1A62     		str	r2, [r3, #32]
 587:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->CRS = 0x00U;
 955              		.loc 1 587 0
 956 014c 7B68     		ldr	r3, [r7, #4]
 957 014e DB69     		ldr	r3, [r3, #28]
 958 0150 4FF00002 		mov	r2, #0
 959 0154 DA63     		str	r2, [r3, #60]
 588:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->PRS = 0x00U;
 960              		.loc 1 588 0
 961 0156 7B68     		ldr	r3, [r7, #4]
 962 0158 DB69     		ldr	r3, [r3, #28]
 963 015a 4FF00002 		mov	r2, #0
 964 015e 5A63     		str	r2, [r3, #52]
 965              	.L23:
 589:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }/*End of if (HandlePtr->kTimerConcatenation == (uint8_t)SET)*/
 590:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 591:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->DynamicDataType->StateType = PWMSP001_UNINITIALIZED;
 966              		.loc 1 591 0
 967 0160 7B68     		ldr	r3, [r7, #4]
 968 0162 DB6B     		ldr	r3, [r3, #60]
 969 0164 4FF00002 		mov	r2, #0
 970 0168 1A70     		strb	r2, [r3, #0]
 592:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 593:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 971              		.loc 1 593 0
 972 016a 4FF00003 		mov	r3, #0
 973 016e FB61     		str	r3, [r7, #28]
 974              	.L22:
 594:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 595:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 596:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (Status != (uint32_t)DAVEApp_SUCCESS)
 597:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 598:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
 599:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 600:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 975              		.loc 1 600 0
 976 0170 FB69     		ldr	r3, [r7, #28]
 601:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 977              		.loc 1 601 0
 978 0172 1846     		mov	r0, r3
 979 0174 07F12407 		add	r7, r7, #36
 980 0178 BD46     		mov	sp, r7
 981 017a 80BC     		pop	{r7}
 982 017c 7047     		bx	lr
 983              		.cfi_endproc
 984              	.LFE137:
 986 017e 00BF     		.section	.text.PWMSP001_Start,"ax",%progbits
 987              		.align	2
 988              		.global	PWMSP001_Start
 989              		.thumb
 990              		.thumb_func
 992              	PWMSP001_Start:
 993              	.LFB138:
 602:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 603:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_3>>>*/
 604:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function starts the app. 
 605:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This needs to be called even if external start is configured.*/
 606:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_Start(const PWMSP001_HandleType* HandlePtr)
 607:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 994              		.loc 1 607 0
 995              		.cfi_startproc
 996              		@ args = 0, pretend = 0, frame = 16
 997              		@ frame_needed = 1, uses_anonymous_args = 0
 998              		@ link register save eliminated.
 999 0000 80B4     		push	{r7}
 1000              	.LCFI9:
 1001              		.cfi_def_cfa_offset 4
 1002              		.cfi_offset 7, -4
 1003 0002 85B0     		sub	sp, sp, #20
 1004              	.LCFI10:
 1005              		.cfi_def_cfa_offset 24
 1006 0004 00AF     		add	r7, sp, #0
 1007              	.LCFI11:
 1008              		.cfi_def_cfa_register 7
 1009 0006 7860     		str	r0, [r7, #4]
 608:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 1010              		.loc 1 608 0
 1011 0008 4FF00103 		mov	r3, #1
 1012 000c FB60     		str	r3, [r7, #12]
 609:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 610:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   do
 611:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 612:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_3_1>>>*/
 613:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
 1013              		.loc 1 613 0
 1014 000e 7B68     		ldr	r3, [r7, #4]
 1015 0010 DB6B     		ldr	r3, [r3, #60]
 1016 0012 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1017 0014 012B     		cmp	r3, #1
 1018 0016 05D0     		beq	.L26
 614:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         (HandlePtr->DynamicDataType->StateType != PWMSP001_STOPPED))
 1019              		.loc 1 614 0 discriminator 1
 1020 0018 7B68     		ldr	r3, [r7, #4]
 1021 001a DB6B     		ldr	r3, [r3, #60]
 1022 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 613:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
 1023              		.loc 1 613 0 discriminator 1
 1024 001e 032B     		cmp	r3, #3
 1025 0020 40F0A780 		bne	.L33
 1026              	.L26:
 615:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 616:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
 617:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 618:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 619:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 620:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
 1027              		.loc 1 620 0
 1028 0024 7B68     		ldr	r3, [r7, #4]
 1029 0026 9B69     		ldr	r3, [r3, #24]
 1030 0028 40F60F72 		movw	r2, #3855
 1031 002c C3F8B020 		str	r2, [r3, #176]
 621:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 622:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_3_2>>>*/
 623:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	HandlePtr->CC4yKernRegsPtr->GIDLC |=
 1032              		.loc 1 623 0
 1033 0030 7B68     		ldr	r3, [r7, #4]
 1034 0032 5B69     		ldr	r3, [r3, #20]
 1035 0034 7A68     		ldr	r2, [r7, #4]
 1036 0036 5269     		ldr	r2, [r2, #20]
 1037 0038 D168     		ldr	r1, [r2, #12]
 624:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		(((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
 625:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			(uint32_t)HandlePtr->FirstSlice)) );
 1038              		.loc 1 625 0
 1039 003a 7A68     		ldr	r2, [r7, #4]
 1040 003c 92F83720 		ldrb	r2, [r2, #55]	@ zero_extendqisi2
 624:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		(((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
 1041              		.loc 1 624 0
 1042 0040 4FF00100 		mov	r0, #1
 1043 0044 00FA02F2 		lsl	r2, r0, r2
 623:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	HandlePtr->CC4yKernRegsPtr->GIDLC |=
 1044              		.loc 1 623 0
 1045 0048 0A43     		orrs	r2, r2, r1
 1046 004a DA60     		str	r2, [r3, #12]
 626:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 1047              		.loc 1 626 0
 1048 004c 7B68     		ldr	r3, [r7, #4]
 1049 004e 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1050 0052 012B     		cmp	r3, #1
 1051 0054 0DD1     		bne	.L28
 627:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	{
 628:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  HandlePtr->CC4yKernRegsPtr->GIDLC |=
 1052              		.loc 1 628 0
 1053 0056 7B68     		ldr	r3, [r7, #4]
 1054 0058 5B69     		ldr	r3, [r3, #20]
 1055 005a 7A68     		ldr	r2, [r7, #4]
 1056 005c 5269     		ldr	r2, [r2, #20]
 1057 005e D168     		ldr	r1, [r2, #12]
 629:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  ((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
 630:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			(uint32_t)HandlePtr->SecondSlice));
 1058              		.loc 1 630 0
 1059 0060 7A68     		ldr	r2, [r7, #4]
 1060 0062 92F83820 		ldrb	r2, [r2, #56]	@ zero_extendqisi2
 629:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  ((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
 1061              		.loc 1 629 0
 1062 0066 4FF00100 		mov	r0, #1
 1063 006a 00FA02F2 		lsl	r2, r0, r2
 628:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  HandlePtr->CC4yKernRegsPtr->GIDLC |=
 1064              		.loc 1 628 0
 1065 006e 0A43     		orrs	r2, r2, r1
 1066 0070 DA60     		str	r2, [r3, #12]
 1067              	.L28:
 631:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	} /*End if (HandlePtr->kTimerConcatenation == SET)*/
 632:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	
 633:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Set run bit of slices if external start is not configured*/
 634:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kExtStartTrig == (uint8_t)RESET)
 1068              		.loc 1 634 0
 1069 0072 7B68     		ldr	r3, [r7, #4]
 1070 0074 9B7B     		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 1071 0076 002B     		cmp	r3, #0
 1072 0078 15D1     		bne	.L29
 635:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 636:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->TCSET |= (uint32_t)1;
 1073              		.loc 1 636 0
 1074 007a 7B68     		ldr	r3, [r7, #4]
 1075 007c 9B69     		ldr	r3, [r3, #24]
 1076 007e 7A68     		ldr	r2, [r7, #4]
 1077 0080 9269     		ldr	r2, [r2, #24]
 1078 0082 D268     		ldr	r2, [r2, #12]
 1079 0084 42F00102 		orr	r2, r2, #1
 1080 0088 DA60     		str	r2, [r3, #12]
 637:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 1081              		.loc 1 637 0
 1082 008a 7B68     		ldr	r3, [r7, #4]
 1083 008c 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1084 0090 012B     		cmp	r3, #1
 1085 0092 65D1     		bne	.L30
 638:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 639:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->TCSET |= (uint32_t)1;
 1086              		.loc 1 639 0
 1087 0094 7B68     		ldr	r3, [r7, #4]
 1088 0096 DB69     		ldr	r3, [r3, #28]
 1089 0098 7A68     		ldr	r2, [r7, #4]
 1090 009a D269     		ldr	r2, [r2, #28]
 1091 009c D268     		ldr	r2, [r2, #12]
 1092 009e 42F00102 		orr	r2, r2, #1
 1093 00a2 DA60     		str	r2, [r3, #12]
 1094 00a4 5CE0     		b	.L30
 1095              	.L29:
 640:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
 641:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }/*End of  if (HandlePtr->kExtStartTrig == (uint8_t)RESET)*/
 642:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 643:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 644:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*<<<DD_PWMSP001_API_1_2>>>*/
 645:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if (HandlePtr->kExtStartTrig == (uint8_t)SET)
 1096              		.loc 1 645 0
 1097 00a6 7B68     		ldr	r3, [r7, #4]
 1098 00a8 9B7B     		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 1099 00aa 012B     		cmp	r3, #1
 1100 00ac 27D1     		bne	.L31
 646:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 647:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->INS &= ~((uint32_t)CCU4_CC4_INS_EV0EM_Msk | \
 1101              		.loc 1 647 0
 1102 00ae 7B68     		ldr	r3, [r7, #4]
 1103 00b0 9A69     		ldr	r2, [r3, #24]
 1104 00b2 7B68     		ldr	r3, [r7, #4]
 1105 00b4 9B69     		ldr	r3, [r3, #24]
 1106 00b6 1B68     		ldr	r3, [r3, #0]
 1107 00b8 23F0C063 		bic	r3, r3, #100663296
 1108 00bc 23F44033 		bic	r3, r3, #196608
 1109 00c0 1360     		str	r3, [r2, #0]
 648:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_INS_LPF0M_Msk);
 649:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->CMC &= ~(uint32_t)CCU4_CC4_CMC_STRTS_Msk;
 1110              		.loc 1 649 0
 1111 00c2 7B68     		ldr	r3, [r7, #4]
 1112 00c4 9B69     		ldr	r3, [r3, #24]
 1113 00c6 7A68     		ldr	r2, [r7, #4]
 1114 00c8 9269     		ldr	r2, [r2, #24]
 1115 00ca 5268     		ldr	r2, [r2, #4]
 1116 00cc 22F00302 		bic	r2, r2, #3
 1117 00d0 5A60     		str	r2, [r3, #4]
 650:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->INS |=
 1118              		.loc 1 650 0
 1119 00d2 7B68     		ldr	r3, [r7, #4]
 1120 00d4 9B69     		ldr	r3, [r3, #24]
 1121 00d6 7A68     		ldr	r2, [r7, #4]
 1122 00d8 9269     		ldr	r2, [r2, #24]
 1123 00da 1168     		ldr	r1, [r2, #0]
 651:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             ((((uint32_t)HandlePtr->kStartEdge  << (uint32_t)CCU4_CC4_INS_EV0EM_Pos)& \
 1124              		.loc 1 651 0
 1125 00dc 7A68     		ldr	r2, [r7, #4]
 1126 00de 92F82320 		ldrb	r2, [r2, #35]	@ zero_extendqisi2
 1127 00e2 4FEA0242 		lsl	r2, r2, #16
 652:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  (uint32_t)CCU4_CC4_INS_EV0EM_Msk) | (((uint32_t)PWMSP001_LPF   << \
 1128              		.loc 1 652 0
 1129 00e6 02F44032 		and	r2, r2, #196608
 650:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->INS |=
 1130              		.loc 1 650 0
 1131 00ea 0A43     		orrs	r2, r2, r1
 1132 00ec 1A60     		str	r2, [r3, #0]
 653:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                 (uint32_t)CCU4_CC4_INS_LPF0M_Pos)& (uint32_t)CCU4_CC4_INS_LPF0M_Msk));
 654:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->CMC |= (((uint32_t)PWMSP001_EVENT_0  <<
 1133              		.loc 1 654 0
 1134 00ee 7B68     		ldr	r3, [r7, #4]
 1135 00f0 9B69     		ldr	r3, [r3, #24]
 1136 00f2 7A68     		ldr	r2, [r7, #4]
 1137 00f4 9269     		ldr	r2, [r2, #24]
 1138 00f6 5268     		ldr	r2, [r2, #4]
 1139 00f8 42F00102 		orr	r2, r2, #1
 1140 00fc 5A60     		str	r2, [r3, #4]
 1141              	.L31:
 655:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             (uint32_t)CCU4_CC4_CMC_STRTS_Pos)& (uint32_t)CCU4_CC4_CMC_STRTS_Msk);
 656:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }/*End of if (HandlePtr->kExtStartTrig == (uint8_t)SET)*/
 657:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*<<<DD_PWMSP001_nonAPI_1_2>>>*/
 658:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if ((HandlePtr->kExtStartTrig == (uint8_t)SET) &&\
 1142              		.loc 1 658 0
 1143 00fe 7B68     		ldr	r3, [r7, #4]
 1144 0100 9B7B     		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 1145 0102 012B     		cmp	r3, #1
 1146 0104 2CD1     		bne	.L30
 659:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 1147              		.loc 1 659 0 discriminator 1
 1148 0106 7B68     		ldr	r3, [r7, #4]
 1149 0108 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 658:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if ((HandlePtr->kExtStartTrig == (uint8_t)SET) &&\
 1150              		.loc 1 658 0 discriminator 1
 1151 010c 012B     		cmp	r3, #1
 1152 010e 27D1     		bne	.L30
 660:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       )
 661:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 662:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->INS &= (uint32_t)~(CCU4_CC4_INS_EV0EM_Msk | CCU4_CC4_INS_LPF0M_Msk
 1153              		.loc 1 662 0
 1154 0110 7B68     		ldr	r3, [r7, #4]
 1155 0112 DA69     		ldr	r2, [r3, #28]
 1156 0114 7B68     		ldr	r3, [r7, #4]
 1157 0116 DB69     		ldr	r3, [r3, #28]
 1158 0118 1B68     		ldr	r3, [r3, #0]
 1159 011a 23F0C063 		bic	r3, r3, #100663296
 1160 011e 23F44033 		bic	r3, r3, #196608
 1161 0122 1360     		str	r3, [r2, #0]
 663:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->CMC &= (uint32_t)~(CCU4_CC4_CMC_STRTS_Msk);
 1162              		.loc 1 663 0
 1163 0124 7B68     		ldr	r3, [r7, #4]
 1164 0126 DB69     		ldr	r3, [r3, #28]
 1165 0128 7A68     		ldr	r2, [r7, #4]
 1166 012a D269     		ldr	r2, [r2, #28]
 1167 012c 5268     		ldr	r2, [r2, #4]
 1168 012e 22F00302 		bic	r2, r2, #3
 1169 0132 5A60     		str	r2, [r3, #4]
 664:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->INS |=
 1170              		.loc 1 664 0
 1171 0134 7B68     		ldr	r3, [r7, #4]
 1172 0136 DB69     		ldr	r3, [r3, #28]
 1173 0138 7A68     		ldr	r2, [r7, #4]
 1174 013a D269     		ldr	r2, [r2, #28]
 1175 013c 1168     		ldr	r1, [r2, #0]
 665:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             ((((uint32_t)HandlePtr->kStartEdge  << (uint32_t)CCU4_CC4_INS_EV0EM_Pos)& \
 1176              		.loc 1 665 0
 1177 013e 7A68     		ldr	r2, [r7, #4]
 1178 0140 92F82320 		ldrb	r2, [r2, #35]	@ zero_extendqisi2
 1179 0144 4FEA0242 		lsl	r2, r2, #16
 666:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  (uint32_t)CCU4_CC4_INS_EV0EM_Msk) | (((uint32_t)PWMSP001_LPF  <<
 1180              		.loc 1 666 0
 1181 0148 02F44032 		and	r2, r2, #196608
 664:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->INS |=
 1182              		.loc 1 664 0
 1183 014c 0A43     		orrs	r2, r2, r1
 1184 014e 1A60     		str	r2, [r3, #0]
 667:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                     (uint32_t)CCU4_CC4_INS_LPF0M_Pos)& (uint32_t)CCU4_CC4_INS_LPF0M_Msk));
 668:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->CMC |= (((uint32_t)PWMSP001_EVENT_0  << \
 1185              		.loc 1 668 0
 1186 0150 7B68     		ldr	r3, [r7, #4]
 1187 0152 DB69     		ldr	r3, [r3, #28]
 1188 0154 7A68     		ldr	r2, [r7, #4]
 1189 0156 D269     		ldr	r2, [r2, #28]
 1190 0158 5268     		ldr	r2, [r2, #4]
 1191 015a 42F00102 		orr	r2, r2, #1
 1192 015e 5A60     		str	r2, [r3, #4]
 1193              	.L30:
 669:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_CMC_STRTS_Pos) & (uint32_t)CCU4_CC4_CMC_STRTS_Msk);
 670:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }/*End of if (HandlePtr->kExtStartTrig == SET)*/
 671:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 672:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 673:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->DynamicDataType->StateType = PWMSP001_RUNNING;
 1194              		.loc 1 673 0
 1195 0160 7B68     		ldr	r3, [r7, #4]
 1196 0162 DB6B     		ldr	r3, [r3, #60]
 1197 0164 4FF00202 		mov	r2, #2
 1198 0168 1A70     		strb	r2, [r3, #0]
 674:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1199              		.loc 1 674 0
 1200 016a 4FF00003 		mov	r3, #0
 1201 016e FB60     		str	r3, [r7, #12]
 1202 0170 00E0     		b	.L27
 1203              	.L33:
 617:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 1204              		.loc 1 617 0
 1205 0172 00BF     		nop
 1206              	.L27:
 675:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   } while (0);
 676:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 1207              		.loc 1 676 0
 1208 0174 FB68     		ldr	r3, [r7, #12]
 677:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1209              		.loc 1 677 0
 1210 0176 1846     		mov	r0, r3
 1211 0178 07F11407 		add	r7, r7, #20
 1212 017c BD46     		mov	sp, r7
 1213 017e 80BC     		pop	{r7}
 1214 0180 7047     		bx	lr
 1215              		.cfi_endproc
 1216              	.LFE138:
 1218 0182 00BF     		.section	.text.PWMSP001_Stop,"ax",%progbits
 1219              		.align	2
 1220              		.global	PWMSP001_Stop
 1221              		.thumb
 1222              		.thumb_func
 1224              	PWMSP001_Stop:
 1225              	.LFB139:
 678:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 679:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_4>>>*/
 680:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function stops the app */
 681:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_Stop(const PWMSP001_HandleType* HandlePtr)
 682:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1226              		.loc 1 682 0
 1227              		.cfi_startproc
 1228              		@ args = 0, pretend = 0, frame = 24
 1229              		@ frame_needed = 1, uses_anonymous_args = 0
 1230              		@ link register save eliminated.
 1231 0000 80B4     		push	{r7}
 1232              	.LCFI12:
 1233              		.cfi_def_cfa_offset 4
 1234              		.cfi_offset 7, -4
 1235 0002 87B0     		sub	sp, sp, #28
 1236              	.LCFI13:
 1237              		.cfi_def_cfa_offset 32
 1238 0004 00AF     		add	r7, sp, #0
 1239              	.LCFI14:
 1240              		.cfi_def_cfa_register 7
 1241 0006 7860     		str	r0, [r7, #4]
 683:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 1242              		.loc 1 683 0
 1243 0008 4FF00103 		mov	r3, #1
 1244 000c 7B61     		str	r3, [r7, #20]
 684:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 685:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
 686:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 687:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   do
 688:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 689:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_4_1>>>*/
 690:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->DynamicDataType->StateType != PWMSP001_RUNNING)
 1245              		.loc 1 690 0
 1246 000e 7B68     		ldr	r3, [r7, #4]
 1247 0010 DB6B     		ldr	r3, [r3, #60]
 1248 0012 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1249 0014 022B     		cmp	r3, #2
 1250 0016 41D1     		bne	.L39
 1251              	.L35:
 691:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 692:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 693:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 694:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 695:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 696:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp1 = ((uint32_t)CCU4_GIDLS_SS0I_Pos + (uint32_t)HandlePtr->FirstSlice);
 1252              		.loc 1 696 0
 1253 0018 7B68     		ldr	r3, [r7, #4]
 1254 001a 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 1255 001e 3B61     		str	r3, [r7, #16]
 697:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp2 = ((uint32_t)0x01 << CCU4_GIDLS_PSIC_Pos);
 1256              		.loc 1 697 0
 1257 0020 4FF40073 		mov	r3, #512
 1258 0024 FB60     		str	r3, [r7, #12]
 698:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->TCCLR = PWMSP001_SLICE_CLEAR;
 1259              		.loc 1 698 0
 1260 0026 7B68     		ldr	r3, [r7, #4]
 1261 0028 9B69     		ldr	r3, [r3, #24]
 1262 002a 4FF00702 		mov	r2, #7
 1263 002e 1A61     		str	r2, [r3, #16]
 699:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)0x01 << Temp1 ) | Temp2 );
 1264              		.loc 1 699 0
 1265 0030 7B68     		ldr	r3, [r7, #4]
 1266 0032 5B69     		ldr	r3, [r3, #20]
 1267 0034 7A68     		ldr	r2, [r7, #4]
 1268 0036 5269     		ldr	r2, [r2, #20]
 1269 0038 9168     		ldr	r1, [r2, #8]
 1270 003a 3A69     		ldr	r2, [r7, #16]
 1271 003c 4FF00100 		mov	r0, #1
 1272 0040 00FA02F0 		lsl	r0, r0, r2
 1273 0044 FA68     		ldr	r2, [r7, #12]
 1274 0046 0243     		orrs	r2, r2, r0
 1275 0048 0A43     		orrs	r2, r2, r1
 1276 004a 9A60     		str	r2, [r3, #8]
 700:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 701:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 1277              		.loc 1 701 0
 1278 004c 7B68     		ldr	r3, [r7, #4]
 1279 004e 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1280 0052 012B     		cmp	r3, #1
 1281 0054 19D1     		bne	.L37
 702:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 703:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->TCCLR = PWMSP001_SLICE_CLEAR;
 1282              		.loc 1 703 0
 1283 0056 7B68     		ldr	r3, [r7, #4]
 1284 0058 DB69     		ldr	r3, [r3, #28]
 1285 005a 4FF00702 		mov	r2, #7
 1286 005e 1A61     		str	r2, [r3, #16]
 704:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp1 = ((uint32_t)CCU4_GIDLS_SS0I_Pos + (uint32_t)HandlePtr->SecondSlice);
 1287              		.loc 1 704 0
 1288 0060 7B68     		ldr	r3, [r7, #4]
 1289 0062 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 1290 0066 3B61     		str	r3, [r7, #16]
 705:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp2 = ((uint32_t)0x01 << CCU4_GIDLS_PSIC_Pos);
 1291              		.loc 1 705 0
 1292 0068 4FF40073 		mov	r3, #512
 1293 006c FB60     		str	r3, [r7, #12]
 706:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)0x01 << Temp1) | Temp2 );
 1294              		.loc 1 706 0
 1295 006e 7B68     		ldr	r3, [r7, #4]
 1296 0070 5B69     		ldr	r3, [r3, #20]
 1297 0072 7A68     		ldr	r2, [r7, #4]
 1298 0074 5269     		ldr	r2, [r2, #20]
 1299 0076 9168     		ldr	r1, [r2, #8]
 1300 0078 3A69     		ldr	r2, [r7, #16]
 1301 007a 4FF00100 		mov	r0, #1
 1302 007e 00FA02F0 		lsl	r0, r0, r2
 1303 0082 FA68     		ldr	r2, [r7, #12]
 1304 0084 0243     		orrs	r2, r2, r0
 1305 0086 0A43     		orrs	r2, r2, r1
 1306 0088 9A60     		str	r2, [r3, #8]
 1307              	.L37:
 707:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }/*End of  if (HandlePtr->kTimerConcatenation == (uint8_t)SET)*/
 708:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 709:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->DynamicDataType->StateType = PWMSP001_STOPPED;
 1308              		.loc 1 709 0
 1309 008a 7B68     		ldr	r3, [r7, #4]
 1310 008c DB6B     		ldr	r3, [r3, #60]
 1311 008e 4FF00302 		mov	r2, #3
 1312 0092 1A70     		strb	r2, [r3, #0]
 710:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1313              		.loc 1 710 0
 1314 0094 4FF00003 		mov	r3, #0
 1315 0098 7B61     		str	r3, [r7, #20]
 1316 009a 00E0     		b	.L36
 1317              	.L39:
 692:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 1318              		.loc 1 692 0
 1319 009c 00BF     		nop
 1320              	.L36:
 711:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 712:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   } while (0);
 713:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 714:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (Status != (uint32_t)DAVEApp_SUCCESS)
 715:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 716:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
 717:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 718:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 1321              		.loc 1 718 0
 1322 009e 7B69     		ldr	r3, [r7, #20]
 719:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1323              		.loc 1 719 0
 1324 00a0 1846     		mov	r0, r3
 1325 00a2 07F11C07 		add	r7, r7, #28
 1326 00a6 BD46     		mov	sp, r7
 1327 00a8 80BC     		pop	{r7}
 1328 00aa 7047     		bx	lr
 1329              		.cfi_endproc
 1330              	.LFE139:
 1332              		.section	.text.PWMSP001_SetCompare,"ax",%progbits
 1333              		.align	2
 1334              		.global	PWMSP001_SetCompare
 1335              		.thumb
 1336              		.thumb_func
 1338              	PWMSP001_SetCompare:
 1339              	.LFB140:
 720:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 721:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_5>>>*/
 722:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function changes the duty cycle of the PWM by changing the compare register value. */
 723:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetCompare
 724:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 725:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 726:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 727:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 728:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1340              		.loc 1 728 0
 1341              		.cfi_startproc
 1342              		@ args = 0, pretend = 0, frame = 16
 1343              		@ frame_needed = 1, uses_anonymous_args = 0
 1344 0000 80B5     		push	{r7, lr}
 1345              	.LCFI15:
 1346              		.cfi_def_cfa_offset 8
 1347              		.cfi_offset 7, -8
 1348              		.cfi_offset 14, -4
 1349 0002 84B0     		sub	sp, sp, #16
 1350              	.LCFI16:
 1351              		.cfi_def_cfa_offset 24
 1352 0004 00AF     		add	r7, sp, #0
 1353              	.LCFI17:
 1354              		.cfi_def_cfa_register 7
 1355 0006 7860     		str	r0, [r7, #4]
 1356 0008 3960     		str	r1, [r7, #0]
 729:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 1357              		.loc 1 729 0
 1358 000a 4FF00103 		mov	r3, #1
 1359 000e FB60     		str	r3, [r7, #12]
 730:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t period;
 731:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 732:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 1360              		.loc 1 732 0
 1361 0010 7B68     		ldr	r3, [r7, #4]
 1362 0012 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1363 0016 012B     		cmp	r3, #1
 1364 0018 0AD1     		bne	.L41
 733:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  period=(uint32_t)(((uint32_t)HandlePtr->CC4yRegs1Ptr->PRS<<16U)|(uint32_t)HandlePtr->CC4yRegsPtr
 1365              		.loc 1 733 0
 1366 001a 7B68     		ldr	r3, [r7, #4]
 1367 001c DB69     		ldr	r3, [r3, #28]
 1368 001e 5B6B     		ldr	r3, [r3, #52]
 1369 0020 4FEA0342 		lsl	r2, r3, #16
 1370 0024 7B68     		ldr	r3, [r7, #4]
 1371 0026 9B69     		ldr	r3, [r3, #24]
 1372 0028 5B6B     		ldr	r3, [r3, #52]
 1373 002a 1343     		orrs	r3, r3, r2
 1374 002c BB60     		str	r3, [r7, #8]
 1375 002e 03E0     		b	.L42
 1376              	.L41:
 734:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
 735:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  period=(uint32_t)HandlePtr->CC4yRegsPtr->PRS;
 1377              		.loc 1 735 0
 1378 0030 7B68     		ldr	r3, [r7, #4]
 1379 0032 9B69     		ldr	r3, [r3, #24]
 1380 0034 5B6B     		ldr	r3, [r3, #52]
 1381 0036 BB60     		str	r3, [r7, #8]
 1382              	.L42:
 736:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 737:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_5_1>>>*/
 738:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ( HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
 1383              		.loc 1 738 0
 1384 0038 7B68     		ldr	r3, [r7, #4]
 1385 003a DB6B     		ldr	r3, [r3, #60]
 1386 003c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1387 003e 002B     		cmp	r3, #0
 1388 0040 1DD0     		beq	.L43
 739:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 740:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
 1389              		.loc 1 740 0
 1390 0042 7B68     		ldr	r3, [r7, #4]
 1391 0044 DA6A     		ldr	r2, [r3, #44]
 1392 0046 3B68     		ldr	r3, [r7, #0]
 1393 0048 9A42     		cmp	r2, r3
 1394 004a 08D2     		bcs	.L44
 741:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         (HandlePtr->kTimerConcatenation == (uint8_t)RESET))
 1395              		.loc 1 741 0 discriminator 1
 1396 004c 7B68     		ldr	r3, [r7, #4]
 1397 004e 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 740:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
 1398              		.loc 1 740 0 discriminator 1
 1399 0052 002B     		cmp	r3, #0
 1400 0054 03D1     		bne	.L44
 742:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 743:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 1401              		.loc 1 743 0
 1402 0056 4FF00203 		mov	r3, #2
 1403 005a FB60     		str	r3, [r7, #12]
 1404 005c 0FE0     		b	.L43
 1405              	.L44:
 744:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 745:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 746:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 747:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*if compare value is greater or equal to the period value, output should be with 0% dutycycl
 748:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  Since setting exact period value will create the spikes,we are adding 1 and setting to the regis
 749:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  if (Compare >= (uint32_t)period)
 1406              		.loc 1 749 0
 1407 005e 3A68     		ldr	r2, [r7, #0]
 1408 0060 BB68     		ldr	r3, [r7, #8]
 1409 0062 9A42     		cmp	r2, r3
 1410 0064 03D3     		bcc	.L45
 750:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  {
 751:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  Compare = (uint32_t)period + 1U;
 1411              		.loc 1 751 0
 1412 0066 BB68     		ldr	r3, [r7, #8]
 1413 0068 03F10103 		add	r3, r3, #1
 1414 006c 3B60     		str	r3, [r7, #0]
 1415              	.L45:
 752:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  }
 753:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /* Call function as per the configured mode */
 754:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->SetCompareFuncPtr((const void*)HandlePtr, Compare);
 1416              		.loc 1 754 0
 1417 006e 7B68     		ldr	r3, [r7, #4]
 1418 0070 1B6C     		ldr	r3, [r3, #64]
 1419 0072 7868     		ldr	r0, [r7, #4]
 1420 0074 3968     		ldr	r1, [r7, #0]
 1421 0076 9847     		blx	r3
 755:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1422              		.loc 1 755 0
 1423 0078 4FF00003 		mov	r3, #0
 1424 007c FB60     		str	r3, [r7, #12]
 1425              	.L43:
 756:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 757:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 758:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 1426              		.loc 1 758 0
 1427 007e FB68     		ldr	r3, [r7, #12]
 759:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1428              		.loc 1 759 0
 1429 0080 1846     		mov	r0, r3
 1430 0082 07F11007 		add	r7, r7, #16
 1431 0086 BD46     		mov	sp, r7
 1432 0088 80BD     		pop	{r7, pc}
 1433              		.cfi_endproc
 1434              	.LFE140:
 1436 008a 00BF     		.section	.text.PWMSP001_lSetCompareEdgeAlign,"ax",%progbits
 1437              		.align	2
 1438              		.global	PWMSP001_lSetCompareEdgeAlign
 1439              		.thumb
 1440              		.thumb_func
 1442              	PWMSP001_lSetCompareEdgeAlign:
 1443              	.LFB141:
 760:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 761:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 762:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the compare register value 
 763:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in edge-aligned mode.
 764:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 765:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareEdgeAlign
 766:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 767:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 768:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 769:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 770:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1444              		.loc 1 770 0
 1445              		.cfi_startproc
 1446              		@ args = 0, pretend = 0, frame = 24
 1447              		@ frame_needed = 1, uses_anonymous_args = 0
 1448              		@ link register save eliminated.
 1449 0000 80B4     		push	{r7}
 1450              	.LCFI18:
 1451              		.cfi_def_cfa_offset 4
 1452              		.cfi_offset 7, -4
 1453 0002 87B0     		sub	sp, sp, #28
 1454              	.LCFI19:
 1455              		.cfi_def_cfa_offset 32
 1456 0004 00AF     		add	r7, sp, #0
 1457              	.LCFI20:
 1458              		.cfi_def_cfa_register 7
 1459 0006 7860     		str	r0, [r7, #4]
 1460 0008 3960     		str	r1, [r7, #0]
 771:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 772:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
 773:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1461              		.loc 1 773 0
 1462 000a 7B68     		ldr	r3, [r7, #4]
 1463 000c 7B61     		str	r3, [r7, #20]
 774:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (Compare & 0xFFFFU);
 1464              		.loc 1 774 0
 1465 000e 7B69     		ldr	r3, [r7, #20]
 1466 0010 9A69     		ldr	r2, [r3, #24]
 1467 0012 3B68     		ldr	r3, [r7, #0]
 1468 0014 4FEA0343 		lsl	r3, r3, #16
 1469 0018 4FEA1343 		lsr	r3, r3, #16
 1470 001c D363     		str	r3, [r2, #60]
 775:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 776:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Request shadow transfer */
 777:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp2 = (4U*(uint32_t)HandlePtr->FirstSlice);
 1471              		.loc 1 777 0
 1472 001e 7B69     		ldr	r3, [r7, #20]
 1473 0020 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 1474 0024 4FEA8303 		lsl	r3, r3, #2
 1475 0028 3B61     		str	r3, [r7, #16]
 778:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + Temp2;
 1476              		.loc 1 778 0
 1477 002a 3B69     		ldr	r3, [r7, #16]
 1478 002c FB60     		str	r3, [r7, #12]
 779:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1);
 1479              		.loc 1 779 0
 1480 002e 7B69     		ldr	r3, [r7, #20]
 1481 0030 5B69     		ldr	r3, [r3, #20]
 1482 0032 7A69     		ldr	r2, [r7, #20]
 1483 0034 5269     		ldr	r2, [r2, #20]
 1484 0036 1169     		ldr	r1, [r2, #16]
 1485 0038 FA68     		ldr	r2, [r7, #12]
 1486 003a 4FF00100 		mov	r0, #1
 1487 003e 00FA02F2 		lsl	r2, r0, r2
 1488 0042 0A43     		orrs	r2, r2, r1
 1489 0044 1A61     		str	r2, [r3, #16]
 780:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1490              		.loc 1 780 0
 1491 0046 07F11C07 		add	r7, r7, #28
 1492 004a BD46     		mov	sp, r7
 1493 004c 80BC     		pop	{r7}
 1494 004e 7047     		bx	lr
 1495              		.cfi_endproc
 1496              	.LFE141:
 1498              		.section	.text.PWMSP001_lSetCompareEdgeAlignTimerConcat,"ax",%progbits
 1499              		.align	2
 1500              		.global	PWMSP001_lSetCompareEdgeAlignTimerConcat
 1501              		.thumb
 1502              		.thumb_func
 1504              	PWMSP001_lSetCompareEdgeAlignTimerConcat:
 1505              	.LFB142:
 781:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 782:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 783:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the compare register value 
 784:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in edge-aligned timer concatenation mode.
 785:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 786:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareEdgeAlignTimerConcat
 787:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 788:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 789:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 790:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 791:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1506              		.loc 1 791 0
 1507              		.cfi_startproc
 1508              		@ args = 0, pretend = 0, frame = 32
 1509              		@ frame_needed = 1, uses_anonymous_args = 0
 1510              		@ link register save eliminated.
 1511 0000 90B4     		push	{r4, r7}
 1512              	.LCFI21:
 1513              		.cfi_def_cfa_offset 8
 1514              		.cfi_offset 4, -8
 1515              		.cfi_offset 7, -4
 1516 0002 88B0     		sub	sp, sp, #32
 1517              	.LCFI22:
 1518              		.cfi_def_cfa_offset 40
 1519 0004 00AF     		add	r7, sp, #0
 1520              	.LCFI23:
 1521              		.cfi_def_cfa_register 7
 1522 0006 7860     		str	r0, [r7, #4]
 1523 0008 3960     		str	r1, [r7, #0]
 792:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t FirstSliceCompareVal = 0x00U;
 1524              		.loc 1 792 0
 1525 000a 4FF00003 		mov	r3, #0
 1526 000e FB61     		str	r3, [r7, #28]
 793:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t SecondSliceCompareVal = 0x00U;
 1527              		.loc 1 793 0
 1528 0010 4FF00003 		mov	r3, #0
 1529 0014 BB61     		str	r3, [r7, #24]
 794:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 795:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
 796:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1530              		.loc 1 796 0
 1531 0016 7B68     		ldr	r3, [r7, #4]
 1532 0018 7B61     		str	r3, [r7, #20]
 797:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /**
 798:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * In case of timer concatenation, compare register value is divided by
 799:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * period register value of the first slice. Remainder is written in
 800:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * compare register of first slice and quotient is written in compare
 801:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * register of second slice.
 802:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * This is done to achieve compare register value of first slice
 803:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * to be less than period register value.
 804:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    */
 805:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal = (uint32_t)Compare % \
 806:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint16_t)HandlePtr->CC4yRegsPtr->PRS;
 1533              		.loc 1 806 0
 1534 001a 7B69     		ldr	r3, [r7, #20]
 1535 001c 9B69     		ldr	r3, [r3, #24]
 1536 001e 5B6B     		ldr	r3, [r3, #52]
 1537 0020 9BB2     		uxth	r3, r3
 805:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal = (uint32_t)Compare % \
 1538              		.loc 1 805 0
 1539 0022 1A46     		mov	r2, r3
 1540 0024 3B68     		ldr	r3, [r7, #0]
 1541 0026 B3FBF2F1 		udiv	r1, r3, r2
 1542 002a 02FB01F2 		mul	r2, r2, r1
 1543 002e 9B1A     		subs	r3, r3, r2
 1544 0030 FB61     		str	r3, [r7, #28]
 807:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   SecondSliceCompareVal = (uint32_t)Compare /
 808:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint16_t)HandlePtr->CC4yRegsPtr->PRS;
 1545              		.loc 1 808 0
 1546 0032 7B69     		ldr	r3, [r7, #20]
 1547 0034 9B69     		ldr	r3, [r3, #24]
 1548 0036 5B6B     		ldr	r3, [r3, #52]
 1549 0038 9BB2     		uxth	r3, r3
 807:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   SecondSliceCompareVal = (uint32_t)Compare /
 1550              		.loc 1 807 0
 1551 003a 3A68     		ldr	r2, [r7, #0]
 1552 003c B2FBF3F3 		udiv	r3, r2, r3
 1553 0040 BB61     		str	r3, [r7, #24]
 809:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 810:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (FirstSliceCompareVal & 0xFFFFU);
 1554              		.loc 1 810 0
 1555 0042 7B69     		ldr	r3, [r7, #20]
 1556 0044 9A69     		ldr	r2, [r3, #24]
 1557 0046 FB69     		ldr	r3, [r7, #28]
 1558 0048 4FEA0343 		lsl	r3, r3, #16
 1559 004c 4FEA1343 		lsr	r3, r3, #16
 1560 0050 D363     		str	r3, [r2, #60]
 811:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->CRS = (SecondSliceCompareVal & 0xFFFFU);
 1561              		.loc 1 811 0
 1562 0052 7B69     		ldr	r3, [r7, #20]
 1563 0054 DA69     		ldr	r2, [r3, #28]
 1564 0056 BB69     		ldr	r3, [r7, #24]
 1565 0058 4FEA0343 		lsl	r3, r3, #16
 1566 005c 4FEA1343 		lsr	r3, r3, #16
 1567 0060 D363     		str	r3, [r2, #60]
 812:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Request shadow transfer */
 813:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice));
 1568              		.loc 1 813 0
 1569 0062 7B69     		ldr	r3, [r7, #20]
 1570 0064 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 1571 0068 4FEA8303 		lsl	r3, r3, #2
 1572 006c 3B61     		str	r3, [r7, #16]
 814:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp2 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice));
 1573              		.loc 1 814 0
 1574 006e 7B69     		ldr	r3, [r7, #20]
 1575 0070 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 1576 0074 4FEA8303 		lsl	r3, r3, #2
 1577 0078 FB60     		str	r3, [r7, #12]
 815:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 << Temp2 ) | ((uint32_t)0x01 << Te
 1578              		.loc 1 815 0
 1579 007a 7B69     		ldr	r3, [r7, #20]
 1580 007c 5B69     		ldr	r3, [r3, #20]
 1581 007e 7A69     		ldr	r2, [r7, #20]
 1582 0080 5269     		ldr	r2, [r2, #20]
 1583 0082 1169     		ldr	r1, [r2, #16]
 1584 0084 FA68     		ldr	r2, [r7, #12]
 1585 0086 4FF00100 		mov	r0, #1
 1586 008a 00FA02F0 		lsl	r0, r0, r2
 1587 008e 3A69     		ldr	r2, [r7, #16]
 1588 0090 4FF00104 		mov	r4, #1
 1589 0094 04FA02F2 		lsl	r2, r4, r2
 1590 0098 0243     		orrs	r2, r2, r0
 1591 009a 0A43     		orrs	r2, r2, r1
 1592 009c 1A61     		str	r2, [r3, #16]
 816:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1593              		.loc 1 816 0
 1594 009e 07F12007 		add	r7, r7, #32
 1595 00a2 BD46     		mov	sp, r7
 1596 00a4 90BC     		pop	{r4, r7}
 1597 00a6 7047     		bx	lr
 1598              		.cfi_endproc
 1599              	.LFE142:
 1601              		.section	.text.PWMSP001_lSetCompareCenterAlign,"ax",%progbits
 1602              		.align	2
 1603              		.global	PWMSP001_lSetCompareCenterAlign
 1604              		.thumb
 1605              		.thumb_func
 1607              	PWMSP001_lSetCompareCenterAlign:
 1608              	.LFB143:
 817:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 818:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 819:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the compare register value 
 820:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in center-aligned mode.
 821:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 822:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareCenterAlign
 823:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 824:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 825:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 826:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 827:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1609              		.loc 1 827 0
 1610              		.cfi_startproc
 1611              		@ args = 0, pretend = 0, frame = 16
 1612              		@ frame_needed = 1, uses_anonymous_args = 0
 1613              		@ link register save eliminated.
 1614 0000 80B4     		push	{r7}
 1615              	.LCFI24:
 1616              		.cfi_def_cfa_offset 4
 1617              		.cfi_offset 7, -4
 1618 0002 85B0     		sub	sp, sp, #20
 1619              	.LCFI25:
 1620              		.cfi_def_cfa_offset 24
 1621 0004 00AF     		add	r7, sp, #0
 1622              	.LCFI26:
 1623              		.cfi_def_cfa_register 7
 1624 0006 7860     		str	r0, [r7, #4]
 1625 0008 3960     		str	r1, [r7, #0]
 828:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 829:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_5_3>>>*/
 830:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1626              		.loc 1 830 0
 1627 000a 7B68     		ldr	r3, [r7, #4]
 1628 000c FB60     		str	r3, [r7, #12]
 831:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (Compare & 0xFFFFU);
 1629              		.loc 1 831 0
 1630 000e FB68     		ldr	r3, [r7, #12]
 1631 0010 9A69     		ldr	r2, [r3, #24]
 1632 0012 3B68     		ldr	r3, [r7, #0]
 1633 0014 4FEA0343 		lsl	r3, r3, #16
 1634 0018 4FEA1343 		lsr	r3, r3, #16
 1635 001c D363     		str	r3, [r2, #60]
 832:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 833:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Request shadow transfer */
 834:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U*(uint32_t)HandlePtr->FirstSlice));
 1636              		.loc 1 834 0
 1637 001e FB68     		ldr	r3, [r7, #12]
 1638 0020 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 1639 0024 4FEA8303 		lsl	r3, r3, #2
 1640 0028 BB60     		str	r3, [r7, #8]
 835:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1);
 1641              		.loc 1 835 0
 1642 002a FB68     		ldr	r3, [r7, #12]
 1643 002c 5B69     		ldr	r3, [r3, #20]
 1644 002e FA68     		ldr	r2, [r7, #12]
 1645 0030 5269     		ldr	r2, [r2, #20]
 1646 0032 1169     		ldr	r1, [r2, #16]
 1647 0034 BA68     		ldr	r2, [r7, #8]
 1648 0036 4FF00100 		mov	r0, #1
 1649 003a 00FA02F2 		lsl	r2, r0, r2
 1650 003e 0A43     		orrs	r2, r2, r1
 1651 0040 1A61     		str	r2, [r3, #16]
 836:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1652              		.loc 1 836 0
 1653 0042 07F11407 		add	r7, r7, #20
 1654 0046 BD46     		mov	sp, r7
 1655 0048 80BC     		pop	{r7}
 1656 004a 7047     		bx	lr
 1657              		.cfi_endproc
 1658              	.LFE143:
 1660              		.section	.text.PWMSP001_SetDutyCycle,"ax",%progbits
 1661              		.align	2
 1662              		.global	PWMSP001_SetDutyCycle
 1663              		.thumb
 1664              		.thumb_func
 1666              	PWMSP001_SetDutyCycle:
 1667              	.LFB144:
 837:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 838:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 839:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 840:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the duty cycle of the PWM waveform
 841:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 842:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_15>>>*/
 843:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetDutyCycle
 844:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 845:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 846:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 847:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 848:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1668              		.loc 1 848 0
 1669              		.cfi_startproc
 1670              		@ args = 0, pretend = 0, frame = 16
 1671              		@ frame_needed = 1, uses_anonymous_args = 0
 1672 0000 80B5     		push	{r7, lr}
 1673              	.LCFI27:
 1674              		.cfi_def_cfa_offset 8
 1675              		.cfi_offset 7, -8
 1676              		.cfi_offset 14, -4
 1677 0002 84B0     		sub	sp, sp, #16
 1678              	.LCFI28:
 1679              		.cfi_def_cfa_offset 24
 1680 0004 00AF     		add	r7, sp, #0
 1681              	.LCFI29:
 1682              		.cfi_def_cfa_register 7
 1683 0006 7860     		str	r0, [r7, #4]
 1684 0008 3960     		str	r1, [r7, #0]	@ float
 849:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 1685              		.loc 1 849 0
 1686 000a 4FF00103 		mov	r3, #1
 1687 000e FB60     		str	r3, [r7, #12]
 850:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 851:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ( HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
 1688              		.loc 1 851 0
 1689 0010 7B68     		ldr	r3, [r7, #4]
 1690 0012 DB6B     		ldr	r3, [r3, #60]
 1691 0014 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1692 0016 002B     		cmp	r3, #0
 1693 0018 1BD0     		beq	.L51
 852:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 853:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if((Duty > (float)100) || ((float)Duty < (float)0))
 1694              		.loc 1 853 0
 1695 001a 97ED007A 		flds	s14, [r7, #0]
 1696 001e DFED107A 		flds	s15, .L57
 1697 0022 B4EEE77A 		fcmpes	s14, s15
 1698 0026 F1EE10FA 		fmstat
 1699 002a 06DC     		bgt	.L52
 1700              		.loc 1 853 0 is_stmt 0 discriminator 1
 1701 002c D7ED007A 		flds	s15, [r7, #0]
 1702 0030 F5EEC07A 		fcmpezs	s15
 1703 0034 F1EE10FA 		fmstat
 1704 0038 03D5     		bpl	.L56
 1705              	.L52:
 854:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 855:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 1706              		.loc 1 855 0 is_stmt 1
 1707 003a 4FF00203 		mov	r3, #2
 1708 003e FB60     		str	r3, [r7, #12]
 1709 0040 07E0     		b	.L51
 1710              	.L56:
 856:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 857:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
 858:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 859:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /* Call the function as per configured mode */
 860:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->SetDutyFuncPtr((const void*)HandlePtr, Duty);
 1711              		.loc 1 860 0
 1712 0042 7B68     		ldr	r3, [r7, #4]
 1713 0044 5B6C     		ldr	r3, [r3, #68]
 1714 0046 7868     		ldr	r0, [r7, #4]
 1715 0048 3968     		ldr	r1, [r7, #0]	@ float
 1716 004a 9847     		blx	r3
 861:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1717              		.loc 1 861 0
 1718 004c 4FF00003 		mov	r3, #0
 1719 0050 FB60     		str	r3, [r7, #12]
 1720              	.L51:
 862:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 863:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 864:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 1721              		.loc 1 864 0
 1722 0052 FB68     		ldr	r3, [r7, #12]
 865:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1723              		.loc 1 865 0
 1724 0054 1846     		mov	r0, r3
 1725 0056 07F11007 		add	r7, r7, #16
 1726 005a BD46     		mov	sp, r7
 1727 005c 80BD     		pop	{r7, pc}
 1728              	.L58:
 1729 005e 00BF     		.align	2
 1730              	.L57:
 1731 0060 0000C842 		.word	1120403456
 1732              		.cfi_endproc
 1733              	.LFE144:
 1735              		.section	.text.PWMSP001_lSetDutyEdgeAlign,"ax",%progbits
 1736              		.align	2
 1737              		.global	PWMSP001_lSetDutyEdgeAlign
 1738              		.thumb
 1739              		.thumb_func
 1741              	PWMSP001_lSetDutyEdgeAlign:
 1742              	.LFB145:
 866:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 867:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 868:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the duty cycle of the PWM waveform
 869:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in edge-aligned mode
 870:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 871:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyEdgeAlign
 872:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 873:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 874:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 875:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 876:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1743              		.loc 1 876 0
 1744              		.cfi_startproc
 1745              		@ args = 0, pretend = 0, frame = 32
 1746              		@ frame_needed = 1, uses_anonymous_args = 0
 1747              		@ link register save eliminated.
 1748 0000 80B4     		push	{r7}
 1749              	.LCFI30:
 1750              		.cfi_def_cfa_offset 4
 1751              		.cfi_offset 7, -4
 1752 0002 89B0     		sub	sp, sp, #36
 1753              	.LCFI31:
 1754              		.cfi_def_cfa_offset 40
 1755 0004 00AF     		add	r7, sp, #0
 1756              	.LCFI32:
 1757              		.cfi_def_cfa_register 7
 1758 0006 7860     		str	r0, [r7, #4]
 1759 0008 3960     		str	r1, [r7, #0]	@ float
 877:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t FirstSliceCompareVal = (uint32_t)0;
 1760              		.loc 1 877 0
 1761 000a 4FF00003 		mov	r3, #0
 1762 000e FB61     		str	r3, [r7, #28]
 878:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 879:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   float fDuty, fPRS ;
 880:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1763              		.loc 1 880 0
 1764 0010 7B68     		ldr	r3, [r7, #4]
 1765 0012 BB61     		str	r3, [r7, #24]
 881:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = Duty;
 1766              		.loc 1 881 0
 1767 0014 3B68     		ldr	r3, [r7, #0]	@ float
 1768 0016 7B61     		str	r3, [r7, #20]	@ float
 882:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 883:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_15_3>>>*/
 884:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 885:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = (float)((float)100.00 - (float)fDuty)/(float)100.00;
 1769              		.loc 1 885 0
 1770 0018 9FED1F7A 		flds	s14, .L60
 1771 001c D7ED057A 		flds	s15, [r7, #20]
 1772 0020 37EE677A 		fsubs	s14, s14, s15
 1773 0024 DFED1C7A 		flds	s15, .L60
 1774 0028 C7EE277A 		fdivs	s15, s14, s15
 1775 002c C7ED057A 		fsts	s15, [r7, #20]
 886:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fPRS = (float)((uint32_t)HandlePtr->CC4yRegsPtr->PRS + 1U);
 1776              		.loc 1 886 0
 1777 0030 BB69     		ldr	r3, [r7, #24]
 1778 0032 9B69     		ldr	r3, [r3, #24]
 1779 0034 5B6B     		ldr	r3, [r3, #52]
 1780 0036 03F10103 		add	r3, r3, #1
 1781 003a 07EE103A 		fmsr	s14, r3	@ int
 1782 003e F8EE477A 		fuitos	s15, s14
 1783 0042 C7ED047A 		fsts	s15, [r7, #16]
 887:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal = (uint32_t)( fPRS * fDuty);
 1784              		.loc 1 887 0
 1785 0046 97ED047A 		flds	s14, [r7, #16]
 1786 004a D7ED057A 		flds	s15, [r7, #20]
 1787 004e 67EE277A 		fmuls	s15, s14, s15
 1788 0052 FCEEE77A 		ftouizs	s15, s15
 1789 0056 C7ED077A 		fsts	s15, [r7, #28]	@ int
 888:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = FirstSliceCompareVal  & 0xFFFFU;
 1790              		.loc 1 888 0
 1791 005a BB69     		ldr	r3, [r7, #24]
 1792 005c 9A69     		ldr	r2, [r3, #24]
 1793 005e FB69     		ldr	r3, [r7, #28]
 1794 0060 4FEA0343 		lsl	r3, r3, #16
 1795 0064 4FEA1343 		lsr	r3, r3, #16
 1796 0068 D363     		str	r3, [r2, #60]
 889:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 890:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*Shadow transfer */
 891:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 =  ((uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4 *(uint32_t)HandlePtr->FirstSlice));
 1797              		.loc 1 891 0
 1798 006a BB69     		ldr	r3, [r7, #24]
 1799 006c 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 1800 0070 4FEA8303 		lsl	r3, r3, #2
 1801 0074 FB60     		str	r3, [r7, #12]
 892:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)((uint32_t)0x01 << (uint32_t)Temp1);
 1802              		.loc 1 892 0
 1803 0076 BB69     		ldr	r3, [r7, #24]
 1804 0078 5B69     		ldr	r3, [r3, #20]
 1805 007a BA69     		ldr	r2, [r7, #24]
 1806 007c 5269     		ldr	r2, [r2, #20]
 1807 007e 1169     		ldr	r1, [r2, #16]
 1808 0080 FA68     		ldr	r2, [r7, #12]
 1809 0082 4FF00100 		mov	r0, #1
 1810 0086 00FA02F2 		lsl	r2, r0, r2
 1811 008a 0A43     		orrs	r2, r2, r1
 1812 008c 1A61     		str	r2, [r3, #16]
 893:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*Update dynamic handle */
 894:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1813              		.loc 1 894 0
 1814 008e 07F12407 		add	r7, r7, #36
 1815 0092 BD46     		mov	sp, r7
 1816 0094 80BC     		pop	{r7}
 1817 0096 7047     		bx	lr
 1818              	.L61:
 1819              		.align	2
 1820              	.L60:
 1821 0098 0000C842 		.word	1120403456
 1822              		.cfi_endproc
 1823              	.LFE145:
 1825              		.section	.text.PWMSP001_lSetDutyEdgeAlignTimerConcat,"ax",%progbits
 1826              		.align	2
 1827              		.global	PWMSP001_lSetDutyEdgeAlignTimerConcat
 1828              		.thumb
 1829              		.thumb_func
 1831              	PWMSP001_lSetDutyEdgeAlignTimerConcat:
 1832              	.LFB146:
 895:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 896:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 897:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the duty cycle of the PWM waveform
 898:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in edge-aligned timer concatenation mode
 899:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 900:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyEdgeAlignTimerConcat
 901:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 902:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 903:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 904:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 905:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1833              		.loc 1 905 0
 1834              		.cfi_startproc
 1835              		@ args = 0, pretend = 0, frame = 40
 1836              		@ frame_needed = 1, uses_anonymous_args = 0
 1837              		@ link register save eliminated.
 1838 0000 90B4     		push	{r4, r7}
 1839              	.LCFI33:
 1840              		.cfi_def_cfa_offset 8
 1841              		.cfi_offset 4, -8
 1842              		.cfi_offset 7, -4
 1843 0002 8AB0     		sub	sp, sp, #40
 1844              	.LCFI34:
 1845              		.cfi_def_cfa_offset 48
 1846 0004 00AF     		add	r7, sp, #0
 1847              	.LCFI35:
 1848              		.cfi_def_cfa_register 7
 1849 0006 7860     		str	r0, [r7, #4]
 1850 0008 3960     		str	r1, [r7, #0]	@ float
 906:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Compare = (uint32_t)0;
 1851              		.loc 1 906 0
 1852 000a 4FF00003 		mov	r3, #0
 1853 000e 7B62     		str	r3, [r7, #36]
 907:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t FirstSliceCompareVal = (uint32_t)0;
 1854              		.loc 1 907 0
 1855 0010 4FF00003 		mov	r3, #0
 1856 0014 3B62     		str	r3, [r7, #32]
 908:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t SecondSliceCompareVal = (uint32_t)0;
 1857              		.loc 1 908 0
 1858 0016 4FF00003 		mov	r3, #0
 1859 001a FB61     		str	r3, [r7, #28]
 909:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
 910:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp3;
 911:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   float fDuty, fPRS ;
 912:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1860              		.loc 1 912 0
 1861 001c 7B68     		ldr	r3, [r7, #4]
 1862 001e BB61     		str	r3, [r7, #24]
 913:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 914:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = Duty;
 1863              		.loc 1 914 0
 1864 0020 3B68     		ldr	r3, [r7, #0]	@ float
 1865 0022 7B61     		str	r3, [r7, #20]	@ float
 915:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_15_4>>>*/
 916:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Find the compare register value from the duty cycle and period register value */
 917:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Compare =(uint32_t)HandlePtr->CC4yRegs1Ptr->PRS + 1U;
 1866              		.loc 1 917 0
 1867 0024 BB69     		ldr	r3, [r7, #24]
 1868 0026 DB69     		ldr	r3, [r3, #28]
 1869 0028 5B6B     		ldr	r3, [r3, #52]
 1870 002a 03F10103 		add	r3, r3, #1
 1871 002e 7B62     		str	r3, [r7, #36]
 918:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Compare *= ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU) +1U); 
 1872              		.loc 1 918 0
 1873 0030 BB69     		ldr	r3, [r7, #24]
 1874 0032 9B69     		ldr	r3, [r3, #24]
 1875 0034 5B6B     		ldr	r3, [r3, #52]
 1876 0036 4FEA0343 		lsl	r3, r3, #16
 1877 003a 4FEA1343 		lsr	r3, r3, #16
 1878 003e 03F10102 		add	r2, r3, #1
 1879 0042 7B6A     		ldr	r3, [r7, #36]
 1880 0044 02FB03F3 		mul	r3, r2, r3
 1881 0048 7B62     		str	r3, [r7, #36]
 919:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Compare +=  (uint32_t)1;
 1882              		.loc 1 919 0
 1883 004a 7B6A     		ldr	r3, [r7, #36]
 1884 004c 03F10103 		add	r3, r3, #1
 1885 0050 7B62     		str	r3, [r7, #36]
 920:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 921:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = ((float)100.00 - (float)fDuty)/(float)100.00;
 1886              		.loc 1 921 0
 1887 0052 9FED347A 		flds	s14, .L63
 1888 0056 D7ED057A 		flds	s15, [r7, #20]
 1889 005a 37EE677A 		fsubs	s14, s14, s15
 1890 005e DFED317A 		flds	s15, .L63
 1891 0062 C7EE277A 		fdivs	s15, s14, s15
 1892 0066 C7ED057A 		fsts	s15, [r7, #20]
 922:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fPRS = (float)(Compare);
 1893              		.loc 1 922 0
 1894 006a D7ED097A 		flds	s15, [r7, #36]	@ int
 1895 006e F8EE677A 		fuitos	s15, s15
 1896 0072 C7ED047A 		fsts	s15, [r7, #16]
 923:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Compare = (uint32_t)( fPRS * fDuty);
 1897              		.loc 1 923 0
 1898 0076 97ED047A 		flds	s14, [r7, #16]
 1899 007a D7ED057A 		flds	s15, [r7, #20]
 1900 007e 67EE277A 		fmuls	s15, s14, s15
 1901 0082 FCEEE77A 		ftouizs	s15, s15
 1902 0086 C7ED097A 		fsts	s15, [r7, #36]	@ int
 924:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 925:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal =(uint32_t)
 926:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                     ((uint32_t)Compare % ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFF
 1903              		.loc 1 926 0
 1904 008a BB69     		ldr	r3, [r7, #24]
 1905 008c 9B69     		ldr	r3, [r3, #24]
 1906 008e 5B6B     		ldr	r3, [r3, #52]
 1907 0090 4FEA0343 		lsl	r3, r3, #16
 1908 0094 4FEA1343 		lsr	r3, r3, #16
 925:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal =(uint32_t)
 1909              		.loc 1 925 0
 1910 0098 7A6A     		ldr	r2, [r7, #36]
 1911 009a B2FBF3F1 		udiv	r1, r2, r3
 1912 009e 03FB01F3 		mul	r3, r3, r1
 1913 00a2 D31A     		subs	r3, r2, r3
 1914 00a4 3B62     		str	r3, [r7, #32]
 927:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (uint32_t)FirstSliceCompareVal  & 0xFFFFU;
 1915              		.loc 1 927 0
 1916 00a6 BB69     		ldr	r3, [r7, #24]
 1917 00a8 9A69     		ldr	r2, [r3, #24]
 1918 00aa 3B6A     		ldr	r3, [r7, #32]
 1919 00ac 4FEA0343 		lsl	r3, r3, #16
 1920 00b0 4FEA1343 		lsr	r3, r3, #16
 1921 00b4 D363     		str	r3, [r2, #60]
 928:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   SecondSliceCompareVal = (uint32_t)
 929:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                     ((uint32_t)Compare / ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFF
 1922              		.loc 1 929 0
 1923 00b6 BB69     		ldr	r3, [r7, #24]
 1924 00b8 9B69     		ldr	r3, [r3, #24]
 1925 00ba 5B6B     		ldr	r3, [r3, #52]
 1926 00bc 4FEA0343 		lsl	r3, r3, #16
 1927 00c0 4FEA1343 		lsr	r3, r3, #16
 928:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   SecondSliceCompareVal = (uint32_t)
 1928              		.loc 1 928 0
 1929 00c4 7A6A     		ldr	r2, [r7, #36]
 1930 00c6 B2FBF3F3 		udiv	r3, r2, r3
 1931 00ca FB61     		str	r3, [r7, #28]
 930:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->CRS = (uint32_t)SecondSliceCompareVal  & 0xFFFFU;
 1932              		.loc 1 930 0
 1933 00cc BB69     		ldr	r3, [r7, #24]
 1934 00ce DA69     		ldr	r2, [r3, #28]
 1935 00d0 FB69     		ldr	r3, [r7, #28]
 1936 00d2 4FEA0343 		lsl	r3, r3, #16
 1937 00d6 4FEA1343 		lsr	r3, r3, #16
 1938 00da D363     		str	r3, [r2, #60]
 931:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 932:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /** shadow transfer */
 933:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp2 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice));
 1939              		.loc 1 933 0
 1940 00dc BB69     		ldr	r3, [r7, #24]
 1941 00de 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 1942 00e2 4FEA8303 		lsl	r3, r3, #2
 1943 00e6 FB60     		str	r3, [r7, #12]
 934:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp3 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice));
 1944              		.loc 1 934 0
 1945 00e8 BB69     		ldr	r3, [r7, #24]
 1946 00ea 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 1947 00ee 4FEA8303 		lsl	r3, r3, #2
 1948 00f2 BB60     		str	r3, [r7, #8]
 935:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)1 << (uint32_t)Temp2 ) | ((uint32_t)1 <
 1949              		.loc 1 935 0
 1950 00f4 BB69     		ldr	r3, [r7, #24]
 1951 00f6 5B69     		ldr	r3, [r3, #20]
 1952 00f8 BA69     		ldr	r2, [r7, #24]
 1953 00fa 5269     		ldr	r2, [r2, #20]
 1954 00fc 1169     		ldr	r1, [r2, #16]
 1955 00fe FA68     		ldr	r2, [r7, #12]
 1956 0100 4FF00100 		mov	r0, #1
 1957 0104 00FA02F0 		lsl	r0, r0, r2
 1958 0108 BA68     		ldr	r2, [r7, #8]
 1959 010a 4FF00104 		mov	r4, #1
 1960 010e 04FA02F2 		lsl	r2, r4, r2
 1961 0112 0243     		orrs	r2, r2, r0
 1962 0114 0A43     		orrs	r2, r2, r1
 1963 0116 1A61     		str	r2, [r3, #16]
 936:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1964              		.loc 1 936 0
 1965 0118 07F12807 		add	r7, r7, #40
 1966 011c BD46     		mov	sp, r7
 1967 011e 90BC     		pop	{r4, r7}
 1968 0120 7047     		bx	lr
 1969              	.L64:
 1970 0122 00BF     		.align	2
 1971              	.L63:
 1972 0124 0000C842 		.word	1120403456
 1973              		.cfi_endproc
 1974              	.LFE146:
 1976              		.section	.text.PWMSP001_lSetDutyCenterAlign,"ax",%progbits
 1977              		.align	2
 1978              		.global	PWMSP001_lSetDutyCenterAlign
 1979              		.thumb
 1980              		.thumb_func
 1982              	PWMSP001_lSetDutyCenterAlign:
 1983              	.LFB147:
 937:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 938:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 939:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the duty cycle of the PWM waveform
 940:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in center-aligned mode
 941:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 942:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyCenterAlign
 943:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 944:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 945:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 946:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 947:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1984              		.loc 1 947 0
 1985              		.cfi_startproc
 1986              		@ args = 0, pretend = 0, frame = 32
 1987              		@ frame_needed = 1, uses_anonymous_args = 0
 1988              		@ link register save eliminated.
 1989 0000 80B4     		push	{r7}
 1990              	.LCFI36:
 1991              		.cfi_def_cfa_offset 4
 1992              		.cfi_offset 7, -4
 1993 0002 89B0     		sub	sp, sp, #36
 1994              	.LCFI37:
 1995              		.cfi_def_cfa_offset 40
 1996 0004 00AF     		add	r7, sp, #0
 1997              	.LCFI38:
 1998              		.cfi_def_cfa_register 7
 1999 0006 7860     		str	r0, [r7, #4]
 2000 0008 3960     		str	r1, [r7, #0]	@ float
 948:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_15_5>>>*/
 949:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t FirstSliceCompareVal = (uint32_t)0x00;
 2001              		.loc 1 949 0
 2002 000a 4FF00003 		mov	r3, #0
 2003 000e FB61     		str	r3, [r7, #28]
 950:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 951:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   float fDuty, fPRS ;
 952:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 2004              		.loc 1 952 0
 2005 0010 7B68     		ldr	r3, [r7, #4]
 2006 0012 BB61     		str	r3, [r7, #24]
 953:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = Duty;
 2007              		.loc 1 953 0
 2008 0014 3B68     		ldr	r3, [r7, #0]	@ float
 2009 0016 7B61     		str	r3, [r7, #20]	@ float
 954:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 955:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = (float)((float)100.00 - (float)fDuty)/(float)100.00;
 2010              		.loc 1 955 0
 2011 0018 9FED1E7A 		flds	s14, .L66
 2012 001c D7ED057A 		flds	s15, [r7, #20]
 2013 0020 37EE677A 		fsubs	s14, s14, s15
 2014 0024 DFED1B7A 		flds	s15, .L66
 2015 0028 C7EE277A 		fdivs	s15, s14, s15
 2016 002c C7ED057A 		fsts	s15, [r7, #20]
 956:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fPRS = (float)HandlePtr->CC4yRegsPtr->PRS;
 2017              		.loc 1 956 0
 2018 0030 BB69     		ldr	r3, [r7, #24]
 2019 0032 9B69     		ldr	r3, [r3, #24]
 2020 0034 D3ED0D7A 		flds	s15, [r3, #52]	@ int
 2021 0038 F8EE677A 		fuitos	s15, s15
 2022 003c C7ED047A 		fsts	s15, [r7, #16]
 957:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal = (uint32_t)( fPRS * fDuty);
 2023              		.loc 1 957 0
 2024 0040 97ED047A 		flds	s14, [r7, #16]
 2025 0044 D7ED057A 		flds	s15, [r7, #20]
 2026 0048 67EE277A 		fmuls	s15, s14, s15
 2027 004c FCEEE77A 		ftouizs	s15, s15
 2028 0050 C7ED077A 		fsts	s15, [r7, #28]	@ int
 958:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (uint32_t)FirstSliceCompareVal  & 0xFFFFU;
 2029              		.loc 1 958 0
 2030 0054 BB69     		ldr	r3, [r7, #24]
 2031 0056 9A69     		ldr	r2, [r3, #24]
 2032 0058 FB69     		ldr	r3, [r7, #28]
 2033 005a 4FEA0343 		lsl	r3, r3, #16
 2034 005e 4FEA1343 		lsr	r3, r3, #16
 2035 0062 D363     		str	r3, [r2, #60]
 959:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 960:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*shadow transfer */
 961:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice));
 2036              		.loc 1 961 0
 2037 0064 BB69     		ldr	r3, [r7, #24]
 2038 0066 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 2039 006a 4FEA8303 		lsl	r3, r3, #2
 2040 006e FB60     		str	r3, [r7, #12]
 962:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)((uint32_t)0x01 << (uint32_t)Temp1);
 2041              		.loc 1 962 0
 2042 0070 BB69     		ldr	r3, [r7, #24]
 2043 0072 5B69     		ldr	r3, [r3, #20]
 2044 0074 BA69     		ldr	r2, [r7, #24]
 2045 0076 5269     		ldr	r2, [r2, #20]
 2046 0078 1169     		ldr	r1, [r2, #16]
 2047 007a FA68     		ldr	r2, [r7, #12]
 2048 007c 4FF00100 		mov	r0, #1
 2049 0080 00FA02F2 		lsl	r2, r0, r2
 2050 0084 0A43     		orrs	r2, r2, r1
 2051 0086 1A61     		str	r2, [r3, #16]
 963:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2052              		.loc 1 963 0
 2053 0088 07F12407 		add	r7, r7, #36
 2054 008c BD46     		mov	sp, r7
 2055 008e 80BC     		pop	{r7}
 2056 0090 7047     		bx	lr
 2057              	.L67:
 2058 0092 00BF     		.align	2
 2059              	.L66:
 2060 0094 0000C842 		.word	1120403456
 2061              		.cfi_endproc
 2062              	.LFE147:
 2064              		.section	.text.PWMSP001_SetPeriodAndCompare,"ax",%progbits
 2065              		.align	2
 2066              		.global	PWMSP001_SetPeriodAndCompare
 2067              		.thumb
 2068              		.thumb_func
 2070              	PWMSP001_SetPeriodAndCompare:
 2071              	.LFB148:
 964:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 965:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 966:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 967:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function changes the PWM frequency and duty cycle. 
 968:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * Input parameters are in terms of period and compare register
 969:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 970:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetPeriodAndCompare
 971:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 972:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 973:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Period,
 974:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 975:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 976:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2072              		.loc 1 976 0
 2073              		.cfi_startproc
 2074              		@ args = 0, pretend = 0, frame = 24
 2075              		@ frame_needed = 1, uses_anonymous_args = 0
 2076 0000 80B5     		push	{r7, lr}
 2077              	.LCFI39:
 2078              		.cfi_def_cfa_offset 8
 2079              		.cfi_offset 7, -8
 2080              		.cfi_offset 14, -4
 2081 0002 86B0     		sub	sp, sp, #24
 2082              	.LCFI40:
 2083              		.cfi_def_cfa_offset 32
 2084 0004 00AF     		add	r7, sp, #0
 2085              	.LCFI41:
 2086              		.cfi_def_cfa_register 7
 2087 0006 F860     		str	r0, [r7, #12]
 2088 0008 B960     		str	r1, [r7, #8]
 2089 000a 7A60     		str	r2, [r7, #4]
 977:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2090              		.loc 1 977 0
 2091 000c 4FF00103 		mov	r3, #1
 2092 0010 7B61     		str	r3, [r7, #20]
 978:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t PeriodVal = 0UL;
 2093              		.loc 1 978 0
 2094 0012 4FF00003 		mov	r3, #0
 2095 0016 3B61     		str	r3, [r7, #16]
 979:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_6_1>>>*/
 980:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
 2096              		.loc 1 980 0
 2097 0018 FB68     		ldr	r3, [r7, #12]
 2098 001a DB6B     		ldr	r3, [r3, #60]
 2099 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2100 001e 002B     		cmp	r3, #0
 2101 0020 3BD0     		beq	.L69
 981:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 982:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    if((Period == (uint32_t)0) || (((uint32_t)Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
 2102              		.loc 1 982 0
 2103 0022 BB68     		ldr	r3, [r7, #8]
 2104 0024 002B     		cmp	r3, #0
 2105 0026 09D0     		beq	.L70
 2106              		.loc 1 982 0 is_stmt 0 discriminator 1
 2107 0028 FB68     		ldr	r3, [r7, #12]
 2108 002a DA6A     		ldr	r2, [r3, #44]
 2109 002c 7B68     		ldr	r3, [r7, #4]
 2110 002e 9A42     		cmp	r2, r3
 2111 0030 08D2     		bcs	.L71
 983:../Dave/Generated/src/PWMSP001/PWMSP001.c ****        (HandlePtr->kTimerConcatenation == (uint8_t)RESET)))
 2112              		.loc 1 983 0 is_stmt 1 discriminator 1
 2113 0032 FB68     		ldr	r3, [r7, #12]
 2114 0034 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 982:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    if((Period == (uint32_t)0) || (((uint32_t)Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
 2115              		.loc 1 982 0 discriminator 1
 2116 0038 002B     		cmp	r3, #0
 2117 003a 03D1     		bne	.L71
 2118              	.L70:
 984:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 985:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2119              		.loc 1 985 0
 2120 003c 4FF00203 		mov	r3, #2
 2121 0040 7B61     		str	r3, [r7, #20]
 2122 0042 2AE0     		b	.L69
 2123              	.L71:
 986:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 987:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 988:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 989:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if ((Period > (uint32_t)HandlePtr->kMaxPeriodVal)&&\
 2124              		.loc 1 989 0
 2125 0044 FB68     		ldr	r3, [r7, #12]
 2126 0046 DA6A     		ldr	r2, [r3, #44]
 2127 0048 BB68     		ldr	r3, [r7, #8]
 2128 004a 9A42     		cmp	r2, r3
 2129 004c 08D2     		bcs	.L72
 990:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           ((HandlePtr->kTimerConcatenation != (uint8_t)SET))
 2130              		.loc 1 990 0 discriminator 1
 2131 004e FB68     		ldr	r3, [r7, #12]
 2132 0050 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 989:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if ((Period > (uint32_t)HandlePtr->kMaxPeriodVal)&&\
 2133              		.loc 1 989 0 discriminator 1
 2134 0054 012B     		cmp	r3, #1
 2135 0056 03D0     		beq	.L72
 991:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           )
 992:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 993:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2136              		.loc 1 993 0
 2137 0058 4FF00203 		mov	r3, #2
 2138 005c 7B61     		str	r3, [r7, #20]
 2139 005e 1CE0     		b	.L69
 2140              	.L72:
 994:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
 995:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       else
 996:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 997:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         PeriodVal = Period;
 2141              		.loc 1 997 0
 2142 0060 BB68     		ldr	r3, [r7, #8]
 2143 0062 3B61     		str	r3, [r7, #16]
 998:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2144              		.loc 1 998 0
 2145 0064 FB68     		ldr	r3, [r7, #12]
 2146 0066 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2147 006a 012B     		cmp	r3, #1
 2148 006c 05D1     		bne	.L73
 999:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
1000:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegs1Ptr->PRS = ((PeriodVal & 0xFFFF0000U) >> 16U);
 2149              		.loc 1 1000 0
 2150 006e FB68     		ldr	r3, [r7, #12]
 2151 0070 DB69     		ldr	r3, [r3, #28]
 2152 0072 3A69     		ldr	r2, [r7, #16]
 2153 0074 4FEA1242 		lsr	r2, r2, #16
 2154 0078 5A63     		str	r2, [r3, #52]
 2155              	.L73:
1001:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
1002:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         /*<<<DD_PWMSP001_API_6_3>>>*/
1003:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->PRS = (PeriodVal & 0xFFFFU);
 2156              		.loc 1 1003 0
 2157 007a FB68     		ldr	r3, [r7, #12]
 2158 007c 9A69     		ldr	r2, [r3, #24]
 2159 007e 3B69     		ldr	r3, [r7, #16]
 2160 0080 4FEA0343 		lsl	r3, r3, #16
 2161 0084 4FEA1343 		lsr	r3, r3, #16
 2162 0088 5363     		str	r3, [r2, #52]
1004:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         /* Call function as per the configured mode */
1005:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->SetCompareFuncPtr((const void*)HandlePtr, Compare);
 2163              		.loc 1 1005 0
 2164 008a FB68     		ldr	r3, [r7, #12]
 2165 008c 1B6C     		ldr	r3, [r3, #64]
 2166 008e F868     		ldr	r0, [r7, #12]
 2167 0090 7968     		ldr	r1, [r7, #4]
 2168 0092 9847     		blx	r3
1006:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 2169              		.loc 1 1006 0
 2170 0094 4FF00003 		mov	r3, #0
 2171 0098 7B61     		str	r3, [r7, #20]
 2172              	.L69:
1007:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1008:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1009:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1010:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 2173              		.loc 1 1010 0
 2174 009a 7B69     		ldr	r3, [r7, #20]
1011:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2175              		.loc 1 1011 0
 2176 009c 1846     		mov	r0, r3
 2177 009e 07F11807 		add	r7, r7, #24
 2178 00a2 BD46     		mov	sp, r7
 2179 00a4 80BD     		pop	{r7, pc}
 2180              		.cfi_endproc
 2181              	.LFE148:
 2183 00a6 00BF     		.section	.text.PWMSP001_SetPeriod,"ax",%progbits
 2184              		.align	2
 2185              		.global	PWMSP001_SetPeriod
 2186              		.thumb
 2187              		.thumb_func
 2189              	PWMSP001_SetPeriod:
 2190              	.LFB149:
1012:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1013:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_6>>>*/
1014:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1015:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function changes the PWM frequency. Input parameter is the period register value
1016:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1017:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetPeriod
1018:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1019:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1020:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Period
1021:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1022:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2191              		.loc 1 1022 0
 2192              		.cfi_startproc
 2193              		@ args = 0, pretend = 0, frame = 24
 2194              		@ frame_needed = 1, uses_anonymous_args = 0
 2195              		@ link register save eliminated.
 2196 0000 80B4     		push	{r7}
 2197              	.LCFI42:
 2198              		.cfi_def_cfa_offset 4
 2199              		.cfi_offset 7, -4
 2200 0002 87B0     		sub	sp, sp, #28
 2201              	.LCFI43:
 2202              		.cfi_def_cfa_offset 32
 2203 0004 00AF     		add	r7, sp, #0
 2204              	.LCFI44:
 2205              		.cfi_def_cfa_register 7
 2206 0006 7860     		str	r0, [r7, #4]
 2207 0008 3960     		str	r1, [r7, #0]
1023:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2208              		.loc 1 1023 0
 2209 000a 4FF00103 		mov	r3, #1
 2210 000e 7B61     		str	r3, [r7, #20]
1024:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t PeriodVal = 0X00U;
 2211              		.loc 1 1024 0
 2212 0010 4FF00003 		mov	r3, #0
 2213 0014 3B61     		str	r3, [r7, #16]
1025:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
1026:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
1027:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_6_1>>>*/
1028:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
 2214              		.loc 1 1028 0
 2215 0016 7B68     		ldr	r3, [r7, #4]
 2216 0018 DB6B     		ldr	r3, [r3, #60]
 2217 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2218 001c 002B     		cmp	r3, #0
 2219 001e 55D0     		beq	.L76
1029:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1030:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(Period == (uint32_t)0)
 2220              		.loc 1 1030 0
 2221 0020 3B68     		ldr	r3, [r7, #0]
 2222 0022 002B     		cmp	r3, #0
 2223 0024 03D1     		bne	.L77
1031:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1032:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2224              		.loc 1 1032 0
 2225 0026 4FF00203 		mov	r3, #2
 2226 002a 7B61     		str	r3, [r7, #20]
 2227 002c 4EE0     		b	.L76
 2228              	.L77:
1033:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1034:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1035:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1036:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if((Period > (uint32_t)HandlePtr->kMaxPeriodVal) &&\
 2229              		.loc 1 1036 0
 2230 002e 7B68     		ldr	r3, [r7, #4]
 2231 0030 DA6A     		ldr	r2, [r3, #44]
 2232 0032 3B68     		ldr	r3, [r7, #0]
 2233 0034 9A42     		cmp	r2, r3
 2234 0036 08D2     		bcs	.L78
1037:../Dave/Generated/src/PWMSP001/PWMSP001.c ****          (HandlePtr->kTimerConcatenation != (uint8_t)SET))
 2235              		.loc 1 1037 0 discriminator 1
 2236 0038 7B68     		ldr	r3, [r7, #4]
 2237 003a 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
1036:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if((Period > (uint32_t)HandlePtr->kMaxPeriodVal) &&\
 2238              		.loc 1 1036 0 discriminator 1
 2239 003e 012B     		cmp	r3, #1
 2240 0040 03D0     		beq	.L78
1038:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1039:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2241              		.loc 1 1039 0
 2242 0042 4FF00203 		mov	r3, #2
 2243 0046 7B61     		str	r3, [r7, #20]
 2244 0048 40E0     		b	.L76
 2245              	.L78:
1040:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1041:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       else
1042:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1043:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         PeriodVal = Period;
 2246              		.loc 1 1043 0
 2247 004a 3B68     		ldr	r3, [r7, #0]
 2248 004c 3B61     		str	r3, [r7, #16]
1044:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2249              		.loc 1 1044 0
 2250 004e 7B68     		ldr	r3, [r7, #4]
 2251 0050 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2252 0054 012B     		cmp	r3, #1
 2253 0056 05D1     		bne	.L79
1045:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
1046:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegs1Ptr->PRS = ((PeriodVal & 0xFFFF0000U) >> 16U);
 2254              		.loc 1 1046 0
 2255 0058 7B68     		ldr	r3, [r7, #4]
 2256 005a DB69     		ldr	r3, [r3, #28]
 2257 005c 3A69     		ldr	r2, [r7, #16]
 2258 005e 4FEA1242 		lsr	r2, r2, #16
 2259 0062 5A63     		str	r2, [r3, #52]
 2260              	.L79:
1047:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
1048:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->PRS = (PeriodVal & 0xFFFFU);
 2261              		.loc 1 1048 0
 2262 0064 7B68     		ldr	r3, [r7, #4]
 2263 0066 9A69     		ldr	r2, [r3, #24]
 2264 0068 3B69     		ldr	r3, [r7, #16]
 2265 006a 4FEA0343 		lsl	r3, r3, #16
 2266 006e 4FEA1343 		lsr	r3, r3, #16
 2267 0072 5363     		str	r3, [r2, #52]
1049:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         /*Request shadow transfer for the First slice*/
1050:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4 * (uint32_t)HandlePtr->FirstSlice);
 2268              		.loc 1 1050 0
 2269 0074 7B68     		ldr	r3, [r7, #4]
 2270 0076 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 2271 007a 4FEA8303 		lsl	r3, r3, #2
 2272 007e FB60     		str	r3, [r7, #12]
1051:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GCSS |=	((uint32_t)0x01 << Temp1);
 2273              		.loc 1 1051 0
 2274 0080 7B68     		ldr	r3, [r7, #4]
 2275 0082 5B69     		ldr	r3, [r3, #20]
 2276 0084 7A68     		ldr	r2, [r7, #4]
 2277 0086 5269     		ldr	r2, [r2, #20]
 2278 0088 1169     		ldr	r1, [r2, #16]
 2279 008a FA68     		ldr	r2, [r7, #12]
 2280 008c 4FF00100 		mov	r0, #1
 2281 0090 00FA02F2 		lsl	r2, r0, r2
 2282 0094 0A43     		orrs	r2, r2, r1
 2283 0096 1A61     		str	r2, [r3, #16]
1052:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2284              		.loc 1 1052 0
 2285 0098 7B68     		ldr	r3, [r7, #4]
 2286 009a 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2287 009e 012B     		cmp	r3, #1
 2288 00a0 11D1     		bne	.L80
1053:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
1054:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           /*Request shadow transfer for the First slice*/
1055:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice);
 2289              		.loc 1 1055 0
 2290 00a2 7B68     		ldr	r3, [r7, #4]
 2291 00a4 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 2292 00a8 4FEA8303 		lsl	r3, r3, #2
 2293 00ac FB60     		str	r3, [r7, #12]
1056:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1);
 2294              		.loc 1 1056 0
 2295 00ae 7B68     		ldr	r3, [r7, #4]
 2296 00b0 5B69     		ldr	r3, [r3, #20]
 2297 00b2 7A68     		ldr	r2, [r7, #4]
 2298 00b4 5269     		ldr	r2, [r2, #20]
 2299 00b6 1169     		ldr	r1, [r2, #16]
 2300 00b8 FA68     		ldr	r2, [r7, #12]
 2301 00ba 4FF00100 		mov	r0, #1
 2302 00be 00FA02F2 		lsl	r2, r0, r2
 2303 00c2 0A43     		orrs	r2, r2, r1
 2304 00c4 1A61     		str	r2, [r3, #16]
 2305              	.L80:
1057:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }/*End Of if (HandlePtr->kTimerConcatenation == (uint8_t)SET)*/
1058:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 2306              		.loc 1 1058 0
 2307 00c6 4FF00003 		mov	r3, #0
 2308 00ca 7B61     		str	r3, [r7, #20]
 2309              	.L76:
1059:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1060:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1061:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1062:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 2310              		.loc 1 1062 0
 2311 00cc 7B69     		ldr	r3, [r7, #20]
1063:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2312              		.loc 1 1063 0
 2313 00ce 1846     		mov	r0, r3
 2314 00d0 07F11C07 		add	r7, r7, #28
 2315 00d4 BD46     		mov	sp, r7
 2316 00d6 80BC     		pop	{r7}
 2317 00d8 7047     		bx	lr
 2318              		.cfi_endproc
 2319              	.LFE149:
 2321 00da 00BF     		.section	.text.PWMSP001_SetPwmFreqAndDutyCycle,"ax",%progbits
 2322              		.align	2
 2323              		.global	PWMSP001_SetPwmFreqAndDutyCycle
 2324              		.thumb
 2325              		.thumb_func
 2327              	PWMSP001_SetPwmFreqAndDutyCycle:
 2328              	.LFB150:
1064:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1065:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1066:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1067:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function changes the PWM frequency and duty cycle. 
1068:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * Input parameters are in terms of the frequency in hertz and duty in %.
1069:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1070:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetPwmFreqAndDutyCycle
1071:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1072:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1073:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float PwmFreq,
1074:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
1075:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1076:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2329              		.loc 1 1076 0
 2330              		.cfi_startproc
 2331              		@ args = 0, pretend = 0, frame = 32
 2332              		@ frame_needed = 1, uses_anonymous_args = 0
 2333 0000 80B5     		push	{r7, lr}
 2334              	.LCFI45:
 2335              		.cfi_def_cfa_offset 8
 2336              		.cfi_offset 7, -8
 2337              		.cfi_offset 14, -4
 2338 0002 88B0     		sub	sp, sp, #32
 2339              	.LCFI46:
 2340              		.cfi_def_cfa_offset 40
 2341 0004 00AF     		add	r7, sp, #0
 2342              	.LCFI47:
 2343              		.cfi_def_cfa_register 7
 2344 0006 F860     		str	r0, [r7, #12]
 2345 0008 B960     		str	r1, [r7, #8]	@ float
 2346 000a 7A60     		str	r2, [r7, #4]	@ float
1077:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2347              		.loc 1 1077 0
 2348 000c 4FF00103 		mov	r3, #1
 2349 0010 FB61     		str	r3, [r7, #28]
1078:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t PwmTime = 0UL;
 2350              		.loc 1 1078 0
 2351 0012 4FF00003 		mov	r3, #0
 2352 0016 BB61     		str	r3, [r7, #24]
1079:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   float fPwmFreq ;
1080:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_16_1>>>*/
1081:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
 2353              		.loc 1 1081 0
 2354 0018 FB68     		ldr	r3, [r7, #12]
 2355 001a DB6B     		ldr	r3, [r3, #60]
 2356 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2357 001e 002B     		cmp	r3, #0
 2358 0020 70D0     		beq	.L83
1082:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1083:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if((PwmFreq == (float)0) || (Duty > (float)100) || (Duty < (float)0))
 2359              		.loc 1 1083 0
 2360 0022 D7ED027A 		flds	s15, [r7, #8]
 2361 0026 F5EE407A 		fcmpzs	s15
 2362 002a F1EE10FA 		fmstat
 2363 002e 0FD0     		beq	.L84
 2364              		.loc 1 1083 0 is_stmt 0 discriminator 1
 2365 0030 97ED017A 		flds	s14, [r7, #4]
 2366 0034 DFED367A 		flds	s15, .L95
 2367 0038 B4EEE77A 		fcmpes	s14, s15
 2368 003c F1EE10FA 		fmstat
 2369 0040 06DC     		bgt	.L84
 2370 0042 D7ED017A 		flds	s15, [r7, #4]
 2371 0046 F5EEC07A 		fcmpezs	s15
 2372 004a F1EE10FA 		fmstat
 2373 004e 03D5     		bpl	.L94
 2374              	.L84:
1084:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1085:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2375              		.loc 1 1085 0 is_stmt 1
 2376 0050 4FF00203 		mov	r3, #2
 2377 0054 FB61     		str	r3, [r7, #28]
 2378 0056 55E0     		b	.L83
 2379              	.L94:
1086:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1087:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1088:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1089:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       fPwmFreq=(float)HandlePtr->kResolution;
 2380              		.loc 1 1089 0
 2381 0058 FB68     		ldr	r3, [r7, #12]
 2382 005a 5B68     		ldr	r3, [r3, #4]	@ float
 2383 005c 7B61     		str	r3, [r7, #20]	@ float
1090:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  fPwmFreq=(float)fPwmFreq*PwmFreq;
 2384              		.loc 1 1090 0
 2385 005e 97ED057A 		flds	s14, [r7, #20]
 2386 0062 D7ED027A 		flds	s15, [r7, #8]
 2387 0066 67EE277A 		fmuls	s15, s14, s15
 2388 006a C7ED057A 		fsts	s15, [r7, #20]
1091:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  PwmTime = (uint32_t)((float)1000000000.00 / fPwmFreq);
 2389              		.loc 1 1091 0
 2390 006e 9FED297A 		flds	s14, .L95+4
 2391 0072 D7ED057A 		flds	s15, [r7, #20]
 2392 0076 C7EE277A 		fdivs	s15, s14, s15
 2393 007a FCEEE77A 		ftouizs	s15, s15
 2394 007e C7ED067A 		fsts	s15, [r7, #24]	@ int
1092:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_2>>>*/
1093:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)RESET)
 2395              		.loc 1 1093 0
 2396 0082 FB68     		ldr	r3, [r7, #12]
 2397 0084 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2398 0088 002B     		cmp	r3, #0
 2399 008a 20D1     		bne	.L87
1094:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1095:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if(PwmTime > PWMSP001_MAX_VALUE)
 2400              		.loc 1 1095 0
 2401 008c BA69     		ldr	r2, [r7, #24]
 2402 008e 4FF6FF73 		movw	r3, #65535
 2403 0092 9A42     		cmp	r2, r3
 2404 0094 03D9     		bls	.L88
1096:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1097:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2405              		.loc 1 1097 0
 2406 0096 4FF00203 		mov	r3, #2
 2407 009a FB61     		str	r3, [r7, #28]
 2408 009c 2AE0     		b	.L89
 2409              	.L88:
1098:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1099:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       else
1100:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1101:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if(HandlePtr->CountingModeType == PWMSP001_EDGE_ALIGNED)
 2410              		.loc 1 1101 0
 2411 009e FB68     		ldr	r3, [r7, #12]
 2412 00a0 93F83630 		ldrb	r3, [r3, #54]	@ zero_extendqisi2
 2413 00a4 002B     		cmp	r3, #0
 2414 00a6 06D1     		bne	.L90
1102:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
1103:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegsPtr->PRS = PwmTime -(uint32_t)1;
 2415              		.loc 1 1103 0
 2416 00a8 FB68     		ldr	r3, [r7, #12]
 2417 00aa 9B69     		ldr	r3, [r3, #24]
 2418 00ac BA69     		ldr	r2, [r7, #24]
 2419 00ae 02F1FF32 		add	r2, r2, #-1
 2420 00b2 5A63     		str	r2, [r3, #52]
 2421 00b4 07E0     		b	.L91
 2422              	.L90:
1104:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
1105:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         else
1106:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
1107:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegsPtr->PRS = (PwmTime - (uint32_t)1) >> (uint32_t)1;
 2423              		.loc 1 1107 0
 2424 00b6 FB68     		ldr	r3, [r7, #12]
 2425 00b8 9B69     		ldr	r3, [r3, #24]
 2426 00ba BA69     		ldr	r2, [r7, #24]
 2427 00bc 02F1FF32 		add	r2, r2, #-1
 2428 00c0 4FEA5202 		lsr	r2, r2, #1
 2429 00c4 5A63     		str	r2, [r3, #52]
 2430              	.L91:
1108:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
1109:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 2431              		.loc 1 1109 0
 2432 00c6 4FF00003 		mov	r3, #0
 2433 00ca FB61     		str	r3, [r7, #28]
 2434 00cc 12E0     		b	.L89
 2435              	.L87:
1110:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1111:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1112:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else if((HandlePtr->kTimerConcatenation == (uint8_t)SET) &&\
 2436              		.loc 1 1112 0
 2437 00ce FB68     		ldr	r3, [r7, #12]
 2438 00d0 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2439 00d4 012B     		cmp	r3, #1
 2440 00d6 08D1     		bne	.L92
 2441              		.loc 1 1112 0 is_stmt 0 discriminator 1
 2442 00d8 BA69     		ldr	r2, [r7, #24]
 2443 00da 4FF6FF73 		movw	r3, #65535
 2444 00de 9A42     		cmp	r2, r3
 2445 00e0 03D8     		bhi	.L92
1113:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     		                                   (PwmTime <= PWMSP001_MAX_VALUE))
1114:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1115:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     	Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2446              		.loc 1 1115 0 is_stmt 1
 2447 00e2 4FF00203 		mov	r3, #2
 2448 00e6 FB61     		str	r3, [r7, #28]
 2449 00e8 04E0     		b	.L89
 2450              	.L92:
1116:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1117:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_3>>>*/
1118:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1119:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1120:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = PWMSP001_lSetPwmFreqTimerConcat(HandlePtr, PwmTime);
 2451              		.loc 1 1120 0
 2452 00ea F868     		ldr	r0, [r7, #12]
 2453 00ec B969     		ldr	r1, [r7, #24]
 2454 00ee FFF7FEFF 		bl	PWMSP001_lSetPwmFreqTimerConcat
 2455 00f2 F861     		str	r0, [r7, #28]
 2456              	.L89:
1121:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1122:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(Status == (uint32_t)DAVEApp_SUCCESS)
 2457              		.loc 1 1122 0
 2458 00f4 FB69     		ldr	r3, [r7, #28]
 2459 00f6 002B     		cmp	r3, #0
 2460 00f8 04D1     		bne	.L83
1123:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1124:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      /* Call the function as per configured mode */
1125:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      HandlePtr->SetDutyFuncPtr((const void*)HandlePtr, Duty);
 2461              		.loc 1 1125 0
 2462 00fa FB68     		ldr	r3, [r7, #12]
 2463 00fc 5B6C     		ldr	r3, [r3, #68]
 2464 00fe F868     		ldr	r0, [r7, #12]
 2465 0100 7968     		ldr	r1, [r7, #4]	@ float
 2466 0102 9847     		blx	r3
 2467              	.L83:
1126:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1127:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    }
1128:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1129:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 2468              		.loc 1 1129 0
 2469 0104 FB69     		ldr	r3, [r7, #28]
1130:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2470              		.loc 1 1130 0
 2471 0106 1846     		mov	r0, r3
 2472 0108 07F12007 		add	r7, r7, #32
 2473 010c BD46     		mov	sp, r7
 2474 010e 80BD     		pop	{r7, pc}
 2475              	.L96:
 2476              		.align	2
 2477              	.L95:
 2478 0110 0000C842 		.word	1120403456
 2479 0114 286B6E4E 		.word	1315859240
 2480              		.cfi_endproc
 2481              	.LFE150:
 2483              		.section	.text.PWMSP001_SetPwmFreq,"ax",%progbits
 2484              		.align	2
 2485              		.global	PWMSP001_SetPwmFreq
 2486              		.thumb
 2487              		.thumb_func
 2489              	PWMSP001_SetPwmFreq:
 2490              	.LFB151:
1131:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1132:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1133:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_16>>>*/
1134:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1135:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function changes the PWM frequency. Input parameter is the frequency value
1136:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1137:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetPwmFreq
1138:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1139:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1140:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float PwmFreq
1141:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1142:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2491              		.loc 1 1142 0
 2492              		.cfi_startproc
 2493              		@ args = 0, pretend = 0, frame = 32
 2494              		@ frame_needed = 1, uses_anonymous_args = 0
 2495 0000 90B5     		push	{r4, r7, lr}
 2496              	.LCFI48:
 2497              		.cfi_def_cfa_offset 12
 2498              		.cfi_offset 4, -12
 2499              		.cfi_offset 7, -8
 2500              		.cfi_offset 14, -4
 2501 0002 89B0     		sub	sp, sp, #36
 2502              	.LCFI49:
 2503              		.cfi_def_cfa_offset 48
 2504 0004 00AF     		add	r7, sp, #0
 2505              	.LCFI50:
 2506              		.cfi_def_cfa_register 7
 2507 0006 7860     		str	r0, [r7, #4]
 2508 0008 3960     		str	r1, [r7, #0]	@ float
1143:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2509              		.loc 1 1143 0
 2510 000a 4FF00103 		mov	r3, #1
 2511 000e FB61     		str	r3, [r7, #28]
1144:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t PwmTime = 0x00U;
 2512              		.loc 1 1144 0
 2513 0010 4FF00003 		mov	r3, #0
 2514 0014 BB61     		str	r3, [r7, #24]
1145:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
1146:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
1147:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp3;
1148:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   float fPwmFreq ;
1149:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
 2515              		.loc 1 1149 0
 2516 0016 7B68     		ldr	r3, [r7, #4]
 2517 0018 DB6B     		ldr	r3, [r3, #60]
 2518 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2519 001c 002B     		cmp	r3, #0
 2520 001e 7DD0     		beq	.L98
1150:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1151:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(PwmFreq == (float)0)
 2521              		.loc 1 1151 0
 2522 0020 D7ED007A 		flds	s15, [r7, #0]
 2523 0024 F5EE407A 		fcmpzs	s15
 2524 0028 F1EE10FA 		fmstat
 2525 002c 03D1     		bne	.L99
1152:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1153:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2526              		.loc 1 1153 0
 2527 002e 4FF00203 		mov	r3, #2
 2528 0032 FB61     		str	r3, [r7, #28]
 2529 0034 72E0     		b	.L98
 2530              	.L99:
1154:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1155:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1156:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1157:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  fPwmFreq=(float)HandlePtr->kResolution;
 2531              		.loc 1 1157 0
 2532 0036 7B68     		ldr	r3, [r7, #4]
 2533 0038 5B68     		ldr	r3, [r3, #4]	@ float
 2534 003a 7B61     		str	r3, [r7, #20]	@ float
1158:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  fPwmFreq=(float)fPwmFreq*PwmFreq;
 2535              		.loc 1 1158 0
 2536 003c 97ED057A 		flds	s14, [r7, #20]
 2537 0040 D7ED007A 		flds	s15, [r7, #0]
 2538 0044 67EE277A 		fmuls	s15, s14, s15
 2539 0048 C7ED057A 		fsts	s15, [r7, #20]
1159:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  PwmTime = (uint32_t)((float)1000000000.00 / fPwmFreq);
 2540              		.loc 1 1159 0
 2541 004c 9FED367A 		flds	s14, .L105
 2542 0050 D7ED057A 		flds	s15, [r7, #20]
 2543 0054 C7EE277A 		fdivs	s15, s14, s15
 2544 0058 FCEEE77A 		ftouizs	s15, s15
 2545 005c C7ED067A 		fsts	s15, [r7, #24]	@ int
1160:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_2>>>*/
1161:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)RESET)
 2546              		.loc 1 1161 0
 2547 0060 7B68     		ldr	r3, [r7, #4]
 2548 0062 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2549 0066 002B     		cmp	r3, #0
 2550 0068 32D1     		bne	.L100
1162:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1163:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if(PwmTime > PWMSP001_MAX_VALUE)
 2551              		.loc 1 1163 0
 2552 006a BA69     		ldr	r2, [r7, #24]
 2553 006c 4FF6FF73 		movw	r3, #65535
 2554 0070 9A42     		cmp	r2, r3
 2555 0072 03D9     		bls	.L101
1164:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1165:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2556              		.loc 1 1165 0
 2557 0074 4FF00203 		mov	r3, #2
 2558 0078 FB61     		str	r3, [r7, #28]
 2559 007a 4FE0     		b	.L98
 2560              	.L101:
1166:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1167:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       else
1168:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1169:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if(HandlePtr->CountingModeType == PWMSP001_EDGE_ALIGNED)
 2561              		.loc 1 1169 0
 2562 007c 7B68     		ldr	r3, [r7, #4]
 2563 007e 93F83630 		ldrb	r3, [r3, #54]	@ zero_extendqisi2
 2564 0082 002B     		cmp	r3, #0
 2565 0084 06D1     		bne	.L102
1170:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
1171:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegsPtr->PRS = PwmTime -(uint32_t)1;
 2566              		.loc 1 1171 0
 2567 0086 7B68     		ldr	r3, [r7, #4]
 2568 0088 9B69     		ldr	r3, [r3, #24]
 2569 008a BA69     		ldr	r2, [r7, #24]
 2570 008c 02F1FF32 		add	r2, r2, #-1
 2571 0090 5A63     		str	r2, [r3, #52]
 2572 0092 07E0     		b	.L103
 2573              	.L102:
1172:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
1173:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         else
1174:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
1175:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegsPtr->PRS = (PwmTime - (uint32_t)1) >> (uint32_t)1;
 2574              		.loc 1 1175 0
 2575 0094 7B68     		ldr	r3, [r7, #4]
 2576 0096 9B69     		ldr	r3, [r3, #24]
 2577 0098 BA69     		ldr	r2, [r7, #24]
 2578 009a 02F1FF32 		add	r2, r2, #-1
 2579 009e 4FEA5202 		lsr	r2, r2, #1
 2580 00a2 5A63     		str	r2, [r3, #52]
 2581              	.L103:
1176:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
1177:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         /** Update dynamic handle*/
1178:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4*(uint32_t)HandlePtr->FirstSlice); 
 2582              		.loc 1 1178 0
 2583 00a4 7B68     		ldr	r3, [r7, #4]
 2584 00a6 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 2585 00aa 4FEA8303 		lsl	r3, r3, #2
 2586 00ae 3B61     		str	r3, [r7, #16]
1179:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1 );
 2587              		.loc 1 1179 0
 2588 00b0 7B68     		ldr	r3, [r7, #4]
 2589 00b2 5B69     		ldr	r3, [r3, #20]
 2590 00b4 7A68     		ldr	r2, [r7, #4]
 2591 00b6 5269     		ldr	r2, [r2, #20]
 2592 00b8 1169     		ldr	r1, [r2, #16]
 2593 00ba 3A69     		ldr	r2, [r7, #16]
 2594 00bc 4FF00100 		mov	r0, #1
 2595 00c0 00FA02F2 		lsl	r2, r0, r2
 2596 00c4 0A43     		orrs	r2, r2, r1
 2597 00c6 1A61     		str	r2, [r3, #16]
1180:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 2598              		.loc 1 1180 0
 2599 00c8 4FF00003 		mov	r3, #0
 2600 00cc FB61     		str	r3, [r7, #28]
 2601 00ce 25E0     		b	.L98
 2602              	.L100:
1181:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1182:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1183:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_3>>>*/
1184:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1185:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1186:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = PWMSP001_lSetPwmFreqTimerConcat(HandlePtr, PwmTime);
 2603              		.loc 1 1186 0
 2604 00d0 7868     		ldr	r0, [r7, #4]
 2605 00d2 B969     		ldr	r1, [r7, #24]
 2606 00d4 FFF7FEFF 		bl	PWMSP001_lSetPwmFreqTimerConcat
 2607 00d8 F861     		str	r0, [r7, #28]
1187:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if(Status == (uint32_t)DAVEApp_SUCCESS)
 2608              		.loc 1 1187 0
 2609 00da FB69     		ldr	r3, [r7, #28]
 2610 00dc 002B     		cmp	r3, #0
 2611 00de 1DD1     		bne	.L98
1188:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1189:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp2 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice);
 2612              		.loc 1 1189 0
 2613 00e0 7B68     		ldr	r3, [r7, #4]
 2614 00e2 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 2615 00e6 4FEA8303 		lsl	r3, r3, #2
 2616 00ea FB60     		str	r3, [r7, #12]
1190:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp3 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice);
 2617              		.loc 1 1190 0
 2618 00ec 7B68     		ldr	r3, [r7, #4]
 2619 00ee 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 2620 00f2 4FEA8303 		lsl	r3, r3, #2
 2621 00f6 BB60     		str	r3, [r7, #8]
1191:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)0x01 << Temp2) | \
 2622              		.loc 1 1191 0
 2623 00f8 7B68     		ldr	r3, [r7, #4]
 2624 00fa 5B69     		ldr	r3, [r3, #20]
 2625 00fc 7A68     		ldr	r2, [r7, #4]
 2626 00fe 5269     		ldr	r2, [r2, #20]
 2627 0100 1169     		ldr	r1, [r2, #16]
 2628 0102 FA68     		ldr	r2, [r7, #12]
 2629 0104 4FF00100 		mov	r0, #1
 2630 0108 00FA02F0 		lsl	r0, r0, r2
1192:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             ((uint32_t)0x01 << Temp3));
 2631              		.loc 1 1192 0
 2632 010c BA68     		ldr	r2, [r7, #8]
 2633 010e 4FF00104 		mov	r4, #1
 2634 0112 04FA02F2 		lsl	r2, r4, r2
1191:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)0x01 << Temp2) | \
 2635              		.loc 1 1191 0
 2636 0116 0243     		orrs	r2, r2, r0
 2637 0118 0A43     		orrs	r2, r2, r1
 2638 011a 1A61     		str	r2, [r3, #16]
 2639              	.L98:
1193:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1194:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1195:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1196:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  }
1197:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 2640              		.loc 1 1197 0
 2641 011c FB69     		ldr	r3, [r7, #28]
1198:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2642              		.loc 1 1198 0
 2643 011e 1846     		mov	r0, r3
 2644 0120 07F12407 		add	r7, r7, #36
 2645 0124 BD46     		mov	sp, r7
 2646 0126 90BD     		pop	{r4, r7, pc}
 2647              	.L106:
 2648              		.align	2
 2649              	.L105:
 2650 0128 286B6E4E 		.word	1315859240
 2651              		.cfi_endproc
 2652              	.LFE151:
 2654              		.section	.text.PWMSP001_lSetPwmFreqTimerConcat,"ax",%progbits
 2655              		.align	2
 2656              		.global	PWMSP001_lSetPwmFreqTimerConcat
 2657              		.thumb
 2658              		.thumb_func
 2660              	PWMSP001_lSetPwmFreqTimerConcat:
 2661              	.LFB152:
1199:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1200:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1201:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to set the PWM frequency in case of timer concatenation mode.
1202:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1203:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_lSetPwmFreqTimerConcat
1204:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1205:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1206:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t PwmTime
1207:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1208:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2662              		.loc 1 1208 0
 2663              		.cfi_startproc
 2664              		@ args = 0, pretend = 0, frame = 32
 2665              		@ frame_needed = 1, uses_anonymous_args = 0
 2666              		@ link register save eliminated.
 2667 0000 80B4     		push	{r7}
 2668              	.LCFI51:
 2669              		.cfi_def_cfa_offset 4
 2670              		.cfi_offset 7, -4
 2671 0002 89B0     		sub	sp, sp, #36
 2672              	.LCFI52:
 2673              		.cfi_def_cfa_offset 40
 2674 0004 00AF     		add	r7, sp, #0
 2675              	.LCFI53:
 2676              		.cfi_def_cfa_register 7
 2677 0006 7860     		str	r0, [r7, #4]
 2678 0008 3960     		str	r1, [r7, #0]
1209:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t PeriodVal = PwmTime;
 2679              		.loc 1 1209 0
 2680 000a 3B68     		ldr	r3, [r7, #0]
 2681 000c FB61     		str	r3, [r7, #28]
1210:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t MsbPeriodVal, LsbPeriodVal;
1211:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint8_t Count = 0x00U;
 2682              		.loc 1 1211 0
 2683 000e 4FF00003 		mov	r3, #0
 2684 0012 FB74     		strb	r3, [r7, #19]
1212:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2685              		.loc 1 1212 0
 2686 0014 4FF00103 		mov	r3, #1
 2687 0018 FB60     		str	r3, [r7, #12]
1213:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1214:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(PwmTime >= PWMSP001_TC_MAX_VALUE)
 2688              		.loc 1 1214 0
 2689 001a 3B68     		ldr	r3, [r7, #0]
 2690 001c B3F1FF3F 		cmp	r3, #-1
 2691 0020 03D1     		bne	.L108
1215:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1216:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2692              		.loc 1 1216 0
 2693 0022 4FF00203 		mov	r3, #2
 2694 0026 FB60     		str	r3, [r7, #12]
 2695 0028 41E0     		b	.L109
 2696              	.L108:
1217:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1218:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1219:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1220:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1221:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1222:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(PwmTime > PWMSP001_MAX_VALUE)
 2697              		.loc 1 1222 0
 2698 002a 3A68     		ldr	r2, [r7, #0]
 2699 002c 4FF6FF73 		movw	r3, #65535
 2700 0030 9A42     		cmp	r2, r3
 2701 0032 17D9     		bls	.L110
 2702              	.L111:
1223:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1224:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       do
1225:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1226:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         PeriodVal = PeriodVal >> 1;
 2703              		.loc 1 1226 0 discriminator 1
 2704 0034 FB69     		ldr	r3, [r7, #28]
 2705 0036 4FEA5303 		lsr	r3, r3, #1
 2706 003a FB61     		str	r3, [r7, #28]
1227:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Count++;
 2707              		.loc 1 1227 0 discriminator 1
 2708 003c FB7C     		ldrb	r3, [r7, #19]
 2709 003e 03F10103 		add	r3, r3, #1
 2710 0042 FB74     		strb	r3, [r7, #19]
1228:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }while(PeriodVal >= PWMSP001_MAX_VALUE);
 2711              		.loc 1 1228 0 discriminator 1
 2712 0044 FA69     		ldr	r2, [r7, #28]
 2713 0046 4FF6FE73 		movw	r3, #65534
 2714 004a 9A42     		cmp	r2, r3
 2715 004c F2D8     		bhi	.L111
1229:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1230:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       MsbPeriodVal = ((uint32_t)1 << Count) -(uint32_t)1;
 2716              		.loc 1 1230 0
 2717 004e FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 2718 0050 4FF00102 		mov	r2, #1
 2719 0054 02FA03F3 		lsl	r3, r2, r3
 2720 0058 03F1FF33 		add	r3, r3, #-1
 2721 005c BB61     		str	r3, [r7, #24]
1231:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       LsbPeriodVal = PeriodVal;
 2722              		.loc 1 1231 0
 2723 005e FB69     		ldr	r3, [r7, #28]
 2724 0060 7B61     		str	r3, [r7, #20]
 2725 0062 04E0     		b	.L112
 2726              	.L110:
1232:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1233:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1234:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1235:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       LsbPeriodVal = PwmTime;
 2727              		.loc 1 1235 0
 2728 0064 3B68     		ldr	r3, [r7, #0]
 2729 0066 7B61     		str	r3, [r7, #20]
1236:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       MsbPeriodVal = (uint32_t)0x00;
 2730              		.loc 1 1236 0
 2731 0068 4FF00003 		mov	r3, #0
 2732 006c BB61     		str	r3, [r7, #24]
 2733              	.L112:
1237:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1238:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1239:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_4>>>*/
1240:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->CountingModeType == PWMSP001_CENTER_ALIGNED)
 2734              		.loc 1 1240 0
 2735 006e 7B68     		ldr	r3, [r7, #4]
 2736 0070 93F83630 		ldrb	r3, [r3, #54]	@ zero_extendqisi2
 2737 0074 012B     		cmp	r3, #1
 2738 0076 07D1     		bne	.L113
1241:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1242:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       MsbPeriodVal = MsbPeriodVal >> (uint32_t)1;
 2739              		.loc 1 1242 0
 2740 0078 BB69     		ldr	r3, [r7, #24]
 2741 007a 4FEA5303 		lsr	r3, r3, #1
 2742 007e BB61     		str	r3, [r7, #24]
1243:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       LsbPeriodVal = LsbPeriodVal >> (uint32_t)1;
 2743              		.loc 1 1243 0
 2744 0080 7B69     		ldr	r3, [r7, #20]
 2745 0082 4FEA5303 		lsr	r3, r3, #1
 2746 0086 7B61     		str	r3, [r7, #20]
 2747              	.L113:
1244:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1245:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1246:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PRS = LsbPeriodVal & 0xFFFFU;
 2748              		.loc 1 1246 0
 2749 0088 7B68     		ldr	r3, [r7, #4]
 2750 008a 9A69     		ldr	r2, [r3, #24]
 2751 008c 7B69     		ldr	r3, [r7, #20]
 2752 008e 4FEA0343 		lsl	r3, r3, #16
 2753 0092 4FEA1343 		lsr	r3, r3, #16
 2754 0096 5363     		str	r3, [r2, #52]
1247:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->PRS =MsbPeriodVal & 0xFFFFU;
 2755              		.loc 1 1247 0
 2756 0098 7B68     		ldr	r3, [r7, #4]
 2757 009a DA69     		ldr	r2, [r3, #28]
 2758 009c BB69     		ldr	r3, [r7, #24]
 2759 009e 4FEA0343 		lsl	r3, r3, #16
 2760 00a2 4FEA1343 		lsr	r3, r3, #16
 2761 00a6 5363     		str	r3, [r2, #52]
1248:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1249:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_5>>>*/
1250:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2762              		.loc 1 1250 0
 2763 00a8 4FF00003 		mov	r3, #0
 2764 00ac FB60     		str	r3, [r7, #12]
 2765              	.L109:
1251:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1252:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 2766              		.loc 1 1252 0
 2767 00ae FB68     		ldr	r3, [r7, #12]
1253:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2768              		.loc 1 1253 0
 2769 00b0 1846     		mov	r0, r3
 2770 00b2 07F12407 		add	r7, r7, #36
 2771 00b6 BD46     		mov	sp, r7
 2772 00b8 80BC     		pop	{r7}
 2773 00ba 7047     		bx	lr
 2774              		.cfi_endproc
 2775              	.LFE152:
 2777              		.section	.text.PWMSP001_SetTimerVal,"ax",%progbits
 2778              		.align	2
 2779              		.global	PWMSP001_SetTimerVal
 2780              		.thumb
 2781              		.thumb_func
 2783              	PWMSP001_SetTimerVal:
 2784              	.LFB153:
1254:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1255:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1256:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1257:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_7>>>*/
1258:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1259:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function sets the timer value.
1260:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1261:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetTimerVal
1262:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1263:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1264:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t TimerVal
1265:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1266:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2785              		.loc 1 1266 0
 2786              		.cfi_startproc
 2787              		@ args = 0, pretend = 0, frame = 16
 2788              		@ frame_needed = 1, uses_anonymous_args = 0
 2789              		@ link register save eliminated.
 2790 0000 80B4     		push	{r7}
 2791              	.LCFI54:
 2792              		.cfi_def_cfa_offset 4
 2793              		.cfi_offset 7, -4
 2794 0002 85B0     		sub	sp, sp, #20
 2795              	.LCFI55:
 2796              		.cfi_def_cfa_offset 24
 2797 0004 00AF     		add	r7, sp, #0
 2798              	.LCFI56:
 2799              		.cfi_def_cfa_register 7
 2800 0006 7860     		str	r0, [r7, #4]
 2801 0008 3960     		str	r1, [r7, #0]
1267:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2802              		.loc 1 1267 0
 2803 000a 4FF00103 		mov	r3, #1
 2804 000e FB60     		str	r3, [r7, #12]
1268:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_7_1>>>*/
1269:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
 2805              		.loc 1 1269 0
 2806 0010 7B68     		ldr	r3, [r7, #4]
 2807 0012 DB6B     		ldr	r3, [r3, #60]
 2808 0014 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2809 0016 012B     		cmp	r3, #1
 2810 0018 04D0     		beq	.L116
1270:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (HandlePtr->DynamicDataType->StateType != PWMSP001_STOPPED))
 2811              		.loc 1 1270 0 discriminator 1
 2812 001a 7B68     		ldr	r3, [r7, #4]
 2813 001c DB6B     		ldr	r3, [r3, #60]
 2814 001e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
1269:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
 2815              		.loc 1 1269 0 discriminator 1
 2816 0020 032B     		cmp	r3, #3
 2817 0022 15D1     		bne	.L117
 2818              	.L116:
1271:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1272:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1273:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1274:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_7_1>>>*/
1275:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1276:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1277:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TIMER = (uint32_t)TimerVal&0xFFFFU;
 2819              		.loc 1 1277 0
 2820 0024 7B68     		ldr	r3, [r7, #4]
 2821 0026 9A69     		ldr	r2, [r3, #24]
 2822 0028 3B68     		ldr	r3, [r7, #0]
 2823 002a 4FEA0343 		lsl	r3, r3, #16
 2824 002e 4FEA1343 		lsr	r3, r3, #16
 2825 0032 1367     		str	r3, [r2, #112]
1278:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2826              		.loc 1 1278 0
 2827 0034 7B68     		ldr	r3, [r7, #4]
 2828 0036 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2829 003a 012B     		cmp	r3, #1
 2830 003c 05D1     		bne	.L118
1279:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1280:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->TIMER = (uint32_t)((uint32_t)TimerVal>>16U)&0xFFFFU;
 2831              		.loc 1 1280 0
 2832 003e 7B68     		ldr	r3, [r7, #4]
 2833 0040 DB69     		ldr	r3, [r3, #28]
 2834 0042 3A68     		ldr	r2, [r7, #0]
 2835 0044 4FEA1242 		lsr	r2, r2, #16
 2836 0048 1A67     		str	r2, [r3, #112]
 2837              	.L118:
1281:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1282:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2838              		.loc 1 1282 0
 2839 004a 4FF00003 		mov	r3, #0
 2840 004e FB60     		str	r3, [r7, #12]
 2841              	.L117:
1283:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1284:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 2842              		.loc 1 1284 0
 2843 0050 FB68     		ldr	r3, [r7, #12]
1285:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2844              		.loc 1 1285 0
 2845 0052 1846     		mov	r0, r3
 2846 0054 07F11407 		add	r7, r7, #20
 2847 0058 BD46     		mov	sp, r7
 2848 005a 80BC     		pop	{r7}
 2849 005c 7047     		bx	lr
 2850              		.cfi_endproc
 2851              	.LFE153:
 2853 005e 00BF     		.section	.text.PWMSP001_GetTimerStatus,"ax",%progbits
 2854              		.align	2
 2855              		.global	PWMSP001_GetTimerStatus
 2856              		.thumb
 2857              		.thumb_func
 2859              	PWMSP001_GetTimerStatus:
 2860              	.LFB154:
1286:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1287:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_8>>>*/
1288:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1289:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function returns the timer status - Running or Idle
1290:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1291:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_GetTimerStatus
1292:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1293:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1294:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t* TimerStatus
1295:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1296:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2861              		.loc 1 1296 0
 2862              		.cfi_startproc
 2863              		@ args = 0, pretend = 0, frame = 16
 2864              		@ frame_needed = 1, uses_anonymous_args = 0
 2865              		@ link register save eliminated.
 2866 0000 80B4     		push	{r7}
 2867              	.LCFI57:
 2868              		.cfi_def_cfa_offset 4
 2869              		.cfi_offset 7, -4
 2870 0002 85B0     		sub	sp, sp, #20
 2871              	.LCFI58:
 2872              		.cfi_def_cfa_offset 24
 2873 0004 00AF     		add	r7, sp, #0
 2874              	.LCFI59:
 2875              		.cfi_def_cfa_register 7
 2876 0006 7860     		str	r0, [r7, #4]
 2877 0008 3960     		str	r1, [r7, #0]
1297:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2878              		.loc 1 1297 0
 2879 000a 4FF00103 		mov	r3, #1
 2880 000e FB60     		str	r3, [r7, #12]
1298:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t SecondTimerStatus = (uint32_t)0;
 2881              		.loc 1 1298 0
 2882 0010 4FF00003 		mov	r3, #0
 2883 0014 BB60     		str	r3, [r7, #8]
1299:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_8_1>>>*/
1300:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 2884              		.loc 1 1300 0
 2885 0016 7B68     		ldr	r3, [r7, #4]
 2886 0018 DB6B     		ldr	r3, [r3, #60]
 2887 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2888 001c 002B     		cmp	r3, #0
 2889 001e 1ED0     		beq	.L121
1301:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1302:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1303:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1304:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_8_2>>>*/
1305:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1306:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1307:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2890              		.loc 1 1307 0
 2891 0020 7B68     		ldr	r3, [r7, #4]
 2892 0022 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2893 0026 012B     		cmp	r3, #1
 2894 0028 0FD1     		bne	.L122
1308:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1309:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SecondTimerStatus = (uint32_t)(RD_REG(HandlePtr->CC4yRegs1Ptr->TCST,
 2895              		.loc 1 1309 0
 2896 002a 7B68     		ldr	r3, [r7, #4]
 2897 002c DB69     		ldr	r3, [r3, #28]
 2898 002e 9B68     		ldr	r3, [r3, #8]
 2899 0030 03F00103 		and	r3, r3, #1
 2900 0034 BB60     		str	r3, [r7, #8]
1310:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           CCU4_CC4_TCST_TRB_Msk, CCU4_CC4_TCST_TRB_Pos));
1311:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *TimerStatus = (uint32_t)((RD_REG(HandlePtr->CC4yRegsPtr->TCST,
 2901              		.loc 1 1311 0
 2902 0036 7B68     		ldr	r3, [r7, #4]
 2903 0038 9B69     		ldr	r3, [r3, #24]
 2904 003a 9A68     		ldr	r2, [r3, #8]
 2905 003c BB68     		ldr	r3, [r7, #8]
 2906 003e 1340     		ands	r3, r3, r2
 2907 0040 03F00102 		and	r2, r3, #1
 2908 0044 3B68     		ldr	r3, [r7, #0]
 2909 0046 1A60     		str	r2, [r3, #0]
 2910 0048 06E0     		b	.L123
 2911              	.L122:
1312:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           CCU4_CC4_TCST_TRB_Msk, CCU4_CC4_TCST_TRB_Pos)) &
1313:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           SecondTimerStatus
1314:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       );
1315:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1316:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1317:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1318:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *TimerStatus = (uint32_t) RD_REG(HandlePtr->CC4yRegsPtr->TCST,
 2912              		.loc 1 1318 0
 2913 004a 7B68     		ldr	r3, [r7, #4]
 2914 004c 9B69     		ldr	r3, [r3, #24]
 2915 004e 9B68     		ldr	r3, [r3, #8]
 2916 0050 03F00102 		and	r2, r3, #1
 2917 0054 3B68     		ldr	r3, [r7, #0]
 2918 0056 1A60     		str	r2, [r3, #0]
 2919              	.L123:
1319:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           CCU4_CC4_TCST_TRB_Msk, CCU4_CC4_TCST_TRB_Pos);
1320:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1321:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2920              		.loc 1 1321 0
 2921 0058 4FF00003 		mov	r3, #0
 2922 005c FB60     		str	r3, [r7, #12]
 2923              	.L121:
1322:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1323:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status; 
 2924              		.loc 1 1323 0
 2925 005e FB68     		ldr	r3, [r7, #12]
1324:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2926              		.loc 1 1324 0
 2927 0060 1846     		mov	r0, r3
 2928 0062 07F11407 		add	r7, r7, #20
 2929 0066 BD46     		mov	sp, r7
 2930 0068 80BC     		pop	{r7}
 2931 006a 7047     		bx	lr
 2932              		.cfi_endproc
 2933              	.LFE154:
 2935              		.section	.text.PWMSP001_GetTimerRegsVal,"ax",%progbits
 2936              		.align	2
 2937              		.global	PWMSP001_GetTimerRegsVal
 2938              		.thumb
 2939              		.thumb_func
 2941              	PWMSP001_GetTimerRegsVal:
 2942              	.LFB155:
1325:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1326:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_9>>>*/
1327:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1328:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function returns the timer registers.
1329:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1330:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_GetTimerRegsVal
1331:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1332:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1333:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     PWMSP001_TimerRegsType* TimerRegs
1334:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1335:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2943              		.loc 1 1335 0
 2944              		.cfi_startproc
 2945              		@ args = 0, pretend = 0, frame = 16
 2946              		@ frame_needed = 1, uses_anonymous_args = 0
 2947              		@ link register save eliminated.
 2948 0000 80B4     		push	{r7}
 2949              	.LCFI60:
 2950              		.cfi_def_cfa_offset 4
 2951              		.cfi_offset 7, -4
 2952 0002 85B0     		sub	sp, sp, #20
 2953              	.LCFI61:
 2954              		.cfi_def_cfa_offset 24
 2955 0004 00AF     		add	r7, sp, #0
 2956              	.LCFI62:
 2957              		.cfi_def_cfa_register 7
 2958 0006 7860     		str	r0, [r7, #4]
 2959 0008 3960     		str	r1, [r7, #0]
1336:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2960              		.loc 1 1336 0
 2961 000a 4FF00103 		mov	r3, #1
 2962 000e FB60     		str	r3, [r7, #12]
1337:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t ScndSlTMRVal = 0UL;
 2963              		.loc 1 1337 0
 2964 0010 4FF00003 		mov	r3, #0
 2965 0014 BB60     		str	r3, [r7, #8]
1338:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1339:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_9_1>>>*/
1340:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 2966              		.loc 1 1340 0
 2967 0016 7B68     		ldr	r3, [r7, #4]
 2968 0018 DB6B     		ldr	r3, [r3, #60]
 2969 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2970 001c 002B     		cmp	r3, #0
 2971 001e 5ED0     		beq	.L126
1341:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1342:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1343:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1344:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_9_2>>>*/
1345:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1346:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1347:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2972              		.loc 1 1347 0
 2973 0020 7B68     		ldr	r3, [r7, #4]
 2974 0022 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2975 0026 012B     		cmp	r3, #1
 2976 0028 43D1     		bne	.L127
1348:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1349:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ScndSlTMRVal = (RD_REG(HandlePtr->CC4yRegs1Ptr->TIMER,
 2977              		.loc 1 1349 0
 2978 002a 7B68     		ldr	r3, [r7, #4]
 2979 002c DB69     		ldr	r3, [r3, #28]
 2980 002e 1B6F     		ldr	r3, [r3, #112]
 2981 0030 4FEA0343 		lsl	r3, r3, #16
 2982 0034 BB60     		str	r3, [r7, #8]
1350:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           CCU4_CC4_TIMER_TVAL_Msk, CCU4_CC4_TIMER_TVAL_Pos) << 16UL);
1351:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1352:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->TimerReg = (uint32_t)(ScndSlTMRVal |
1353:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (RD_REG(HandlePtr->CC4yRegsPtr->TIMER,
 2983              		.loc 1 1353 0
 2984 0036 7B68     		ldr	r3, [r7, #4]
 2985 0038 9B69     		ldr	r3, [r3, #24]
 2986 003a 1B6F     		ldr	r3, [r3, #112]
 2987 003c 4FEA0343 		lsl	r3, r3, #16
 2988 0040 4FEA1343 		lsr	r3, r3, #16
1352:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->TimerReg = (uint32_t)(ScndSlTMRVal |
 2989              		.loc 1 1352 0
 2990 0044 BA68     		ldr	r2, [r7, #8]
 2991 0046 1A43     		orrs	r2, r2, r3
 2992 0048 3B68     		ldr	r3, [r7, #0]
 2993 004a 9A60     		str	r2, [r3, #8]
1354:../Dave/Generated/src/PWMSP001/PWMSP001.c ****               CCU4_CC4_TIMER_TVAL_Msk, CCU4_CC4_TIMER_TVAL_Pos)));
1355:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1356:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->CompReg = HandlePtr->CC4yRegs1Ptr->CRS; 
 2994              		.loc 1 1356 0
 2995 004c 7B68     		ldr	r3, [r7, #4]
 2996 004e DB69     		ldr	r3, [r3, #28]
 2997 0050 DA6B     		ldr	r2, [r3, #60]
 2998 0052 3B68     		ldr	r3, [r7, #0]
 2999 0054 1A60     		str	r2, [r3, #0]
1357:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->CompReg*= HandlePtr->CC4yRegsPtr->PRS;
 3000              		.loc 1 1357 0
 3001 0056 3B68     		ldr	r3, [r7, #0]
 3002 0058 1B68     		ldr	r3, [r3, #0]
 3003 005a 7A68     		ldr	r2, [r7, #4]
 3004 005c 9269     		ldr	r2, [r2, #24]
 3005 005e 526B     		ldr	r2, [r2, #52]
 3006 0060 02FB03F2 		mul	r2, r2, r3
 3007 0064 3B68     		ldr	r3, [r7, #0]
 3008 0066 1A60     		str	r2, [r3, #0]
1358:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->CompReg += HandlePtr->CC4yRegsPtr->CRS;
 3009              		.loc 1 1358 0
 3010 0068 3B68     		ldr	r3, [r7, #0]
 3011 006a 1A68     		ldr	r2, [r3, #0]
 3012 006c 7B68     		ldr	r3, [r7, #4]
 3013 006e 9B69     		ldr	r3, [r3, #24]
 3014 0070 DB6B     		ldr	r3, [r3, #60]
 3015 0072 D218     		adds	r2, r2, r3
 3016 0074 3B68     		ldr	r3, [r7, #0]
 3017 0076 1A60     		str	r2, [r3, #0]
1359:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->PeriodReg = HandlePtr->CC4yRegs1Ptr->PRS+ 1U;
 3018              		.loc 1 1359 0
 3019 0078 7B68     		ldr	r3, [r7, #4]
 3020 007a DB69     		ldr	r3, [r3, #28]
 3021 007c 5B6B     		ldr	r3, [r3, #52]
 3022 007e 03F10102 		add	r2, r3, #1
 3023 0082 3B68     		ldr	r3, [r7, #0]
 3024 0084 5A60     		str	r2, [r3, #4]
1360:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->PeriodReg *= (uint32_t)((HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU) +1U);
 3025              		.loc 1 1360 0
 3026 0086 3B68     		ldr	r3, [r7, #0]
 3027 0088 5A68     		ldr	r2, [r3, #4]
 3028 008a 7B68     		ldr	r3, [r7, #4]
 3029 008c 9B69     		ldr	r3, [r3, #24]
 3030 008e 5B6B     		ldr	r3, [r3, #52]
 3031 0090 4FEA0343 		lsl	r3, r3, #16
 3032 0094 4FEA1343 		lsr	r3, r3, #16
 3033 0098 03F10103 		add	r3, r3, #1
 3034 009c 03FB02F2 		mul	r2, r3, r2
 3035 00a0 3B68     		ldr	r3, [r7, #0]
 3036 00a2 5A60     		str	r2, [r3, #4]
1361:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->PeriodReg += 1U ;
 3037              		.loc 1 1361 0
 3038 00a4 3B68     		ldr	r3, [r7, #0]
 3039 00a6 5B68     		ldr	r3, [r3, #4]
 3040 00a8 03F10102 		add	r2, r3, #1
 3041 00ac 3B68     		ldr	r3, [r7, #0]
 3042 00ae 5A60     		str	r2, [r3, #4]
 3043 00b0 12E0     		b	.L128
 3044              	.L127:
1362:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1363:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1364:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1365:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1366:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->TimerReg = (uint32_t)RD_REG(HandlePtr->CC4yRegsPtr->TIMER,
 3045              		.loc 1 1366 0
 3046 00b2 7B68     		ldr	r3, [r7, #4]
 3047 00b4 9B69     		ldr	r3, [r3, #24]
 3048 00b6 1B6F     		ldr	r3, [r3, #112]
 3049 00b8 4FEA0343 		lsl	r3, r3, #16
 3050 00bc 4FEA1343 		lsr	r3, r3, #16
 3051 00c0 3A68     		ldr	r2, [r7, #0]
 3052 00c2 9360     		str	r3, [r2, #8]
1367:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           CCU4_CC4_TIMER_TVAL_Msk, CCU4_CC4_TIMER_TVAL_Pos);
1368:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1369:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->CompReg = HandlePtr->CC4yRegsPtr->CRS;
 3053              		.loc 1 1369 0
 3054 00c4 7B68     		ldr	r3, [r7, #4]
 3055 00c6 9B69     		ldr	r3, [r3, #24]
 3056 00c8 DA6B     		ldr	r2, [r3, #60]
 3057 00ca 3B68     		ldr	r3, [r7, #0]
 3058 00cc 1A60     		str	r2, [r3, #0]
1370:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->PeriodReg = HandlePtr->CC4yRegsPtr->PRS;
 3059              		.loc 1 1370 0
 3060 00ce 7B68     		ldr	r3, [r7, #4]
 3061 00d0 9B69     		ldr	r3, [r3, #24]
 3062 00d2 5A6B     		ldr	r2, [r3, #52]
 3063 00d4 3B68     		ldr	r3, [r7, #0]
 3064 00d6 5A60     		str	r2, [r3, #4]
 3065              	.L128:
1371:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1372:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1373:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3066              		.loc 1 1373 0
 3067 00d8 4FF00003 		mov	r3, #0
 3068 00dc FB60     		str	r3, [r7, #12]
 3069              	.L126:
1374:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1375:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 3070              		.loc 1 1375 0
 3071 00de FB68     		ldr	r3, [r7, #12]
1376:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3072              		.loc 1 1376 0
 3073 00e0 1846     		mov	r0, r3
 3074 00e2 07F11407 		add	r7, r7, #20
 3075 00e6 BD46     		mov	sp, r7
 3076 00e8 80BC     		pop	{r7}
 3077 00ea 7047     		bx	lr
 3078              		.cfi_endproc
 3079              	.LFE155:
 3081              		.section	.text.PWMSP001_GetPeriodReg,"ax",%progbits
 3082              		.align	2
 3083              		.global	PWMSP001_GetPeriodReg
 3084              		.thumb
 3085              		.thumb_func
 3087              	PWMSP001_GetPeriodReg:
 3088              	.LFB156:
1377:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1378:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_15>>>*/
1379:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1380:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function returns the period register value
1381:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1382:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_GetPeriodReg
1383:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1384:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1385:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t* PeriodReg
1386:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1387:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3089              		.loc 1 1387 0
 3090              		.cfi_startproc
 3091              		@ args = 0, pretend = 0, frame = 16
 3092              		@ frame_needed = 1, uses_anonymous_args = 0
 3093              		@ link register save eliminated.
 3094 0000 80B4     		push	{r7}
 3095              	.LCFI63:
 3096              		.cfi_def_cfa_offset 4
 3097              		.cfi_offset 7, -4
 3098 0002 85B0     		sub	sp, sp, #20
 3099              	.LCFI64:
 3100              		.cfi_def_cfa_offset 24
 3101 0004 00AF     		add	r7, sp, #0
 3102              	.LCFI65:
 3103              		.cfi_def_cfa_register 7
 3104 0006 7860     		str	r0, [r7, #4]
 3105 0008 3960     		str	r1, [r7, #0]
1388:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3106              		.loc 1 1388 0
 3107 000a 4FF00103 		mov	r3, #1
 3108 000e FB60     		str	r3, [r7, #12]
1389:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1390:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_15_1>>>*/
1391:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 3109              		.loc 1 1391 0
 3110 0010 7B68     		ldr	r3, [r7, #4]
 3111 0012 DB6B     		ldr	r3, [r3, #60]
 3112 0014 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3113 0016 002B     		cmp	r3, #0
 3114 0018 29D0     		beq	.L131
1392:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1393:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1394:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1395:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1396:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1397:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3115              		.loc 1 1397 0
 3116 001a 7B68     		ldr	r3, [r7, #4]
 3117 001c 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3118 0020 012B     		cmp	r3, #1
 3119 0022 1CD1     		bne	.L132
1398:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1399:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *PeriodReg = (HandlePtr->CC4yRegs1Ptr->PRS + 1U);
 3120              		.loc 1 1399 0
 3121 0024 7B68     		ldr	r3, [r7, #4]
 3122 0026 DB69     		ldr	r3, [r3, #28]
 3123 0028 5B6B     		ldr	r3, [r3, #52]
 3124 002a 03F10102 		add	r2, r3, #1
 3125 002e 3B68     		ldr	r3, [r7, #0]
 3126 0030 1A60     		str	r2, [r3, #0]
1400:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *PeriodReg  *=(uint32_t)((HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU) +1U);
 3127              		.loc 1 1400 0
 3128 0032 3B68     		ldr	r3, [r7, #0]
 3129 0034 1A68     		ldr	r2, [r3, #0]
 3130 0036 7B68     		ldr	r3, [r7, #4]
 3131 0038 9B69     		ldr	r3, [r3, #24]
 3132 003a 5B6B     		ldr	r3, [r3, #52]
 3133 003c 4FEA0343 		lsl	r3, r3, #16
 3134 0040 4FEA1343 		lsr	r3, r3, #16
 3135 0044 03F10103 		add	r3, r3, #1
 3136 0048 03FB02F2 		mul	r2, r3, r2
 3137 004c 3B68     		ldr	r3, [r7, #0]
 3138 004e 1A60     		str	r2, [r3, #0]
1401:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *PeriodReg  += 1U;
 3139              		.loc 1 1401 0
 3140 0050 3B68     		ldr	r3, [r7, #0]
 3141 0052 1B68     		ldr	r3, [r3, #0]
 3142 0054 03F10102 		add	r2, r3, #1
 3143 0058 3B68     		ldr	r3, [r7, #0]
 3144 005a 1A60     		str	r2, [r3, #0]
 3145 005c 04E0     		b	.L133
 3146              	.L132:
1402:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1403:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1404:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1405:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *PeriodReg = HandlePtr->CC4yRegsPtr->PRS;
 3147              		.loc 1 1405 0
 3148 005e 7B68     		ldr	r3, [r7, #4]
 3149 0060 9B69     		ldr	r3, [r3, #24]
 3150 0062 5A6B     		ldr	r2, [r3, #52]
 3151 0064 3B68     		ldr	r3, [r7, #0]
 3152 0066 1A60     		str	r2, [r3, #0]
 3153              	.L133:
1406:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1407:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3154              		.loc 1 1407 0
 3155 0068 4FF00003 		mov	r3, #0
 3156 006c FB60     		str	r3, [r7, #12]
 3157              	.L131:
1408:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1409:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 3158              		.loc 1 1409 0
 3159 006e FB68     		ldr	r3, [r7, #12]
1410:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3160              		.loc 1 1410 0
 3161 0070 1846     		mov	r0, r3
 3162 0072 07F11407 		add	r7, r7, #20
 3163 0076 BD46     		mov	sp, r7
 3164 0078 80BC     		pop	{r7}
 3165 007a 7047     		bx	lr
 3166              		.cfi_endproc
 3167              	.LFE156:
 3169              		.section	.text.PWMSP001_SWRequestShadowTransfer,"ax",%progbits
 3170              		.align	2
 3171              		.global	PWMSP001_SWRequestShadowTransfer
 3172              		.thumb
 3173              		.thumb_func
 3175              	PWMSP001_SWRequestShadowTransfer:
 3176              	.LFB157:
1411:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1412:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_10>>>*/
1413:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1414:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This functions enables the shadow transfer of compare and period register values
1415:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1416:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SWRequestShadowTransfer
1417:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1418:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr
1419:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1420:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3177              		.loc 1 1420 0
 3178              		.cfi_startproc
 3179              		@ args = 0, pretend = 0, frame = 24
 3180              		@ frame_needed = 1, uses_anonymous_args = 0
 3181              		@ link register save eliminated.
 3182 0000 90B4     		push	{r4, r7}
 3183              	.LCFI66:
 3184              		.cfi_def_cfa_offset 8
 3185              		.cfi_offset 4, -8
 3186              		.cfi_offset 7, -4
 3187 0002 86B0     		sub	sp, sp, #24
 3188              	.LCFI67:
 3189              		.cfi_def_cfa_offset 32
 3190 0004 00AF     		add	r7, sp, #0
 3191              	.LCFI68:
 3192              		.cfi_def_cfa_register 7
 3193 0006 7860     		str	r0, [r7, #4]
1421:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3194              		.loc 1 1421 0
 3195 0008 4FF00103 		mov	r3, #1
 3196 000c 7B61     		str	r3, [r7, #20]
1422:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
1423:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
1424:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp3;
1425:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1426:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_10_1>>>*/
1427:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 3197              		.loc 1 1427 0
 3198 000e 7B68     		ldr	r3, [r7, #4]
 3199 0010 DB6B     		ldr	r3, [r3, #60]
 3200 0012 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3201 0014 002B     		cmp	r3, #0
 3202 0016 38D0     		beq	.L136
1428:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1429:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1430:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1431:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_10_2>>>*/
1432:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1433:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1434:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Request shadow transfer for the First Slice*/
1435:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3203              		.loc 1 1435 0
 3204 0018 7B68     		ldr	r3, [r7, #4]
 3205 001a 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3206 001e 012B     		cmp	r3, #1
 3207 0020 1ED1     		bne	.L137
1436:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1437:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*Request shadow transfer for the Second Slice*/
1438:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4 * (uint32_t)HandlePtr->FirstSlice);
 3208              		.loc 1 1438 0
 3209 0022 7B68     		ldr	r3, [r7, #4]
 3210 0024 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 3211 0028 4FEA8303 		lsl	r3, r3, #2
 3212 002c 3B61     		str	r3, [r7, #16]
1439:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp2 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4*(uint32_t)HandlePtr->SecondSlice);
 3213              		.loc 1 1439 0
 3214 002e 7B68     		ldr	r3, [r7, #4]
 3215 0030 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 3216 0034 4FEA8303 		lsl	r3, r3, #2
 3217 0038 FB60     		str	r3, [r7, #12]
1440:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yKernRegsPtr->GCSS |=  ((uint32_t)0x01 << Temp1) | ((uint32_t)0x01 << Temp2);
 3218              		.loc 1 1440 0
 3219 003a 7B68     		ldr	r3, [r7, #4]
 3220 003c 5B69     		ldr	r3, [r3, #20]
 3221 003e 7A68     		ldr	r2, [r7, #4]
 3222 0040 5269     		ldr	r2, [r2, #20]
 3223 0042 1169     		ldr	r1, [r2, #16]
 3224 0044 3A69     		ldr	r2, [r7, #16]
 3225 0046 4FF00100 		mov	r0, #1
 3226 004a 00FA02F0 		lsl	r0, r0, r2
 3227 004e FA68     		ldr	r2, [r7, #12]
 3228 0050 4FF00104 		mov	r4, #1
 3229 0054 04FA02F2 		lsl	r2, r4, r2
 3230 0058 0243     		orrs	r2, r2, r0
 3231 005a 0A43     		orrs	r2, r2, r1
 3232 005c 1A61     		str	r2, [r3, #16]
 3233 005e 11E0     		b	.L138
 3234              	.L137:
1441:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1442:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1443:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1444:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp3 =  (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice);
 3235              		.loc 1 1444 0
 3236 0060 7B68     		ldr	r3, [r7, #4]
 3237 0062 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 3238 0066 4FEA8303 		lsl	r3, r3, #2
 3239 006a BB60     		str	r3, [r7, #8]
1445:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp3);
 3240              		.loc 1 1445 0
 3241 006c 7B68     		ldr	r3, [r7, #4]
 3242 006e 5B69     		ldr	r3, [r3, #20]
 3243 0070 7A68     		ldr	r2, [r7, #4]
 3244 0072 5269     		ldr	r2, [r2, #20]
 3245 0074 1169     		ldr	r1, [r2, #16]
 3246 0076 BA68     		ldr	r2, [r7, #8]
 3247 0078 4FF00100 		mov	r0, #1
 3248 007c 00FA02F2 		lsl	r2, r0, r2
 3249 0080 0A43     		orrs	r2, r2, r1
 3250 0082 1A61     		str	r2, [r3, #16]
 3251              	.L138:
1446:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1447:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3252              		.loc 1 1447 0
 3253 0084 4FF00003 		mov	r3, #0
 3254 0088 7B61     		str	r3, [r7, #20]
 3255              	.L136:
1448:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1449:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 3256              		.loc 1 1449 0
 3257 008a 7B69     		ldr	r3, [r7, #20]
1450:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3258              		.loc 1 1450 0
 3259 008c 1846     		mov	r0, r3
 3260 008e 07F11807 		add	r7, r7, #24
 3261 0092 BD46     		mov	sp, r7
 3262 0094 90BC     		pop	{r4, r7}
 3263 0096 7047     		bx	lr
 3264              		.cfi_endproc
 3265              	.LFE157:
 3267              		.section	.text.PWMSP001_ResetTrapFlag,"ax",%progbits
 3268              		.align	2
 3269              		.global	PWMSP001_ResetTrapFlag
 3270              		.thumb
 3271              		.thumb_func
 3273              	PWMSP001_ResetTrapFlag:
 3274              	.LFB158:
1451:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1452:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_13>>>*/
1453:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1454:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function resets the trap flag if trap condition is inactive
1455:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1456:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_ResetTrapFlag(const PWMSP001_HandleType* HandlePtr)
1457:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3275              		.loc 1 1457 0
 3276              		.cfi_startproc
 3277              		@ args = 0, pretend = 0, frame = 8
 3278              		@ frame_needed = 1, uses_anonymous_args = 0
 3279              		@ link register save eliminated.
 3280 0000 80B4     		push	{r7}
 3281              	.LCFI69:
 3282              		.cfi_def_cfa_offset 4
 3283              		.cfi_offset 7, -4
 3284 0002 83B0     		sub	sp, sp, #12
 3285              	.LCFI70:
 3286              		.cfi_def_cfa_offset 16
 3287 0004 00AF     		add	r7, sp, #0
 3288              	.LCFI71:
 3289              		.cfi_def_cfa_register 7
 3290 0006 7860     		str	r0, [r7, #4]
1458:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    if (HandlePtr->kTrapExitControl == (uint8_t)SET)
 3291              		.loc 1 1458 0
 3292 0008 7B68     		ldr	r3, [r7, #4]
 3293 000a DB7C     		ldrb	r3, [r3, #19]	@ zero_extendqisi2
 3294 000c 012B     		cmp	r3, #1
 3295 000e 18D1     		bne	.L141
1459:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1460:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegsPtr->SWR, PWMSP001_EVENT2_INTERRUPT);
 3296              		.loc 1 1460 0
 3297 0010 7B68     		ldr	r3, [r7, #4]
 3298 0012 9B69     		ldr	r3, [r3, #24]
 3299 0014 7A68     		ldr	r2, [r7, #4]
 3300 0016 9269     		ldr	r2, [r2, #24]
 3301 0018 D2F8B020 		ldr	r2, [r2, #176]
 3302 001c 42F48062 		orr	r2, r2, #1024
 3303 0020 C3F8B020 		str	r2, [r3, #176]
1461:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3304              		.loc 1 1461 0
 3305 0024 7B68     		ldr	r3, [r7, #4]
 3306 0026 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3307 002a 012B     		cmp	r3, #1
 3308 002c 09D1     		bne	.L141
1462:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1463:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         SET_BIT(HandlePtr->CC4yRegs1Ptr->SWR, PWMSP001_EVENT2_INTERRUPT);
 3309              		.loc 1 1463 0
 3310 002e 7B68     		ldr	r3, [r7, #4]
 3311 0030 DB69     		ldr	r3, [r3, #28]
 3312 0032 7A68     		ldr	r2, [r7, #4]
 3313 0034 D269     		ldr	r2, [r2, #28]
 3314 0036 D2F8B020 		ldr	r2, [r2, #176]
 3315 003a 42F48062 		orr	r2, r2, #1024
 3316 003e C3F8B020 		str	r2, [r3, #176]
 3317              	.L141:
1464:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1465:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1466:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     SET_BIT(HandlePtr->CC4yRegsPtr->SWR, PWMSP001_TRAP_FLAG_CLEAR);
 3318              		.loc 1 1466 0
 3319 0042 7B68     		ldr	r3, [r7, #4]
 3320 0044 9B69     		ldr	r3, [r3, #24]
 3321 0046 7A68     		ldr	r2, [r7, #4]
 3322 0048 9269     		ldr	r2, [r2, #24]
 3323 004a D2F8B020 		ldr	r2, [r2, #176]
 3324 004e 42F40062 		orr	r2, r2, #2048
 3325 0052 C3F8B020 		str	r2, [r3, #176]
1467:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3326              		.loc 1 1467 0
 3327 0056 7B68     		ldr	r3, [r7, #4]
 3328 0058 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3329 005c 012B     		cmp	r3, #1
 3330 005e 09D1     		bne	.L140
1468:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1469:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegs1Ptr->SWR, PWMSP001_TRAP_FLAG_CLEAR);
 3331              		.loc 1 1469 0
 3332 0060 7B68     		ldr	r3, [r7, #4]
 3333 0062 DB69     		ldr	r3, [r3, #28]
 3334 0064 7A68     		ldr	r2, [r7, #4]
 3335 0066 D269     		ldr	r2, [r2, #28]
 3336 0068 D2F8B020 		ldr	r2, [r2, #176]
 3337 006c 42F40062 		orr	r2, r2, #2048
 3338 0070 C3F8B020 		str	r2, [r3, #176]
 3339              	.L140:
1470:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1471:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3340              		.loc 1 1471 0
 3341 0074 07F10C07 		add	r7, r7, #12
 3342 0078 BD46     		mov	sp, r7
 3343 007a 80BC     		pop	{r7}
 3344 007c 7047     		bx	lr
 3345              		.cfi_endproc
 3346              	.LFE158:
 3348 007e 00BF     		.section	.text.PWMSP001_lConfigureSecondSlice,"ax",%progbits
 3349              		.align	2
 3350              		.global	PWMSP001_lConfigureSecondSlice
 3351              		.thumb
 3352              		.thumb_func
 3354              	PWMSP001_lConfigureSecondSlice:
 3355              	.LFB159:
1472:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1473:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_nonAPI_1>>>*/
1474:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1475:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function configures second slice.
1476:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1477:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1478:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lConfigureSecondSlice(const PWMSP001_HandleType* HandlePtr)
1479:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3356              		.loc 1 1479 0
 3357              		.cfi_startproc
 3358              		@ args = 0, pretend = 0, frame = 8
 3359              		@ frame_needed = 1, uses_anonymous_args = 0
 3360              		@ link register save eliminated.
 3361 0000 90B4     		push	{r4, r7}
 3362              	.LCFI72:
 3363              		.cfi_def_cfa_offset 8
 3364              		.cfi_offset 4, -8
 3365              		.cfi_offset 7, -4
 3366 0002 82B0     		sub	sp, sp, #8
 3367              	.LCFI73:
 3368              		.cfi_def_cfa_offset 16
 3369 0004 00AF     		add	r7, sp, #0
 3370              	.LCFI74:
 3371              		.cfi_def_cfa_register 7
 3372 0006 7860     		str	r0, [r7, #4]
1480:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TCCLR = PWMSP001_SLICE_CLEAR;
 3373              		.loc 1 1480 0
 3374 0008 7B68     		ldr	r3, [r7, #4]
 3375 000a DB69     		ldr	r3, [r3, #28]
 3376 000c 4FF00702 		mov	r2, #7
 3377 0010 1A61     		str	r2, [r3, #16]
1481:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1482:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*Set period and compare values for second slice*/
1483:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->PRS = (uint32_t)((HandlePtr->kPeriodVal & 0xFFFF0000U)
 3378              		.loc 1 1483 0
 3379 0012 7B68     		ldr	r3, [r7, #4]
 3380 0014 DB69     		ldr	r3, [r3, #28]
 3381 0016 7A68     		ldr	r2, [r7, #4]
 3382 0018 926A     		ldr	r2, [r2, #40]
 3383 001a 4FEA1242 		lsr	r2, r2, #16
 3384 001e 5A63     		str	r2, [r3, #52]
1484:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       >> 16U);
1485:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->CRS =(uint32_t)((HandlePtr->kCompareValue & 0xFFFF0000U)
 3385              		.loc 1 1485 0
 3386 0020 7B68     		ldr	r3, [r7, #4]
 3387 0022 DB69     		ldr	r3, [r3, #28]
 3388 0024 7A68     		ldr	r2, [r7, #4]
 3389 0026 9268     		ldr	r2, [r2, #8]
 3390 0028 4FEA1242 		lsr	r2, r2, #16
 3391 002c DA63     		str	r2, [r3, #60]
1486:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       >> 16U);
1487:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1488:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->CMC |= ((uint32_t)0x01 << (uint32_t)CCU4_CC4_CMC_TCE_Pos);
 3392              		.loc 1 1488 0
 3393 002e 7B68     		ldr	r3, [r7, #4]
 3394 0030 DB69     		ldr	r3, [r3, #28]
 3395 0032 7A68     		ldr	r2, [r7, #4]
 3396 0034 D269     		ldr	r2, [r2, #28]
 3397 0036 5268     		ldr	r2, [r2, #4]
 3398 0038 42F48012 		orr	r2, r2, #1048576
 3399 003c 5A60     		str	r2, [r3, #4]
1489:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1490:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_nonAPI_1_3>>>*/
1491:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->kExtStopTrig == (uint8_t)SET)
 3400              		.loc 1 1491 0
 3401 003e 7B68     		ldr	r3, [r7, #4]
 3402 0040 DB7B     		ldrb	r3, [r3, #15]	@ zero_extendqisi2
 3403 0042 012B     		cmp	r3, #1
 3404 0044 27D1     		bne	.L144
1492:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1493:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->INS &=(uint32_t) ~(CCU4_CC4_INS_EV1EM_Msk | (uint32_t)CCU4_CC4_INS_LPF
 3405              		.loc 1 1493 0
 3406 0046 7B68     		ldr	r3, [r7, #4]
 3407 0048 DA69     		ldr	r2, [r3, #28]
 3408 004a 7B68     		ldr	r3, [r7, #4]
 3409 004c DB69     		ldr	r3, [r3, #28]
 3410 004e 1B68     		ldr	r3, [r3, #0]
 3411 0050 23F0C053 		bic	r3, r3, #402653184
 3412 0054 23F44023 		bic	r3, r3, #786432
 3413 0058 1360     		str	r3, [r2, #0]
1494:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->CMC &=(uint32_t) ~(CCU4_CC4_CMC_ENDS_Msk);
 3414              		.loc 1 1494 0
 3415 005a 7B68     		ldr	r3, [r7, #4]
 3416 005c DB69     		ldr	r3, [r3, #28]
 3417 005e 7A68     		ldr	r2, [r7, #4]
 3418 0060 D269     		ldr	r2, [r2, #28]
 3419 0062 5268     		ldr	r2, [r2, #4]
 3420 0064 22F00C02 		bic	r2, r2, #12
 3421 0068 5A60     		str	r2, [r3, #4]
1495:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->INS |=(uint32_t)((((uint32_t)HandlePtr->kStopEdge  <<   \
 3422              		.loc 1 1495 0
 3423 006a 7B68     		ldr	r3, [r7, #4]
 3424 006c DB69     		ldr	r3, [r3, #28]
 3425 006e 7A68     		ldr	r2, [r7, #4]
 3426 0070 D269     		ldr	r2, [r2, #28]
 3427 0072 1168     		ldr	r1, [r2, #0]
 3428 0074 7A68     		ldr	r2, [r7, #4]
 3429 0076 92F82420 		ldrb	r2, [r2, #36]	@ zero_extendqisi2
 3430 007a 4FEA8242 		lsl	r2, r2, #18
 3431 007e 02F44022 		and	r2, r2, #786432
 3432 0082 0A43     		orrs	r2, r2, r1
 3433 0084 1A60     		str	r2, [r3, #0]
1496:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_INS_EV1EM_Pos)& (uint32_t)CCU4_CC4_INS_EV1EM_Msk) | \
1497:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (((uint32_t)PWMSP001_LPF << (uint32_t)CCU4_CC4_INS_LPF1M_Pos)& \
1498:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_INS_LPF1M_Msk));
1499:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->CMC |= (((uint32_t)PWMSP001_EVENT_1  <<  \
 3434              		.loc 1 1499 0
 3435 0086 7B68     		ldr	r3, [r7, #4]
 3436 0088 DB69     		ldr	r3, [r3, #28]
 3437 008a 7A68     		ldr	r2, [r7, #4]
 3438 008c D269     		ldr	r2, [r2, #28]
 3439 008e 5268     		ldr	r2, [r2, #4]
 3440 0090 42F00802 		orr	r2, r2, #8
 3441 0094 5A60     		str	r2, [r3, #4]
 3442              	.L144:
1500:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_CMC_ENDS_Pos)& (uint32_t)CCU4_CC4_CMC_ENDS_Msk);
1501:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }/*End of if (HandlePtr->kExtStopTrig == SET)*/
1502:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1503:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_nonAPI_1_4>>>*/
1504:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->kTrapEnable == (uint8_t)SET)
 3443              		.loc 1 1504 0
 3444 0096 7B68     		ldr	r3, [r7, #4]
 3445 0098 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 3446 009a 012B     		cmp	r3, #1
 3447 009c 26D1     		bne	.L145
1505:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1506:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr -> INS &=(uint32_t) ~(CCU4_CC4_INS_EV2EM_Msk | CCU4_CC4_INS_EV2LM_Msk 
 3448              		.loc 1 1506 0
 3449 009e 7B68     		ldr	r3, [r7, #4]
 3450 00a0 DA69     		ldr	r2, [r3, #28]
 3451 00a2 7B68     		ldr	r3, [r7, #4]
 3452 00a4 DB69     		ldr	r3, [r3, #28]
 3453 00a6 1B68     		ldr	r3, [r3, #0]
 3454 00a8 23F0C243 		bic	r3, r3, #1627389952
 3455 00ac 23F44013 		bic	r3, r3, #3145728
 3456 00b0 1360     		str	r3, [r2, #0]
1507:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         | CCU4_CC4_INS_LPF2M_Msk);
1508:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->CMC &= (uint32_t)~(CCU4_CC4_CMC_TS_Msk);
 3457              		.loc 1 1508 0
 3458 00b2 7B68     		ldr	r3, [r7, #4]
 3459 00b4 DB69     		ldr	r3, [r3, #28]
 3460 00b6 7A68     		ldr	r2, [r7, #4]
 3461 00b8 D269     		ldr	r2, [r2, #28]
 3462 00ba 5268     		ldr	r2, [r2, #4]
 3463 00bc 22F40032 		bic	r2, r2, #131072
 3464 00c0 5A60     		str	r2, [r3, #4]
1509:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr -> INS |= (uint32_t) \
 3465              		.loc 1 1509 0
 3466 00c2 7B68     		ldr	r3, [r7, #4]
 3467 00c4 DB69     		ldr	r3, [r3, #28]
 3468 00c6 7A68     		ldr	r2, [r7, #4]
 3469 00c8 D269     		ldr	r2, [r2, #28]
 3470 00ca 1168     		ldr	r1, [r2, #0]
1510:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         ((((uint32_t)0x00 << CCU4_CC4_INS_EV2EM_Pos)& (uint32_t)CCU4_CC4_INS_EV2EM_Msk) | \
1511:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             ((((uint32_t)HandlePtr->kTrapLevel  <<	\
 3471              		.loc 1 1511 0
 3472 00cc 7A68     		ldr	r2, [r7, #4]
 3473 00ce 1278     		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 3474 00d0 4FEA0262 		lsl	r2, r2, #24
1509:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr -> INS |= (uint32_t) \
 3475              		.loc 1 1509 0
 3476 00d4 02F08072 		and	r2, r2, #16777216
 3477 00d8 0A43     		orrs	r2, r2, r1
 3478 00da 1A60     		str	r2, [r3, #0]
1512:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                 CCU4_CC4_INS_EV2LM_Pos)& (uint32_t)CCU4_CC4_INS_EV2LM_Msk) | (((uint32_t)0x00  << \
1513:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                     CCU4_CC4_INS_LPF2M_Pos)& (uint32_t)CCU4_CC4_INS_LPF2M_Msk)));
1514:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->CMC |= ((uint32_t)0x01 << (uint32_t)CCU4_CC4_CMC_TS_Pos);
 3479              		.loc 1 1514 0
 3480 00dc 7B68     		ldr	r3, [r7, #4]
 3481 00de DB69     		ldr	r3, [r3, #28]
 3482 00e0 7A68     		ldr	r2, [r7, #4]
 3483 00e2 D269     		ldr	r2, [r2, #28]
 3484 00e4 5268     		ldr	r2, [r2, #4]
 3485 00e6 42F40032 		orr	r2, r2, #131072
 3486 00ea 5A60     		str	r2, [r3, #4]
 3487              	.L145:
1515:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }/*End of if (HandlePtr->kTrapEnable == SET)*/
1516:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1517:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC &=(uint32_t) ~(CCU4_CC4_TC_TCM_Msk | CCU4_CC4_TC_TSSM_Msk
 3488              		.loc 1 1517 0
 3489 00ec 7B68     		ldr	r3, [r7, #4]
 3490 00ee DA69     		ldr	r2, [r3, #28]
 3491 00f0 7B68     		ldr	r3, [r7, #4]
 3492 00f2 DB69     		ldr	r3, [r3, #28]
 3493 00f4 5B69     		ldr	r3, [r3, #20]
 3494 00f6 23F4CE43 		bic	r3, r3, #26368
 3495 00fa 23F00B03 		bic	r3, r3, #11
 3496 00fe 5361     		str	r3, [r2, #20]
1518:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       | CCU4_CC4_TC_CMOD_Msk | CCU4_CC4_TC_STRM_Msk | CCU4_CC4_TC_ENDM_Msk
1519:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       | CCU4_CC4_TC_DITHE_Msk);
1520:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC =	(((uint32_t)HandlePtr->CountingModeType  << \
 3497              		.loc 1 1520 0
 3498 0100 7B68     		ldr	r3, [r7, #4]
 3499 0102 DB69     		ldr	r3, [r3, #28]
 3500 0104 7A68     		ldr	r2, [r7, #4]
 3501 0106 92F83620 		ldrb	r2, [r2, #54]	@ zero_extendqisi2
1521:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     (uint32_t)CCU4_CC4_TC_TCM_Pos)& (uint32_t)CCU4_CC4_TC_TCM_Msk)|	\
 3502              		.loc 1 1521 0
 3503 010a 02F00101 		and	r1, r2, #1
1522:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (((uint32_t)HandlePtr->kTimerMode  << (uint32_t)CCU4_CC4_TC_TSSM_Pos)& \
 3504              		.loc 1 1522 0
 3505 010e 7A68     		ldr	r2, [r7, #4]
 3506 0110 127B     		ldrb	r2, [r2, #12]	@ zero_extendqisi2
 3507 0112 4FEA4202 		lsl	r2, r2, #1
 3508 0116 02F00202 		and	r2, r2, #2
1523:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)CCU4_CC4_TC_TSSM_Msk)|(((uint32_t)PWMSP001_COMPARE_MODE  << \
 3509              		.loc 1 1523 0
 3510 011a 1143     		orrs	r1, r1, r2
1524:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
1525:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             (((uint32_t)HandlePtr->ExtStartConfigType << (uint32_t)CCU4_CC4_TC_STRM_Pos)\
 3511              		.loc 1 1525 0
 3512 011c 7A68     		ldr	r2, [r7, #4]
 3513 011e 92F83420 		ldrb	r2, [r2, #52]	@ zero_extendqisi2
 3514 0122 4FEA8222 		lsl	r2, r2, #10
1526:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  &(uint32_t)CCU4_CC4_TC_STRM_Msk)| (((uint32_t)HandlePtr->ExtStopConfigType <<	\
 3515              		.loc 1 1526 0
 3516 0126 02F48062 		and	r2, r2, #1024
1524:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
 3517              		.loc 1 1524 0
 3518 012a 1143     		orrs	r1, r1, r2
 3519              		.loc 1 1526 0
 3520 012c 7A68     		ldr	r2, [r7, #4]
 3521 012e 92F83520 		ldrb	r2, [r2, #53]	@ zero_extendqisi2
 3522 0132 4FEA0222 		lsl	r2, r2, #8
1527:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                 (uint32_t)CCU4_CC4_TC_ENDM_Pos)& (uint32_t)CCU4_CC4_TC_ENDM_Msk);
 3523              		.loc 1 1527 0
 3524 0136 02F44072 		and	r2, r2, #768
1526:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  &(uint32_t)CCU4_CC4_TC_STRM_Msk)| (((uint32_t)HandlePtr->ExtStopConfigType <<	\
 3525              		.loc 1 1526 0
 3526 013a 0A43     		orrs	r2, r2, r1
1520:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC =	(((uint32_t)HandlePtr->CountingModeType  << \
 3527              		.loc 1 1520 0
 3528 013c 5A61     		str	r2, [r3, #20]
1528:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1529:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_non1_5>>>*/
1530:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC |= ((uint32_t)HandlePtr->kDitherSetting << (uint32_t)CCU4_CC4_TC_DITH
 3529              		.loc 1 1530 0
 3530 013e 7B68     		ldr	r3, [r7, #4]
 3531 0140 DB69     		ldr	r3, [r3, #28]
 3532 0142 7A68     		ldr	r2, [r7, #4]
 3533 0144 D269     		ldr	r2, [r2, #28]
 3534 0146 5169     		ldr	r1, [r2, #20]
 3535 0148 7A68     		ldr	r2, [r7, #4]
 3536 014a 92F82120 		ldrb	r2, [r2, #33]	@ zero_extendqisi2
 3537 014e 4FEA4232 		lsl	r2, r2, #13
1531:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     &(uint32_t)CCU4_CC4_TC_DITHE_Msk;
 3538              		.loc 1 1531 0
 3539 0152 02F4C042 		and	r2, r2, #24576
1530:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC |= ((uint32_t)HandlePtr->kDitherSetting << (uint32_t)CCU4_CC4_TC_DITH
 3540              		.loc 1 1530 0
 3541 0156 0A43     		orrs	r2, r2, r1
 3542 0158 5A61     		str	r2, [r3, #20]
1532:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->DITS, (uint32_t)CCU4_CC4_DITS_DCVS_Msk, \
 3543              		.loc 1 1532 0
 3544 015a 7B68     		ldr	r3, [r7, #4]
 3545 015c DB69     		ldr	r3, [r3, #28]
 3546 015e 7A68     		ldr	r2, [r7, #4]
 3547 0160 527B     		ldrb	r2, [r2, #13]	@ zero_extendqisi2
 3548 0162 02F00F01 		and	r1, r2, #15
 3549 0166 7A68     		ldr	r2, [r7, #4]
 3550 0168 D269     		ldr	r2, [r2, #28]
 3551 016a 126A     		ldr	r2, [r2, #32]
 3552 016c 22F00F02 		bic	r2, r2, #15
 3553 0170 0A43     		orrs	r2, r2, r1
 3554 0172 1A62     		str	r2, [r3, #32]
1533:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     (uint32_t)CCU4_CC4_DITS_DCVS_Pos, HandlePtr->kDitherCompare);
1534:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1535:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_non1_6>>>*/
1536:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->TC, (uint32_t)CCU4_CC4_TC_TRPSE_Msk,
 3555              		.loc 1 1536 0
 3556 0174 7B68     		ldr	r3, [r7, #4]
 3557 0176 DB69     		ldr	r3, [r3, #28]
 3558 0178 7A68     		ldr	r2, [r7, #4]
 3559 017a 927C     		ldrb	r2, [r2, #18]	@ zero_extendqisi2
 3560 017c 4FEA4252 		lsl	r2, r2, #21
 3561 0180 02F40011 		and	r1, r2, #2097152
 3562 0184 7A68     		ldr	r2, [r7, #4]
 3563 0186 D269     		ldr	r2, [r2, #28]
 3564 0188 5269     		ldr	r2, [r2, #20]
 3565 018a 22F40012 		bic	r2, r2, #2097152
 3566 018e 0A43     		orrs	r2, r2, r1
 3567 0190 5A61     		str	r2, [r3, #20]
1537:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_TC_TRPSE_Pos, HandlePtr->kTrapSync);
1538:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1539:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->TC, (uint32_t)CCU4_CC4_TC_TRPSW_Msk,
 3568              		.loc 1 1539 0
 3569 0192 7B68     		ldr	r3, [r7, #4]
 3570 0194 DB69     		ldr	r3, [r3, #28]
 3571 0196 7A68     		ldr	r2, [r7, #4]
 3572 0198 D27C     		ldrb	r2, [r2, #19]	@ zero_extendqisi2
 3573 019a 4FEA8252 		lsl	r2, r2, #22
 3574 019e 02F48001 		and	r1, r2, #4194304
 3575 01a2 7A68     		ldr	r2, [r7, #4]
 3576 01a4 D269     		ldr	r2, [r2, #28]
 3577 01a6 5269     		ldr	r2, [r2, #20]
 3578 01a8 22F48002 		bic	r2, r2, #4194304
 3579 01ac 0A43     		orrs	r2, r2, r1
 3580 01ae 5A61     		str	r2, [r3, #20]
1540:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_TC_TRPSW_Pos, HandlePtr->kTrapExitControl);
1541:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1542:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->TC, (uint32_t)CCU4_CC4_TC_TRAPE_Msk,\
 3581              		.loc 1 1542 0
 3582 01b0 7B68     		ldr	r3, [r7, #4]
 3583 01b2 DB69     		ldr	r3, [r3, #28]
 3584 01b4 7A68     		ldr	r2, [r7, #4]
 3585 01b6 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 3586 01b8 4FEA4242 		lsl	r2, r2, #17
 3587 01bc 02F40031 		and	r1, r2, #131072
 3588 01c0 7A68     		ldr	r2, [r7, #4]
 3589 01c2 D269     		ldr	r2, [r2, #28]
 3590 01c4 5269     		ldr	r2, [r2, #20]
 3591 01c6 22F40032 		bic	r2, r2, #131072
 3592 01ca 0A43     		orrs	r2, r2, r1
 3593 01cc 5A61     		str	r2, [r3, #20]
1543:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)CCU4_CC4_TC_TRAPE_Pos, HandlePtr->kTrapEnable);
1544:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
1545:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->PSC, (uint32_t)CCU4_CC4_PSC_PSIV_Msk, 
 3594              		.loc 1 1545 0
 3595 01ce 7B68     		ldr	r3, [r7, #4]
 3596 01d0 DB69     		ldr	r3, [r3, #28]
 3597 01d2 7A68     		ldr	r2, [r7, #4]
 3598 01d4 92F82220 		ldrb	r2, [r2, #34]	@ zero_extendqisi2
 3599 01d8 02F00F01 		and	r1, r2, #15
 3600 01dc 7A68     		ldr	r2, [r7, #4]
 3601 01de D269     		ldr	r2, [r2, #28]
 3602 01e0 526A     		ldr	r2, [r2, #36]
 3603 01e2 22F00F02 		bic	r2, r2, #15
 3604 01e6 0A43     		orrs	r2, r2, r1
 3605 01e8 5A62     		str	r2, [r3, #36]
1546:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_PSC_PSIV_Pos, HandlePtr->kCCUPrescalar);
1547:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1548:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->PSL = HandlePtr->kPassiveLevel;
 3606              		.loc 1 1548 0
 3607 01ea 7B68     		ldr	r3, [r7, #4]
 3608 01ec DB69     		ldr	r3, [r3, #28]
 3609 01ee 7A68     		ldr	r2, [r7, #4]
 3610 01f0 127C     		ldrb	r2, [r2, #16]	@ zero_extendqisi2
 3611 01f2 9A61     		str	r2, [r3, #24]
1549:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1550:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
 3612              		.loc 1 1550 0
 3613 01f4 7B68     		ldr	r3, [r7, #4]
 3614 01f6 5B69     		ldr	r3, [r3, #20]
 3615 01f8 7A68     		ldr	r2, [r7, #4]
 3616 01fa 5269     		ldr	r2, [r2, #20]
 3617 01fc 1169     		ldr	r1, [r2, #16]
1551:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ((uint32_t)4 * (uint32_t)HandlePtr->SecondSlice)) |	\
 3618              		.loc 1 1551 0
 3619 01fe 7A68     		ldr	r2, [r7, #4]
 3620 0200 92F83820 		ldrb	r2, [r2, #56]	@ zero_extendqisi2
 3621 0204 4FEA8202 		lsl	r2, r2, #2
1550:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
 3622              		.loc 1 1550 0
 3623 0208 4FF00100 		mov	r0, #1
 3624 020c 00FA02F0 		lsl	r0, r0, r2
1552:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ((uint32_t)0x01 << (((uint32_t)4 * \
1553:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)HandlePtr->SecondSlice) + (uint32_t)1)) |\
 3625              		.loc 1 1553 0
 3626 0210 7A68     		ldr	r2, [r7, #4]
 3627 0212 92F83820 		ldrb	r2, [r2, #56]	@ zero_extendqisi2
1552:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ((uint32_t)0x01 << (((uint32_t)4 * \
 3628              		.loc 1 1552 0
 3629 0216 4FEA8202 		lsl	r2, r2, #2
 3630              		.loc 1 1553 0
 3631 021a 02F10102 		add	r2, r2, #1
1552:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ((uint32_t)0x01 << (((uint32_t)4 * \
 3632              		.loc 1 1552 0
 3633 021e 4FF00104 		mov	r4, #1
 3634 0222 04FA02F2 		lsl	r2, r4, r2
1551:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ((uint32_t)4 * (uint32_t)HandlePtr->SecondSlice)) |	\
 3635              		.loc 1 1551 0
 3636 0226 1043     		orrs	r0, r0, r2
1554:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)((uint32_t)0x01 << (((uint32_t)4 * \
1555:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		    (uint32_t)HandlePtr->SecondSlice) + (uint32_t)2)));
 3637              		.loc 1 1555 0
 3638 0228 7A68     		ldr	r2, [r7, #4]
 3639 022a 92F83820 		ldrb	r2, [r2, #56]	@ zero_extendqisi2
1554:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)((uint32_t)0x01 << (((uint32_t)4 * \
 3640              		.loc 1 1554 0
 3641 022e 4FEA8202 		lsl	r2, r2, #2
 3642              		.loc 1 1555 0
 3643 0232 02F10202 		add	r2, r2, #2
1554:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)((uint32_t)0x01 << (((uint32_t)4 * \
 3644              		.loc 1 1554 0
 3645 0236 4FF00104 		mov	r4, #1
 3646 023a 04FA02F2 		lsl	r2, r4, r2
1550:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
 3647              		.loc 1 1550 0
 3648 023e 0243     		orrs	r2, r2, r0
 3649 0240 0A43     		orrs	r2, r2, r1
 3650 0242 1A61     		str	r2, [r3, #16]
1556:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3651              		.loc 1 1556 0
 3652 0244 07F10807 		add	r7, r7, #8
 3653 0248 BD46     		mov	sp, r7
 3654 024a 90BC     		pop	{r4, r7}
 3655 024c 7047     		bx	lr
 3656              		.cfi_endproc
 3657              	.LFE159:
 3659 024e 00BF     		.section	.text.PWMSP001_EnableEvent,"ax",%progbits
 3660              		.align	2
 3661              		.global	PWMSP001_EnableEvent
 3662              		.thumb
 3663              		.thumb_func
 3665              	PWMSP001_EnableEvent:
 3666              	.LFB160:
1557:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1558:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
1559:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function sets the enable event bit for the event given in the argument.
1560:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1561:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_EnableEvent
1562:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1563:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType * HandlePtr,
1564:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_EventNameType Event
1565:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1566:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3667              		.loc 1 1566 0
 3668              		.cfi_startproc
 3669              		@ args = 0, pretend = 0, frame = 16
 3670              		@ frame_needed = 1, uses_anonymous_args = 0
 3671              		@ link register save eliminated.
 3672 0000 80B4     		push	{r7}
 3673              	.LCFI75:
 3674              		.cfi_def_cfa_offset 4
 3675              		.cfi_offset 7, -4
 3676 0002 85B0     		sub	sp, sp, #20
 3677              	.LCFI76:
 3678              		.cfi_def_cfa_offset 24
 3679 0004 00AF     		add	r7, sp, #0
 3680              	.LCFI77:
 3681              		.cfi_def_cfa_register 7
 3682 0006 7860     		str	r0, [r7, #4]
 3683 0008 0B46     		mov	r3, r1
 3684 000a FB70     		strb	r3, [r7, #3]
1567:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3685              		.loc 1 1567 0
 3686 000c 4FF00103 		mov	r3, #1
 3687 0010 FB60     		str	r3, [r7, #12]
1568:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1569:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 3688              		.loc 1 1569 0
 3689 0012 7B68     		ldr	r3, [r7, #4]
 3690 0014 DB6B     		ldr	r3, [r3, #60]
 3691 0016 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3692 0018 002B     		cmp	r3, #0
 3693 001a 03D1     		bne	.L147
1570:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1571:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3694              		.loc 1 1571 0
 3695 001c 4FF00103 		mov	r3, #1
 3696 0020 FB60     		str	r3, [r7, #12]
 3697 0022 24E0     		b	.L148
 3698              	.L147:
1572:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1573:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1574:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1575:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1576:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3699              		.loc 1 1576 0
 3700 0024 7B68     		ldr	r3, [r7, #4]
 3701 0026 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3702 002a 012B     		cmp	r3, #1
 3703 002c 0ED1     		bne	.L149
1577:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1578:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegs1Ptr->INTE,(uint8_t) Event);
 3704              		.loc 1 1578 0
 3705 002e 7B68     		ldr	r3, [r7, #4]
 3706 0030 DB69     		ldr	r3, [r3, #28]
 3707 0032 7A68     		ldr	r2, [r7, #4]
 3708 0034 D269     		ldr	r2, [r2, #28]
 3709 0036 D2F8A410 		ldr	r1, [r2, #164]
 3710 003a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3711 003c 4FF00100 		mov	r0, #1
 3712 0040 00FA02F2 		lsl	r2, r0, r2
 3713 0044 0A43     		orrs	r2, r2, r1
 3714 0046 C3F8A420 		str	r2, [r3, #164]
 3715 004a 0DE0     		b	.L150
 3716              	.L149:
1579:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1580:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1581:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1582:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegsPtr->INTE,(uint8_t) Event);
 3717              		.loc 1 1582 0
 3718 004c 7B68     		ldr	r3, [r7, #4]
 3719 004e 9B69     		ldr	r3, [r3, #24]
 3720 0050 7A68     		ldr	r2, [r7, #4]
 3721 0052 9269     		ldr	r2, [r2, #24]
 3722 0054 D2F8A410 		ldr	r1, [r2, #164]
 3723 0058 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3724 005a 4FF00100 		mov	r0, #1
 3725 005e 00FA02F2 		lsl	r2, r0, r2
 3726 0062 0A43     		orrs	r2, r2, r1
 3727 0064 C3F8A420 		str	r2, [r3, #164]
 3728              	.L150:
1583:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1584:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3729              		.loc 1 1584 0
 3730 0068 4FF00003 		mov	r3, #0
 3731 006c FB60     		str	r3, [r7, #12]
 3732              	.L148:
1585:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1586:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 3733              		.loc 1 1586 0
 3734 006e FB68     		ldr	r3, [r7, #12]
1587:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3735              		.loc 1 1587 0
 3736 0070 1846     		mov	r0, r3
 3737 0072 07F11407 		add	r7, r7, #20
 3738 0076 BD46     		mov	sp, r7
 3739 0078 80BC     		pop	{r7}
 3740 007a 7047     		bx	lr
 3741              		.cfi_endproc
 3742              	.LFE160:
 3744              		.section	.text.PWMSP001_DisableEvent,"ax",%progbits
 3745              		.align	2
 3746              		.global	PWMSP001_DisableEvent
 3747              		.thumb
 3748              		.thumb_func
 3750              	PWMSP001_DisableEvent:
 3751              	.LFB161:
1588:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1589:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
1590:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function clears the enable event bit for the event given in the argument.
1591:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1592:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_DisableEvent
1593:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1594:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType * HandlePtr,
1595:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_EventNameType Event
1596:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1597:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3752              		.loc 1 1597 0
 3753              		.cfi_startproc
 3754              		@ args = 0, pretend = 0, frame = 16
 3755              		@ frame_needed = 1, uses_anonymous_args = 0
 3756              		@ link register save eliminated.
 3757 0000 80B4     		push	{r7}
 3758              	.LCFI78:
 3759              		.cfi_def_cfa_offset 4
 3760              		.cfi_offset 7, -4
 3761 0002 85B0     		sub	sp, sp, #20
 3762              	.LCFI79:
 3763              		.cfi_def_cfa_offset 24
 3764 0004 00AF     		add	r7, sp, #0
 3765              	.LCFI80:
 3766              		.cfi_def_cfa_register 7
 3767 0006 7860     		str	r0, [r7, #4]
 3768 0008 0B46     		mov	r3, r1
 3769 000a FB70     		strb	r3, [r7, #3]
1598:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3770              		.loc 1 1598 0
 3771 000c 4FF00103 		mov	r3, #1
 3772 0010 FB60     		str	r3, [r7, #12]
1599:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1600:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 3773              		.loc 1 1600 0
 3774 0012 7B68     		ldr	r3, [r7, #4]
 3775 0014 DB6B     		ldr	r3, [r3, #60]
 3776 0016 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3777 0018 002B     		cmp	r3, #0
 3778 001a 03D1     		bne	.L153
1601:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1602:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3779              		.loc 1 1602 0
 3780 001c 4FF00103 		mov	r3, #1
 3781 0020 FB60     		str	r3, [r7, #12]
 3782 0022 28E0     		b	.L154
 3783              	.L153:
1603:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1604:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1605:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1606:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1607:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3784              		.loc 1 1607 0
 3785 0024 7B68     		ldr	r3, [r7, #4]
 3786 0026 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3787 002a 012B     		cmp	r3, #1
 3788 002c 10D1     		bne	.L155
1608:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1609:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       CLR_BIT(HandlePtr->CC4yRegs1Ptr->INTE,(uint8_t) Event);
 3789              		.loc 1 1609 0
 3790 002e 7B68     		ldr	r3, [r7, #4]
 3791 0030 DB69     		ldr	r3, [r3, #28]
 3792 0032 7A68     		ldr	r2, [r7, #4]
 3793 0034 D269     		ldr	r2, [r2, #28]
 3794 0036 D2F8A410 		ldr	r1, [r2, #164]
 3795 003a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3796 003c 4FF00100 		mov	r0, #1
 3797 0040 00FA02F2 		lsl	r2, r0, r2
 3798 0044 6FEA0202 		mvn	r2, r2
 3799 0048 0A40     		ands	r2, r2, r1
 3800 004a C3F8A420 		str	r2, [r3, #164]
 3801 004e 0FE0     		b	.L156
 3802              	.L155:
1610:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1611:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1612:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1613:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       CLR_BIT(HandlePtr->CC4yRegsPtr->INTE,(uint8_t) Event);
 3803              		.loc 1 1613 0
 3804 0050 7B68     		ldr	r3, [r7, #4]
 3805 0052 9B69     		ldr	r3, [r3, #24]
 3806 0054 7A68     		ldr	r2, [r7, #4]
 3807 0056 9269     		ldr	r2, [r2, #24]
 3808 0058 D2F8A410 		ldr	r1, [r2, #164]
 3809 005c FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3810 005e 4FF00100 		mov	r0, #1
 3811 0062 00FA02F2 		lsl	r2, r0, r2
 3812 0066 6FEA0202 		mvn	r2, r2
 3813 006a 0A40     		ands	r2, r2, r1
 3814 006c C3F8A420 		str	r2, [r3, #164]
 3815              	.L156:
1614:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1615:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3816              		.loc 1 1615 0
 3817 0070 4FF00003 		mov	r3, #0
 3818 0074 FB60     		str	r3, [r7, #12]
 3819              	.L154:
1616:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1617:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 3820              		.loc 1 1617 0
 3821 0076 FB68     		ldr	r3, [r7, #12]
1618:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3822              		.loc 1 1618 0
 3823 0078 1846     		mov	r0, r3
 3824 007a 07F11407 		add	r7, r7, #20
 3825 007e BD46     		mov	sp, r7
 3826 0080 80BC     		pop	{r7}
 3827 0082 7047     		bx	lr
 3828              		.cfi_endproc
 3829              	.LFE161:
 3831              		.section	.text.PWMSP001_ClearPendingEvent,"ax",%progbits
 3832              		.align	2
 3833              		.global	PWMSP001_ClearPendingEvent
 3834              		.thumb
 3835              		.thumb_func
 3837              	PWMSP001_ClearPendingEvent:
 3838              	.LFB162:
1619:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1620:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
1621:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function clears the interrupt by software.
1622:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1623:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_ClearPendingEvent
1624:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1625:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType * HandlePtr,
1626:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_EventNameType Event
1627:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1628:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3839              		.loc 1 1628 0
 3840              		.cfi_startproc
 3841              		@ args = 0, pretend = 0, frame = 16
 3842              		@ frame_needed = 1, uses_anonymous_args = 0
 3843              		@ link register save eliminated.
 3844 0000 80B4     		push	{r7}
 3845              	.LCFI81:
 3846              		.cfi_def_cfa_offset 4
 3847              		.cfi_offset 7, -4
 3848 0002 85B0     		sub	sp, sp, #20
 3849              	.LCFI82:
 3850              		.cfi_def_cfa_offset 24
 3851 0004 00AF     		add	r7, sp, #0
 3852              	.LCFI83:
 3853              		.cfi_def_cfa_register 7
 3854 0006 7860     		str	r0, [r7, #4]
 3855 0008 0B46     		mov	r3, r1
 3856 000a FB70     		strb	r3, [r7, #3]
1629:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3857              		.loc 1 1629 0
 3858 000c 4FF00103 		mov	r3, #1
 3859 0010 FB60     		str	r3, [r7, #12]
1630:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1631:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 3860              		.loc 1 1631 0
 3861 0012 7B68     		ldr	r3, [r7, #4]
 3862 0014 DB6B     		ldr	r3, [r3, #60]
 3863 0016 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3864 0018 002B     		cmp	r3, #0
 3865 001a 03D1     		bne	.L159
1632:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1633:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3866              		.loc 1 1633 0
 3867 001c 4FF00103 		mov	r3, #1
 3868 0020 FB60     		str	r3, [r7, #12]
 3869 0022 24E0     		b	.L160
 3870              	.L159:
1634:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1635:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1636:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1637:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1638:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3871              		.loc 1 1638 0
 3872 0024 7B68     		ldr	r3, [r7, #4]
 3873 0026 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3874 002a 012B     		cmp	r3, #1
 3875 002c 0ED1     		bne	.L161
1639:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1640:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegs1Ptr->SWR,(uint8_t) Event);
 3876              		.loc 1 1640 0
 3877 002e 7B68     		ldr	r3, [r7, #4]
 3878 0030 DB69     		ldr	r3, [r3, #28]
 3879 0032 7A68     		ldr	r2, [r7, #4]
 3880 0034 D269     		ldr	r2, [r2, #28]
 3881 0036 D2F8B010 		ldr	r1, [r2, #176]
 3882 003a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3883 003c 4FF00100 		mov	r0, #1
 3884 0040 00FA02F2 		lsl	r2, r0, r2
 3885 0044 0A43     		orrs	r2, r2, r1
 3886 0046 C3F8B020 		str	r2, [r3, #176]
 3887 004a 0DE0     		b	.L162
 3888              	.L161:
1641:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1642:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1643:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1644:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegsPtr->SWR, (uint8_t)Event);
 3889              		.loc 1 1644 0
 3890 004c 7B68     		ldr	r3, [r7, #4]
 3891 004e 9B69     		ldr	r3, [r3, #24]
 3892 0050 7A68     		ldr	r2, [r7, #4]
 3893 0052 9269     		ldr	r2, [r2, #24]
 3894 0054 D2F8B010 		ldr	r1, [r2, #176]
 3895 0058 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3896 005a 4FF00100 		mov	r0, #1
 3897 005e 00FA02F2 		lsl	r2, r0, r2
 3898 0062 0A43     		orrs	r2, r2, r1
 3899 0064 C3F8B020 		str	r2, [r3, #176]
 3900              	.L162:
1645:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1646:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3901              		.loc 1 1646 0
 3902 0068 4FF00003 		mov	r3, #0
 3903 006c FB60     		str	r3, [r7, #12]
 3904              	.L160:
1647:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1648:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 3905              		.loc 1 1648 0
 3906 006e FB68     		ldr	r3, [r7, #12]
1649:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3907              		.loc 1 1649 0
 3908 0070 1846     		mov	r0, r3
 3909 0072 07F11407 		add	r7, r7, #20
 3910 0076 BD46     		mov	sp, r7
 3911 0078 80BC     		pop	{r7}
 3912 007a 7047     		bx	lr
 3913              		.cfi_endproc
 3914              	.LFE162:
 3916              		.section	.text.PWMSP001_SetPendingEvent,"ax",%progbits
 3917              		.align	2
 3918              		.global	PWMSP001_SetPendingEvent
 3919              		.thumb
 3920              		.thumb_func
 3922              	PWMSP001_SetPendingEvent:
 3923              	.LFB163:
1650:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1651:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
1652:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function sets the interrupt by software Interrupt pulse is generated
1653:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * if source is enabled.
1654:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1655:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetPendingEvent
1656:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1657:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType * HandlePtr,
1658:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_EventNameType Event
1659:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1660:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3924              		.loc 1 1660 0
 3925              		.cfi_startproc
 3926              		@ args = 0, pretend = 0, frame = 16
 3927              		@ frame_needed = 1, uses_anonymous_args = 0
 3928              		@ link register save eliminated.
 3929 0000 80B4     		push	{r7}
 3930              	.LCFI84:
 3931              		.cfi_def_cfa_offset 4
 3932              		.cfi_offset 7, -4
 3933 0002 85B0     		sub	sp, sp, #20
 3934              	.LCFI85:
 3935              		.cfi_def_cfa_offset 24
 3936 0004 00AF     		add	r7, sp, #0
 3937              	.LCFI86:
 3938              		.cfi_def_cfa_register 7
 3939 0006 7860     		str	r0, [r7, #4]
 3940 0008 0B46     		mov	r3, r1
 3941 000a FB70     		strb	r3, [r7, #3]
1661:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3942              		.loc 1 1661 0
 3943 000c 4FF00103 		mov	r3, #1
 3944 0010 FB60     		str	r3, [r7, #12]
1662:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1663:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 3945              		.loc 1 1663 0
 3946 0012 7B68     		ldr	r3, [r7, #4]
 3947 0014 DB6B     		ldr	r3, [r3, #60]
 3948 0016 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3949 0018 002B     		cmp	r3, #0
 3950 001a 03D1     		bne	.L165
1664:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1665:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3951              		.loc 1 1665 0
 3952 001c 4FF00103 		mov	r3, #1
 3953 0020 FB60     		str	r3, [r7, #12]
 3954 0022 24E0     		b	.L166
 3955              	.L165:
1666:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1667:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1668:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1669:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1670:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3956              		.loc 1 1670 0
 3957 0024 7B68     		ldr	r3, [r7, #4]
 3958 0026 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3959 002a 012B     		cmp	r3, #1
 3960 002c 0ED1     		bne	.L167
1671:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1672:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegs1Ptr->SWS,(uint8_t)Event);
 3961              		.loc 1 1672 0
 3962 002e 7B68     		ldr	r3, [r7, #4]
 3963 0030 DB69     		ldr	r3, [r3, #28]
 3964 0032 7A68     		ldr	r2, [r7, #4]
 3965 0034 D269     		ldr	r2, [r2, #28]
 3966 0036 D2F8AC10 		ldr	r1, [r2, #172]
 3967 003a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3968 003c 4FF00100 		mov	r0, #1
 3969 0040 00FA02F2 		lsl	r2, r0, r2
 3970 0044 0A43     		orrs	r2, r2, r1
 3971 0046 C3F8AC20 		str	r2, [r3, #172]
 3972 004a 0DE0     		b	.L168
 3973              	.L167:
1673:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1674:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1675:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1676:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegsPtr->SWS, (uint8_t)Event);
 3974              		.loc 1 1676 0
 3975 004c 7B68     		ldr	r3, [r7, #4]
 3976 004e 9B69     		ldr	r3, [r3, #24]
 3977 0050 7A68     		ldr	r2, [r7, #4]
 3978 0052 9269     		ldr	r2, [r2, #24]
 3979 0054 D2F8AC10 		ldr	r1, [r2, #172]
 3980 0058 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3981 005a 4FF00100 		mov	r0, #1
 3982 005e 00FA02F2 		lsl	r2, r0, r2
 3983 0062 0A43     		orrs	r2, r2, r1
 3984 0064 C3F8AC20 		str	r2, [r3, #172]
 3985              	.L168:
1677:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1678:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3986              		.loc 1 1678 0
 3987 0068 4FF00003 		mov	r3, #0
 3988 006c FB60     		str	r3, [r7, #12]
 3989              	.L166:
1679:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1680:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 3990              		.loc 1 1680 0
 3991 006e FB68     		ldr	r3, [r7, #12]
1681:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3992              		.loc 1 1681 0
 3993 0070 1846     		mov	r0, r3
 3994 0072 07F11407 		add	r7, r7, #20
 3995 0076 BD46     		mov	sp, r7
 3996 0078 80BC     		pop	{r7}
 3997 007a 7047     		bx	lr
 3998              		.cfi_endproc
 3999              	.LFE163:
 4001              		.section	.text.PWMSP001_GetPendingEvent,"ax",%progbits
 4002              		.align	2
 4003              		.global	PWMSP001_GetPendingEvent
 4004              		.thumb
 4005              		.thumb_func
 4007              	PWMSP001_GetPendingEvent:
 4008              	.LFB164:
1682:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1683:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
1684:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function check whether given interrupt is set
1685:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1686:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_GetPendingEvent
1687:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1688:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType * HandlePtr,
1689:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_EventNameType Event,
1690:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint8_t*EvtStatus
1691:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1692:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 4009              		.loc 1 1692 0
 4010              		.cfi_startproc
 4011              		@ args = 0, pretend = 0, frame = 24
 4012              		@ frame_needed = 1, uses_anonymous_args = 0
 4013              		@ link register save eliminated.
 4014 0000 80B4     		push	{r7}
 4015              	.LCFI87:
 4016              		.cfi_def_cfa_offset 4
 4017              		.cfi_offset 7, -4
 4018 0002 87B0     		sub	sp, sp, #28
 4019              	.LCFI88:
 4020              		.cfi_def_cfa_offset 32
 4021 0004 00AF     		add	r7, sp, #0
 4022              	.LCFI89:
 4023              		.cfi_def_cfa_register 7
 4024 0006 F860     		str	r0, [r7, #12]
 4025 0008 0B46     		mov	r3, r1
 4026 000a 7A60     		str	r2, [r7, #4]
 4027 000c FB72     		strb	r3, [r7, #11]
1693:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 4028              		.loc 1 1693 0
 4029 000e 4FF00103 		mov	r3, #1
 4030 0012 7B61     		str	r3, [r7, #20]
1694:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1695:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 4031              		.loc 1 1695 0
 4032 0014 FB68     		ldr	r3, [r7, #12]
 4033 0016 DB6B     		ldr	r3, [r3, #60]
 4034 0018 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4035 001a 002B     		cmp	r3, #0
 4036 001c 03D1     		bne	.L171
1696:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1697:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 4037              		.loc 1 1697 0
 4038 001e 4FF00103 		mov	r3, #1
 4039 0022 7B61     		str	r3, [r7, #20]
 4040 0024 38E0     		b	.L172
 4041              	.L171:
1698:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1699:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1700:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1701:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1702:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
 4042              		.loc 1 1702 0
 4043 0026 FB68     		ldr	r3, [r7, #12]
 4044 0028 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 4045 002c 012B     		cmp	r3, #1
 4046 002e 18D1     		bne	.L173
1703:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1704:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1705:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if(RD_REG(HandlePtr->CC4yRegs1Ptr->INTS, ((uint32_t)0x01 <<(uint32_t)Event), (uint32_t)Event)
 4047              		.loc 1 1705 0
 4048 0030 FB68     		ldr	r3, [r7, #12]
 4049 0032 DB69     		ldr	r3, [r3, #28]
 4050 0034 D3F8A020 		ldr	r2, [r3, #160]
 4051 0038 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 4052 003a 4FF00101 		mov	r1, #1
 4053 003e 01FA03F3 		lsl	r3, r1, r3
 4054 0042 1A40     		ands	r2, r2, r3
 4055 0044 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 4056 0046 22FA03F3 		lsr	r3, r2, r3
 4057 004a 002B     		cmp	r3, #0
 4058 004c 04D0     		beq	.L174
1706:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  {
1707:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	      *EvtStatus = (uint8_t)SET;
 4059              		.loc 1 1707 0
 4060 004e 7B68     		ldr	r3, [r7, #4]
 4061 0050 4FF00102 		mov	r2, #1
 4062 0054 1A70     		strb	r2, [r3, #0]
 4063 0056 1CE0     		b	.L175
 4064              	.L174:
1708:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  }
1709:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  else
1710:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  {
1711:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	      *EvtStatus = (uint8_t)RESET;
 4065              		.loc 1 1711 0
 4066 0058 7B68     		ldr	r3, [r7, #4]
 4067 005a 4FF00002 		mov	r2, #0
 4068 005e 1A70     		strb	r2, [r3, #0]
 4069 0060 17E0     		b	.L175
 4070              	.L173:
1712:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  }
1713:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1714:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1715:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1716:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if(RD_REG(HandlePtr->CC4yRegsPtr->INTS, ((uint32_t)0x01 << (uint32_t)Event),(uint32_t)Event))
 4071              		.loc 1 1716 0
 4072 0062 FB68     		ldr	r3, [r7, #12]
 4073 0064 9B69     		ldr	r3, [r3, #24]
 4074 0066 D3F8A020 		ldr	r2, [r3, #160]
 4075 006a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 4076 006c 4FF00101 		mov	r1, #1
 4077 0070 01FA03F3 		lsl	r3, r1, r3
 4078 0074 1A40     		ands	r2, r2, r3
 4079 0076 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 4080 0078 22FA03F3 		lsr	r3, r2, r3
 4081 007c 002B     		cmp	r3, #0
 4082 007e 04D0     		beq	.L176
1717:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1718:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         *EvtStatus = (uint8_t)SET;
 4083              		.loc 1 1718 0
 4084 0080 7B68     		ldr	r3, [r7, #4]
 4085 0082 4FF00102 		mov	r2, #1
 4086 0086 1A70     		strb	r2, [r3, #0]
 4087 0088 03E0     		b	.L175
 4088              	.L176:
1719:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1720:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       else
1721:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1722:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         *EvtStatus = (uint8_t)RESET;
 4089              		.loc 1 1722 0
 4090 008a 7B68     		ldr	r3, [r7, #4]
 4091 008c 4FF00002 		mov	r2, #0
 4092 0090 1A70     		strb	r2, [r3, #0]
 4093              	.L175:
1723:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1724:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /* *EvtStatus = RD_REG(HandlePtr->CC4yRegsPtr->INTS, (0x01 << (uint8_t)Event),(uint8_t) Event
1725:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	   ? (uint8_t)SET : (uint8_t)RESET;	*/
1726:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1727:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 4094              		.loc 1 1727 0
 4095 0092 4FF00003 		mov	r3, #0
 4096 0096 7B61     		str	r3, [r7, #20]
 4097              	.L172:
1728:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1729:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 4098              		.loc 1 1729 0
 4099 0098 7B69     		ldr	r3, [r7, #20]
1730:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 4100              		.loc 1 1730 0
 4101 009a 1846     		mov	r0, r3
 4102 009c 07F11C07 		add	r7, r7, #28
 4103 00a0 BD46     		mov	sp, r7
 4104 00a2 80BC     		pop	{r7}
 4105 00a4 7047     		bx	lr
 4106              		.cfi_endproc
 4107              	.LFE164:
 4109 00a6 00BF     		.text
 4110              	.Letext0:
 4111              		.file 2 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
 4112              		.file 3 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 4113              		.file 4 "C:\\DAVE3_workspace\\wsHERBY\\LARIX_Software_150907\\Dave\\Generated\\inc\\DAVESupport/..
 4114              		.file 5 "C:\\DAVE3_workspace\\wsHERBY\\LARIX_Software_150907\\Dave\\Generated\\inc\\DAVESupport/..
 4115              		.file 6 "C:\\DAVE3_workspace\\wsHERBY\\LARIX_Software_150907\\Dave\\Generated\\inc\\DAVESupport/..
 4116              		.file 7 "C:\\DAVE3_workspace\\wsHERBY\\LARIX_Software_150907\\Dave\\Generated\\inc\\DAVESupport/..
 4117              		.file 8 "C:\\DAVE3_workspace\\wsHERBY\\LARIX_Software_150907\\Dave\\Generated\\inc\\DAVESupport/..
 4118              		.file 9 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cm4.h"
 4119              		.file 10 "C:\\DAVE3_workspace\\wsHERBY\\LARIX_Software_150907\\Dave\\Generated\\inc\\DAVESupport/.
DEFINED SYMBOLS
                            *ABS*:00000000 PWMSP001.c
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:20     .text.PWMSP001_Init:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:25     .text.PWMSP001_Init:00000000 PWMSP001_Init
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:382    .text.PWMSP001_lInit:00000000 PWMSP001_lInit
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:992    .text.PWMSP001_Start:00000000 PWMSP001_Start
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:377    .text.PWMSP001_lInit:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:3354   .text.PWMSP001_lConfigureSecondSlice:00000000 PWMSP001_lConfigureSecondSlice
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:775    .text.PWMSP001_Deinit:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:780    .text.PWMSP001_Deinit:00000000 PWMSP001_Deinit
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:987    .text.PWMSP001_Start:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:1219   .text.PWMSP001_Stop:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:1224   .text.PWMSP001_Stop:00000000 PWMSP001_Stop
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:1333   .text.PWMSP001_SetCompare:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:1338   .text.PWMSP001_SetCompare:00000000 PWMSP001_SetCompare
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:1437   .text.PWMSP001_lSetCompareEdgeAlign:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:1442   .text.PWMSP001_lSetCompareEdgeAlign:00000000 PWMSP001_lSetCompareEdgeAlign
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:1499   .text.PWMSP001_lSetCompareEdgeAlignTimerConcat:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:1504   .text.PWMSP001_lSetCompareEdgeAlignTimerConcat:00000000 PWMSP001_lSetCompareEdgeAlignTimerConcat
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:1602   .text.PWMSP001_lSetCompareCenterAlign:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:1607   .text.PWMSP001_lSetCompareCenterAlign:00000000 PWMSP001_lSetCompareCenterAlign
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:1661   .text.PWMSP001_SetDutyCycle:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:1666   .text.PWMSP001_SetDutyCycle:00000000 PWMSP001_SetDutyCycle
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:1731   .text.PWMSP001_SetDutyCycle:00000060 $d
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:1736   .text.PWMSP001_lSetDutyEdgeAlign:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:1741   .text.PWMSP001_lSetDutyEdgeAlign:00000000 PWMSP001_lSetDutyEdgeAlign
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:1821   .text.PWMSP001_lSetDutyEdgeAlign:00000098 $d
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:1826   .text.PWMSP001_lSetDutyEdgeAlignTimerConcat:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:1831   .text.PWMSP001_lSetDutyEdgeAlignTimerConcat:00000000 PWMSP001_lSetDutyEdgeAlignTimerConcat
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:1972   .text.PWMSP001_lSetDutyEdgeAlignTimerConcat:00000124 $d
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:1977   .text.PWMSP001_lSetDutyCenterAlign:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:1982   .text.PWMSP001_lSetDutyCenterAlign:00000000 PWMSP001_lSetDutyCenterAlign
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:2060   .text.PWMSP001_lSetDutyCenterAlign:00000094 $d
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:2065   .text.PWMSP001_SetPeriodAndCompare:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:2070   .text.PWMSP001_SetPeriodAndCompare:00000000 PWMSP001_SetPeriodAndCompare
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:2184   .text.PWMSP001_SetPeriod:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:2189   .text.PWMSP001_SetPeriod:00000000 PWMSP001_SetPeriod
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:2322   .text.PWMSP001_SetPwmFreqAndDutyCycle:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:2327   .text.PWMSP001_SetPwmFreqAndDutyCycle:00000000 PWMSP001_SetPwmFreqAndDutyCycle
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:2660   .text.PWMSP001_lSetPwmFreqTimerConcat:00000000 PWMSP001_lSetPwmFreqTimerConcat
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:2478   .text.PWMSP001_SetPwmFreqAndDutyCycle:00000110 $d
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:2484   .text.PWMSP001_SetPwmFreq:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:2489   .text.PWMSP001_SetPwmFreq:00000000 PWMSP001_SetPwmFreq
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:2650   .text.PWMSP001_SetPwmFreq:00000128 $d
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:2655   .text.PWMSP001_lSetPwmFreqTimerConcat:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:2778   .text.PWMSP001_SetTimerVal:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:2783   .text.PWMSP001_SetTimerVal:00000000 PWMSP001_SetTimerVal
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:2854   .text.PWMSP001_GetTimerStatus:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:2859   .text.PWMSP001_GetTimerStatus:00000000 PWMSP001_GetTimerStatus
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:2936   .text.PWMSP001_GetTimerRegsVal:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:2941   .text.PWMSP001_GetTimerRegsVal:00000000 PWMSP001_GetTimerRegsVal
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:3082   .text.PWMSP001_GetPeriodReg:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:3087   .text.PWMSP001_GetPeriodReg:00000000 PWMSP001_GetPeriodReg
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:3170   .text.PWMSP001_SWRequestShadowTransfer:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:3175   .text.PWMSP001_SWRequestShadowTransfer:00000000 PWMSP001_SWRequestShadowTransfer
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:3268   .text.PWMSP001_ResetTrapFlag:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:3273   .text.PWMSP001_ResetTrapFlag:00000000 PWMSP001_ResetTrapFlag
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:3349   .text.PWMSP001_lConfigureSecondSlice:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:3660   .text.PWMSP001_EnableEvent:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:3665   .text.PWMSP001_EnableEvent:00000000 PWMSP001_EnableEvent
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:3745   .text.PWMSP001_DisableEvent:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:3750   .text.PWMSP001_DisableEvent:00000000 PWMSP001_DisableEvent
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:3832   .text.PWMSP001_ClearPendingEvent:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:3837   .text.PWMSP001_ClearPendingEvent:00000000 PWMSP001_ClearPendingEvent
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:3917   .text.PWMSP001_SetPendingEvent:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:3922   .text.PWMSP001_SetPendingEvent:00000000 PWMSP001_SetPendingEvent
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:4002   .text.PWMSP001_GetPendingEvent:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\cceOdmLY.s:4007   .text.PWMSP001_GetPendingEvent:00000000 PWMSP001_GetPendingEvent
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.XMC4500.h.45.215f4b8c79f46c7645c15373868d08c0
                           .group:00000000 wm4.core_cm4.h.47.41af406cb4cda82c972f112a9cd0a024
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.39.3d3d1b4a79aef37532666dc6ee87c6ac
                           .group:00000000 wm4.core_cm4_simd.h.43.b5d1d38735af6366227b4256d330cf13
                           .group:00000000 wm4.core_cm4.h.178.e5ef5ce66d198d7f00f9d0076e267c41
                           .group:00000000 wm4.system_XMC4500.h.29.827f68baa362c84f2abae4ab67dde7c9
                           .group:00000000 wm4.XMC4500.h.198.8e022f279ff353ed081df898dc7b9cf3
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.types.h.60.e75c47576398c648cdcf9000ace5e3d8
                           .group:00000000 wm4.MULTIPLEXER.h.46.4a863fbae1c79f0db26da3ce2dc30d02
                           .group:00000000 wm4.CCU8PWMLIB.h.74.725ec81203769525cc7a424597055f47
                           .group:00000000 wm4.MOTORLIB.h.62.951091d95913dd2ff36d761323a1771d
                           .group:00000000 wm4.DBG001.h.116.d6d9e7459a0faa3905c97c1d2edb339d
                           .group:00000000 wm4.uc_id.h.35.91819d6149ee56f9404d69053d48d018
                           .group:00000000 wm4.CLK001_Const.h.50.e5e9c2ddc89f4cc9e7b93e9648fa94e4
                           .group:00000000 wm4.CLK001_Conf.h.81.851ac7a1268528f4d6739384c2f248a5
                           .group:00000000 wm4.NVIC002_Conf.h.63.9993755b03eb421826d0e4532aa15204
                           .group:00000000 wm4.ERU001_Conf.h.69.61c28b1ac8f55fb79ee064524d8b6415
                           .group:00000000 wm4.ERU002_Conf.h.49.449ecc05b9e62e9b43f2dc6ead06a5ce
                           .group:00000000 wm4.IO002_Conf.h.51.87e2c8c60b647393fe9ced2cae198f63
                           .group:00000000 wm4.Usic.h.54.8af9f733ba5771eeb374435d205ea54b
                           .group:00000000 wm4.UART001_Conf.h.53.31fc52a43d60ddd963b759dbc8ccb910
                           .group:00000000 wm4.UART001.h.109.3e835815a7a59791d8bd39655f4d4cc9
                           .group:00000000 wm4.CCU4Global_Conf.h.63.3185b28f5d60dcacb47ae61d590330d9
                           .group:00000000 wm4.PWMSP001.h.57.29b732b86baf3e81f49153f5f495912e
                           .group:00000000 wm4.usbd_config.h.64.bd01b2d6be88400f5b6095cc78dd2cee
                           .group:00000000 wm4.stdlib.h.13.603ed7eb09a1561ab06840b7c0fcff58
                           .group:00000000 wm4.stddef.h.161.e50ff8a9d5d1abbc15641da28ac571bf
                           .group:00000000 wm4._default_types.h.6.5e12cd604db8ce00b62bb2f02708eaf3
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.161.c6104a0666cf681b6269ddc9b4f516d4
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.53.c69c7609933ff56d59c757cec2d13230
                           .group:00000000 wm4.string.h.8.ef946ad0bc9ad5c970c365dcd1fc4b0a
                           .group:00000000 wm4.string.h.86.d5c872ff52e2712c985b588a0ef39f3c
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4.xmc4_usb.h.86.0df8e4bc81775a7befde6c395bcdee4c
                           .group:00000000 wm4.dwc_otg_regs.h.96.602358b1a0ef2f2c6d02620a154f0cfc
                           .group:00000000 wm4.xmc4_usb.h.97.59ae14584bb42292696e2197b500e282
                           .group:00000000 wm4.CDCClass.h.89.7fca95873b1cbf8116f62fa27fd7c792
                           .group:00000000 wm4.Common.h.87.ed9fec00c6f9ec3cf5c2ac4c6cfcb530
                           .group:00000000 wm4.Attributes.h.96.1b4ef8adf80de3cb4f8c62843bfaf7bf
                           .group:00000000 wm4.StdDescriptors.h.107.d2322ff0c138acada78976933b16bf7b
                           .group:00000000 wm4.Endpoint.h.111.e7536b4385918c15b4c37aa69fbe94e3
                           .group:00000000 wm4.USBController.h.105.7da122fb9e42a1d4ae2ea1662b47f042
                           .group:00000000 wm4.StdRequestType.h.87.0e2654a6e33ff7aef3db3461e4efa272
                           .group:00000000 wm4.CDCClassCommon.h.122.d15a1de5444b7c9e23eadf1dd367720e
                           .group:00000000 wm4.stdio.h.27.f2ac352bab34f31f9f478442827b2ba6
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.1f2c84c0d57dd52dd9936095d9ac218e
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.63.dfdea6580b080784d08faace69b6ed76
                           .group:00000000 wm4.Descriptors.h.92.e858ef8e2efa6b5ed9d1d80dd9b38006
                           .group:00000000 wm4.SYSTM001.h.64.6ecb31c49bc3e7691644fdcdfc11b5cd
                           .group:00000000 wm4.I2C001.h.97.5277d52889d6c741e048ea45ee1277b5
                           .group:00000000 wm4.I2C001_Conf.h.58.2b816ac2c964c55a6c88f9c406d78c9f
                           .group:00000000 wm4.CCU8GLOBAL_Conf.h.82.76c6b1bf357180d1e8ea1f462a66deb8
                           .group:00000000 wm4.PWMMP001.h.74.edfb025e8ccafbe02203b521c6030af5
                           .group:00000000 wm4.PWMSP003_Conf.h.49.d7c9ed31921edf4893f02e6f1d6268b4
                           .group:00000000 wm4.PWMSP003.h.103.903071678b9af5683776405c5b299fbb

UNDEFINED SYMBOLS
CCU4GLOBAL_Init
PWMSP001_Handle0
PWMSP001_Handle1
PWMSP001_Handle2
PWMSP001_Handle3
PWMSP001_Handle4
PWMSP001_Handle5
PWMSP001_Handle6
PWMSP001_Handle7
