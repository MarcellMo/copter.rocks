   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"PWMMP001.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.PWMMP001_Init,"ax",%progbits
  20              		.align	2
  21              		.global	PWMMP001_Init
  22              		.thumb
  23              		.thumb_func
  25              	PWMMP001_Init:
  26              	.LFB135:
  27              		.file 1 "../Dave/Generated/src/PWMMP001/PWMMP001.c"
   1:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*******************************************************************************
   2:../Dave/Generated/src/PWMMP001/PWMMP001.c **** **  DAVE App Name : PWMMP001       App Version: 1.0.20               
   3:../Dave/Generated/src/PWMMP001/PWMMP001.c **** **  This file is generated by DAVE, User modification to this file will be    **
   4:../Dave/Generated/src/PWMMP001/PWMMP001.c **** **  overwritten at the next code generation.                                  **
   5:../Dave/Generated/src/PWMMP001/PWMMP001.c **** *******************************************************************************/
   6:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
   7:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
   8:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*CODE_BLOCK_BEGIN[PWMMP001.c]*/
   9:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
  10:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*******************************************************************************
  11:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  Copyright (c) 2014, Infineon Technologies AG                                 **
  12:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  All rights reserved.                                                         **
  13:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                                                                               **
  14:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  Redistribution and use in source and binary forms, with or without           **
  15:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  modification,are permitted provided that the following conditions are met:   **
  16:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                                                                               **
  17:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  *Redistributions of source code must retain the above copyright notice,      **
  18:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  this list of conditions and the following disclaimer.                        **
  19:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  *Redistributions in binary form must reproduce the above copyright notice,   **
  20:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  this list of conditions and the following disclaimer in the documentation    **
  21:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  and/or other materials provided with the distribution.                       **
  22:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  *Neither the name of the copyright holders nor the names of its contributors **
  23:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  may be used to endorse or promote products derived from this software without**
  24:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  specific prior written permission.                                           **
  25:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                                                                               **
  26:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  **
  27:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    **
  28:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   **
  29:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   **
  30:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         **
  31:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         **
  32:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    **
  33:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      **
  34:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       **
  35:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   **
  36:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  POSSIBILITY OF SUCH DAMAGE.                                                  **
  37:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                                                                               **
  38:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  To improve the quality of the software, users are encouraged to share        **
  39:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  modifications, enhancements or bug fixes with Infineon Technologies AG       **
  40:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  dave@infineon.com).                                                          **
  41:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                                                                               **
  42:../Dave/Generated/src/PWMMP001/PWMMP001.c **** ********************************************************************************
  43:../Dave/Generated/src/PWMMP001/PWMMP001.c **** **                                                                            **
  44:../Dave/Generated/src/PWMMP001/PWMMP001.c **** **                                                                            **
  45:../Dave/Generated/src/PWMMP001/PWMMP001.c **** ** PLATFORM : Infineon XMC4000/XMC1000 Series                                 **
  46:../Dave/Generated/src/PWMMP001/PWMMP001.c **** **                                                                            **
  47:../Dave/Generated/src/PWMMP001/PWMMP001.c **** ** COMPILER : Compiler Independent                                            **
  48:../Dave/Generated/src/PWMMP001/PWMMP001.c **** **                                                                            **
  49:../Dave/Generated/src/PWMMP001/PWMMP001.c **** ** AUTHOR   : DAVE App Developer                                              **
  50:../Dave/Generated/src/PWMMP001/PWMMP001.c **** **                                                                            **
  51:../Dave/Generated/src/PWMMP001/PWMMP001.c **** ** MAY BE CHANGED BY USER [yes/no]: Yes                                       **
  52:../Dave/Generated/src/PWMMP001/PWMMP001.c **** **                                                                            **
  53:../Dave/Generated/src/PWMMP001/PWMMP001.c **** ** MODIFICATION DATE : Feb 17, 2014                                           **
  54:../Dave/Generated/src/PWMMP001/PWMMP001.c **** **                                                                            **
  55:../Dave/Generated/src/PWMMP001/PWMMP001.c **** *******************************************************************************/
  56:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
  57:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*******************************************************************************
  58:../Dave/Generated/src/PWMMP001/PWMMP001.c **** **                       Author(s) Identity                                   **
  59:../Dave/Generated/src/PWMMP001/PWMMP001.c **** ********************************************************************************
  60:../Dave/Generated/src/PWMMP001/PWMMP001.c **** **                                                                            **
  61:../Dave/Generated/src/PWMMP001/PWMMP001.c **** ** Initials     Name                                                          **
  62:../Dave/Generated/src/PWMMP001/PWMMP001.c **** ** ---------------------------------------------------------------------------**
  63:../Dave/Generated/src/PWMMP001/PWMMP001.c **** ** KS           DAVE App Developer                                            **
  64:../Dave/Generated/src/PWMMP001/PWMMP001.c **** *******************************************************************************/
  65:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
  66:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /**
  67:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * @file  PWMMP001.c
  68:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  *
  69:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * @brief This file contains implementations of all Public functions
  70:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  *        of PWMMP001 APP.
  71:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  *        This is the Multiphase PWM app and can generate 2, 3 or 4 phase PWM as
  72:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  *        per user configuration. 
  73:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  *        It works in centre-aligned asymmetric mode and supports simultaneous
  74:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  *        start of the phases.
  75:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  *        User can connect the interrupts of the last slice to the NVIC002 app 
  76:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  *        and write their own interrupt handler to achieve synchronous duty update
  77:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  *        and for error handling.
  78:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  *
  79:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  */
  80:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /* Revision History
  81:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * 01 Jan 2013   v1.0.10   taken as base version
  82:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * 25 Apr 2013   v1.0.12   Constrains for PDR register generation are added
  83:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  *                         Redundant spaces are removed & Spell corrections done.
  84:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * 17 Feb 2014   v1.0.20   1.Error codes are added in various functions, that 
  85:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  *                           can be logged with DBG002 App.                        
  86:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  */
  87:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
  88:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*******************************************************************************
  89:../Dave/Generated/src/PWMMP001/PWMMP001.c **** **                      Include Files                                         **
  90:../Dave/Generated/src/PWMMP001/PWMMP001.c **** *******************************************************************************/
  91:../Dave/Generated/src/PWMMP001/PWMMP001.c **** #include <DAVE3.h>
  92:../Dave/Generated/src/PWMMP001/PWMMP001.c **** #include "../../inc/PWMMP001/PWMMP001.h"
  93:../Dave/Generated/src/PWMMP001/PWMMP001.c **** #include "../../inc/LIBS/CCU8PWMLIB.h"
  94:../Dave/Generated/src/PWMMP001/PWMMP001.c **** #include "../../inc/CCU8GLOBAL/CCU8GLOBAL.h"
  95:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
  96:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /**
  97:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * @cond INTERNAL_DOCS
  98:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  */
  99:../Dave/Generated/src/PWMMP001/PWMMP001.c **** #define APP_GID DBG002_GID_PWMMP001
 100:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 101:../Dave/Generated/src/PWMMP001/PWMMP001.c **** #define PWMMP001_STATUS_LEN 4U
 102:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 103:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   
 104:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*****************************************************************************
 105:../Dave/Generated/src/PWMMP001/PWMMP001.c ****               DUMMY DEFINITIONS OF DEBUG LOG MACROS
 106:../Dave/Generated/src/PWMMP001/PWMMP001.c **** *****************************************************************************/
 107:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*These definitions are included here to avoid compilation errors,
 108:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  since the DBG002 app is not part of the project. All the macros are defined
 109:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  as empty*/ 
 110:../Dave/Generated/src/PWMMP001/PWMMP001.c **** #ifndef _DBG002_H_
 111:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 112:../Dave/Generated/src/PWMMP001/PWMMP001.c **** #define DBG002_RegisterCallBack(A,B,C)
 113:../Dave/Generated/src/PWMMP001/PWMMP001.c **** #define DBG002_I(e) 
 114:../Dave/Generated/src/PWMMP001/PWMMP001.c **** #define DBG002_IG(e,g) 
 115:../Dave/Generated/src/PWMMP001/PWMMP001.c **** #define DBG002_IH(e,h) 
 116:../Dave/Generated/src/PWMMP001/PWMMP001.c **** #define DBG002_IP(e,p) 
 117:../Dave/Generated/src/PWMMP001/PWMMP001.c **** #define DBG002_IGH(e,g,h) 
 118:../Dave/Generated/src/PWMMP001/PWMMP001.c **** #define DBG002_IGP(e,g,p) 
 119:../Dave/Generated/src/PWMMP001/PWMMP001.c **** #define DBG002_IHP(e,h,p) 
 120:../Dave/Generated/src/PWMMP001/PWMMP001.c **** #define DBG002_IGHP(e,g,h,p) 
 121:../Dave/Generated/src/PWMMP001/PWMMP001.c **** #define DBG002_N(e) 
 122:../Dave/Generated/src/PWMMP001/PWMMP001.c **** #define DBG002_NG(e,g) 
 123:../Dave/Generated/src/PWMMP001/PWMMP001.c **** #define DBG002_NH(e,h) 
 124:../Dave/Generated/src/PWMMP001/PWMMP001.c **** #define DBG002_NP(e,p) 
 125:../Dave/Generated/src/PWMMP001/PWMMP001.c **** #define DBG002_NGH(e,g,h) 
 126:../Dave/Generated/src/PWMMP001/PWMMP001.c **** #define DBG002_NGP(e,g,p) 
 127:../Dave/Generated/src/PWMMP001/PWMMP001.c **** #define DBG002_NHP(e,h,p) 
 128:../Dave/Generated/src/PWMMP001/PWMMP001.c **** #define DBG002_NGHP(e,g,h,p) 
 129:../Dave/Generated/src/PWMMP001/PWMMP001.c **** #define DBG002_ID(e) 
 130:../Dave/Generated/src/PWMMP001/PWMMP001.c **** #define DBG002_IS(e) 
 131:../Dave/Generated/src/PWMMP001/PWMMP001.c **** #define DBG002_ISG(e,g) 
 132:../Dave/Generated/src/PWMMP001/PWMMP001.c **** #define DBG002_SAFETY_CRITICAL(groupid,messageid,length,value)
 133:../Dave/Generated/src/PWMMP001/PWMMP001.c **** #define DBG002_CRITICAL(groupid,messageid,length,value)
 134:../Dave/Generated/src/PWMMP001/PWMMP001.c **** #define DBG002_INFO(groupid,messageid,length,value)
 135:../Dave/Generated/src/PWMMP001/PWMMP001.c **** #define DBG002_WARNING(groupid,messageid,length,value)
 136:../Dave/Generated/src/PWMMP001/PWMMP001.c **** #define DBG002_INFO(groupid,messageid,length,value)
 137:../Dave/Generated/src/PWMMP001/PWMMP001.c **** #define DBG002_TRACE(groupid,messageid,length,value)
 138:../Dave/Generated/src/PWMMP001/PWMMP001.c **** #define DBG002_FUNCTION_ENTRY(GID, Status) 
 139:../Dave/Generated/src/PWMMP001/PWMMP001.c **** #define DBG002_FUNCTION_EXIT(GID, Status) 
 140:../Dave/Generated/src/PWMMP001/PWMMP001.c **** #define DBG002_MESSAGEID_LITERAL 
 141:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 142:../Dave/Generated/src/PWMMP001/PWMMP001.c **** #endif/* End of definitions of dummy Debug Log macros*/
 143:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 144:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /**
 145:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * @brief This function is used to initialize the APP.
 146:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * It will configure CCU8_CCy slice registers with the selected PWM parameters.
 147:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * @param[in]   HandlePtr Pointer to PWMMP001_HandleType structure
 148:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * @return status_t\n
 149:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * DAVEApp_SUCCESS: if function is successful\n
 150:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * PWMMP001_OPER_NOT_ALLOWED_ERROR: If this function is called in the state
 151:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * other than PWMMP001_UNINITIALIZED.
 152:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  */
 153:../Dave/Generated/src/PWMMP001/PWMMP001.c **** status_t PWMMP001_lInit(const PWMMP001_HandleType* HandlePtr);
 154:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 155:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*******************************************************************************
 156:../Dave/Generated/src/PWMMP001/PWMMP001.c **** **                 Function definitions                                       **
 157:../Dave/Generated/src/PWMMP001/PWMMP001.c **** *******************************************************************************/
 158:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 159:../Dave/Generated/src/PWMMP001/PWMMP001.c **** ///   
 160:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 161:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 162:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /**
 163:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * This function initializes all instances of the PWMMP001 App.
 164:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  */
 165:../Dave/Generated/src/PWMMP001/PWMMP001.c **** void PWMMP001_Init(void)
 166:../Dave/Generated/src/PWMMP001/PWMMP001.c **** {
  28              		.loc 1 166 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 82B0     		sub	sp, sp, #8
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 16
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
 167:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   status_t Status;
 168:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   /*Clock initialization - if it is not already done by DAVE3.h */
 169:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   CLK001_Init();
  43              		.loc 1 169 0
  44 0006 FFF7FEFF 		bl	CLK001_Init
 170:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   /* CCU8 global init to start the prescalar and de-assert the module */
 171:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   CCU8GLOBAL_Init();
  45              		.loc 1 171 0
  46 000a FFF7FEFF 		bl	CCU8GLOBAL_Init
 172:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   Status = PWMMP001_lInit(&PWMMP001_Handle0);
  47              		.loc 1 172 0
  48 000e 40F20000 		movw	r0, #:lower16:PWMMP001_Handle0
  49 0012 C0F20000 		movt	r0, #:upper16:PWMMP001_Handle0
  50 0016 FFF7FEFF 		bl	PWMMP001_lInit
  51 001a 7860     		str	r0, [r7, #4]
 173:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   if(Status == (uint32_t)DAVEApp_SUCCESS)
  52              		.loc 1 173 0
  53 001c 7B68     		ldr	r3, [r7, #4]
  54 001e 002B     		cmp	r3, #0
  55 0020 0DD1     		bne	.L2
 174:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   {
 175:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     if (PWMMP001_Handle0.StartControl == (uint8_t)SET)
  56              		.loc 1 175 0
  57 0022 40F20003 		movw	r3, #:lower16:PWMMP001_Handle0
  58 0026 C0F20003 		movt	r3, #:upper16:PWMMP001_Handle0
  59 002a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
  60 002c 012B     		cmp	r3, #1
  61 002e 06D1     		bne	.L2
 176:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     {
 177:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       Status = PWMMP001_Start(&PWMMP001_Handle0);
  62              		.loc 1 177 0
  63 0030 40F20000 		movw	r0, #:lower16:PWMMP001_Handle0
  64 0034 C0F20000 		movt	r0, #:upper16:PWMMP001_Handle0
  65 0038 FFF7FEFF 		bl	PWMMP001_Start
  66 003c 7860     		str	r0, [r7, #4]
  67              	.L2:
 178:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       DBG002_N(Status != DAVEApp_SUCCESS);
 179:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     }
 180:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   }
 181:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   else
 182:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   {
 183:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMMP001_STATUS_LEN, &Status);
 184:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   }	  
 185:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 	        
 186:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     /* Configuration of Phase 1 Direct Output Pin 1.14 based on User configuration */
 187:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   PORT1->PDR1 &= (~((uint32_t)PORT1_PDR1_PD14_Msk));
  68              		.loc 1 187 0
  69 003e 4FF40143 		mov	r3, #33024
  70 0042 C4F60203 		movt	r3, 18434
  71 0046 4FF40142 		mov	r2, #33024
  72 004a C4F60202 		movt	r2, 18434
  73 004e 526C     		ldr	r2, [r2, #68]
  74 0050 22F0E062 		bic	r2, r2, #117440512
  75 0054 5A64     		str	r2, [r3, #68]
 188:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   PORT1->PDR1 |= (((uint32_t)0U << (uint32_t)PORT1_PDR1_PD14_Pos) & \
  76              		.loc 1 188 0
  77 0056 4FF40143 		mov	r3, #33024
  78 005a C4F60203 		movt	r3, 18434
  79 005e 4FF40142 		mov	r2, #33024
  80 0062 C4F60202 		movt	r2, 18434
  81 0066 526C     		ldr	r2, [r2, #68]
  82 0068 5A64     		str	r2, [r3, #68]
 189:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                                (uint32_t)PORT1_PDR1_PD14_Msk);
 190:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   PORT1->IOCR12  &= (~((uint32_t)PORT_IOCR_PC2_PO_Msk));
  83              		.loc 1 190 0
  84 006a 4FF40143 		mov	r3, #33024
  85 006e C4F60203 		movt	r3, 18434
  86 0072 4FF40142 		mov	r2, #33024
  87 0076 C4F60202 		movt	r2, 18434
  88 007a D269     		ldr	r2, [r2, #28]
  89 007c 22F48002 		bic	r2, r2, #4194304
  90 0080 DA61     		str	r2, [r3, #28]
 191:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   PORT1->IOCR12  |= (((uint32_t)0U << (uint32_t)PORT_IOCR_PC2_PO_Pos) & \
  91              		.loc 1 191 0
  92 0082 4FF40143 		mov	r3, #33024
  93 0086 C4F60203 		movt	r3, 18434
  94 008a 4FF40142 		mov	r2, #33024
  95 008e C4F60202 		movt	r2, 18434
  96 0092 D269     		ldr	r2, [r2, #28]
  97 0094 DA61     		str	r2, [r3, #28]
 192:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                                (uint32_t)PORT_IOCR_PC2_PO_Msk);   
 193:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     /* Configuration of Phase 1 Inverted Output Pin 1.11 based on User configuration */
 194:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   PORT1->PDR1 &= (~((uint32_t)PORT1_PDR1_PD11_Msk));
  98              		.loc 1 194 0
  99 0096 4FF40143 		mov	r3, #33024
 100 009a C4F60203 		movt	r3, 18434
 101 009e 4FF40142 		mov	r2, #33024
 102 00a2 C4F60202 		movt	r2, 18434
 103 00a6 526C     		ldr	r2, [r2, #68]
 104 00a8 22F4E042 		bic	r2, r2, #28672
 105 00ac 5A64     		str	r2, [r3, #68]
 195:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   PORT1->PDR1 |= (((uint32_t)0U << (uint32_t)PORT1_PDR1_PD11_Pos) & \
 106              		.loc 1 195 0
 107 00ae 4FF40143 		mov	r3, #33024
 108 00b2 C4F60203 		movt	r3, 18434
 109 00b6 4FF40142 		mov	r2, #33024
 110 00ba C4F60202 		movt	r2, 18434
 111 00be 526C     		ldr	r2, [r2, #68]
 112 00c0 5A64     		str	r2, [r3, #68]
 196:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                              (uint32_t)PORT1_PDR1_PD11_Msk);
 197:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   PORT1->IOCR8  &= (~((uint32_t)PORT_IOCR_PC3_PO_Msk));
 113              		.loc 1 197 0
 114 00c2 4FF40143 		mov	r3, #33024
 115 00c6 C4F60203 		movt	r3, 18434
 116 00ca 4FF40142 		mov	r2, #33024
 117 00ce C4F60202 		movt	r2, 18434
 118 00d2 9269     		ldr	r2, [r2, #24]
 119 00d4 22F08042 		bic	r2, r2, #1073741824
 120 00d8 9A61     		str	r2, [r3, #24]
 198:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   PORT1->IOCR8  |= (((uint32_t)0U << (uint32_t)PORT_IOCR_PC3_PO_Pos) & \
 121              		.loc 1 198 0
 122 00da 4FF40143 		mov	r3, #33024
 123 00de C4F60203 		movt	r3, 18434
 124 00e2 4FF40142 		mov	r2, #33024
 125 00e6 C4F60202 		movt	r2, 18434
 126 00ea 9269     		ldr	r2, [r2, #24]
 127 00ec 9A61     		str	r2, [r3, #24]
 199:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                                (uint32_t)PORT_IOCR_PC3_PO_Msk);
 200:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     /* Configuration of Phase 2 Direct Output Pin 1.4 based on User configuration */
 201:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   PORT1->PDR0  &= (~(PORT1_PDR0_PD4_Msk));
 128              		.loc 1 201 0
 129 00ee 4FF40143 		mov	r3, #33024
 130 00f2 C4F60203 		movt	r3, 18434
 131 00f6 4FF40142 		mov	r2, #33024
 132 00fa C4F60202 		movt	r2, 18434
 133 00fe 126C     		ldr	r2, [r2, #64]
 134 0100 22F4E022 		bic	r2, r2, #458752
 135 0104 1A64     		str	r2, [r3, #64]
 202:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   PORT1->PDR0  |= ((0 << PORT1_PDR0_PD4_Pos) & \
 136              		.loc 1 202 0
 137 0106 4FF40143 		mov	r3, #33024
 138 010a C4F60203 		movt	r3, 18434
 139 010e 4FF40142 		mov	r2, #33024
 140 0112 C4F60202 		movt	r2, 18434
 141 0116 126C     		ldr	r2, [r2, #64]
 142 0118 1A64     		str	r2, [r3, #64]
 203:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                              PORT1_PDR0_PD4_Msk);
 204:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   PORT1->IOCR4  &= (~((uint32_t)PORT_IOCR_PC0_PO_Msk));
 143              		.loc 1 204 0
 144 011a 4FF40143 		mov	r3, #33024
 145 011e C4F60203 		movt	r3, 18434
 146 0122 4FF40142 		mov	r2, #33024
 147 0126 C4F60202 		movt	r2, 18434
 148 012a 5269     		ldr	r2, [r2, #20]
 149 012c 22F04002 		bic	r2, r2, #64
 150 0130 5A61     		str	r2, [r3, #20]
 205:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   PORT1->IOCR4  |= (((uint32_t)0U << (uint32_t)PORT_IOCR_PC0_PO_Pos) & \
 151              		.loc 1 205 0
 152 0132 4FF40143 		mov	r3, #33024
 153 0136 C4F60203 		movt	r3, 18434
 154 013a 4FF40142 		mov	r2, #33024
 155 013e C4F60202 		movt	r2, 18434
 156 0142 5269     		ldr	r2, [r2, #20]
 157 0144 5A61     		str	r2, [r3, #20]
 206:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                                (uint32_t)PORT_IOCR_PC0_PO_Msk);
 207:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     /* Configuration of Phase 2 Inverted Output Pin 1.10 based on User configuration */
 208:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   PORT1->PDR1 &= (~(PORT1_PDR1_PD10_Msk));
 158              		.loc 1 208 0
 159 0146 4FF40143 		mov	r3, #33024
 160 014a C4F60203 		movt	r3, 18434
 161 014e 4FF40142 		mov	r2, #33024
 162 0152 C4F60202 		movt	r2, 18434
 163 0156 526C     		ldr	r2, [r2, #68]
 164 0158 22F4E062 		bic	r2, r2, #1792
 165 015c 5A64     		str	r2, [r3, #68]
 209:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   PORT1->PDR1 |= ((0 << PORT1_PDR1_PD10_Pos) & \
 166              		.loc 1 209 0
 167 015e 4FF40143 		mov	r3, #33024
 168 0162 C4F60203 		movt	r3, 18434
 169 0166 4FF40142 		mov	r2, #33024
 170 016a C4F60202 		movt	r2, 18434
 171 016e 526C     		ldr	r2, [r2, #68]
 172 0170 5A64     		str	r2, [r3, #68]
 210:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                              PORT1_PDR1_PD10_Msk);
 211:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   PORT1->IOCR8  &= (~((uint32_t)PORT_IOCR_PC2_PO_Msk));
 173              		.loc 1 211 0
 174 0172 4FF40143 		mov	r3, #33024
 175 0176 C4F60203 		movt	r3, 18434
 176 017a 4FF40142 		mov	r2, #33024
 177 017e C4F60202 		movt	r2, 18434
 178 0182 9269     		ldr	r2, [r2, #24]
 179 0184 22F48002 		bic	r2, r2, #4194304
 180 0188 9A61     		str	r2, [r3, #24]
 212:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   PORT1->IOCR8  |= (((uint32_t)0U << (uint32_t)PORT_IOCR_PC2_PO_Pos) & \
 181              		.loc 1 212 0
 182 018a 4FF40143 		mov	r3, #33024
 183 018e C4F60203 		movt	r3, 18434
 184 0192 4FF40142 		mov	r2, #33024
 185 0196 C4F60202 		movt	r2, 18434
 186 019a 9269     		ldr	r2, [r2, #24]
 187 019c 9A61     		str	r2, [r3, #24]
 213:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                                (uint32_t)PORT_IOCR_PC2_PO_Msk);
 214:../Dave/Generated/src/PWMMP001/PWMMP001.c **** }
 188              		.loc 1 214 0
 189 019e 07F10807 		add	r7, r7, #8
 190 01a2 BD46     		mov	sp, r7
 191 01a4 80BD     		pop	{r7, pc}
 192              		.cfi_endproc
 193              	.LFE135:
 195 01a6 00BF     		.section	.text.PWMMP001_lInit,"ax",%progbits
 196              		.align	2
 197              		.global	PWMMP001_lInit
 198              		.thumb
 199              		.thumb_func
 201              	PWMMP001_lInit:
 202              	.LFB136:
 215:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 216:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /**
 217:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * This function initializes all instances of the PWMMP001 app and changes state to INITIALIZED.
 218:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  */
 219:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*<<<DD_PWMMP001_API_1>>>*/
 220:../Dave/Generated/src/PWMMP001/PWMMP001.c **** status_t PWMMP001_lInit(const PWMMP001_HandleType* HandlePtr)
 221:../Dave/Generated/src/PWMMP001/PWMMP001.c **** {
 203              		.loc 1 221 0
 204              		.cfi_startproc
 205              		@ args = 0, pretend = 0, frame = 16
 206              		@ frame_needed = 1, uses_anonymous_args = 0
 207 0000 80B5     		push	{r7, lr}
 208              	.LCFI3:
 209              		.cfi_def_cfa_offset 8
 210              		.cfi_offset 7, -8
 211              		.cfi_offset 14, -4
 212 0002 84B0     		sub	sp, sp, #16
 213              	.LCFI4:
 214              		.cfi_def_cfa_offset 24
 215 0004 00AF     		add	r7, sp, #0
 216              	.LCFI5:
 217              		.cfi_def_cfa_register 7
 218 0006 7860     		str	r0, [r7, #4]
 222:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   status_t Status = (uint32_t)PWMMP001_OPER_NOT_ALLOWED_ERROR;
 219              		.loc 1 222 0
 220 0008 4FF00103 		mov	r3, #1
 221 000c FB60     		str	r3, [r7, #12]
 223:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   uint8_t PhaseNumber = 0U;
 222              		.loc 1 223 0
 223 000e 4FF00003 		mov	r3, #0
 224 0012 FB72     		strb	r3, [r7, #11]
 224:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   DBG002_FUNCTION_ENTRY(DBG002_GID_PWMMP001, (uint32_t)PWMMP001_FUNCTION_ENTRY);
 225:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   do
 226:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   {
 227:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*<<<DD_PWMMP001_API_1_1>>>*/
 228:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     if (HandlePtr->DynamicHandle->State != PWMMP001_UNINITIALIZED)
 225              		.loc 1 228 0
 226 0014 7B68     		ldr	r3, [r7, #4]
 227 0016 DB69     		ldr	r3, [r3, #28]
 228 0018 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 229 001a 002B     		cmp	r3, #0
 230 001c 58D1     		bne	.L9
 231              	.L4:
 229:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     {
 230:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       break;
 231:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     }
 232:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*<<<DD_PWMMP001_API_1_1>>>*/
 233:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     do
 234:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     {
 235:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       Status = CCU8PWMLIB_Init(HandlePtr->PhaseHandlePtr[PhaseNumber]);
 232              		.loc 1 235 0
 233 001e FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 234 0020 7B68     		ldr	r3, [r7, #4]
 235 0022 02F10202 		add	r2, r2, #2
 236 0026 53F82230 		ldr	r3, [r3, r2, lsl #2]
 237 002a 1846     		mov	r0, r3
 238 002c FFF7FEFF 		bl	CCU8PWMLIB_Init
 239 0030 F860     		str	r0, [r7, #12]
 236:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       /* Enable multi channel mode */
 237:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       if (HandlePtr->kMultiChanModeSupport == 1U)
 240              		.loc 1 237 0
 241 0032 7B68     		ldr	r3, [r7, #4]
 242 0034 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 243 0036 012B     		cmp	r3, #1
 244 0038 30D1     		bne	.L6
 238:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       {
 239:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         SET_BIT(HandlePtr->PhaseHandlePtr[PhaseNumber]->CC8yRegsPtr->TC,
 245              		.loc 1 239 0
 246 003a FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 247 003c 7B68     		ldr	r3, [r7, #4]
 248 003e 02F10202 		add	r2, r2, #2
 249 0042 53F82230 		ldr	r3, [r3, r2, lsl #2]
 250 0046 5B6B     		ldr	r3, [r3, #52]
 251 0048 F97A     		ldrb	r1, [r7, #11]	@ zero_extendqisi2
 252 004a 7A68     		ldr	r2, [r7, #4]
 253 004c 01F10201 		add	r1, r1, #2
 254 0050 52F82120 		ldr	r2, [r2, r1, lsl #2]
 255 0054 526B     		ldr	r2, [r2, #52]
 256 0056 5269     		ldr	r2, [r2, #20]
 257 0058 42F00072 		orr	r2, r2, #33554432
 258 005c 5A61     		str	r2, [r3, #20]
 240:../Dave/Generated/src/PWMMP001/PWMMP001.c ****               CCU8_CC8_TC_MCME1_Pos);
 241:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         HandlePtr->PhaseHandlePtr[PhaseNumber]->CC8yKernRegsPtr->GCTRL |= 
 259              		.loc 1 241 0
 260 005e FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 261 0060 7B68     		ldr	r3, [r7, #4]
 262 0062 02F10202 		add	r2, r2, #2
 263 0066 53F82230 		ldr	r3, [r3, r2, lsl #2]
 264 006a 1B6B     		ldr	r3, [r3, #48]
 265 006c F97A     		ldrb	r1, [r7, #11]	@ zero_extendqisi2
 266 006e 7A68     		ldr	r2, [r7, #4]
 267 0070 01F10201 		add	r1, r1, #2
 268 0074 52F82120 		ldr	r2, [r2, r1, lsl #2]
 269 0078 126B     		ldr	r2, [r2, #48]
 270 007a 1168     		ldr	r1, [r2, #0]
 242:../Dave/Generated/src/PWMMP001/PWMMP001.c ****           (uint32_t)1U << ((uint32_t)HandlePtr->PhaseHandlePtr[PhaseNumber]->FirstSlice + (uint32_t
 271              		.loc 1 242 0
 272 007c F87A     		ldrb	r0, [r7, #11]	@ zero_extendqisi2
 273 007e 7A68     		ldr	r2, [r7, #4]
 274 0080 00F10200 		add	r0, r0, #2
 275 0084 52F82020 		ldr	r2, [r2, r0, lsl #2]
 276 0088 92F84520 		ldrb	r2, [r2, #69]	@ zero_extendqisi2
 277 008c 02F10A02 		add	r2, r2, #10
 278 0090 4FF00100 		mov	r0, #1
 279 0094 00FA02F2 		lsl	r2, r0, r2
 241:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         HandlePtr->PhaseHandlePtr[PhaseNumber]->CC8yKernRegsPtr->GCTRL |= 
 280              		.loc 1 241 0
 281 0098 0A43     		orrs	r2, r2, r1
 282 009a 1A60     		str	r2, [r3, #0]
 283              	.L6:
 243:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       }
 244:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       PhaseNumber++;
 284              		.loc 1 244 0
 285 009c FB7A     		ldrb	r3, [r7, #11]
 286 009e 03F10103 		add	r3, r3, #1
 287 00a2 FB72     		strb	r3, [r7, #11]
 245:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     } while ((PhaseNumber < HandlePtr->kNumPhases) && (HandlePtr->PhaseHandlePtr[PhaseNumber] != NU
 288              		.loc 1 245 0
 289 00a4 7B68     		ldr	r3, [r7, #4]
 290 00a6 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 291 00a8 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 292 00aa 9A42     		cmp	r2, r3
 293 00ac 07D2     		bcs	.L7
 294              		.loc 1 245 0 is_stmt 0 discriminator 1
 295 00ae FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 296 00b0 7B68     		ldr	r3, [r7, #4]
 297 00b2 02F10202 		add	r2, r2, #2
 298 00b6 53F82230 		ldr	r3, [r3, r2, lsl #2]
 299 00ba 002B     		cmp	r3, #0
 300 00bc AFD1     		bne	.L4
 301              	.L7:
 246:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 247:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     HandlePtr->DynamicHandle->State = PWMMP001_INITIALIZED;
 302              		.loc 1 247 0 is_stmt 1
 303 00be 7B68     		ldr	r3, [r7, #4]
 304 00c0 DB69     		ldr	r3, [r3, #28]
 305 00c2 4FF00102 		mov	r2, #1
 306 00c6 1A70     		strb	r2, [r3, #0]
 248:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 307              		.loc 1 248 0
 308 00c8 4FF00003 		mov	r3, #0
 309 00cc FB60     		str	r3, [r7, #12]
 310 00ce 00E0     		b	.L5
 311              	.L9:
 230:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       break;
 312              		.loc 1 230 0
 313 00d0 00BF     		nop
 314              	.L5:
 249:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   } while (0);
 250:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   if (Status != (uint32_t)DAVEApp_SUCCESS)
 251:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   {
 252:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMMP001_STATUS_LEN, &Status);
 253:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   }
 254:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   DBG002_FUNCTION_EXIT(DBG002_GID_PWMMP001, (uint32_t)PWMMP001_FUNCTION_EXIT);
 255:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   return Status;
 315              		.loc 1 255 0
 316 00d2 FB68     		ldr	r3, [r7, #12]
 256:../Dave/Generated/src/PWMMP001/PWMMP001.c **** }
 317              		.loc 1 256 0
 318 00d4 1846     		mov	r0, r3
 319 00d6 07F11007 		add	r7, r7, #16
 320 00da BD46     		mov	sp, r7
 321 00dc 80BD     		pop	{r7, pc}
 322              		.cfi_endproc
 323              	.LFE136:
 325 00de 00BF     		.section	.text.PWMMP001_Deinit,"ax",%progbits
 326              		.align	2
 327              		.global	PWMMP001_Deinit
 328              		.thumb
 329              		.thumb_func
 331              	PWMMP001_Deinit:
 332              	.LFB137:
 257:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 258:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*<<<DD_PWMMP001_API_2>>>*/
 259:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /**
 260:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * This function de-initializes the PWMMP001 app. 
 261:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  */
 262:../Dave/Generated/src/PWMMP001/PWMMP001.c **** status_t PWMMP001_Deinit(const PWMMP001_HandleType* HandlePtr)
 263:../Dave/Generated/src/PWMMP001/PWMMP001.c **** {
 333              		.loc 1 263 0
 334              		.cfi_startproc
 335              		@ args = 0, pretend = 0, frame = 16
 336              		@ frame_needed = 1, uses_anonymous_args = 0
 337 0000 80B5     		push	{r7, lr}
 338              	.LCFI6:
 339              		.cfi_def_cfa_offset 8
 340              		.cfi_offset 7, -8
 341              		.cfi_offset 14, -4
 342 0002 84B0     		sub	sp, sp, #16
 343              	.LCFI7:
 344              		.cfi_def_cfa_offset 24
 345 0004 00AF     		add	r7, sp, #0
 346              	.LCFI8:
 347              		.cfi_def_cfa_register 7
 348 0006 7860     		str	r0, [r7, #4]
 264:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   status_t Status = (uint32_t)PWMMP001_OPER_NOT_ALLOWED_ERROR;
 349              		.loc 1 264 0
 350 0008 4FF00103 		mov	r3, #1
 351 000c FB60     		str	r3, [r7, #12]
 265:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   uint8_t PhaseNumber = 0U;
 352              		.loc 1 265 0
 353 000e 4FF00003 		mov	r3, #0
 354 0012 FB72     		strb	r3, [r7, #11]
 266:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 267:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*<<<DD_PWMMP001_API_2_1>>>*/
 268:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     if (HandlePtr->DynamicHandle->State == PWMMP001_UNINITIALIZED)
 355              		.loc 1 268 0
 356 0014 7B68     		ldr	r3, [r7, #4]
 357 0016 DB69     		ldr	r3, [r3, #28]
 358 0018 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 359 001a 002B     		cmp	r3, #0
 360 001c 22D0     		beq	.L11
 361              	.L13:
 269:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     {
 270:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMMP001_STATUS_LEN, &Status);
 271:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     }
 272:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*<<<DD_PWMMP001_API_2_2>>>*/
 273:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     else
 274:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     {
 275:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       do
 276:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       {
 277:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         Status = CCU8PWMLIB_Deinit(HandlePtr->PhaseHandlePtr[PhaseNumber]);
 362              		.loc 1 277 0 discriminator 1
 363 001e FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 364 0020 7B68     		ldr	r3, [r7, #4]
 365 0022 02F10202 		add	r2, r2, #2
 366 0026 53F82230 		ldr	r3, [r3, r2, lsl #2]
 367 002a 1846     		mov	r0, r3
 368 002c FFF7FEFF 		bl	CCU8PWMLIB_Deinit
 369 0030 F860     		str	r0, [r7, #12]
 278:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         PhaseNumber++;
 370              		.loc 1 278 0 discriminator 1
 371 0032 FB7A     		ldrb	r3, [r7, #11]
 372 0034 03F10103 		add	r3, r3, #1
 373 0038 FB72     		strb	r3, [r7, #11]
 279:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       } while ( (PhaseNumber < HandlePtr->kNumPhases) && (HandlePtr->PhaseHandlePtr[PhaseNumber] !=
 374              		.loc 1 279 0 discriminator 1
 375 003a 7B68     		ldr	r3, [r7, #4]
 376 003c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 377 003e FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 378 0040 9A42     		cmp	r2, r3
 379 0042 07D2     		bcs	.L12
 380 0044 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 381 0046 7B68     		ldr	r3, [r7, #4]
 382 0048 02F10202 		add	r2, r2, #2
 383 004c 53F82230 		ldr	r3, [r3, r2, lsl #2]
 384 0050 002B     		cmp	r3, #0
 385 0052 E4D1     		bne	.L13
 386              	.L12:
 280:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       HandlePtr->DynamicHandle->State = PWMMP001_UNINITIALIZED;
 387              		.loc 1 280 0
 388 0054 7B68     		ldr	r3, [r7, #4]
 389 0056 DB69     		ldr	r3, [r3, #28]
 390 0058 4FF00002 		mov	r2, #0
 391 005c 1A70     		strb	r2, [r3, #0]
 281:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 392              		.loc 1 281 0
 393 005e 4FF00003 		mov	r3, #0
 394 0062 FB60     		str	r3, [r7, #12]
 395              	.L11:
 282:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     }
 283:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   DBG002_FUNCTION_EXIT(DBG002_GID_PWMMP001, (uint32_t)PWMMP001_FUNCTION_EXIT);
 284:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   return Status;
 396              		.loc 1 284 0
 397 0064 FB68     		ldr	r3, [r7, #12]
 285:../Dave/Generated/src/PWMMP001/PWMMP001.c **** }
 398              		.loc 1 285 0
 399 0066 1846     		mov	r0, r3
 400 0068 07F11007 		add	r7, r7, #16
 401 006c BD46     		mov	sp, r7
 402 006e 80BD     		pop	{r7, pc}
 403              		.cfi_endproc
 404              	.LFE137:
 406              		.section	.text.PWMMP001_DisableGlobalStart,"ax",%progbits
 407              		.align	2
 408              		.global	PWMMP001_DisableGlobalStart
 409              		.thumb
 410              		.thumb_func
 412              	PWMMP001_DisableGlobalStart:
 413              	.LFB138:
 286:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*
 287:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * This will clear the respective CCU8 module bit in the CCUCON register.
 288:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  */
 289:../Dave/Generated/src/PWMMP001/PWMMP001.c **** void PWMMP001_DisableGlobalStart(const PWMMP001_HandleType* HandlePtr)
 290:../Dave/Generated/src/PWMMP001/PWMMP001.c **** {
 414              		.loc 1 290 0
 415              		.cfi_startproc
 416              		@ args = 0, pretend = 0, frame = 8
 417              		@ frame_needed = 1, uses_anonymous_args = 0
 418              		@ link register save eliminated.
 419 0000 80B4     		push	{r7}
 420              	.LCFI9:
 421              		.cfi_def_cfa_offset 4
 422              		.cfi_offset 7, -4
 423 0002 83B0     		sub	sp, sp, #12
 424              	.LCFI10:
 425              		.cfi_def_cfa_offset 16
 426 0004 00AF     		add	r7, sp, #0
 427              	.LCFI11:
 428              		.cfi_def_cfa_register 7
 429 0006 7860     		str	r0, [r7, #4]
 291:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   CLR_BIT(SCU_GENERAL->CCUCON, (((uint32_t)HandlePtr->kModuleNo + 8U)));
 430              		.loc 1 291 0
 431 0008 4FF48043 		mov	r3, #16384
 432 000c C5F20003 		movt	r3, 20480
 433 0010 4FF48042 		mov	r2, #16384
 434 0014 C5F20002 		movt	r2, 20480
 435 0018 D16C     		ldr	r1, [r2, #76]
 436 001a 7A68     		ldr	r2, [r7, #4]
 437 001c D278     		ldrb	r2, [r2, #3]	@ zero_extendqisi2
 438 001e 02F10802 		add	r2, r2, #8
 439 0022 4FF00100 		mov	r0, #1
 440 0026 00FA02F2 		lsl	r2, r0, r2
 441 002a 6FEA0202 		mvn	r2, r2
 442 002e 0A40     		ands	r2, r2, r1
 443 0030 DA64     		str	r2, [r3, #76]
 292:../Dave/Generated/src/PWMMP001/PWMMP001.c **** }
 444              		.loc 1 292 0
 445 0032 07F10C07 		add	r7, r7, #12
 446 0036 BD46     		mov	sp, r7
 447 0038 80BC     		pop	{r7}
 448 003a 7047     		bx	lr
 449              		.cfi_endproc
 450              	.LFE138:
 452              		.section	.text.PWMMP001_EnableGlobalStart,"ax",%progbits
 453              		.align	2
 454              		.global	PWMMP001_EnableGlobalStart
 455              		.thumb
 456              		.thumb_func
 458              	PWMMP001_EnableGlobalStart:
 459              	.LFB139:
 293:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*
 294:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * This will set the respective CCU8 module bit in the CCUCON register.
 295:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  */
 296:../Dave/Generated/src/PWMMP001/PWMMP001.c **** void PWMMP001_EnableGlobalStart(const PWMMP001_HandleType* HandlePtr)    
 297:../Dave/Generated/src/PWMMP001/PWMMP001.c **** {
 460              		.loc 1 297 0
 461              		.cfi_startproc
 462              		@ args = 0, pretend = 0, frame = 8
 463              		@ frame_needed = 1, uses_anonymous_args = 0
 464              		@ link register save eliminated.
 465 0000 80B4     		push	{r7}
 466              	.LCFI12:
 467              		.cfi_def_cfa_offset 4
 468              		.cfi_offset 7, -4
 469 0002 83B0     		sub	sp, sp, #12
 470              	.LCFI13:
 471              		.cfi_def_cfa_offset 16
 472 0004 00AF     		add	r7, sp, #0
 473              	.LCFI14:
 474              		.cfi_def_cfa_register 7
 475 0006 7860     		str	r0, [r7, #4]
 298:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 	SET_BIT(SCU_GENERAL->CCUCON,(((uint32_t)HandlePtr->kModuleNo + 8U)));
 476              		.loc 1 298 0
 477 0008 4FF48043 		mov	r3, #16384
 478 000c C5F20003 		movt	r3, 20480
 479 0010 4FF48042 		mov	r2, #16384
 480 0014 C5F20002 		movt	r2, 20480
 481 0018 D16C     		ldr	r1, [r2, #76]
 482 001a 7A68     		ldr	r2, [r7, #4]
 483 001c D278     		ldrb	r2, [r2, #3]	@ zero_extendqisi2
 484 001e 02F10802 		add	r2, r2, #8
 485 0022 4FF00100 		mov	r0, #1
 486 0026 00FA02F2 		lsl	r2, r0, r2
 487 002a 0A43     		orrs	r2, r2, r1
 488 002c DA64     		str	r2, [r3, #76]
 299:../Dave/Generated/src/PWMMP001/PWMMP001.c **** }
 489              		.loc 1 299 0
 490 002e 07F10C07 		add	r7, r7, #12
 491 0032 BD46     		mov	sp, r7
 492 0034 80BC     		pop	{r7}
 493 0036 7047     		bx	lr
 494              		.cfi_endproc
 495              	.LFE139:
 497              		.section	.text.PWMMP001_Start,"ax",%progbits
 498              		.align	2
 499              		.global	PWMMP001_Start
 500              		.thumb
 501              		.thumb_func
 503              	PWMMP001_Start:
 504              	.LFB140:
 300:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 301:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*<<<DD_PWMMP001_API_3>>>*/
 302:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /** 
 303:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * This function starts the PWMMP001 App. 
 304:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * It enables the interrupts and clears
 305:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * IDLE mode of the CCU8 slices by calling CCU8PWMLIB_Start API.
 306:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * It sets the CCUCON bit to 1 for simultaneous start of the slices.
 307:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  */
 308:../Dave/Generated/src/PWMMP001/PWMMP001.c **** status_t PWMMP001_Start(const PWMMP001_HandleType* HandlePtr)
 309:../Dave/Generated/src/PWMMP001/PWMMP001.c **** {
 505              		.loc 1 309 0
 506              		.cfi_startproc
 507              		@ args = 0, pretend = 0, frame = 16
 508              		@ frame_needed = 1, uses_anonymous_args = 0
 509 0000 80B5     		push	{r7, lr}
 510              	.LCFI15:
 511              		.cfi_def_cfa_offset 8
 512              		.cfi_offset 7, -8
 513              		.cfi_offset 14, -4
 514 0002 84B0     		sub	sp, sp, #16
 515              	.LCFI16:
 516              		.cfi_def_cfa_offset 24
 517 0004 00AF     		add	r7, sp, #0
 518              	.LCFI17:
 519              		.cfi_def_cfa_register 7
 520 0006 7860     		str	r0, [r7, #4]
 310:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   status_t Status = (uint32_t)PWMMP001_OPER_NOT_ALLOWED_ERROR;
 521              		.loc 1 310 0
 522 0008 4FF00103 		mov	r3, #1
 523 000c FB60     		str	r3, [r7, #12]
 311:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   uint8_t PhaseNumber = (uint8_t)0;
 524              		.loc 1 311 0
 525 000e 4FF00003 		mov	r3, #0
 526 0012 FB72     		strb	r3, [r7, #11]
 312:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   DBG002_FUNCTION_ENTRY(DBG002_GID_PWMMP001, (uint32_t)PWMMP001_FUNCTION_ENTRY);
 313:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 314:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*<<<DD_PWMMP001_API_3_1>>>*/
 315:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   if ((HandlePtr->DynamicHandle->State != PWMMP001_INITIALIZED) &&
 527              		.loc 1 315 0
 528 0014 7B68     		ldr	r3, [r7, #4]
 529 0016 DB69     		ldr	r3, [r3, #28]
 530 0018 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 531 001a 012B     		cmp	r3, #1
 532 001c 04D0     		beq	.L18
 316:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       (HandlePtr->DynamicHandle->State != PWMMP001_STOPPED))
 533              		.loc 1 316 0 discriminator 1
 534 001e 7B68     		ldr	r3, [r7, #4]
 535 0020 DB69     		ldr	r3, [r3, #28]
 536 0022 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 315:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   if ((HandlePtr->DynamicHandle->State != PWMMP001_INITIALIZED) &&
 537              		.loc 1 315 0 discriminator 1
 538 0024 032B     		cmp	r3, #3
 539 0026 7CD1     		bne	.L19
 540              	.L18:
 317:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   {
 318:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMMP001_STATUS_LEN, &Status);
 319:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   }
 320:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   else
 321:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   {
 322:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     if(HandlePtr->SCUSyncStart == 0U)
 541              		.loc 1 322 0
 542 0028 7B68     		ldr	r3, [r7, #4]
 543 002a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 544 002c 002B     		cmp	r3, #0
 545 002e 1ED1     		bne	.L20
 546              	.L22:
 323:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     {
 324:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       do
 325:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       {
 326:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         Status = CCU8PWMLIB_Start(HandlePtr->PhaseHandlePtr[PhaseNumber]);
 547              		.loc 1 326 0 discriminator 1
 548 0030 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 549 0032 7B68     		ldr	r3, [r7, #4]
 550 0034 02F10202 		add	r2, r2, #2
 551 0038 53F82230 		ldr	r3, [r3, r2, lsl #2]
 552 003c 1846     		mov	r0, r3
 553 003e FFF7FEFF 		bl	CCU8PWMLIB_Start
 554 0042 F860     		str	r0, [r7, #12]
 327:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         PhaseNumber++;
 555              		.loc 1 327 0 discriminator 1
 556 0044 FB7A     		ldrb	r3, [r7, #11]
 557 0046 03F10103 		add	r3, r3, #1
 558 004a FB72     		strb	r3, [r7, #11]
 328:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       } while ((PhaseNumber < HandlePtr->kNumPhases) &&
 559              		.loc 1 328 0 discriminator 1
 560 004c 7B68     		ldr	r3, [r7, #4]
 561 004e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 329:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                (Status == (uint32_t)DAVEApp_SUCCESS)&& (HandlePtr->PhaseHandlePtr[PhaseNumber] != N
 562              		.loc 1 329 0 discriminator 1
 563 0050 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 564 0052 9A42     		cmp	r2, r3
 565 0054 5DD2     		bcs	.L21
 328:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       } while ((PhaseNumber < HandlePtr->kNumPhases) &&
 566              		.loc 1 328 0
 567 0056 FB68     		ldr	r3, [r7, #12]
 568 0058 002B     		cmp	r3, #0
 569 005a 5AD1     		bne	.L21
 570              		.loc 1 329 0
 571 005c FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 572 005e 7B68     		ldr	r3, [r7, #4]
 573 0060 02F10202 		add	r2, r2, #2
 574 0064 53F82230 		ldr	r3, [r3, r2, lsl #2]
 575 0068 002B     		cmp	r3, #0
 576 006a E1D1     		bne	.L22
 577 006c 51E0     		b	.L21
 578              	.L20:
 330:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     }
 331:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     else
 332:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     {
 333:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       PWMMP001_DisableGlobalStart(HandlePtr);
 579              		.loc 1 333 0
 580 006e 7868     		ldr	r0, [r7, #4]
 581 0070 FFF7FEFF 		bl	PWMMP001_DisableGlobalStart
 582              	.L24:
 334:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       do
 335:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       {
 336:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         Status = CCU8PWMLIB_EnableExtStart(HandlePtr->PhaseHandlePtr[PhaseNumber]);
 583              		.loc 1 336 0 discriminator 1
 584 0074 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 585 0076 7B68     		ldr	r3, [r7, #4]
 586 0078 02F10202 		add	r2, r2, #2
 587 007c 53F82230 		ldr	r3, [r3, r2, lsl #2]
 588 0080 1846     		mov	r0, r3
 589 0082 FFF7FEFF 		bl	CCU8PWMLIB_EnableExtStart
 590 0086 F860     		str	r0, [r7, #12]
 337:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         Status = CCU8PWMLIB_Start(HandlePtr->PhaseHandlePtr[PhaseNumber]);
 591              		.loc 1 337 0 discriminator 1
 592 0088 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 593 008a 7B68     		ldr	r3, [r7, #4]
 594 008c 02F10202 		add	r2, r2, #2
 595 0090 53F82230 		ldr	r3, [r3, r2, lsl #2]
 596 0094 1846     		mov	r0, r3
 597 0096 FFF7FEFF 		bl	CCU8PWMLIB_Start
 598 009a F860     		str	r0, [r7, #12]
 338:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         PhaseNumber++;
 599              		.loc 1 338 0 discriminator 1
 600 009c FB7A     		ldrb	r3, [r7, #11]
 601 009e 03F10103 		add	r3, r3, #1
 602 00a2 FB72     		strb	r3, [r7, #11]
 339:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       } while ((PhaseNumber < HandlePtr->kNumPhases) &&
 603              		.loc 1 339 0 discriminator 1
 604 00a4 7B68     		ldr	r3, [r7, #4]
 605 00a6 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 340:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                (Status == (uint32_t)DAVEApp_SUCCESS)&& (HandlePtr->PhaseHandlePtr[PhaseNumber] != N
 606              		.loc 1 340 0 discriminator 1
 607 00a8 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 608 00aa 9A42     		cmp	r2, r3
 609 00ac 0AD2     		bcs	.L23
 339:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       } while ((PhaseNumber < HandlePtr->kNumPhases) &&
 610              		.loc 1 339 0
 611 00ae FB68     		ldr	r3, [r7, #12]
 612 00b0 002B     		cmp	r3, #0
 613 00b2 07D1     		bne	.L23
 614              		.loc 1 340 0
 615 00b4 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 616 00b6 7B68     		ldr	r3, [r7, #4]
 617 00b8 02F10202 		add	r2, r2, #2
 618 00bc 53F82230 		ldr	r3, [r3, r2, lsl #2]
 619 00c0 002B     		cmp	r3, #0
 620 00c2 D7D1     		bne	.L24
 621              	.L23:
 341:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 342:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       /*<<<DD_PWMMP001_API_3_2>>>*/
 343:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       /* Set the CCUCON register bit and then immediately reset to 
 344:../Dave/Generated/src/PWMMP001/PWMMP001.c ****        * avoid spurious start
 345:../Dave/Generated/src/PWMMP001/PWMMP001.c ****        */ 
 346:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       PWMMP001_EnableGlobalStart(HandlePtr);
 622              		.loc 1 346 0
 623 00c4 7868     		ldr	r0, [r7, #4]
 624 00c6 FFF7FEFF 		bl	PWMMP001_EnableGlobalStart
 347:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       PWMMP001_DisableGlobalStart(HandlePtr);
 625              		.loc 1 347 0
 626 00ca 7868     		ldr	r0, [r7, #4]
 627 00cc FFF7FEFF 		bl	PWMMP001_DisableGlobalStart
 348:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       PhaseNumber = 0U;
 628              		.loc 1 348 0
 629 00d0 4FF00003 		mov	r3, #0
 630 00d4 FB72     		strb	r3, [r7, #11]
 631              	.L25:
 349:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       /* Disable External start feature to avoid spurious restarting of the slices */
 350:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       do
 351:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       {
 352:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         Status = CCU8PWMLIB_DisableExtStart(HandlePtr->PhaseHandlePtr[PhaseNumber]);
 632              		.loc 1 352 0 discriminator 1
 633 00d6 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 634 00d8 7B68     		ldr	r3, [r7, #4]
 635 00da 02F10202 		add	r2, r2, #2
 636 00de 53F82230 		ldr	r3, [r3, r2, lsl #2]
 637 00e2 1846     		mov	r0, r3
 638 00e4 FFF7FEFF 		bl	CCU8PWMLIB_DisableExtStart
 639 00e8 F860     		str	r0, [r7, #12]
 353:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         PhaseNumber++;
 640              		.loc 1 353 0 discriminator 1
 641 00ea FB7A     		ldrb	r3, [r7, #11]
 642 00ec 03F10103 		add	r3, r3, #1
 643 00f0 FB72     		strb	r3, [r7, #11]
 354:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       } while ((PhaseNumber < HandlePtr->kNumPhases) &&
 644              		.loc 1 354 0 discriminator 1
 645 00f2 7B68     		ldr	r3, [r7, #4]
 646 00f4 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 355:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                (Status == (uint32_t)DAVEApp_SUCCESS)&& (HandlePtr->PhaseHandlePtr[PhaseNumber] != N
 647              		.loc 1 355 0 discriminator 1
 648 00f6 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 649 00f8 9A42     		cmp	r2, r3
 650 00fa 0AD2     		bcs	.L21
 354:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       } while ((PhaseNumber < HandlePtr->kNumPhases) &&
 651              		.loc 1 354 0
 652 00fc FB68     		ldr	r3, [r7, #12]
 653 00fe 002B     		cmp	r3, #0
 654 0100 07D1     		bne	.L21
 655              		.loc 1 355 0
 656 0102 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 657 0104 7B68     		ldr	r3, [r7, #4]
 658 0106 02F10202 		add	r2, r2, #2
 659 010a 53F82230 		ldr	r3, [r3, r2, lsl #2]
 660 010e 002B     		cmp	r3, #0
 661 0110 E1D1     		bne	.L25
 662              	.L21:
 356:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     }
 357:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     HandlePtr->DynamicHandle->State = PWMMP001_RUNNING;
 663              		.loc 1 357 0
 664 0112 7B68     		ldr	r3, [r7, #4]
 665 0114 DB69     		ldr	r3, [r3, #28]
 666 0116 4FF00202 		mov	r2, #2
 667 011a 1A70     		strb	r2, [r3, #0]
 358:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 668              		.loc 1 358 0
 669 011c 4FF00003 		mov	r3, #0
 670 0120 FB60     		str	r3, [r7, #12]
 671              	.L19:
 359:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   }
 360:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   DBG002_FUNCTION_EXIT(DBG002_GID_PWMMP001, (uint32_t)PWMMP001_FUNCTION_EXIT);
 361:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   return Status;
 672              		.loc 1 361 0
 673 0122 FB68     		ldr	r3, [r7, #12]
 362:../Dave/Generated/src/PWMMP001/PWMMP001.c **** }
 674              		.loc 1 362 0
 675 0124 1846     		mov	r0, r3
 676 0126 07F11007 		add	r7, r7, #16
 677 012a BD46     		mov	sp, r7
 678 012c 80BD     		pop	{r7, pc}
 679              		.cfi_endproc
 680              	.LFE140:
 682 012e 00BF     		.section	.text.PWMMP001_Stop,"ax",%progbits
 683              		.align	2
 684              		.global	PWMMP001_Stop
 685              		.thumb
 686              		.thumb_func
 688              	PWMMP001_Stop:
 689              	.LFB141:
 363:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 364:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*<<<DD_PWMMP001_API_4>>>*/
 365:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /**
 366:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * This function stops the PWMMP001 app. 
 367:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * It clears all the interrupts, clears the RUN bit of the required slices by
 368:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * calling CCU8PWMLIB_Stop API.
 369:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  */
 370:../Dave/Generated/src/PWMMP001/PWMMP001.c **** status_t PWMMP001_Stop(const PWMMP001_HandleType* HandlePtr)
 371:../Dave/Generated/src/PWMMP001/PWMMP001.c **** {
 690              		.loc 1 371 0
 691              		.cfi_startproc
 692              		@ args = 0, pretend = 0, frame = 16
 693              		@ frame_needed = 1, uses_anonymous_args = 0
 694 0000 80B5     		push	{r7, lr}
 695              	.LCFI18:
 696              		.cfi_def_cfa_offset 8
 697              		.cfi_offset 7, -8
 698              		.cfi_offset 14, -4
 699 0002 84B0     		sub	sp, sp, #16
 700              	.LCFI19:
 701              		.cfi_def_cfa_offset 24
 702 0004 00AF     		add	r7, sp, #0
 703              	.LCFI20:
 704              		.cfi_def_cfa_register 7
 705 0006 7860     		str	r0, [r7, #4]
 372:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   status_t Status = (uint32_t)PWMMP001_OPER_NOT_ALLOWED_ERROR;
 706              		.loc 1 372 0
 707 0008 4FF00103 		mov	r3, #1
 708 000c FB60     		str	r3, [r7, #12]
 373:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   uint8_t PhaseNumber = (uint8_t)0;
 709              		.loc 1 373 0
 710 000e 4FF00003 		mov	r3, #0
 711 0012 FB72     		strb	r3, [r7, #11]
 374:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   DBG002_FUNCTION_ENTRY(DBG002_GID_PWMMP001, (uint32_t)PWMMP001_FUNCTION_ENTRY);
 375:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 376:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*<<<DD_PWMMP001_API_4_1>>>*/
 377:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   if ((HandlePtr->DynamicHandle->State != PWMMP001_RUNNING))
 712              		.loc 1 377 0
 713 0014 7B68     		ldr	r3, [r7, #4]
 714 0016 DB69     		ldr	r3, [r3, #28]
 715 0018 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 716 001a 022B     		cmp	r3, #2
 717 001c 25D1     		bne	.L28
 718              	.L30:
 378:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   {
 379:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMMP001_STATUS_LEN, &Status);
 380:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   }
 381:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   else
 382:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   {
 383:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     do
 384:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     {
 385:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       Status = CCU8PWMLIB_Stop(HandlePtr->PhaseHandlePtr[PhaseNumber]);
 719              		.loc 1 385 0 discriminator 1
 720 001e FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 721 0020 7B68     		ldr	r3, [r7, #4]
 722 0022 02F10202 		add	r2, r2, #2
 723 0026 53F82230 		ldr	r3, [r3, r2, lsl #2]
 724 002a 1846     		mov	r0, r3
 725 002c FFF7FEFF 		bl	CCU8PWMLIB_Stop
 726 0030 F860     		str	r0, [r7, #12]
 386:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       PhaseNumber++;
 727              		.loc 1 386 0 discriminator 1
 728 0032 FB7A     		ldrb	r3, [r7, #11]
 729 0034 03F10103 		add	r3, r3, #1
 730 0038 FB72     		strb	r3, [r7, #11]
 387:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     } while ((PhaseNumber < HandlePtr->kNumPhases) &&
 731              		.loc 1 387 0 discriminator 1
 732 003a 7B68     		ldr	r3, [r7, #4]
 733 003c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 388:../Dave/Generated/src/PWMMP001/PWMMP001.c ****              (Status == (uint32_t)DAVEApp_SUCCESS)&& (HandlePtr->PhaseHandlePtr[PhaseNumber] != NUL
 734              		.loc 1 388 0 discriminator 1
 735 003e FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 736 0040 9A42     		cmp	r2, r3
 737 0042 0AD2     		bcs	.L29
 387:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     } while ((PhaseNumber < HandlePtr->kNumPhases) &&
 738              		.loc 1 387 0
 739 0044 FB68     		ldr	r3, [r7, #12]
 740 0046 002B     		cmp	r3, #0
 741 0048 07D1     		bne	.L29
 742              		.loc 1 388 0
 743 004a FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 744 004c 7B68     		ldr	r3, [r7, #4]
 745 004e 02F10202 		add	r2, r2, #2
 746 0052 53F82230 		ldr	r3, [r3, r2, lsl #2]
 747 0056 002B     		cmp	r3, #0
 748 0058 E1D1     		bne	.L30
 749              	.L29:
 389:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 390:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*<<<DD_PWMMP001_API_4_2>>>*/
 391:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     HandlePtr->DynamicHandle->State = PWMMP001_STOPPED;
 750              		.loc 1 391 0
 751 005a 7B68     		ldr	r3, [r7, #4]
 752 005c DB69     		ldr	r3, [r3, #28]
 753 005e 4FF00302 		mov	r2, #3
 754 0062 1A70     		strb	r2, [r3, #0]
 392:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 755              		.loc 1 392 0
 756 0064 4FF00003 		mov	r3, #0
 757 0068 FB60     		str	r3, [r7, #12]
 758              	.L28:
 393:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   }
 394:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   DBG002_FUNCTION_EXIT(DBG002_GID_PWMMP001, (uint32_t)PWMMP001_FUNCTION_EXIT);
 395:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   return Status;
 759              		.loc 1 395 0
 760 006a FB68     		ldr	r3, [r7, #12]
 396:../Dave/Generated/src/PWMMP001/PWMMP001.c **** }
 761              		.loc 1 396 0
 762 006c 1846     		mov	r0, r3
 763 006e 07F11007 		add	r7, r7, #16
 764 0072 BD46     		mov	sp, r7
 765 0074 80BD     		pop	{r7, pc}
 766              		.cfi_endproc
 767              	.LFE141:
 769 0076 00BF     		.section	.text.PWMMP001_SetCompare,"ax",%progbits
 770              		.align	2
 771              		.global	PWMMP001_SetCompare
 772              		.thumb
 773              		.thumb_func
 775              	PWMMP001_SetCompare:
 776              	.LFB142:
 397:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 398:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*<<<DD_PWMMP001_API_15>>>*/
 399:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /**
 400:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * This function changes the duty cycle of the PWM waveforms. Duty cycle is given 
 401:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * in terms of the compare register 1 value and compare register 2 value.
 402:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  */
 403:../Dave/Generated/src/PWMMP001/PWMMP001.c **** status_t PWMMP001_SetCompare
 404:../Dave/Generated/src/PWMMP001/PWMMP001.c **** (
 405:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   const PWMMP001_HandleType* HandlePtr,
 406:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   const PWMMP001_DutyCycleType* DutyCyclePtr
 407:../Dave/Generated/src/PWMMP001/PWMMP001.c **** )
 408:../Dave/Generated/src/PWMMP001/PWMMP001.c **** {
 777              		.loc 1 408 0
 778              		.cfi_startproc
 779              		@ args = 0, pretend = 0, frame = 16
 780              		@ frame_needed = 1, uses_anonymous_args = 0
 781 0000 80B5     		push	{r7, lr}
 782              	.LCFI21:
 783              		.cfi_def_cfa_offset 8
 784              		.cfi_offset 7, -8
 785              		.cfi_offset 14, -4
 786 0002 84B0     		sub	sp, sp, #16
 787              	.LCFI22:
 788              		.cfi_def_cfa_offset 24
 789 0004 00AF     		add	r7, sp, #0
 790              	.LCFI23:
 791              		.cfi_def_cfa_register 7
 792 0006 7860     		str	r0, [r7, #4]
 793 0008 3960     		str	r1, [r7, #0]
 409:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   status_t Status = (uint32_t)PWMMP001_OPER_NOT_ALLOWED_ERROR;
 794              		.loc 1 409 0
 795 000a 4FF00103 		mov	r3, #1
 796 000e FB60     		str	r3, [r7, #12]
 410:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   uint8_t PhaseNumber = (uint8_t)0;
 797              		.loc 1 410 0
 798 0010 4FF00003 		mov	r3, #0
 799 0014 FB72     		strb	r3, [r7, #11]
 411:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   uint8_t Index = (uint8_t)0;
 800              		.loc 1 411 0
 801 0016 4FF00003 		mov	r3, #0
 802 001a BB72     		strb	r3, [r7, #10]
 412:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   DBG002_FUNCTION_ENTRY(DBG002_GID_PWMMP001, (uint32_t)PWMMP001_FUNCTION_ENTRY);
 413:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 414:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   do
 415:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   {
 416:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*<<<DD_PWMMP001_API_15_1>>>*/
 417:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     if ((HandlePtr->DynamicHandle->State == PWMMP001_UNINITIALIZED))
 803              		.loc 1 417 0
 804 001c 7B68     		ldr	r3, [r7, #4]
 805 001e DB69     		ldr	r3, [r3, #28]
 806 0020 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 807 0022 002B     		cmp	r3, #0
 808 0024 35D0     		beq	.L37
 809              	.L33:
 418:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     {
 419:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       break;
 420:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     }
 421:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*<<<DD_PWMMP001_API_15_2>>>*/
 422:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*<<<DD_PWMMP001_API_15_3>>>*/
 423:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*Call CCU8PWMLIB_SetCompare() API from CCU8_PWMSinglePhaseDT_CCU8PWMLIB*/
 424:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     PhaseNumber  = 0U;
 810              		.loc 1 424 0
 811 0026 4FF00003 		mov	r3, #0
 812 002a FB72     		strb	r3, [r7, #11]
 813              	.L35:
 425:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     do
 426:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     {
 427:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       Status = CCU8PWMLIB_SetCompare(
 814              		.loc 1 427 0 discriminator 1
 815 002c FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 428:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                HandlePtr->PhaseHandlePtr[PhaseNumber],
 816              		.loc 1 428 0 discriminator 1
 817 002e 7B68     		ldr	r3, [r7, #4]
 427:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       Status = CCU8PWMLIB_SetCompare(
 818              		.loc 1 427 0 discriminator 1
 819 0030 02F10202 		add	r2, r2, #2
 820 0034 53F82210 		ldr	r1, [r3, r2, lsl #2]
 821 0038 BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 429:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                DutyCyclePtr->CompReg[Index],
 822              		.loc 1 429 0 discriminator 1
 823 003a 3A68     		ldr	r2, [r7, #0]
 427:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       Status = CCU8PWMLIB_SetCompare(
 824              		.loc 1 427 0 discriminator 1
 825 003c 4FEA8303 		lsl	r3, r3, #2
 826 0040 D318     		adds	r3, r2, r3
 827 0042 5A68     		ldr	r2, [r3, #4]
 430:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                DutyCyclePtr->CompReg[Index+1U]
 828              		.loc 1 430 0 discriminator 1
 829 0044 BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 830 0046 03F10103 		add	r3, r3, #1
 831 004a 3868     		ldr	r0, [r7, #0]
 427:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       Status = CCU8PWMLIB_SetCompare(
 832              		.loc 1 427 0 discriminator 1
 833 004c 4FEA8303 		lsl	r3, r3, #2
 834 0050 C318     		adds	r3, r0, r3
 835 0052 5B68     		ldr	r3, [r3, #4]
 836 0054 0846     		mov	r0, r1
 837 0056 1146     		mov	r1, r2
 838 0058 1A46     		mov	r2, r3
 839 005a FFF7FEFF 		bl	CCU8PWMLIB_SetCompare
 840 005e F860     		str	r0, [r7, #12]
 431:../Dave/Generated/src/PWMMP001/PWMMP001.c ****               );
 432:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       Index = Index + 2U;
 841              		.loc 1 432 0 discriminator 1
 842 0060 BB7A     		ldrb	r3, [r7, #10]
 843 0062 03F10203 		add	r3, r3, #2
 844 0066 BB72     		strb	r3, [r7, #10]
 433:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       PhaseNumber++;
 845              		.loc 1 433 0 discriminator 1
 846 0068 FB7A     		ldrb	r3, [r7, #11]
 847 006a 03F10103 		add	r3, r3, #1
 848 006e FB72     		strb	r3, [r7, #11]
 434:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     } while ((PhaseNumber < HandlePtr->kNumPhases) &&
 849              		.loc 1 434 0 discriminator 1
 850 0070 7B68     		ldr	r3, [r7, #4]
 851 0072 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 435:../Dave/Generated/src/PWMMP001/PWMMP001.c ****              (Status == (uint32_t)DAVEApp_SUCCESS)&& (HandlePtr->PhaseHandlePtr[PhaseNumber] != NUL
 852              		.loc 1 435 0 discriminator 1
 853 0074 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 854 0076 9A42     		cmp	r2, r3
 855 0078 0CD2     		bcs	.L34
 434:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     } while ((PhaseNumber < HandlePtr->kNumPhases) &&
 856              		.loc 1 434 0
 857 007a FB68     		ldr	r3, [r7, #12]
 858 007c 002B     		cmp	r3, #0
 859 007e 09D1     		bne	.L34
 860              		.loc 1 435 0
 861 0080 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 862 0082 7B68     		ldr	r3, [r7, #4]
 863 0084 02F10202 		add	r2, r2, #2
 864 0088 53F82230 		ldr	r3, [r3, r2, lsl #2]
 865 008c 002B     		cmp	r3, #0
 866 008e CDD1     		bne	.L35
 867 0090 00E0     		b	.L34
 868              	.L37:
 419:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       break;
 869              		.loc 1 419 0
 870 0092 00BF     		nop
 871              	.L34:
 436:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   } while (0);
 437:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   if (Status != (uint32_t)DAVEApp_SUCCESS)
 438:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   {
 439:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMMP001_STATUS_LEN, &Status);
 440:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   }
 441:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   DBG002_FUNCTION_EXIT(DBG002_GID_PWMMP001, (uint32_t)PWMMP001_FUNCTION_EXIT);
 442:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   return Status;
 872              		.loc 1 442 0
 873 0094 FB68     		ldr	r3, [r7, #12]
 443:../Dave/Generated/src/PWMMP001/PWMMP001.c **** }
 874              		.loc 1 443 0
 875 0096 1846     		mov	r0, r3
 876 0098 07F11007 		add	r7, r7, #16
 877 009c BD46     		mov	sp, r7
 878 009e 80BD     		pop	{r7, pc}
 879              		.cfi_endproc
 880              	.LFE142:
 882              		.section	.text.PWMMP001_SetDutyCycle,"ax",%progbits
 883              		.align	2
 884              		.global	PWMMP001_SetDutyCycle
 885              		.thumb
 886              		.thumb_func
 888              	PWMMP001_SetDutyCycle:
 889              	.LFB143:
 444:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 445:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*<<<DD_PWMMP001_API_5>>>*/
 446:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /**
 447:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * This function changes the duty cycle of the PWM waveforms. Duty cycle is given 
 448:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * in terms of the % duty cycle value, offset and the sign of the offset.
 449:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * Offset is needed to get the asymmetric waveform where ON time is shifted with respect
 450:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * to central line.
 451:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  */
 452:../Dave/Generated/src/PWMMP001/PWMMP001.c **** status_t PWMMP001_SetDutyCycle
 453:../Dave/Generated/src/PWMMP001/PWMMP001.c **** (
 454:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   const PWMMP001_HandleType* HandlePtr,
 455:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   const PWMMP001_DutyCycleType* DutyCyclePtr
 456:../Dave/Generated/src/PWMMP001/PWMMP001.c **** )
 457:../Dave/Generated/src/PWMMP001/PWMMP001.c **** {
 890              		.loc 1 457 0
 891              		.cfi_startproc
 892              		@ args = 0, pretend = 0, frame = 16
 893              		@ frame_needed = 1, uses_anonymous_args = 0
 894 0000 90B5     		push	{r4, r7, lr}
 895              	.LCFI24:
 896              		.cfi_def_cfa_offset 12
 897              		.cfi_offset 4, -12
 898              		.cfi_offset 7, -8
 899              		.cfi_offset 14, -4
 900 0002 85B0     		sub	sp, sp, #20
 901              	.LCFI25:
 902              		.cfi_def_cfa_offset 32
 903 0004 00AF     		add	r7, sp, #0
 904              	.LCFI26:
 905              		.cfi_def_cfa_register 7
 906 0006 7860     		str	r0, [r7, #4]
 907 0008 3960     		str	r1, [r7, #0]
 458:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   status_t Status = (uint32_t)PWMMP001_OPER_NOT_ALLOWED_ERROR;
 908              		.loc 1 458 0
 909 000a 4FF00103 		mov	r3, #1
 910 000e FB60     		str	r3, [r7, #12]
 459:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   uint8_t PhaseNumber = (uint8_t)0;
 911              		.loc 1 459 0
 912 0010 4FF00003 		mov	r3, #0
 913 0014 FB72     		strb	r3, [r7, #11]
 460:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   DBG002_FUNCTION_ENTRY(DBG002_GID_PWMMP001, (uint32_t)PWMMP001_FUNCTION_ENTRY);
 461:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 462:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   if(HandlePtr->DynamicHandle->State != PWMMP001_UNINITIALIZED)
 914              		.loc 1 462 0
 915 0016 7B68     		ldr	r3, [r7, #4]
 916 0018 DB69     		ldr	r3, [r3, #28]
 917 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 918 001c 002B     		cmp	r3, #0
 919 001e 6AD0     		beq	.L39
 463:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   {
 464:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     /*<<<DD_PWMMP001_API_5_1>>>*/
 465:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     /*<<<DD_PWMMP001_API_5_2>>>*/
 466:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     for (PhaseNumber = 0U; PhaseNumber < HandlePtr->kNumPhases; ++PhaseNumber)
 920              		.loc 1 466 0
 921 0020 4FF00003 		mov	r3, #0
 922 0024 FB72     		strb	r3, [r7, #11]
 923 0026 29E0     		b	.L40
 924              	.L45:
 467:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     {
 468:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       /* check if duty cycle is within 0 to 100 */
 469:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       if ((DutyCyclePtr->DutyCycle[PhaseNumber] > (float)100.0) ||
 925              		.loc 1 469 0
 926 0028 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 927 002a 3A68     		ldr	r2, [r7, #0]
 928 002c 03F10C03 		add	r3, r3, #12
 929 0030 4FEA8303 		lsl	r3, r3, #2
 930 0034 D318     		adds	r3, r2, r3
 931 0036 03F10403 		add	r3, r3, #4
 932 003a 93ED007A 		flds	s14, [r3, #0]
 933 003e DFED317A 		flds	s15, .L49
 934 0042 B4EEE77A 		fcmpes	s14, s15
 935 0046 F1EE10FA 		fmstat
 936 004a 0FDC     		bgt	.L41
 470:../Dave/Generated/src/PWMMP001/PWMMP001.c ****           (DutyCyclePtr->DutyCycle[PhaseNumber] < (float)0.0))
 937              		.loc 1 470 0 discriminator 1
 938 004c FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 939 004e 3A68     		ldr	r2, [r7, #0]
 940 0050 03F10C03 		add	r3, r3, #12
 941 0054 4FEA8303 		lsl	r3, r3, #2
 942 0058 D318     		adds	r3, r2, r3
 943 005a 03F10403 		add	r3, r3, #4
 944 005e D3ED007A 		flds	s15, [r3, #0]
 469:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       if ((DutyCyclePtr->DutyCycle[PhaseNumber] > (float)100.0) ||
 945              		.loc 1 469 0 discriminator 1
 946 0062 F5EEC07A 		fcmpezs	s15
 947 0066 F1EE10FA 		fmstat
 948 006a 03D5     		bpl	.L48
 949              	.L41:
 471:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       {
 472:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         Status  = (uint32_t)PWMMP001_INVALID_PARAM_ERROR;
 950              		.loc 1 472 0
 951 006c 4FF00203 		mov	r3, #2
 952 0070 FB60     		str	r3, [r7, #12]
 473:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         break;
 953              		.loc 1 473 0
 954 0072 08E0     		b	.L44
 955              	.L48:
 466:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     for (PhaseNumber = 0U; PhaseNumber < HandlePtr->kNumPhases; ++PhaseNumber)
 956              		.loc 1 466 0
 957 0074 FB7A     		ldrb	r3, [r7, #11]
 958 0076 03F10103 		add	r3, r3, #1
 959 007a FB72     		strb	r3, [r7, #11]
 960              	.L40:
 466:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     for (PhaseNumber = 0U; PhaseNumber < HandlePtr->kNumPhases; ++PhaseNumber)
 961              		.loc 1 466 0 is_stmt 0 discriminator 1
 962 007c 7B68     		ldr	r3, [r7, #4]
 963 007e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 964 0080 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 965 0082 9A42     		cmp	r2, r3
 966 0084 D0D3     		bcc	.L45
 967              	.L44:
 474:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       }
 475:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     }
 476:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     if (Status != (uint32_t)PWMMP001_INVALID_PARAM_ERROR)
 968              		.loc 1 476 0 is_stmt 1
 969 0086 FB68     		ldr	r3, [r7, #12]
 970 0088 022B     		cmp	r3, #2
 971 008a 34D0     		beq	.L39
 477:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     {
 478:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 479:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       /*<<<DD_PWMMP001_API_5_3>>>*/
 480:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       /*Call CCU8PWMLIB_SetDutyCycle() API from CCU8_PWMSinglePhaseDT_CCU8PWMLIB*/
 481:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       PhaseNumber  = 0U;
 972              		.loc 1 481 0
 973 008c 4FF00003 		mov	r3, #0
 974 0090 FB72     		strb	r3, [r7, #11]
 975              	.L46:
 482:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       do
 483:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       {
 484:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         Status = CCU8PWMLIB_SetDutyCenterAlignAsymmetric(
 976              		.loc 1 484 0 discriminator 1
 977 0092 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 485:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                  (const void*)HandlePtr->PhaseHandlePtr[PhaseNumber],
 978              		.loc 1 485 0 discriminator 1
 979 0094 7B68     		ldr	r3, [r7, #4]
 980 0096 02F10202 		add	r2, r2, #2
 981 009a 53F82200 		ldr	r0, [r3, r2, lsl #2]
 484:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         Status = CCU8PWMLIB_SetDutyCenterAlignAsymmetric(
 982              		.loc 1 484 0 discriminator 1
 983 009e FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 486:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                  DutyCyclePtr->DutyCycle[PhaseNumber],
 984              		.loc 1 486 0 discriminator 1
 985 00a0 3A68     		ldr	r2, [r7, #0]
 484:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         Status = CCU8PWMLIB_SetDutyCenterAlignAsymmetric(
 986              		.loc 1 484 0 discriminator 1
 987 00a2 03F10C03 		add	r3, r3, #12
 988 00a6 4FEA8303 		lsl	r3, r3, #2
 989 00aa D318     		adds	r3, r2, r3
 990 00ac 03F10403 		add	r3, r3, #4
 991 00b0 1968     		ldr	r1, [r3, #0]	@ float
 992 00b2 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 487:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                  DutyCyclePtr->Offset[PhaseNumber],
 993              		.loc 1 487 0 discriminator 1
 994 00b4 3A68     		ldr	r2, [r7, #0]
 484:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         Status = CCU8PWMLIB_SetDutyCenterAlignAsymmetric(
 995              		.loc 1 484 0 discriminator 1
 996 00b6 03F10803 		add	r3, r3, #8
 997 00ba 4FEA8303 		lsl	r3, r3, #2
 998 00be D318     		adds	r3, r2, r3
 999 00c0 5A68     		ldr	r2, [r3, #4]
 1000 00c2 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 488:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                  DutyCyclePtr->Sign[PhaseNumber]);
 1001              		.loc 1 488 0 discriminator 1
 1002 00c4 3C68     		ldr	r4, [r7, #0]
 484:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         Status = CCU8PWMLIB_SetDutyCenterAlignAsymmetric(
 1003              		.loc 1 484 0 discriminator 1
 1004 00c6 E35C     		ldrb	r3, [r4, r3]	@ zero_extendqisi2
 1005 00c8 FFF7FEFF 		bl	CCU8PWMLIB_SetDutyCenterAlignAsymmetric
 1006 00cc F860     		str	r0, [r7, #12]
 489:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                  PhaseNumber++;
 1007              		.loc 1 489 0 discriminator 1
 1008 00ce FB7A     		ldrb	r3, [r7, #11]
 1009 00d0 03F10103 		add	r3, r3, #1
 1010 00d4 FB72     		strb	r3, [r7, #11]
 490:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       } while ((PhaseNumber < HandlePtr->kNumPhases) &&
 1011              		.loc 1 490 0 discriminator 1
 1012 00d6 7B68     		ldr	r3, [r7, #4]
 1013 00d8 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 491:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                (Status == (uint32_t)DAVEApp_SUCCESS)&& (HandlePtr->PhaseHandlePtr[PhaseNumber] != N
 1014              		.loc 1 491 0 discriminator 1
 1015 00da FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 1016 00dc 9A42     		cmp	r2, r3
 1017 00de 0AD2     		bcs	.L39
 490:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       } while ((PhaseNumber < HandlePtr->kNumPhases) &&
 1018              		.loc 1 490 0
 1019 00e0 FB68     		ldr	r3, [r7, #12]
 1020 00e2 002B     		cmp	r3, #0
 1021 00e4 07D1     		bne	.L39
 1022              		.loc 1 491 0
 1023 00e6 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 1024 00e8 7B68     		ldr	r3, [r7, #4]
 1025 00ea 02F10202 		add	r2, r2, #2
 1026 00ee 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1027 00f2 002B     		cmp	r3, #0
 1028 00f4 CDD1     		bne	.L46
 1029              	.L39:
 492:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     }
 493:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   }
 494:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 495:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   if (Status != (uint32_t)DAVEApp_SUCCESS)
 496:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   {
 497:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMMP001_STATUS_LEN, &Status);
 498:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   }
 499:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   DBG002_FUNCTION_EXIT(DBG002_GID_PWMMP001, (uint32_t)PWMMP001_FUNCTION_EXIT);
 500:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   return Status;
 1030              		.loc 1 500 0
 1031 00f6 FB68     		ldr	r3, [r7, #12]
 501:../Dave/Generated/src/PWMMP001/PWMMP001.c **** }
 1032              		.loc 1 501 0
 1033 00f8 1846     		mov	r0, r3
 1034 00fa 07F11407 		add	r7, r7, #20
 1035 00fe BD46     		mov	sp, r7
 1036 0100 90BD     		pop	{r4, r7, pc}
 1037              	.L50:
 1038 0102 00BF     		.align	2
 1039              	.L49:
 1040 0104 0000C842 		.word	1120403456
 1041              		.cfi_endproc
 1042              	.LFE143:
 1044              		.section	.text.PWMMP001_SetPwmFreqAndDutyCycle,"ax",%progbits
 1045              		.align	2
 1046              		.global	PWMMP001_SetPwmFreqAndDutyCycle
 1047              		.thumb
 1048              		.thumb_func
 1050              	PWMMP001_SetPwmFreqAndDutyCycle:
 1051              	.LFB144:
 502:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 503:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 504:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /**
 505:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * This function changes the PWM frequency and duty cycle. 
 506:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * 
 507:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  */
 508:../Dave/Generated/src/PWMMP001/PWMMP001.c **** status_t PWMMP001_SetPwmFreqAndDutyCycle
 509:../Dave/Generated/src/PWMMP001/PWMMP001.c **** (
 510:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   const PWMMP001_HandleType* HandlePtr,
 511:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   float PwmFreq,
 512:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   const PWMMP001_DutyCycleType* DutyCyclePtr
 513:../Dave/Generated/src/PWMMP001/PWMMP001.c **** )
 514:../Dave/Generated/src/PWMMP001/PWMMP001.c **** {
 1052              		.loc 1 514 0
 1053              		.cfi_startproc
 1054              		@ args = 0, pretend = 0, frame = 24
 1055              		@ frame_needed = 1, uses_anonymous_args = 0
 1056 0000 90B5     		push	{r4, r7, lr}
 1057              	.LCFI27:
 1058              		.cfi_def_cfa_offset 12
 1059              		.cfi_offset 4, -12
 1060              		.cfi_offset 7, -8
 1061              		.cfi_offset 14, -4
 1062 0002 89B0     		sub	sp, sp, #36
 1063              	.LCFI28:
 1064              		.cfi_def_cfa_offset 48
 1065 0004 02AF     		add	r7, sp, #8
 1066              	.LCFI29:
 1067              		.cfi_def_cfa 7, 40
 1068 0006 F860     		str	r0, [r7, #12]
 1069 0008 B960     		str	r1, [r7, #8]	@ float
 1070 000a 7A60     		str	r2, [r7, #4]
 515:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   status_t Status = (uint32_t)PWMMP001_OPER_NOT_ALLOWED_ERROR;
 1071              		.loc 1 515 0
 1072 000c 4FF00103 		mov	r3, #1
 1073 0010 7B61     		str	r3, [r7, #20]
 516:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   uint8_t PhaseNumber = (uint8_t)0;
 1074              		.loc 1 516 0
 1075 0012 4FF00003 		mov	r3, #0
 1076 0016 FB74     		strb	r3, [r7, #19]
 517:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   DBG002_FUNCTION_ENTRY(DBG002_GID_PWMMP001, (uint32_t)PWMMP001_FUNCTION_ENTRY);
 518:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 519:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   if(HandlePtr->DynamicHandle->State != PWMMP001_UNINITIALIZED)
 1077              		.loc 1 519 0
 1078 0018 FB68     		ldr	r3, [r7, #12]
 1079 001a DB69     		ldr	r3, [r3, #28]
 1080 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1081 001e 002B     		cmp	r3, #0
 1082 0020 78D0     		beq	.L52
 520:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   {
 521:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     /*<<<DD_PWMMP001_API_16_1>>>*/
 522:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     /*<<<DD_PWMMP001_API_16_2>>>*/
 523:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     /* check if frequency is not zero */
 524:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     if (PwmFreq == (float)RESET)
 1083              		.loc 1 524 0
 1084 0022 D7ED027A 		flds	s15, [r7, #8]
 1085 0026 F5EE407A 		fcmpzs	s15
 1086 002a F1EE10FA 		fmstat
 1087 002e 03D1     		bne	.L53
 525:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     {
 526:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       Status = (uint32_t)PWMMP001_INVALID_PARAM_ERROR;
 1088              		.loc 1 526 0
 1089 0030 4FF00203 		mov	r3, #2
 1090 0034 7B61     		str	r3, [r7, #20]
 1091 0036 6DE0     		b	.L52
 1092              	.L53:
 527:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     }
 528:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     else
 529:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     {
 530:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       /*<<<DD_PWMMP001_API_16_2>>>*/
 531:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       for (PhaseNumber = 0U; PhaseNumber < HandlePtr->kNumPhases; ++PhaseNumber)
 1093              		.loc 1 531 0
 1094 0038 4FF00003 		mov	r3, #0
 1095 003c FB74     		strb	r3, [r7, #19]
 1096 003e 29E0     		b	.L54
 1097              	.L59:
 532:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       {
 533:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         /* check if duty cycle is within 0 to 100 */
 534:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         if ((DutyCyclePtr->DutyCycle[PhaseNumber] > (float)100.0) ||
 1098              		.loc 1 534 0
 1099 0040 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 1100 0042 7A68     		ldr	r2, [r7, #4]
 1101 0044 03F10C03 		add	r3, r3, #12
 1102 0048 4FEA8303 		lsl	r3, r3, #2
 1103 004c D318     		adds	r3, r2, r3
 1104 004e 03F10403 		add	r3, r3, #4
 1105 0052 93ED007A 		flds	s14, [r3, #0]
 1106 0056 DFED327A 		flds	s15, .L63
 1107 005a B4EEE77A 		fcmpes	s14, s15
 1108 005e F1EE10FA 		fmstat
 1109 0062 0FDC     		bgt	.L55
 535:../Dave/Generated/src/PWMMP001/PWMMP001.c ****             (DutyCyclePtr->DutyCycle[PhaseNumber] < (float)0.0))
 1110              		.loc 1 535 0 discriminator 1
 1111 0064 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 1112 0066 7A68     		ldr	r2, [r7, #4]
 1113 0068 03F10C03 		add	r3, r3, #12
 1114 006c 4FEA8303 		lsl	r3, r3, #2
 1115 0070 D318     		adds	r3, r2, r3
 1116 0072 03F10403 		add	r3, r3, #4
 1117 0076 D3ED007A 		flds	s15, [r3, #0]
 534:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         if ((DutyCyclePtr->DutyCycle[PhaseNumber] > (float)100.0) ||
 1118              		.loc 1 534 0 discriminator 1
 1119 007a F5EEC07A 		fcmpezs	s15
 1120 007e F1EE10FA 		fmstat
 1121 0082 03D5     		bpl	.L62
 1122              	.L55:
 536:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         {
 537:../Dave/Generated/src/PWMMP001/PWMMP001.c ****           Status  = (uint32_t)PWMMP001_INVALID_PARAM_ERROR;
 1123              		.loc 1 537 0
 1124 0084 4FF00203 		mov	r3, #2
 1125 0088 7B61     		str	r3, [r7, #20]
 538:../Dave/Generated/src/PWMMP001/PWMMP001.c ****           break;
 1126              		.loc 1 538 0
 1127 008a 08E0     		b	.L58
 1128              	.L62:
 531:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       for (PhaseNumber = 0U; PhaseNumber < HandlePtr->kNumPhases; ++PhaseNumber)
 1129              		.loc 1 531 0
 1130 008c FB7C     		ldrb	r3, [r7, #19]
 1131 008e 03F10103 		add	r3, r3, #1
 1132 0092 FB74     		strb	r3, [r7, #19]
 1133              	.L54:
 531:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       for (PhaseNumber = 0U; PhaseNumber < HandlePtr->kNumPhases; ++PhaseNumber)
 1134              		.loc 1 531 0 is_stmt 0 discriminator 1
 1135 0094 FB68     		ldr	r3, [r7, #12]
 1136 0096 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1137 0098 FA7C     		ldrb	r2, [r7, #19]	@ zero_extendqisi2
 1138 009a 9A42     		cmp	r2, r3
 1139 009c D0D3     		bcc	.L59
 1140              	.L58:
 539:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         }
 540:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       }
 541:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       if (Status != (uint32_t)PWMMP001_INVALID_PARAM_ERROR)
 1141              		.loc 1 541 0 is_stmt 1
 1142 009e 7B69     		ldr	r3, [r7, #20]
 1143 00a0 022B     		cmp	r3, #2
 1144 00a2 37D0     		beq	.L52
 542:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       {
 543:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         PhaseNumber  = 0U;
 1145              		.loc 1 543 0
 1146 00a4 4FF00003 		mov	r3, #0
 1147 00a8 FB74     		strb	r3, [r7, #19]
 1148              	.L60:
 544:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     /*<<<DD_PWMMP001_API_16_3>>>*/
 545:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         do
 546:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         {
 547:../Dave/Generated/src/PWMMP001/PWMMP001.c ****           Status = CCU8PWMLIB_SetPwmFreqAndDutyCycle(
 1149              		.loc 1 547 0 discriminator 1
 1150 00aa FA7C     		ldrb	r2, [r7, #19]	@ zero_extendqisi2
 548:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                       HandlePtr->PhaseHandlePtr[PhaseNumber],
 1151              		.loc 1 548 0 discriminator 1
 1152 00ac FB68     		ldr	r3, [r7, #12]
 547:../Dave/Generated/src/PWMMP001/PWMMP001.c ****           Status = CCU8PWMLIB_SetPwmFreqAndDutyCycle(
 1153              		.loc 1 547 0 discriminator 1
 1154 00ae 02F10202 		add	r2, r2, #2
 1155 00b2 53F82210 		ldr	r1, [r3, r2, lsl #2]
 1156 00b6 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 549:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                       PwmFreq,
 550:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                       DutyCyclePtr->DutyCycle[PhaseNumber],
 1157              		.loc 1 550 0 discriminator 1
 1158 00b8 7A68     		ldr	r2, [r7, #4]
 547:../Dave/Generated/src/PWMMP001/PWMMP001.c ****           Status = CCU8PWMLIB_SetPwmFreqAndDutyCycle(
 1159              		.loc 1 547 0 discriminator 1
 1160 00ba 03F10C03 		add	r3, r3, #12
 1161 00be 4FEA8303 		lsl	r3, r3, #2
 1162 00c2 D318     		adds	r3, r2, r3
 1163 00c4 03F10403 		add	r3, r3, #4
 1164 00c8 1A68     		ldr	r2, [r3, #0]	@ float
 1165 00ca FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 551:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                       DutyCyclePtr->Offset[PhaseNumber],
 1166              		.loc 1 551 0 discriminator 1
 1167 00cc 7868     		ldr	r0, [r7, #4]
 547:../Dave/Generated/src/PWMMP001/PWMMP001.c ****           Status = CCU8PWMLIB_SetPwmFreqAndDutyCycle(
 1168              		.loc 1 547 0 discriminator 1
 1169 00ce 03F10803 		add	r3, r3, #8
 1170 00d2 4FEA8303 		lsl	r3, r3, #2
 1171 00d6 C318     		adds	r3, r0, r3
 1172 00d8 5B68     		ldr	r3, [r3, #4]
 1173 00da F87C     		ldrb	r0, [r7, #19]	@ zero_extendqisi2
 552:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                       DutyCyclePtr->Sign[PhaseNumber]
 1174              		.loc 1 552 0 discriminator 1
 1175 00dc 7C68     		ldr	r4, [r7, #4]
 547:../Dave/Generated/src/PWMMP001/PWMMP001.c ****           Status = CCU8PWMLIB_SetPwmFreqAndDutyCycle(
 1176              		.loc 1 547 0 discriminator 1
 1177 00de 205C     		ldrb	r0, [r4, r0]	@ zero_extendqisi2
 1178 00e0 0090     		str	r0, [sp, #0]
 1179 00e2 0846     		mov	r0, r1
 1180 00e4 B968     		ldr	r1, [r7, #8]	@ float
 1181 00e6 FFF7FEFF 		bl	CCU8PWMLIB_SetPwmFreqAndDutyCycle
 1182 00ea 7861     		str	r0, [r7, #20]
 553:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                       );
 554:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                       PhaseNumber++;
 1183              		.loc 1 554 0 discriminator 1
 1184 00ec FB7C     		ldrb	r3, [r7, #19]
 1185 00ee 03F10103 		add	r3, r3, #1
 1186 00f2 FB74     		strb	r3, [r7, #19]
 555:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         } while ((PhaseNumber < HandlePtr->kNumPhases) &&
 1187              		.loc 1 555 0 discriminator 1
 1188 00f4 FB68     		ldr	r3, [r7, #12]
 1189 00f6 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 556:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                  (Status == (uint32_t)DAVEApp_SUCCESS)&& (HandlePtr->PhaseHandlePtr[PhaseNumber] !=
 1190              		.loc 1 556 0 discriminator 1
 1191 00f8 FA7C     		ldrb	r2, [r7, #19]	@ zero_extendqisi2
 1192 00fa 9A42     		cmp	r2, r3
 1193 00fc 0AD2     		bcs	.L52
 555:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         } while ((PhaseNumber < HandlePtr->kNumPhases) &&
 1194              		.loc 1 555 0
 1195 00fe 7B69     		ldr	r3, [r7, #20]
 1196 0100 002B     		cmp	r3, #0
 1197 0102 07D1     		bne	.L52
 1198              		.loc 1 556 0
 1199 0104 FA7C     		ldrb	r2, [r7, #19]	@ zero_extendqisi2
 1200 0106 FB68     		ldr	r3, [r7, #12]
 1201 0108 02F10202 		add	r2, r2, #2
 1202 010c 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1203 0110 002B     		cmp	r3, #0
 1204 0112 CAD1     		bne	.L60
 1205              	.L52:
 557:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       }
 558:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     }
 559:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   }
 560:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   if (Status != (uint32_t)DAVEApp_SUCCESS)
 561:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   {
 562:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMMP001_STATUS_LEN, &Status);
 563:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   }
 564:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   DBG002_FUNCTION_EXIT(DBG002_GID_PWMMP001, (uint32_t)PWMMP001_FUNCTION_EXIT);
 565:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   return Status;
 1206              		.loc 1 565 0
 1207 0114 7B69     		ldr	r3, [r7, #20]
 566:../Dave/Generated/src/PWMMP001/PWMMP001.c **** }
 1208              		.loc 1 566 0
 1209 0116 1846     		mov	r0, r3
 1210 0118 07F11C07 		add	r7, r7, #28
 1211 011c BD46     		mov	sp, r7
 1212 011e 90BD     		pop	{r4, r7, pc}
 1213              	.L64:
 1214              		.align	2
 1215              	.L63:
 1216 0120 0000C842 		.word	1120403456
 1217              		.cfi_endproc
 1218              	.LFE144:
 1220              		.section	.text.PWMMP001_SetPwmFreq,"ax",%progbits
 1221              		.align	2
 1222              		.global	PWMMP001_SetPwmFreq
 1223              		.thumb
 1224              		.thumb_func
 1226              	PWMMP001_SetPwmFreq:
 1227              	.LFB145:
 567:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 568:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*<<<DD_PWMMP001_API_16>>>*/
 569:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /**
 570:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * This function changes the PWM frequency. Frequency is given in hertz.
 571:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * 
 572:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  */
 573:../Dave/Generated/src/PWMMP001/PWMMP001.c **** status_t PWMMP001_SetPwmFreq
 574:../Dave/Generated/src/PWMMP001/PWMMP001.c **** (
 575:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   const PWMMP001_HandleType* HandlePtr,
 576:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   float PwmFreq
 577:../Dave/Generated/src/PWMMP001/PWMMP001.c **** )
 578:../Dave/Generated/src/PWMMP001/PWMMP001.c **** {
 1228              		.loc 1 578 0
 1229              		.cfi_startproc
 1230              		@ args = 0, pretend = 0, frame = 16
 1231              		@ frame_needed = 1, uses_anonymous_args = 0
 1232 0000 80B5     		push	{r7, lr}
 1233              	.LCFI30:
 1234              		.cfi_def_cfa_offset 8
 1235              		.cfi_offset 7, -8
 1236              		.cfi_offset 14, -4
 1237 0002 84B0     		sub	sp, sp, #16
 1238              	.LCFI31:
 1239              		.cfi_def_cfa_offset 24
 1240 0004 00AF     		add	r7, sp, #0
 1241              	.LCFI32:
 1242              		.cfi_def_cfa_register 7
 1243 0006 7860     		str	r0, [r7, #4]
 1244 0008 3960     		str	r1, [r7, #0]	@ float
 579:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   status_t Status = (uint32_t)PWMMP001_OPER_NOT_ALLOWED_ERROR;
 1245              		.loc 1 579 0
 1246 000a 4FF00103 		mov	r3, #1
 1247 000e FB60     		str	r3, [r7, #12]
 580:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   uint8_t PhaseNumber = (uint8_t)0;
 1248              		.loc 1 580 0
 1249 0010 4FF00003 		mov	r3, #0
 1250 0014 FB72     		strb	r3, [r7, #11]
 581:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   DBG002_FUNCTION_ENTRY(DBG002_GID_PWMMP001, (uint32_t)PWMMP001_FUNCTION_ENTRY);
 582:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 583:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   if ((HandlePtr->DynamicHandle->State != PWMMP001_UNINITIALIZED))
 1251              		.loc 1 583 0
 1252 0016 7B68     		ldr	r3, [r7, #4]
 1253 0018 DB69     		ldr	r3, [r3, #28]
 1254 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1255 001c 002B     		cmp	r3, #0
 1256 001e 29D0     		beq	.L66
 584:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   {
 585:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     /*<<<DD_PWMMP001_API_16_1>>>*/
 586:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     
 587:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     /*<<<DD_PWMMP001_API_16_2>>>*/
 588:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     /* check if frequency is not zero */
 589:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     if (PwmFreq == (float)0.0)
 1257              		.loc 1 589 0
 1258 0020 D7ED007A 		flds	s15, [r7, #0]
 1259 0024 F5EE407A 		fcmpzs	s15
 1260 0028 F1EE10FA 		fmstat
 1261 002c 03D1     		bne	.L67
 590:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     {
 591:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       Status = (uint32_t)PWMMP001_INVALID_PARAM_ERROR;
 1262              		.loc 1 591 0
 1263 002e 4FF00203 		mov	r3, #2
 1264 0032 FB60     		str	r3, [r7, #12]
 1265 0034 1EE0     		b	.L66
 1266              	.L67:
 592:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     }
 593:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     else
 594:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     {
 595:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       /*<<<DD_PWMMP001_API_16_3>>>*/
 596:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       do
 597:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       {
 598:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         Status = CCU8PWMLIB_SetPwmFreq(HandlePtr->PhaseHandlePtr[PhaseNumber],
 1267              		.loc 1 598 0 discriminator 1
 1268 0036 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 1269 0038 7B68     		ldr	r3, [r7, #4]
 1270 003a 02F10202 		add	r2, r2, #2
 1271 003e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1272 0042 1846     		mov	r0, r3
 1273 0044 3968     		ldr	r1, [r7, #0]	@ float
 1274 0046 FFF7FEFF 		bl	CCU8PWMLIB_SetPwmFreq
 1275 004a F860     		str	r0, [r7, #12]
 599:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                  PwmFreq);
 600:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         PhaseNumber++;
 1276              		.loc 1 600 0 discriminator 1
 1277 004c FB7A     		ldrb	r3, [r7, #11]
 1278 004e 03F10103 		add	r3, r3, #1
 1279 0052 FB72     		strb	r3, [r7, #11]
 601:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       } while ((PhaseNumber < HandlePtr->kNumPhases) &&
 1280              		.loc 1 601 0 discriminator 1
 1281 0054 7B68     		ldr	r3, [r7, #4]
 1282 0056 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 602:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                (Status == (uint32_t)DAVEApp_SUCCESS)&& (HandlePtr->PhaseHandlePtr[PhaseNumber] != N
 1283              		.loc 1 602 0 discriminator 1
 1284 0058 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 1285 005a 9A42     		cmp	r2, r3
 1286 005c 0AD2     		bcs	.L66
 601:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       } while ((PhaseNumber < HandlePtr->kNumPhases) &&
 1287              		.loc 1 601 0
 1288 005e FB68     		ldr	r3, [r7, #12]
 1289 0060 002B     		cmp	r3, #0
 1290 0062 07D1     		bne	.L66
 1291              		.loc 1 602 0
 1292 0064 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 1293 0066 7B68     		ldr	r3, [r7, #4]
 1294 0068 02F10202 		add	r2, r2, #2
 1295 006c 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1296 0070 002B     		cmp	r3, #0
 1297 0072 E0D1     		bne	.L67
 1298              	.L66:
 603:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     }
 604:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   }
 605:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   if (Status != (uint32_t)DAVEApp_SUCCESS)
 606:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   {
 607:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMMP001_STATUS_LEN, &Status);
 608:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   }
 609:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   DBG002_FUNCTION_EXIT(DBG002_GID_PWMMP001, (uint32_t)PWMMP001_FUNCTION_EXIT);
 610:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   return Status;
 1299              		.loc 1 610 0
 1300 0074 FB68     		ldr	r3, [r7, #12]
 611:../Dave/Generated/src/PWMMP001/PWMMP001.c **** }
 1301              		.loc 1 611 0
 1302 0076 1846     		mov	r0, r3
 1303 0078 07F11007 		add	r7, r7, #16
 1304 007c BD46     		mov	sp, r7
 1305 007e 80BD     		pop	{r7, pc}
 1306              		.cfi_endproc
 1307              	.LFE145:
 1309              		.section	.text.PWMMP001_SetPeriodAndCompare,"ax",%progbits
 1310              		.align	2
 1311              		.global	PWMMP001_SetPeriodAndCompare
 1312              		.thumb
 1313              		.thumb_func
 1315              	PWMMP001_SetPeriodAndCompare:
 1316              	.LFB146:
 612:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 613:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /**
 614:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * This function changes the PWM frequency and duty cycle. 
 615:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * Frequency is given in terms of the period register value
 616:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * and duty cycle in terms of the compare register value.
 617:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  *  
 618:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  */
 619:../Dave/Generated/src/PWMMP001/PWMMP001.c **** status_t PWMMP001_SetPeriodAndCompare
 620:../Dave/Generated/src/PWMMP001/PWMMP001.c **** (
 621:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   const PWMMP001_HandleType* HandlePtr,
 622:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   uint32_t PwmFreq,
 623:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   const PWMMP001_DutyCycleType* DutyCyclePtr
 624:../Dave/Generated/src/PWMMP001/PWMMP001.c **** )
 625:../Dave/Generated/src/PWMMP001/PWMMP001.c **** {
 1317              		.loc 1 625 0
 1318              		.cfi_startproc
 1319              		@ args = 0, pretend = 0, frame = 24
 1320              		@ frame_needed = 1, uses_anonymous_args = 0
 1321 0000 80B5     		push	{r7, lr}
 1322              	.LCFI33:
 1323              		.cfi_def_cfa_offset 8
 1324              		.cfi_offset 7, -8
 1325              		.cfi_offset 14, -4
 1326 0002 86B0     		sub	sp, sp, #24
 1327              	.LCFI34:
 1328              		.cfi_def_cfa_offset 32
 1329 0004 00AF     		add	r7, sp, #0
 1330              	.LCFI35:
 1331              		.cfi_def_cfa_register 7
 1332 0006 F860     		str	r0, [r7, #12]
 1333 0008 B960     		str	r1, [r7, #8]
 1334 000a 7A60     		str	r2, [r7, #4]
 626:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   status_t Status = (uint32_t)PWMMP001_OPER_NOT_ALLOWED_ERROR;
 1335              		.loc 1 626 0
 1336 000c 4FF00103 		mov	r3, #1
 1337 0010 7B61     		str	r3, [r7, #20]
 627:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   uint8_t PhaseNumber = (uint8_t)0;
 1338              		.loc 1 627 0
 1339 0012 4FF00003 		mov	r3, #0
 1340 0016 FB74     		strb	r3, [r7, #19]
 628:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   uint8_t Index = (uint8_t)0;
 1341              		.loc 1 628 0
 1342 0018 4FF00003 		mov	r3, #0
 1343 001c BB74     		strb	r3, [r7, #18]
 629:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   DBG002_FUNCTION_ENTRY(DBG002_GID_PWMMP001, (uint32_t)PWMMP001_FUNCTION_ENTRY);
 630:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 631:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   if(HandlePtr->DynamicHandle->State != PWMMP001_UNINITIALIZED)
 1344              		.loc 1 631 0
 1345 001e FB68     		ldr	r3, [r7, #12]
 1346 0020 DB69     		ldr	r3, [r3, #28]
 1347 0022 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1348 0024 002B     		cmp	r3, #0
 1349 0026 3CD0     		beq	.L70
 632:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   {
 633:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 634:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     /*<<<DD_PWMMP001_API_6_2>>>*/
 635:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     if ((PwmFreq > (uint32_t)PWMMP001_MAXVAL) || (PwmFreq == (uint32_t)RESET))
 1350              		.loc 1 635 0
 1351 0028 BA68     		ldr	r2, [r7, #8]
 1352 002a 4FF6FF73 		movw	r3, #65535
 1353 002e 9A42     		cmp	r2, r3
 1354 0030 02D8     		bhi	.L71
 1355              		.loc 1 635 0 is_stmt 0 discriminator 1
 1356 0032 BB68     		ldr	r3, [r7, #8]
 1357 0034 002B     		cmp	r3, #0
 1358 0036 03D1     		bne	.L72
 1359              	.L71:
 636:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     {
 637:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       Status = (uint32_t)PWMMP001_INVALID_PARAM_ERROR;
 1360              		.loc 1 637 0 is_stmt 1
 1361 0038 4FF00203 		mov	r3, #2
 1362 003c 7B61     		str	r3, [r7, #20]
 1363 003e 30E0     		b	.L70
 1364              	.L72:
 638:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     }
 639:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     else
 640:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     {
 641:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       do
 642:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       {
 643:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         Status = CCU8PWMLIB_SetPeriodAndCompare(
 1365              		.loc 1 643 0 discriminator 1
 1366 0040 FA7C     		ldrb	r2, [r7, #19]	@ zero_extendqisi2
 644:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                       HandlePtr->PhaseHandlePtr[PhaseNumber],
 1367              		.loc 1 644 0 discriminator 1
 1368 0042 FB68     		ldr	r3, [r7, #12]
 643:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         Status = CCU8PWMLIB_SetPeriodAndCompare(
 1369              		.loc 1 643 0 discriminator 1
 1370 0044 02F10202 		add	r2, r2, #2
 1371 0048 53F82210 		ldr	r1, [r3, r2, lsl #2]
 1372 004c BB7C     		ldrb	r3, [r7, #18]	@ zero_extendqisi2
 645:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                       PwmFreq,
 646:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                       DutyCyclePtr->CompReg[Index],
 1373              		.loc 1 646 0 discriminator 1
 1374 004e 7A68     		ldr	r2, [r7, #4]
 643:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         Status = CCU8PWMLIB_SetPeriodAndCompare(
 1375              		.loc 1 643 0 discriminator 1
 1376 0050 4FEA8303 		lsl	r3, r3, #2
 1377 0054 D318     		adds	r3, r2, r3
 1378 0056 5A68     		ldr	r2, [r3, #4]
 647:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                       DutyCyclePtr->CompReg[Index+1U]
 1379              		.loc 1 647 0 discriminator 1
 1380 0058 BB7C     		ldrb	r3, [r7, #18]	@ zero_extendqisi2
 1381 005a 03F10103 		add	r3, r3, #1
 1382 005e 7868     		ldr	r0, [r7, #4]
 643:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         Status = CCU8PWMLIB_SetPeriodAndCompare(
 1383              		.loc 1 643 0 discriminator 1
 1384 0060 4FEA8303 		lsl	r3, r3, #2
 1385 0064 C318     		adds	r3, r0, r3
 1386 0066 5B68     		ldr	r3, [r3, #4]
 1387 0068 0846     		mov	r0, r1
 1388 006a B968     		ldr	r1, [r7, #8]
 1389 006c FFF7FEFF 		bl	CCU8PWMLIB_SetPeriodAndCompare
 1390 0070 7861     		str	r0, [r7, #20]
 648:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                       );
 649:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         Index = Index + 2U; 
 1391              		.loc 1 649 0 discriminator 1
 1392 0072 BB7C     		ldrb	r3, [r7, #18]
 1393 0074 03F10203 		add	r3, r3, #2
 1394 0078 BB74     		strb	r3, [r7, #18]
 650:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         PhaseNumber++;
 1395              		.loc 1 650 0 discriminator 1
 1396 007a FB7C     		ldrb	r3, [r7, #19]
 1397 007c 03F10103 		add	r3, r3, #1
 1398 0080 FB74     		strb	r3, [r7, #19]
 651:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         /*HandlePtr->DynamicHandle->PeriodReg = PwmFreq;*/
 652:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       } while ((PhaseNumber < HandlePtr->kNumPhases) &&
 1399              		.loc 1 652 0 discriminator 1
 1400 0082 FB68     		ldr	r3, [r7, #12]
 1401 0084 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 653:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                (Status == (uint32_t)DAVEApp_SUCCESS)&& (HandlePtr->PhaseHandlePtr[PhaseNumber] != N
 1402              		.loc 1 653 0 discriminator 1
 1403 0086 FA7C     		ldrb	r2, [r7, #19]	@ zero_extendqisi2
 1404 0088 9A42     		cmp	r2, r3
 1405 008a 0AD2     		bcs	.L70
 652:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       } while ((PhaseNumber < HandlePtr->kNumPhases) &&
 1406              		.loc 1 652 0
 1407 008c 7B69     		ldr	r3, [r7, #20]
 1408 008e 002B     		cmp	r3, #0
 1409 0090 07D1     		bne	.L70
 1410              		.loc 1 653 0
 1411 0092 FA7C     		ldrb	r2, [r7, #19]	@ zero_extendqisi2
 1412 0094 FB68     		ldr	r3, [r7, #12]
 1413 0096 02F10202 		add	r2, r2, #2
 1414 009a 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1415 009e 002B     		cmp	r3, #0
 1416 00a0 CED1     		bne	.L72
 1417              	.L70:
 654:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     }
 655:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   } 
 656:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   if (Status != (uint32_t)DAVEApp_SUCCESS)
 657:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   {
 658:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMMP001_STATUS_LEN, &Status);
 659:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   }
 660:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   DBG002_FUNCTION_EXIT(DBG002_GID_PWMMP001, (uint32_t)PWMMP001_FUNCTION_EXIT);
 661:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   return Status;
 1418              		.loc 1 661 0
 1419 00a2 7B69     		ldr	r3, [r7, #20]
 662:../Dave/Generated/src/PWMMP001/PWMMP001.c **** }
 1420              		.loc 1 662 0
 1421 00a4 1846     		mov	r0, r3
 1422 00a6 07F11807 		add	r7, r7, #24
 1423 00aa BD46     		mov	sp, r7
 1424 00ac 80BD     		pop	{r7, pc}
 1425              		.cfi_endproc
 1426              	.LFE146:
 1428 00ae 00BF     		.section	.text.PWMMP001_SetPeriod,"ax",%progbits
 1429              		.align	2
 1430              		.global	PWMMP001_SetPeriod
 1431              		.thumb
 1432              		.thumb_func
 1434              	PWMMP001_SetPeriod:
 1435              	.LFB147:
 663:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 664:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 665:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*<<<DD_PWMMP001_API_6>>>*/
 666:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /**
 667:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * This function changes the PWM frequency. Frequency is given in terms of the
 668:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * period register value.
 669:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  */
 670:../Dave/Generated/src/PWMMP001/PWMMP001.c **** status_t PWMMP001_SetPeriod
 671:../Dave/Generated/src/PWMMP001/PWMMP001.c **** (
 672:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   const PWMMP001_HandleType* HandlePtr,
 673:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   uint32_t PwmFreq
 674:../Dave/Generated/src/PWMMP001/PWMMP001.c **** )
 675:../Dave/Generated/src/PWMMP001/PWMMP001.c **** {
 1436              		.loc 1 675 0
 1437              		.cfi_startproc
 1438              		@ args = 0, pretend = 0, frame = 16
 1439              		@ frame_needed = 1, uses_anonymous_args = 0
 1440 0000 80B5     		push	{r7, lr}
 1441              	.LCFI36:
 1442              		.cfi_def_cfa_offset 8
 1443              		.cfi_offset 7, -8
 1444              		.cfi_offset 14, -4
 1445 0002 84B0     		sub	sp, sp, #16
 1446              	.LCFI37:
 1447              		.cfi_def_cfa_offset 24
 1448 0004 00AF     		add	r7, sp, #0
 1449              	.LCFI38:
 1450              		.cfi_def_cfa_register 7
 1451 0006 7860     		str	r0, [r7, #4]
 1452 0008 3960     		str	r1, [r7, #0]
 676:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   status_t Status = (uint32_t)PWMMP001_OPER_NOT_ALLOWED_ERROR;
 1453              		.loc 1 676 0
 1454 000a 4FF00103 		mov	r3, #1
 1455 000e FB60     		str	r3, [r7, #12]
 677:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   uint8_t PhaseNumber = (uint8_t)0;
 1456              		.loc 1 677 0
 1457 0010 4FF00003 		mov	r3, #0
 1458 0014 FB72     		strb	r3, [r7, #11]
 678:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   DBG002_FUNCTION_ENTRY(DBG002_GID_PWMMP001, (uint32_t)PWMMP001_FUNCTION_ENTRY);
 679:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 680:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   if(HandlePtr->DynamicHandle->State != PWMMP001_UNINITIALIZED)
 1459              		.loc 1 680 0
 1460 0016 7B68     		ldr	r3, [r7, #4]
 1461 0018 DB69     		ldr	r3, [r3, #28]
 1462 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1463 001c 002B     		cmp	r3, #0
 1464 001e 2AD0     		beq	.L75
 681:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   {
 682:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*<<<DD_PWMMP001_API_6_2>>>*/
 683:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     if ((PwmFreq > (uint32_t)PWMMP001_MAXVAL) || (PwmFreq == (uint32_t)RESET))
 1465              		.loc 1 683 0
 1466 0020 3A68     		ldr	r2, [r7, #0]
 1467 0022 4FF6FF73 		movw	r3, #65535
 1468 0026 9A42     		cmp	r2, r3
 1469 0028 02D8     		bhi	.L76
 1470              		.loc 1 683 0 is_stmt 0 discriminator 1
 1471 002a 3B68     		ldr	r3, [r7, #0]
 1472 002c 002B     		cmp	r3, #0
 1473 002e 03D1     		bne	.L77
 1474              	.L76:
 684:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     {
 685:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       Status = (uint32_t)PWMMP001_INVALID_PARAM_ERROR;
 1475              		.loc 1 685 0 is_stmt 1
 1476 0030 4FF00203 		mov	r3, #2
 1477 0034 FB60     		str	r3, [r7, #12]
 1478 0036 1EE0     		b	.L75
 1479              	.L77:
 686:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     }
 687:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     else
 688:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     {
 689:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 690:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       /*<<<DD_PWMMP001_API_6_3>>>*/
 691:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       do
 692:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       {
 693:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         Status = CCU8PWMLIB_SetPeriod(HandlePtr->PhaseHandlePtr[PhaseNumber],
 1480              		.loc 1 693 0 discriminator 1
 1481 0038 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 1482 003a 7B68     		ldr	r3, [r7, #4]
 1483 003c 02F10202 		add	r2, r2, #2
 1484 0040 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1485 0044 1846     		mov	r0, r3
 1486 0046 3968     		ldr	r1, [r7, #0]
 1487 0048 FFF7FEFF 		bl	CCU8PWMLIB_SetPeriod
 1488 004c F860     		str	r0, [r7, #12]
 694:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                  PwmFreq);
 695:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         PhaseNumber++;
 1489              		.loc 1 695 0 discriminator 1
 1490 004e FB7A     		ldrb	r3, [r7, #11]
 1491 0050 03F10103 		add	r3, r3, #1
 1492 0054 FB72     		strb	r3, [r7, #11]
 696:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         /*HandlePtr->DynamicHandle->PeriodReg = PwmFreq;*/
 697:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       } while ((PhaseNumber < HandlePtr->kNumPhases) &&
 1493              		.loc 1 697 0 discriminator 1
 1494 0056 7B68     		ldr	r3, [r7, #4]
 1495 0058 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 698:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                (Status == (uint32_t)DAVEApp_SUCCESS)&& (HandlePtr->PhaseHandlePtr[PhaseNumber] != N
 1496              		.loc 1 698 0 discriminator 1
 1497 005a FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 1498 005c 9A42     		cmp	r2, r3
 1499 005e 0AD2     		bcs	.L75
 697:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       } while ((PhaseNumber < HandlePtr->kNumPhases) &&
 1500              		.loc 1 697 0
 1501 0060 FB68     		ldr	r3, [r7, #12]
 1502 0062 002B     		cmp	r3, #0
 1503 0064 07D1     		bne	.L75
 1504              		.loc 1 698 0
 1505 0066 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 1506 0068 7B68     		ldr	r3, [r7, #4]
 1507 006a 02F10202 		add	r2, r2, #2
 1508 006e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1509 0072 002B     		cmp	r3, #0
 1510 0074 E0D1     		bne	.L77
 1511              	.L75:
 699:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     }
 700:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   }
 701:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   if (Status != (uint32_t)DAVEApp_SUCCESS)
 702:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   {
 703:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMMP001_STATUS_LEN, &Status);
 704:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   }
 705:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   DBG002_FUNCTION_EXIT(DBG002_GID_PWMMP001, (uint32_t)PWMMP001_FUNCTION_EXIT);
 706:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   return Status;
 1512              		.loc 1 706 0
 1513 0076 FB68     		ldr	r3, [r7, #12]
 707:../Dave/Generated/src/PWMMP001/PWMMP001.c **** }
 1514              		.loc 1 707 0
 1515 0078 1846     		mov	r0, r3
 1516 007a 07F11007 		add	r7, r7, #16
 1517 007e BD46     		mov	sp, r7
 1518 0080 80BD     		pop	{r7, pc}
 1519              		.cfi_endproc
 1520              	.LFE147:
 1522 0082 00BF     		.section	.text.PWMMP001_SetTimerVal,"ax",%progbits
 1523              		.align	2
 1524              		.global	PWMMP001_SetTimerVal
 1525              		.thumb
 1526              		.thumb_func
 1528              	PWMMP001_SetTimerVal:
 1529              	.LFB148:
 708:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 709:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*<<<DD_PWMMP001_API_7>>>*/
 710:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /**
 711:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * This function loads the CCU8 timer with the given value when timer is not running.
 712:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  */
 713:../Dave/Generated/src/PWMMP001/PWMMP001.c **** status_t PWMMP001_SetTimerVal
 714:../Dave/Generated/src/PWMMP001/PWMMP001.c **** (
 715:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   const PWMMP001_HandleType* HandlePtr,
 716:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   uint32_t TimerVal
 717:../Dave/Generated/src/PWMMP001/PWMMP001.c **** )
 718:../Dave/Generated/src/PWMMP001/PWMMP001.c **** {
 1530              		.loc 1 718 0
 1531              		.cfi_startproc
 1532              		@ args = 0, pretend = 0, frame = 16
 1533              		@ frame_needed = 1, uses_anonymous_args = 0
 1534 0000 80B5     		push	{r7, lr}
 1535              	.LCFI39:
 1536              		.cfi_def_cfa_offset 8
 1537              		.cfi_offset 7, -8
 1538              		.cfi_offset 14, -4
 1539 0002 84B0     		sub	sp, sp, #16
 1540              	.LCFI40:
 1541              		.cfi_def_cfa_offset 24
 1542 0004 00AF     		add	r7, sp, #0
 1543              	.LCFI41:
 1544              		.cfi_def_cfa_register 7
 1545 0006 7860     		str	r0, [r7, #4]
 1546 0008 3960     		str	r1, [r7, #0]
 719:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   status_t Status = (uint32_t)PWMMP001_OPER_NOT_ALLOWED_ERROR;
 1547              		.loc 1 719 0
 1548 000a 4FF00103 		mov	r3, #1
 1549 000e FB60     		str	r3, [r7, #12]
 720:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   uint8_t PhaseNumber = (uint8_t)0;
 1550              		.loc 1 720 0
 1551 0010 4FF00003 		mov	r3, #0
 1552 0014 FB72     		strb	r3, [r7, #11]
 721:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   DBG002_FUNCTION_ENTRY(DBG002_GID_PWMMP001, (uint32_t)PWMMP001_FUNCTION_ENTRY);
 722:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 723:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*<<<DD_PWMMP001_API_7_1>>>*/
 724:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   if ((HandlePtr->DynamicHandle->State == PWMMP001_RUNNING) ||
 1553              		.loc 1 724 0
 1554 0016 7B68     		ldr	r3, [r7, #4]
 1555 0018 DB69     		ldr	r3, [r3, #28]
 1556 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1557 001c 022B     		cmp	r3, #2
 1558 001e 23D0     		beq	.L80
 725:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       (HandlePtr->DynamicHandle->State == PWMMP001_UNINITIALIZED))
 1559              		.loc 1 725 0 discriminator 1
 1560 0020 7B68     		ldr	r3, [r7, #4]
 1561 0022 DB69     		ldr	r3, [r3, #28]
 1562 0024 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 724:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   if ((HandlePtr->DynamicHandle->State == PWMMP001_RUNNING) ||
 1563              		.loc 1 724 0 discriminator 1
 1564 0026 002B     		cmp	r3, #0
 1565 0028 1ED0     		beq	.L80
 1566              	.L81:
 726:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   {
 727:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMMP001_STATUS_LEN, &Status);
 728:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   }
 729:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*<<<DD_PWMMP001_API_7_2>>>*/
 730:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   else
 731:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   {
 732:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     do
 733:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     {
 734:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       Status = CCU8PWMLIB_SetTimerVal(HandlePtr->PhaseHandlePtr[PhaseNumber], TimerVal);
 1567              		.loc 1 734 0 discriminator 1
 1568 002a FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 1569 002c 7B68     		ldr	r3, [r7, #4]
 1570 002e 02F10202 		add	r2, r2, #2
 1571 0032 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1572 0036 1846     		mov	r0, r3
 1573 0038 3968     		ldr	r1, [r7, #0]
 1574 003a FFF7FEFF 		bl	CCU8PWMLIB_SetTimerVal
 1575 003e F860     		str	r0, [r7, #12]
 735:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       PhaseNumber++;
 1576              		.loc 1 735 0 discriminator 1
 1577 0040 FB7A     		ldrb	r3, [r7, #11]
 1578 0042 03F10103 		add	r3, r3, #1
 1579 0046 FB72     		strb	r3, [r7, #11]
 736:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     }while ((PhaseNumber < HandlePtr->kNumPhases) &&
 1580              		.loc 1 736 0 discriminator 1
 1581 0048 7B68     		ldr	r3, [r7, #4]
 1582 004a 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 737:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         (Status == (uint32_t)DAVEApp_SUCCESS)&& (HandlePtr->PhaseHandlePtr[PhaseNumber] != NULL));
 1583              		.loc 1 737 0 discriminator 1
 1584 004c FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 1585 004e 9A42     		cmp	r2, r3
 1586 0050 0AD2     		bcs	.L80
 736:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     }while ((PhaseNumber < HandlePtr->kNumPhases) &&
 1587              		.loc 1 736 0
 1588 0052 FB68     		ldr	r3, [r7, #12]
 1589 0054 002B     		cmp	r3, #0
 1590 0056 07D1     		bne	.L80
 1591              		.loc 1 737 0
 1592 0058 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 1593 005a 7B68     		ldr	r3, [r7, #4]
 1594 005c 02F10202 		add	r2, r2, #2
 1595 0060 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1596 0064 002B     		cmp	r3, #0
 1597 0066 E0D1     		bne	.L81
 1598              	.L80:
 738:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 739:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     if (Status != (uint32_t)DAVEApp_SUCCESS)
 740:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     {
 741:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMMP001_STATUS_LEN, &Status);
 742:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     }
 743:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   }
 744:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 745:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   DBG002_FUNCTION_EXIT(DBG002_GID_PWMMP001, (uint32_t)PWMMP001_FUNCTION_EXIT);
 746:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   return Status;
 1599              		.loc 1 746 0
 1600 0068 FB68     		ldr	r3, [r7, #12]
 747:../Dave/Generated/src/PWMMP001/PWMMP001.c **** }
 1601              		.loc 1 747 0
 1602 006a 1846     		mov	r0, r3
 1603 006c 07F11007 		add	r7, r7, #16
 1604 0070 BD46     		mov	sp, r7
 1605 0072 80BD     		pop	{r7, pc}
 1606              		.cfi_endproc
 1607              	.LFE148:
 1609              		.section	.text.PWMMP001_GetTimerStatus,"ax",%progbits
 1610              		.align	2
 1611              		.global	PWMMP001_GetTimerStatus
 1612              		.thumb
 1613              		.thumb_func
 1615              	PWMMP001_GetTimerStatus:
 1616              	.LFB149:
 748:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 749:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*<<<DD_PWMMP001_API_8>>>*/
 750:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /** 
 751:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * This function reads the timer status - RUNNING or IDLE.
 752:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  */
 753:../Dave/Generated/src/PWMMP001/PWMMP001.c **** status_t PWMMP001_GetTimerStatus
 754:../Dave/Generated/src/PWMMP001/PWMMP001.c **** (
 755:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   const PWMMP001_HandleType* HandlePtr,
 756:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   uint32_t * TimerStatusPtr
 757:../Dave/Generated/src/PWMMP001/PWMMP001.c **** )
 758:../Dave/Generated/src/PWMMP001/PWMMP001.c **** {
 1617              		.loc 1 758 0
 1618              		.cfi_startproc
 1619              		@ args = 0, pretend = 0, frame = 24
 1620              		@ frame_needed = 1, uses_anonymous_args = 0
 1621 0000 80B5     		push	{r7, lr}
 1622              	.LCFI42:
 1623              		.cfi_def_cfa_offset 8
 1624              		.cfi_offset 7, -8
 1625              		.cfi_offset 14, -4
 1626 0002 86B0     		sub	sp, sp, #24
 1627              	.LCFI43:
 1628              		.cfi_def_cfa_offset 32
 1629 0004 00AF     		add	r7, sp, #0
 1630              	.LCFI44:
 1631              		.cfi_def_cfa_register 7
 1632 0006 7860     		str	r0, [r7, #4]
 1633 0008 3960     		str	r1, [r7, #0]
 759:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   status_t Status = (uint32_t)PWMMP001_OPER_NOT_ALLOWED_ERROR;
 1634              		.loc 1 759 0
 1635 000a 4FF00103 		mov	r3, #1
 1636 000e 7B61     		str	r3, [r7, #20]
 760:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   uint8_t PhaseNumber = (uint8_t)0;
 1637              		.loc 1 760 0
 1638 0010 4FF00003 		mov	r3, #0
 1639 0014 FB74     		strb	r3, [r7, #19]
 761:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   uint32_t LocalTimerStatusPtr = (uint32_t)0;
 1640              		.loc 1 761 0
 1641 0016 4FF00003 		mov	r3, #0
 1642 001a FB60     		str	r3, [r7, #12]
 762:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   DBG002_FUNCTION_ENTRY(DBG002_GID_PWMMP001, (uint32_t)PWMMP001_FUNCTION_ENTRY);
 763:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 764:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*<<<DD_PWMMP001_API_8_1>>>*/
 765:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   if ((HandlePtr->DynamicHandle->State == PWMMP001_UNINITIALIZED))
 1643              		.loc 1 765 0
 1644 001c 7B68     		ldr	r3, [r7, #4]
 1645 001e DB69     		ldr	r3, [r3, #28]
 1646 0020 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1647 0022 002B     		cmp	r3, #0
 1648 0024 30D0     		beq	.L84
 1649              	.L87:
 766:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   {
 767:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMMP001_STATUS_LEN, &Status);
 768:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   }
 769:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*<<<DD_PWMMP001_API_8_2>>>*/
 770:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   else
 771:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   {
 772:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     do
 773:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     {
 774:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       if (HandlePtr->PhaseHandlePtr[PhaseNumber] != NULL)
 1650              		.loc 1 774 0
 1651 0026 FA7C     		ldrb	r2, [r7, #19]	@ zero_extendqisi2
 1652 0028 7B68     		ldr	r3, [r7, #4]
 1653 002a 02F10202 		add	r2, r2, #2
 1654 002e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1655 0032 002B     		cmp	r3, #0
 1656 0034 19D0     		beq	.L85
 775:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       {
 776:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       /* Read the timer status of all the phases. */  
 777:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         Status = CCU8PWMLIB_GetTimerStatus(
 1657              		.loc 1 777 0
 1658 0036 FA7C     		ldrb	r2, [r7, #19]	@ zero_extendqisi2
 778:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                  HandlePtr->PhaseHandlePtr[PhaseNumber],
 1659              		.loc 1 778 0
 1660 0038 7B68     		ldr	r3, [r7, #4]
 777:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         Status = CCU8PWMLIB_GetTimerStatus(
 1661              		.loc 1 777 0
 1662 003a 02F10202 		add	r2, r2, #2
 1663 003e 53F82220 		ldr	r2, [r3, r2, lsl #2]
 1664 0042 07F10C03 		add	r3, r7, #12
 1665 0046 1046     		mov	r0, r2
 1666 0048 1946     		mov	r1, r3
 1667 004a FFF7FEFF 		bl	CCU8PWMLIB_GetTimerStatus
 1668 004e 7861     		str	r0, [r7, #20]
 779:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                  &LocalTimerStatusPtr);
 780:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         *TimerStatusPtr = LocalTimerStatusPtr;
 1669              		.loc 1 780 0
 1670 0050 FA68     		ldr	r2, [r7, #12]
 1671 0052 3B68     		ldr	r3, [r7, #0]
 1672 0054 1A60     		str	r2, [r3, #0]
 781:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       }
 782:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       else
 783:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       {
 784:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         Status = (uint32_t)PWMMP001_INVALID_PARAM_ERROR;
 785:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMMP001_STATUS_LEN, &Status);
 786:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         break;
 787:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       }
 788:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       PhaseNumber++;
 1673              		.loc 1 788 0
 1674 0056 FB7C     		ldrb	r3, [r7, #19]
 1675 0058 03F10103 		add	r3, r3, #1
 1676 005c FB74     		strb	r3, [r7, #19]
 789:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     } while ((PhaseNumber < HandlePtr->kNumPhases) &&
 1677              		.loc 1 789 0
 1678 005e 7B68     		ldr	r3, [r7, #4]
 1679 0060 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 790:../Dave/Generated/src/PWMMP001/PWMMP001.c ****              (Status == (uint32_t)DAVEApp_SUCCESS)&& (HandlePtr->PhaseHandlePtr[PhaseNumber] != NUL
 1680              		.loc 1 790 0
 1681 0062 FA7C     		ldrb	r2, [r7, #19]	@ zero_extendqisi2
 1682 0064 9A42     		cmp	r2, r3
 1683 0066 04D3     		bcc	.L86
 1684 0068 0EE0     		b	.L84
 1685              	.L85:
 784:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         Status = (uint32_t)PWMMP001_INVALID_PARAM_ERROR;
 1686              		.loc 1 784 0
 1687 006a 4FF00203 		mov	r3, #2
 1688 006e 7B61     		str	r3, [r7, #20]
 786:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         break;
 1689              		.loc 1 786 0
 1690 0070 0AE0     		b	.L84
 1691              	.L86:
 789:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     } while ((PhaseNumber < HandlePtr->kNumPhases) &&
 1692              		.loc 1 789 0
 1693 0072 7B69     		ldr	r3, [r7, #20]
 1694 0074 002B     		cmp	r3, #0
 1695 0076 07D1     		bne	.L84
 1696              		.loc 1 790 0
 1697 0078 FA7C     		ldrb	r2, [r7, #19]	@ zero_extendqisi2
 1698 007a 7B68     		ldr	r3, [r7, #4]
 1699 007c 02F10202 		add	r2, r2, #2
 1700 0080 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1701 0084 002B     		cmp	r3, #0
 1702 0086 CED1     		bne	.L87
 1703              	.L84:
 791:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   }
 792:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   return Status;
 1704              		.loc 1 792 0
 1705 0088 7B69     		ldr	r3, [r7, #20]
 793:../Dave/Generated/src/PWMMP001/PWMMP001.c **** }
 1706              		.loc 1 793 0
 1707 008a 1846     		mov	r0, r3
 1708 008c 07F11807 		add	r7, r7, #24
 1709 0090 BD46     		mov	sp, r7
 1710 0092 80BD     		pop	{r7, pc}
 1711              		.cfi_endproc
 1712              	.LFE149:
 1714              		.section	.text.PWMMP001_GetTimerRegsVal,"ax",%progbits
 1715              		.align	2
 1716              		.global	PWMMP001_GetTimerRegsVal
 1717              		.thumb
 1718              		.thumb_func
 1720              	PWMMP001_GetTimerRegsVal:
 1721              	.LFB150:
 794:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 795:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*<<<DD_PWMMP001_API_9>>>*/
 796:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /**
 797:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * This function reads the period register, compare register and 
 798:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * timer register value.
 799:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  */
 800:../Dave/Generated/src/PWMMP001/PWMMP001.c **** status_t PWMMP001_GetTimerRegsVal
 801:../Dave/Generated/src/PWMMP001/PWMMP001.c **** (
 802:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   const PWMMP001_HandleType * HandlePtr,
 803:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   CCU8PWMLIB_TimerRegsType * const*TimerRegsPtr
 804:../Dave/Generated/src/PWMMP001/PWMMP001.c **** )
 805:../Dave/Generated/src/PWMMP001/PWMMP001.c **** {
 1722              		.loc 1 805 0
 1723              		.cfi_startproc
 1724              		@ args = 0, pretend = 0, frame = 16
 1725              		@ frame_needed = 1, uses_anonymous_args = 0
 1726 0000 80B5     		push	{r7, lr}
 1727              	.LCFI45:
 1728              		.cfi_def_cfa_offset 8
 1729              		.cfi_offset 7, -8
 1730              		.cfi_offset 14, -4
 1731 0002 84B0     		sub	sp, sp, #16
 1732              	.LCFI46:
 1733              		.cfi_def_cfa_offset 24
 1734 0004 00AF     		add	r7, sp, #0
 1735              	.LCFI47:
 1736              		.cfi_def_cfa_register 7
 1737 0006 7860     		str	r0, [r7, #4]
 1738 0008 3960     		str	r1, [r7, #0]
 806:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   status_t Status = (uint32_t)PWMMP001_OPER_NOT_ALLOWED_ERROR;
 1739              		.loc 1 806 0
 1740 000a 4FF00103 		mov	r3, #1
 1741 000e FB60     		str	r3, [r7, #12]
 807:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   uint8_t PhaseNumber = (uint8_t)0;
 1742              		.loc 1 807 0
 1743 0010 4FF00003 		mov	r3, #0
 1744 0014 FB72     		strb	r3, [r7, #11]
 808:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   DBG002_FUNCTION_ENTRY(DBG002_GID_PWMMP001, (uint32_t)PWMMP001_FUNCTION_ENTRY);
 809:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 810:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*<<<DD_PWMMP001_API_9_1>>>*/
 811:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   if ((HandlePtr->DynamicHandle->State == PWMMP001_UNINITIALIZED))
 1745              		.loc 1 811 0
 1746 0016 7B68     		ldr	r3, [r7, #4]
 1747 0018 DB69     		ldr	r3, [r3, #28]
 1748 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1749 001c 002B     		cmp	r3, #0
 1750 001e 31D0     		beq	.L90
 1751              	.L93:
 812:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   {
 813:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMMP001_STATUS_LEN, &Status);
 814:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   }
 815:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   else
 816:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   {
 817:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*<<<DD_PWMMP001_API_9_2>>>*/
 818:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     do
 819:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     {
 820:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       if (HandlePtr->PhaseHandlePtr[PhaseNumber] != NULL)
 1752              		.loc 1 820 0
 1753 0020 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 1754 0022 7B68     		ldr	r3, [r7, #4]
 1755 0024 02F10202 		add	r2, r2, #2
 1756 0028 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1757 002c 002B     		cmp	r3, #0
 1758 002e 1AD0     		beq	.L91
 821:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       {
 822:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         Status = CCU8PWMLIB_GetTimerRegsVal(
 1759              		.loc 1 822 0
 1760 0030 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 823:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                                       HandlePtr->PhaseHandlePtr[PhaseNumber],
 1761              		.loc 1 823 0
 1762 0032 7B68     		ldr	r3, [r7, #4]
 822:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         Status = CCU8PWMLIB_GetTimerRegsVal(
 1763              		.loc 1 822 0
 1764 0034 02F10202 		add	r2, r2, #2
 1765 0038 53F82220 		ldr	r2, [r3, r2, lsl #2]
 824:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                                       TimerRegsPtr[PhaseNumber]);
 1766              		.loc 1 824 0
 1767 003c FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1768 003e 4FEA8303 		lsl	r3, r3, #2
 1769 0042 3968     		ldr	r1, [r7, #0]
 1770 0044 CB18     		adds	r3, r1, r3
 822:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         Status = CCU8PWMLIB_GetTimerRegsVal(
 1771              		.loc 1 822 0
 1772 0046 1B68     		ldr	r3, [r3, #0]
 1773 0048 1046     		mov	r0, r2
 1774 004a 1946     		mov	r1, r3
 1775 004c FFF7FEFF 		bl	CCU8PWMLIB_GetTimerRegsVal
 1776 0050 F860     		str	r0, [r7, #12]
 825:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       }
 826:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       else
 827:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       {
 828:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         Status = (uint32_t)PWMMP001_INVALID_PARAM_ERROR;
 829:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMMP001_STATUS_LEN, &Status);
 830:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         break;
 831:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       }
 832:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       PhaseNumber++;
 1777              		.loc 1 832 0
 1778 0052 FB7A     		ldrb	r3, [r7, #11]
 1779 0054 03F10103 		add	r3, r3, #1
 1780 0058 FB72     		strb	r3, [r7, #11]
 833:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     } while ((PhaseNumber < HandlePtr->kNumPhases) &&
 1781              		.loc 1 833 0
 1782 005a 7B68     		ldr	r3, [r7, #4]
 1783 005c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 834:../Dave/Generated/src/PWMMP001/PWMMP001.c ****              (Status == (uint32_t)DAVEApp_SUCCESS)&& (HandlePtr->PhaseHandlePtr[PhaseNumber] != NUL
 1784              		.loc 1 834 0
 1785 005e FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 1786 0060 9A42     		cmp	r2, r3
 1787 0062 04D3     		bcc	.L92
 1788 0064 0EE0     		b	.L90
 1789              	.L91:
 828:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         Status = (uint32_t)PWMMP001_INVALID_PARAM_ERROR;
 1790              		.loc 1 828 0
 1791 0066 4FF00203 		mov	r3, #2
 1792 006a FB60     		str	r3, [r7, #12]
 830:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         break;
 1793              		.loc 1 830 0
 1794 006c 0AE0     		b	.L90
 1795              	.L92:
 833:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     } while ((PhaseNumber < HandlePtr->kNumPhases) &&
 1796              		.loc 1 833 0
 1797 006e FB68     		ldr	r3, [r7, #12]
 1798 0070 002B     		cmp	r3, #0
 1799 0072 07D1     		bne	.L90
 1800              		.loc 1 834 0
 1801 0074 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 1802 0076 7B68     		ldr	r3, [r7, #4]
 1803 0078 02F10202 		add	r2, r2, #2
 1804 007c 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1805 0080 002B     		cmp	r3, #0
 1806 0082 CDD1     		bne	.L93
 1807              	.L90:
 835:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   }
 836:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   DBG002_FUNCTION_EXIT(DBG002_GID_PWMMP001, (uint32_t)PWMMP001_FUNCTION_EXIT);
 837:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   return Status;
 1808              		.loc 1 837 0
 1809 0084 FB68     		ldr	r3, [r7, #12]
 838:../Dave/Generated/src/PWMMP001/PWMMP001.c **** }
 1810              		.loc 1 838 0
 1811 0086 1846     		mov	r0, r3
 1812 0088 07F11007 		add	r7, r7, #16
 1813 008c BD46     		mov	sp, r7
 1814 008e 80BD     		pop	{r7, pc}
 1815              		.cfi_endproc
 1816              	.LFE150:
 1818              		.section	.text.PWMMP001_SWRequestShadowTransfer,"ax",%progbits
 1819              		.align	2
 1820              		.global	PWMMP001_SWRequestShadowTransfer
 1821              		.thumb
 1822              		.thumb_func
 1824              	PWMMP001_SWRequestShadowTransfer:
 1825              	.LFB151:
 839:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 840:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*<<<DD_PWMMP001_API_10>>>*/
 841:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /**
 842:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * This function initiates the shadow transfer for the period and compare register
 843:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  */
 844:../Dave/Generated/src/PWMMP001/PWMMP001.c **** status_t PWMMP001_SWRequestShadowTransfer
 845:../Dave/Generated/src/PWMMP001/PWMMP001.c **** (
 846:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   const PWMMP001_HandleType* HandlePtr
 847:../Dave/Generated/src/PWMMP001/PWMMP001.c **** )
 848:../Dave/Generated/src/PWMMP001/PWMMP001.c **** {
 1826              		.loc 1 848 0
 1827              		.cfi_startproc
 1828              		@ args = 0, pretend = 0, frame = 16
 1829              		@ frame_needed = 1, uses_anonymous_args = 0
 1830 0000 80B5     		push	{r7, lr}
 1831              	.LCFI48:
 1832              		.cfi_def_cfa_offset 8
 1833              		.cfi_offset 7, -8
 1834              		.cfi_offset 14, -4
 1835 0002 84B0     		sub	sp, sp, #16
 1836              	.LCFI49:
 1837              		.cfi_def_cfa_offset 24
 1838 0004 00AF     		add	r7, sp, #0
 1839              	.LCFI50:
 1840              		.cfi_def_cfa_register 7
 1841 0006 7860     		str	r0, [r7, #4]
 849:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   status_t Status = (uint32_t)PWMMP001_OPER_NOT_ALLOWED_ERROR;
 1842              		.loc 1 849 0
 1843 0008 4FF00103 		mov	r3, #1
 1844 000c FB60     		str	r3, [r7, #12]
 850:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 851:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   DBG002_FUNCTION_ENTRY(DBG002_GID_PWMMP001, (uint32_t)PWMMP001_FUNCTION_ENTRY);
 852:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 853:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*<<<DD_PWMMP001_API_10_1>>>*/
 854:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   if ((HandlePtr->DynamicHandle->State == PWMMP001_UNINITIALIZED))
 1845              		.loc 1 854 0
 1846 000e 7B68     		ldr	r3, [r7, #4]
 1847 0010 DB69     		ldr	r3, [r3, #28]
 1848 0012 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1849 0014 002B     		cmp	r3, #0
 1850 0016 0CD0     		beq	.L96
 855:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   {
 856:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMMP001_STATUS_LEN, &Status);
 857:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   }
 858:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 859:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*<<<DD_PWMMP001_API_10_2>>>*/
 860:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   else
 861:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   {
 862:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     /* Call the last phase shadow transfer API which will initiate
 863:../Dave/Generated/src/PWMMP001/PWMMP001.c ****      * shadow transfer for all the phases to ensure concurrent update.
 864:../Dave/Generated/src/PWMMP001/PWMMP001.c ****      */
 865:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     Status = CCU8PWMLIB_SWRequestShadowTransfer
 866:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         (HandlePtr->PhaseHandlePtr[HandlePtr->kNumPhases - 1U]);
 1851              		.loc 1 866 0
 1852 0018 7B68     		ldr	r3, [r7, #4]
 1853 001a 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1854 001c 03F1FF32 		add	r2, r3, #-1
 1855 0020 7B68     		ldr	r3, [r7, #4]
 1856 0022 02F10202 		add	r2, r2, #2
 1857 0026 53F82230 		ldr	r3, [r3, r2, lsl #2]
 865:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     Status = CCU8PWMLIB_SWRequestShadowTransfer
 1858              		.loc 1 865 0
 1859 002a 1846     		mov	r0, r3
 1860 002c FFF7FEFF 		bl	CCU8PWMLIB_SWRequestShadowTransfer
 1861 0030 F860     		str	r0, [r7, #12]
 1862              	.L96:
 867:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   }
 868:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 869:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   DBG002_FUNCTION_EXIT(DBG002_GID_PWMMP001, (uint32_t)PWMMP001_FUNCTION_EXIT);
 870:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   return Status;
 1863              		.loc 1 870 0
 1864 0032 FB68     		ldr	r3, [r7, #12]
 871:../Dave/Generated/src/PWMMP001/PWMMP001.c **** }
 1865              		.loc 1 871 0
 1866 0034 1846     		mov	r0, r3
 1867 0036 07F11007 		add	r7, r7, #16
 1868 003a BD46     		mov	sp, r7
 1869 003c 80BD     		pop	{r7, pc}
 1870              		.cfi_endproc
 1871              	.LFE151:
 1873 003e 00BF     		.section	.text.PWMMP001_GetPeriodReg,"ax",%progbits
 1874              		.align	2
 1875              		.global	PWMMP001_GetPeriodReg
 1876              		.thumb
 1877              		.thumb_func
 1879              	PWMMP001_GetPeriodReg:
 1880              	.LFB152:
 872:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 873:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*<<<DD_PWMMP001_API_15>>>*/
 874:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /**
 875:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * This function reads the period register value which will be needed to 
 876:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * find out the compare register values to get the required duty cycle.
 877:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  */
 878:../Dave/Generated/src/PWMMP001/PWMMP001.c **** status_t PWMMP001_GetPeriodReg
 879:../Dave/Generated/src/PWMMP001/PWMMP001.c **** (
 880:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   const PWMMP001_HandleType * HandlePtr,
 881:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   uint32_t * PeriodRegPtr
 882:../Dave/Generated/src/PWMMP001/PWMMP001.c **** )
 883:../Dave/Generated/src/PWMMP001/PWMMP001.c **** {
 1881              		.loc 1 883 0
 1882              		.cfi_startproc
 1883              		@ args = 0, pretend = 0, frame = 16
 1884              		@ frame_needed = 1, uses_anonymous_args = 0
 1885 0000 80B5     		push	{r7, lr}
 1886              	.LCFI51:
 1887              		.cfi_def_cfa_offset 8
 1888              		.cfi_offset 7, -8
 1889              		.cfi_offset 14, -4
 1890 0002 84B0     		sub	sp, sp, #16
 1891              	.LCFI52:
 1892              		.cfi_def_cfa_offset 24
 1893 0004 00AF     		add	r7, sp, #0
 1894              	.LCFI53:
 1895              		.cfi_def_cfa_register 7
 1896 0006 7860     		str	r0, [r7, #4]
 1897 0008 3960     		str	r1, [r7, #0]
 884:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   status_t Status = (uint32_t)PWMMP001_OPER_NOT_ALLOWED_ERROR;
 1898              		.loc 1 884 0
 1899 000a 4FF00103 		mov	r3, #1
 1900 000e FB60     		str	r3, [r7, #12]
 885:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   uint32_t LocalPeriod = 0U;
 1901              		.loc 1 885 0
 1902 0010 4FF00003 		mov	r3, #0
 1903 0014 BB60     		str	r3, [r7, #8]
 886:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   DBG002_FUNCTION_ENTRY(DBG002_GID_PWMMP001, (uint32_t)PWMMP001_FUNCTION_ENTRY);
 887:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 888:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*<<<DD_PWMMP001_API_15_1>>>*/
 889:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   if ((HandlePtr->DynamicHandle->State == PWMMP001_UNINITIALIZED))
 1904              		.loc 1 889 0
 1905 0016 7B68     		ldr	r3, [r7, #4]
 1906 0018 DB69     		ldr	r3, [r3, #28]
 1907 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1908 001c 002B     		cmp	r3, #0
 1909 001e 0BD0     		beq	.L99
 890:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   {
 891:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMMP001_STATUS_LEN, &Status);
 892:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   }
 893:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*<<<DD_PWMMP001_API_15_2>>>*/
 894:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   else
 895:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   {
 896:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     Status = CCU8PWMLIB_GetPeriodReg(HandlePtr->PhaseHandlePtr[0], &LocalPeriod);
 1910              		.loc 1 896 0
 1911 0020 7B68     		ldr	r3, [r7, #4]
 1912 0022 9A68     		ldr	r2, [r3, #8]
 1913 0024 07F10803 		add	r3, r7, #8
 1914 0028 1046     		mov	r0, r2
 1915 002a 1946     		mov	r1, r3
 1916 002c FFF7FEFF 		bl	CCU8PWMLIB_GetPeriodReg
 1917 0030 F860     		str	r0, [r7, #12]
 897:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     *PeriodRegPtr = LocalPeriod;
 1918              		.loc 1 897 0
 1919 0032 BA68     		ldr	r2, [r7, #8]
 1920 0034 3B68     		ldr	r3, [r7, #0]
 1921 0036 1A60     		str	r2, [r3, #0]
 1922              	.L99:
 898:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   }
 899:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 900:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   DBG002_FUNCTION_EXIT(DBG002_GID_PWMMP001, (uint32_t)PWMMP001_FUNCTION_EXIT);
 901:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   return Status;
 1923              		.loc 1 901 0
 1924 0038 FB68     		ldr	r3, [r7, #12]
 902:../Dave/Generated/src/PWMMP001/PWMMP001.c **** }
 1925              		.loc 1 902 0
 1926 003a 1846     		mov	r0, r3
 1927 003c 07F11007 		add	r7, r7, #16
 1928 0040 BD46     		mov	sp, r7
 1929 0042 80BD     		pop	{r7, pc}
 1930              		.cfi_endproc
 1931              	.LFE152:
 1933              		.section	.text.PWMMP001_ResetTrapFlag,"ax",%progbits
 1934              		.align	2
 1935              		.global	PWMMP001_ResetTrapFlag
 1936              		.thumb
 1937              		.thumb_func
 1939              	PWMMP001_ResetTrapFlag:
 1940              	.LFB153:
 903:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 904:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*<<<DD_PWMMP001_API_13>>>*/
 905:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /**
 906:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * This function clears the trap state of all the phases if exit control 
 907:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * from trap state is SW exit.
 908:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  */
 909:../Dave/Generated/src/PWMMP001/PWMMP001.c **** status_t PWMMP001_ResetTrapFlag
 910:../Dave/Generated/src/PWMMP001/PWMMP001.c **** (
 911:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   const PWMMP001_HandleType* HandlePtr
 912:../Dave/Generated/src/PWMMP001/PWMMP001.c **** )
 913:../Dave/Generated/src/PWMMP001/PWMMP001.c **** {
 1941              		.loc 1 913 0
 1942              		.cfi_startproc
 1943              		@ args = 0, pretend = 0, frame = 16
 1944              		@ frame_needed = 1, uses_anonymous_args = 0
 1945 0000 80B5     		push	{r7, lr}
 1946              	.LCFI54:
 1947              		.cfi_def_cfa_offset 8
 1948              		.cfi_offset 7, -8
 1949              		.cfi_offset 14, -4
 1950 0002 84B0     		sub	sp, sp, #16
 1951              	.LCFI55:
 1952              		.cfi_def_cfa_offset 24
 1953 0004 00AF     		add	r7, sp, #0
 1954              	.LCFI56:
 1955              		.cfi_def_cfa_register 7
 1956 0006 7860     		str	r0, [r7, #4]
 914:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   status_t Status = (uint32_t)PWMMP001_OPER_NOT_ALLOWED_ERROR;
 1957              		.loc 1 914 0
 1958 0008 4FF00103 		mov	r3, #1
 1959 000c FB60     		str	r3, [r7, #12]
 915:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   uint8_t PhaseNumber = (uint8_t)0;
 1960              		.loc 1 915 0
 1961 000e 4FF00003 		mov	r3, #0
 1962 0012 FB72     		strb	r3, [r7, #11]
 916:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   DBG002_FUNCTION_ENTRY(DBG002_GID_PWMMP001, (uint32_t)PWMMP001_FUNCTION_ENTRY);
 917:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 918:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*<<<DD_PWMMP001_API_13_1>>>*/
 919:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   if ((HandlePtr->DynamicHandle->State == PWMMP001_RUNNING) ||
 1963              		.loc 1 919 0
 1964 0014 7B68     		ldr	r3, [r7, #4]
 1965 0016 DB69     		ldr	r3, [r3, #28]
 1966 0018 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1967 001a 022B     		cmp	r3, #2
 1968 001c 22D0     		beq	.L102
 920:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       (HandlePtr->DynamicHandle->State == PWMMP001_INITIALIZED))
 1969              		.loc 1 920 0 discriminator 1
 1970 001e 7B68     		ldr	r3, [r7, #4]
 1971 0020 DB69     		ldr	r3, [r3, #28]
 1972 0022 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 919:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   if ((HandlePtr->DynamicHandle->State == PWMMP001_RUNNING) ||
 1973              		.loc 1 919 0 discriminator 1
 1974 0024 012B     		cmp	r3, #1
 1975 0026 1DD0     		beq	.L102
 1976              	.L103:
 921:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   {
 922:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMMP001_STATUS_LEN, &Status);
 923:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   }
 924:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /*<<<DD_PWMMP001_API_13_2>>>*/
 925:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   else
 926:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   {
 927:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     do
 928:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     {
 929:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       Status = CCU8PWMLIB_ResetTrapFlag(
 1977              		.loc 1 929 0 discriminator 1
 1978 0028 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 930:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                       HandlePtr->PhaseHandlePtr[PhaseNumber]);
 1979              		.loc 1 930 0 discriminator 1
 1980 002a 7B68     		ldr	r3, [r7, #4]
 929:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       Status = CCU8PWMLIB_ResetTrapFlag(
 1981              		.loc 1 929 0 discriminator 1
 1982 002c 02F10202 		add	r2, r2, #2
 1983 0030 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1984 0034 1846     		mov	r0, r3
 1985 0036 FFF7FEFF 		bl	CCU8PWMLIB_ResetTrapFlag
 1986 003a F860     		str	r0, [r7, #12]
 931:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       PhaseNumber++;
 1987              		.loc 1 931 0 discriminator 1
 1988 003c FB7A     		ldrb	r3, [r7, #11]
 1989 003e 03F10103 		add	r3, r3, #1
 1990 0042 FB72     		strb	r3, [r7, #11]
 932:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     } while((PhaseNumber < HandlePtr->kNumPhases) &&
 1991              		.loc 1 932 0 discriminator 1
 1992 0044 7B68     		ldr	r3, [r7, #4]
 1993 0046 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 933:../Dave/Generated/src/PWMMP001/PWMMP001.c ****             (Status == (uint32_t)DAVEApp_SUCCESS)&& (HandlePtr->PhaseHandlePtr[PhaseNumber] != NULL
 1994              		.loc 1 933 0 discriminator 1
 1995 0048 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 1996 004a 9A42     		cmp	r2, r3
 1997 004c 0AD2     		bcs	.L102
 932:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     } while((PhaseNumber < HandlePtr->kNumPhases) &&
 1998              		.loc 1 932 0
 1999 004e FB68     		ldr	r3, [r7, #12]
 2000 0050 002B     		cmp	r3, #0
 2001 0052 07D1     		bne	.L102
 2002              		.loc 1 933 0
 2003 0054 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 2004 0056 7B68     		ldr	r3, [r7, #4]
 2005 0058 02F10202 		add	r2, r2, #2
 2006 005c 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2007 0060 002B     		cmp	r3, #0
 2008 0062 E1D1     		bne	.L103
 2009              	.L102:
 934:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 935:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     if (Status != (uint32_t)DAVEApp_SUCCESS)
 936:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     {
 937:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMMP001_STATUS_LEN, &Status);
 938:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     }
 939:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   }
 940:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   DBG002_FUNCTION_EXIT(DBG002_GID_PWMMP001, (uint32_t)PWMMP001_FUNCTION_EXIT);
 941:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   return Status;
 2010              		.loc 1 941 0
 2011 0064 FB68     		ldr	r3, [r7, #12]
 942:../Dave/Generated/src/PWMMP001/PWMMP001.c **** }
 2012              		.loc 1 942 0
 2013 0066 1846     		mov	r0, r3
 2014 0068 07F11007 		add	r7, r7, #16
 2015 006c BD46     		mov	sp, r7
 2016 006e 80BD     		pop	{r7, pc}
 2017              		.cfi_endproc
 2018              	.LFE153:
 2020              		.section	.text.PWMMP001_EnableEvent,"ax",%progbits
 2021              		.align	2
 2022              		.global	PWMMP001_EnableEvent
 2023              		.thumb
 2024              		.thumb_func
 2026              	PWMMP001_EnableEvent:
 2027              	.LFB154:
 943:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 944:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /**
 945:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * This function sets the enable event bit for the event given in the argument.
 946:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  */
 947:../Dave/Generated/src/PWMMP001/PWMMP001.c **** status_t PWMMP001_EnableEvent
 948:../Dave/Generated/src/PWMMP001/PWMMP001.c **** (
 949:../Dave/Generated/src/PWMMP001/PWMMP001.c ****      const PWMMP001_HandleType * HandlePtr,
 950:../Dave/Generated/src/PWMMP001/PWMMP001.c ****      const PWMMP001_PhaseType PhaseNo,
 951:../Dave/Generated/src/PWMMP001/PWMMP001.c ****      const PWMMP001_EventNameType Event
 952:../Dave/Generated/src/PWMMP001/PWMMP001.c **** )
 953:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  {
 2028              		.loc 1 953 0
 2029              		.cfi_startproc
 2030              		@ args = 0, pretend = 0, frame = 16
 2031              		@ frame_needed = 1, uses_anonymous_args = 0
 2032 0000 80B5     		push	{r7, lr}
 2033              	.LCFI57:
 2034              		.cfi_def_cfa_offset 8
 2035              		.cfi_offset 7, -8
 2036              		.cfi_offset 14, -4
 2037 0002 84B0     		sub	sp, sp, #16
 2038              	.LCFI58:
 2039              		.cfi_def_cfa_offset 24
 2040 0004 00AF     		add	r7, sp, #0
 2041              	.LCFI59:
 2042              		.cfi_def_cfa_register 7
 2043 0006 7860     		str	r0, [r7, #4]
 2044 0008 1346     		mov	r3, r2
 2045 000a 0A46     		mov	r2, r1
 2046 000c FA70     		strb	r2, [r7, #3]
 2047 000e BB70     		strb	r3, [r7, #2]
 954:../Dave/Generated/src/PWMMP001/PWMMP001.c ****    status_t Status =(uint32_t) PWMMP001_OPER_NOT_ALLOWED_ERROR;
 2048              		.loc 1 954 0
 2049 0010 4FF00103 		mov	r3, #1
 2050 0014 FB60     		str	r3, [r7, #12]
 955:../Dave/Generated/src/PWMMP001/PWMMP001.c ****    DBG002_FUNCTION_ENTRY(DBG002_GID_PWMMP001, PWMMP001_FUNCTION_ENTRY);
 956:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 957:../Dave/Generated/src/PWMMP001/PWMMP001.c ****    if (HandlePtr->DynamicHandle->State == PWMMP001_UNINITIALIZED)
 2051              		.loc 1 957 0
 2052 0016 7B68     		ldr	r3, [r7, #4]
 2053 0018 DB69     		ldr	r3, [r3, #28]
 2054 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2055 001c 002B     		cmp	r3, #0
 2056 001e 03D1     		bne	.L106
 958:../Dave/Generated/src/PWMMP001/PWMMP001.c ****    {
 959:../Dave/Generated/src/PWMMP001/PWMMP001.c ****      Status = (uint32_t) PWMMP001_OPER_NOT_ALLOWED_ERROR;
 2057              		.loc 1 959 0
 2058 0020 4FF00103 		mov	r3, #1
 2059 0024 FB60     		str	r3, [r7, #12]
 2060 0026 1BE0     		b	.L107
 2061              	.L106:
 960:../Dave/Generated/src/PWMMP001/PWMMP001.c ****      DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMMP001_STATUS_LEN, &Status);
 961:../Dave/Generated/src/PWMMP001/PWMMP001.c ****    }
 962:../Dave/Generated/src/PWMMP001/PWMMP001.c ****    else if(HandlePtr->PhaseHandlePtr[(uint32_t)PhaseNo -1U] == NULL)
 2062              		.loc 1 962 0
 2063 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2064 002a 03F1FF32 		add	r2, r3, #-1
 2065 002e 7B68     		ldr	r3, [r7, #4]
 2066 0030 02F10202 		add	r2, r2, #2
 2067 0034 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2068 0038 002B     		cmp	r3, #0
 2069 003a 03D1     		bne	.L108
 963:../Dave/Generated/src/PWMMP001/PWMMP001.c ****    {
 964:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 	 Status = (uint32_t) PWMMP001_INVALID_PARAM_ERROR;
 2070              		.loc 1 964 0
 2071 003c 4FF00203 		mov	r3, #2
 2072 0040 FB60     		str	r3, [r7, #12]
 2073 0042 0DE0     		b	.L107
 2074              	.L108:
 965:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 	 DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMMP001_STATUS_LEN, &Status);
 966:../Dave/Generated/src/PWMMP001/PWMMP001.c ****    }   
 967:../Dave/Generated/src/PWMMP001/PWMMP001.c ****    else
 968:../Dave/Generated/src/PWMMP001/PWMMP001.c ****    {
 969:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       Status = CCU8PWMLIB_EnableEvent(
 970:../Dave/Generated/src/PWMMP001/PWMMP001.c ****           HandlePtr->PhaseHandlePtr[(uint32_t)PhaseNo -1U], 
 2075              		.loc 1 970 0
 2076 0044 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2077 0046 03F1FF32 		add	r2, r3, #-1
 2078 004a 7B68     		ldr	r3, [r7, #4]
 969:../Dave/Generated/src/PWMMP001/PWMMP001.c ****       Status = CCU8PWMLIB_EnableEvent(
 2079              		.loc 1 969 0
 2080 004c 02F10202 		add	r2, r2, #2
 2081 0050 53F82220 		ldr	r2, [r3, r2, lsl #2]
 2082 0054 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 2083 0056 1046     		mov	r0, r2
 2084 0058 1946     		mov	r1, r3
 2085 005a FFF7FEFF 		bl	CCU8PWMLIB_EnableEvent
 2086 005e F860     		str	r0, [r7, #12]
 2087              	.L107:
 971:../Dave/Generated/src/PWMMP001/PWMMP001.c ****           (CCU8PWMLIB_EventNameType)Event);
 972:../Dave/Generated/src/PWMMP001/PWMMP001.c ****    }
 973:../Dave/Generated/src/PWMMP001/PWMMP001.c ****    DBG002_FUNCTION_EXIT(DBG002_GID_PWMMP001, PWMMP001_FUNCTION_EXIT);
 974:../Dave/Generated/src/PWMMP001/PWMMP001.c ****    return (Status);
 2088              		.loc 1 974 0
 2089 0060 FB68     		ldr	r3, [r7, #12]
 975:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  }
 2090              		.loc 1 975 0
 2091 0062 1846     		mov	r0, r3
 2092 0064 07F11007 		add	r7, r7, #16
 2093 0068 BD46     		mov	sp, r7
 2094 006a 80BD     		pop	{r7, pc}
 2095              		.cfi_endproc
 2096              	.LFE154:
 2098              		.section	.text.PWMMP001_DisableEvent,"ax",%progbits
 2099              		.align	2
 2100              		.global	PWMMP001_DisableEvent
 2101              		.thumb
 2102              		.thumb_func
 2104              	PWMMP001_DisableEvent:
 2105              	.LFB155:
 976:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 977:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  /**
 978:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   * This function clears the enable event bit for the event given in the argument.
 979:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   */
 980:../Dave/Generated/src/PWMMP001/PWMMP001.c **** status_t PWMMP001_DisableEvent
 981:../Dave/Generated/src/PWMMP001/PWMMP001.c **** (
 982:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     const PWMMP001_HandleType * HandlePtr,
 983:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     const PWMMP001_PhaseType PhaseNo,
 984:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     const PWMMP001_EventNameType Event
 985:../Dave/Generated/src/PWMMP001/PWMMP001.c **** )
 986:../Dave/Generated/src/PWMMP001/PWMMP001.c **** {
 2106              		.loc 1 986 0
 2107              		.cfi_startproc
 2108              		@ args = 0, pretend = 0, frame = 16
 2109              		@ frame_needed = 1, uses_anonymous_args = 0
 2110 0000 80B5     		push	{r7, lr}
 2111              	.LCFI60:
 2112              		.cfi_def_cfa_offset 8
 2113              		.cfi_offset 7, -8
 2114              		.cfi_offset 14, -4
 2115 0002 84B0     		sub	sp, sp, #16
 2116              	.LCFI61:
 2117              		.cfi_def_cfa_offset 24
 2118 0004 00AF     		add	r7, sp, #0
 2119              	.LCFI62:
 2120              		.cfi_def_cfa_register 7
 2121 0006 7860     		str	r0, [r7, #4]
 2122 0008 1346     		mov	r3, r2
 2123 000a 0A46     		mov	r2, r1
 2124 000c FA70     		strb	r2, [r7, #3]
 2125 000e BB70     		strb	r3, [r7, #2]
 987:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   status_t Status = (uint32_t) PWMMP001_OPER_NOT_ALLOWED_ERROR;
 2126              		.loc 1 987 0
 2127 0010 4FF00103 		mov	r3, #1
 2128 0014 FB60     		str	r3, [r7, #12]
 988:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   DBG002_FUNCTION_ENTRY(DBG002_GID_PWMMP001, PWMMP001_FUNCTION_ENTRY);
 989:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
 990:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   if (HandlePtr->DynamicHandle->State == PWMMP001_UNINITIALIZED)
 2129              		.loc 1 990 0
 2130 0016 7B68     		ldr	r3, [r7, #4]
 2131 0018 DB69     		ldr	r3, [r3, #28]
 2132 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2133 001c 002B     		cmp	r3, #0
 2134 001e 03D1     		bne	.L111
 991:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   {
 992:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     Status = (uint32_t) PWMMP001_OPER_NOT_ALLOWED_ERROR;
 2135              		.loc 1 992 0
 2136 0020 4FF00103 		mov	r3, #1
 2137 0024 FB60     		str	r3, [r7, #12]
 2138 0026 1BE0     		b	.L112
 2139              	.L111:
 993:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMMP001_STATUS_LEN, &Status);
 994:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   }
 995:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   else if(HandlePtr->PhaseHandlePtr[(uint32_t)PhaseNo -1U] == NULL)
 2140              		.loc 1 995 0
 2141 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2142 002a 03F1FF32 		add	r2, r3, #-1
 2143 002e 7B68     		ldr	r3, [r7, #4]
 2144 0030 02F10202 		add	r2, r2, #2
 2145 0034 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2146 0038 002B     		cmp	r3, #0
 2147 003a 03D1     		bne	.L113
 996:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   {
 997:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 	 Status = (uint32_t) PWMMP001_INVALID_PARAM_ERROR;
 2148              		.loc 1 997 0
 2149 003c 4FF00203 		mov	r3, #2
 2150 0040 FB60     		str	r3, [r7, #12]
 2151 0042 0DE0     		b	.L112
 2152              	.L113:
 998:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 	 DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMMP001_STATUS_LEN, &Status);
 999:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   }  
1000:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   else
1001:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   {
1002:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     Status = CCU8PWMLIB_DisableEvent( 
1003:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         HandlePtr->PhaseHandlePtr[(uint32_t)PhaseNo -1U], 
 2153              		.loc 1 1003 0
 2154 0044 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2155 0046 03F1FF32 		add	r2, r3, #-1
 2156 004a 7B68     		ldr	r3, [r7, #4]
1002:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     Status = CCU8PWMLIB_DisableEvent( 
 2157              		.loc 1 1002 0
 2158 004c 02F10202 		add	r2, r2, #2
 2159 0050 53F82220 		ldr	r2, [r3, r2, lsl #2]
 2160 0054 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 2161 0056 1046     		mov	r0, r2
 2162 0058 1946     		mov	r1, r3
 2163 005a FFF7FEFF 		bl	CCU8PWMLIB_DisableEvent
 2164 005e F860     		str	r0, [r7, #12]
 2165              	.L112:
1004:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         (CCU8PWMLIB_EventNameType)Event);
1005:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   }
1006:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   DBG002_FUNCTION_EXIT(DBG002_GID_PWMMP001, PWMMP001_FUNCTION_EXIT);
1007:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   return (Status);
 2166              		.loc 1 1007 0
 2167 0060 FB68     		ldr	r3, [r7, #12]
1008:../Dave/Generated/src/PWMMP001/PWMMP001.c **** }
 2168              		.loc 1 1008 0
 2169 0062 1846     		mov	r0, r3
 2170 0064 07F11007 		add	r7, r7, #16
 2171 0068 BD46     		mov	sp, r7
 2172 006a 80BD     		pop	{r7, pc}
 2173              		.cfi_endproc
 2174              	.LFE155:
 2176              		.section	.text.PWMMP001_ClearPendingEvent,"ax",%progbits
 2177              		.align	2
 2178              		.global	PWMMP001_ClearPendingEvent
 2179              		.thumb
 2180              		.thumb_func
 2182              	PWMMP001_ClearPendingEvent:
 2183              	.LFB156:
1009:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
1010:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /**
1011:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * This function clears the interrupt by software.
1012:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  */
1013:../Dave/Generated/src/PWMMP001/PWMMP001.c **** status_t PWMMP001_ClearPendingEvent
1014:../Dave/Generated/src/PWMMP001/PWMMP001.c **** (
1015:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     const PWMMP001_HandleType * HandlePtr,
1016:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     const PWMMP001_PhaseType PhaseNo,
1017:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     const PWMMP001_EventNameType Event
1018:../Dave/Generated/src/PWMMP001/PWMMP001.c **** )
1019:../Dave/Generated/src/PWMMP001/PWMMP001.c **** {
 2184              		.loc 1 1019 0
 2185              		.cfi_startproc
 2186              		@ args = 0, pretend = 0, frame = 16
 2187              		@ frame_needed = 1, uses_anonymous_args = 0
 2188 0000 80B5     		push	{r7, lr}
 2189              	.LCFI63:
 2190              		.cfi_def_cfa_offset 8
 2191              		.cfi_offset 7, -8
 2192              		.cfi_offset 14, -4
 2193 0002 84B0     		sub	sp, sp, #16
 2194              	.LCFI64:
 2195              		.cfi_def_cfa_offset 24
 2196 0004 00AF     		add	r7, sp, #0
 2197              	.LCFI65:
 2198              		.cfi_def_cfa_register 7
 2199 0006 7860     		str	r0, [r7, #4]
 2200 0008 1346     		mov	r3, r2
 2201 000a 0A46     		mov	r2, r1
 2202 000c FA70     		strb	r2, [r7, #3]
 2203 000e BB70     		strb	r3, [r7, #2]
1020:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   status_t Status = (uint32_t) PWMMP001_OPER_NOT_ALLOWED_ERROR;
 2204              		.loc 1 1020 0
 2205 0010 4FF00103 		mov	r3, #1
 2206 0014 FB60     		str	r3, [r7, #12]
1021:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   DBG002_FUNCTION_ENTRY(DBG002_GID_PWMMP001, PWMMP001_FUNCTION_ENTRY);
1022:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
1023:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   if (HandlePtr->DynamicHandle->State == PWMMP001_UNINITIALIZED)
 2207              		.loc 1 1023 0
 2208 0016 7B68     		ldr	r3, [r7, #4]
 2209 0018 DB69     		ldr	r3, [r3, #28]
 2210 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2211 001c 002B     		cmp	r3, #0
 2212 001e 03D1     		bne	.L116
1024:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   {
1025:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     Status = (uint32_t) PWMMP001_OPER_NOT_ALLOWED_ERROR;
 2213              		.loc 1 1025 0
 2214 0020 4FF00103 		mov	r3, #1
 2215 0024 FB60     		str	r3, [r7, #12]
 2216 0026 1BE0     		b	.L117
 2217              	.L116:
1026:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMMP001_STATUS_LEN, &Status);
1027:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   }
1028:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   else if(HandlePtr->PhaseHandlePtr[(uint32_t)PhaseNo -1U] == NULL)
 2218              		.loc 1 1028 0
 2219 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2220 002a 03F1FF32 		add	r2, r3, #-1
 2221 002e 7B68     		ldr	r3, [r7, #4]
 2222 0030 02F10202 		add	r2, r2, #2
 2223 0034 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2224 0038 002B     		cmp	r3, #0
 2225 003a 03D1     		bne	.L118
1029:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   {
1030:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 	 Status = (uint32_t) PWMMP001_INVALID_PARAM_ERROR;
 2226              		.loc 1 1030 0
 2227 003c 4FF00203 		mov	r3, #2
 2228 0040 FB60     		str	r3, [r7, #12]
 2229 0042 0DE0     		b	.L117
 2230              	.L118:
1031:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 	 DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMMP001_STATUS_LEN, &Status);
1032:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   }
1033:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   else
1034:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   {
1035:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     Status = CCU8PWMLIB_ClearPendingEvent(
1036:../Dave/Generated/src/PWMMP001/PWMMP001.c ****         HandlePtr->PhaseHandlePtr[(uint32_t)PhaseNo -1U], 
 2231              		.loc 1 1036 0
 2232 0044 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2233 0046 03F1FF32 		add	r2, r3, #-1
 2234 004a 7B68     		ldr	r3, [r7, #4]
1035:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     Status = CCU8PWMLIB_ClearPendingEvent(
 2235              		.loc 1 1035 0
 2236 004c 02F10202 		add	r2, r2, #2
 2237 0050 53F82220 		ldr	r2, [r3, r2, lsl #2]
 2238 0054 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 2239 0056 1046     		mov	r0, r2
 2240 0058 1946     		mov	r1, r3
 2241 005a FFF7FEFF 		bl	CCU8PWMLIB_ClearPendingEvent
 2242 005e F860     		str	r0, [r7, #12]
 2243              	.L117:
1037:../Dave/Generated/src/PWMMP001/PWMMP001.c ****          (CCU8PWMLIB_EventNameType)Event);
1038:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   }
1039:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   DBG002_FUNCTION_EXIT(DBG002_GID_PWMMP001, PWMMP001_FUNCTION_EXIT);
1040:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   return (Status);
 2244              		.loc 1 1040 0
 2245 0060 FB68     		ldr	r3, [r7, #12]
1041:../Dave/Generated/src/PWMMP001/PWMMP001.c **** }
 2246              		.loc 1 1041 0
 2247 0062 1846     		mov	r0, r3
 2248 0064 07F11007 		add	r7, r7, #16
 2249 0068 BD46     		mov	sp, r7
 2250 006a 80BD     		pop	{r7, pc}
 2251              		.cfi_endproc
 2252              	.LFE156:
 2254              		.section	.text.PWMMP001_SetPendingEvent,"ax",%progbits
 2255              		.align	2
 2256              		.global	PWMMP001_SetPendingEvent
 2257              		.thumb
 2258              		.thumb_func
 2260              	PWMMP001_SetPendingEvent:
 2261              	.LFB157:
1042:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
1043:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /**
1044:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * This function sets the interrupt by software Interrupt pulse is generated
1045:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * if source is enabled.
1046:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  */
1047:../Dave/Generated/src/PWMMP001/PWMMP001.c **** status_t PWMMP001_SetPendingEvent
1048:../Dave/Generated/src/PWMMP001/PWMMP001.c **** (
1049:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     const PWMMP001_HandleType * HandlePtr,
1050:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     const PWMMP001_PhaseType PhaseNo,
1051:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     const PWMMP001_EventNameType Event
1052:../Dave/Generated/src/PWMMP001/PWMMP001.c **** )
1053:../Dave/Generated/src/PWMMP001/PWMMP001.c **** {
 2262              		.loc 1 1053 0
 2263              		.cfi_startproc
 2264              		@ args = 0, pretend = 0, frame = 16
 2265              		@ frame_needed = 1, uses_anonymous_args = 0
 2266 0000 80B5     		push	{r7, lr}
 2267              	.LCFI66:
 2268              		.cfi_def_cfa_offset 8
 2269              		.cfi_offset 7, -8
 2270              		.cfi_offset 14, -4
 2271 0002 84B0     		sub	sp, sp, #16
 2272              	.LCFI67:
 2273              		.cfi_def_cfa_offset 24
 2274 0004 00AF     		add	r7, sp, #0
 2275              	.LCFI68:
 2276              		.cfi_def_cfa_register 7
 2277 0006 7860     		str	r0, [r7, #4]
 2278 0008 1346     		mov	r3, r2
 2279 000a 0A46     		mov	r2, r1
 2280 000c FA70     		strb	r2, [r7, #3]
 2281 000e BB70     		strb	r3, [r7, #2]
1054:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   status_t Status = (uint32_t) PWMMP001_OPER_NOT_ALLOWED_ERROR;
 2282              		.loc 1 1054 0
 2283 0010 4FF00103 		mov	r3, #1
 2284 0014 FB60     		str	r3, [r7, #12]
1055:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   DBG002_FUNCTION_ENTRY(DBG002_GID_PWMMP001, PWMMP001_FUNCTION_ENTRY);
1056:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
1057:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   if (HandlePtr->DynamicHandle->State == PWMMP001_UNINITIALIZED)
 2285              		.loc 1 1057 0
 2286 0016 7B68     		ldr	r3, [r7, #4]
 2287 0018 DB69     		ldr	r3, [r3, #28]
 2288 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2289 001c 002B     		cmp	r3, #0
 2290 001e 03D1     		bne	.L121
1058:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   {
1059:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     Status = (uint32_t) PWMMP001_OPER_NOT_ALLOWED_ERROR;
 2291              		.loc 1 1059 0
 2292 0020 4FF00103 		mov	r3, #1
 2293 0024 FB60     		str	r3, [r7, #12]
 2294 0026 1BE0     		b	.L122
 2295              	.L121:
1060:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMMP001_STATUS_LEN, &Status);
1061:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   }
1062:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   else if(HandlePtr->PhaseHandlePtr[(uint32_t)PhaseNo -1U] == NULL)
 2296              		.loc 1 1062 0
 2297 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2298 002a 03F1FF32 		add	r2, r3, #-1
 2299 002e 7B68     		ldr	r3, [r7, #4]
 2300 0030 02F10202 		add	r2, r2, #2
 2301 0034 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2302 0038 002B     		cmp	r3, #0
 2303 003a 03D1     		bne	.L123
1063:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   {
1064:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 	 Status = (uint32_t) PWMMP001_INVALID_PARAM_ERROR;
 2304              		.loc 1 1064 0
 2305 003c 4FF00203 		mov	r3, #2
 2306 0040 FB60     		str	r3, [r7, #12]
 2307 0042 0DE0     		b	.L122
 2308              	.L123:
1065:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 	 DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMMP001_STATUS_LEN, &Status);
1066:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   }
1067:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   else
1068:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   {
1069:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     Status = CCU8PWMLIB_SetPendingEvent(
1070:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                  HandlePtr->PhaseHandlePtr[(uint32_t)PhaseNo -1U], 
 2309              		.loc 1 1070 0
 2310 0044 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2311 0046 03F1FF32 		add	r2, r3, #-1
 2312 004a 7B68     		ldr	r3, [r7, #4]
1069:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     Status = CCU8PWMLIB_SetPendingEvent(
 2313              		.loc 1 1069 0
 2314 004c 02F10202 		add	r2, r2, #2
 2315 0050 53F82220 		ldr	r2, [r3, r2, lsl #2]
 2316 0054 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 2317 0056 1046     		mov	r0, r2
 2318 0058 1946     		mov	r1, r3
 2319 005a FFF7FEFF 		bl	CCU8PWMLIB_SetPendingEvent
 2320 005e F860     		str	r0, [r7, #12]
 2321              	.L122:
1071:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                  (CCU8PWMLIB_EventNameType)Event);
1072:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   }
1073:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   DBG002_FUNCTION_EXIT(DBG002_GID_PWMMP001, PWMMP001_FUNCTION_EXIT);
1074:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   return (Status);
 2322              		.loc 1 1074 0
 2323 0060 FB68     		ldr	r3, [r7, #12]
1075:../Dave/Generated/src/PWMMP001/PWMMP001.c **** }
 2324              		.loc 1 1075 0
 2325 0062 1846     		mov	r0, r3
 2326 0064 07F11007 		add	r7, r7, #16
 2327 0068 BD46     		mov	sp, r7
 2328 006a 80BD     		pop	{r7, pc}
 2329              		.cfi_endproc
 2330              	.LFE157:
 2332              		.section	.text.PWMMP001_GetPendingEvent,"ax",%progbits
 2333              		.align	2
 2334              		.global	PWMMP001_GetPendingEvent
 2335              		.thumb
 2336              		.thumb_func
 2338              	PWMMP001_GetPendingEvent:
 2339              	.LFB158:
1076:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
1077:../Dave/Generated/src/PWMMP001/PWMMP001.c **** /**
1078:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  * This function checks whether given interrupt is set
1079:../Dave/Generated/src/PWMMP001/PWMMP001.c ****  */
1080:../Dave/Generated/src/PWMMP001/PWMMP001.c **** status_t PWMMP001_GetPendingEvent
1081:../Dave/Generated/src/PWMMP001/PWMMP001.c **** (
1082:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     const PWMMP001_HandleType * HandlePtr,
1083:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     const PWMMP001_PhaseType PhaseNo,
1084:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     const PWMMP001_EventNameType Event,
1085:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     uint8_t* EvtStatus
1086:../Dave/Generated/src/PWMMP001/PWMMP001.c **** )
1087:../Dave/Generated/src/PWMMP001/PWMMP001.c **** {
 2340              		.loc 1 1087 0
 2341              		.cfi_startproc
 2342              		@ args = 0, pretend = 0, frame = 24
 2343              		@ frame_needed = 1, uses_anonymous_args = 0
 2344 0000 80B5     		push	{r7, lr}
 2345              	.LCFI69:
 2346              		.cfi_def_cfa_offset 8
 2347              		.cfi_offset 7, -8
 2348              		.cfi_offset 14, -4
 2349 0002 86B0     		sub	sp, sp, #24
 2350              	.LCFI70:
 2351              		.cfi_def_cfa_offset 32
 2352 0004 00AF     		add	r7, sp, #0
 2353              	.LCFI71:
 2354              		.cfi_def_cfa_register 7
 2355 0006 F860     		str	r0, [r7, #12]
 2356 0008 7B60     		str	r3, [r7, #4]
 2357 000a 0B46     		mov	r3, r1
 2358 000c FB72     		strb	r3, [r7, #11]
 2359 000e 1346     		mov	r3, r2
 2360 0010 BB72     		strb	r3, [r7, #10]
1088:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   status_t Status = (uint32_t) PWMMP001_OPER_NOT_ALLOWED_ERROR;
 2361              		.loc 1 1088 0
 2362 0012 4FF00103 		mov	r3, #1
 2363 0016 7B61     		str	r3, [r7, #20]
1089:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   DBG002_FUNCTION_ENTRY(DBG002_GID_PWMMP001, PWMMP001_FUNCTION_ENTRY);
1090:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 
1091:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   if (HandlePtr->DynamicHandle->State == PWMMP001_UNINITIALIZED)
 2364              		.loc 1 1091 0
 2365 0018 FB68     		ldr	r3, [r7, #12]
 2366 001a DB69     		ldr	r3, [r3, #28]
 2367 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2368 001e 002B     		cmp	r3, #0
 2369 0020 03D1     		bne	.L126
1092:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   {
1093:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     Status = (uint32_t) PWMMP001_OPER_NOT_ALLOWED_ERROR;
 2370              		.loc 1 1093 0
 2371 0022 4FF00103 		mov	r3, #1
 2372 0026 7B61     		str	r3, [r7, #20]
 2373 0028 1CE0     		b	.L127
 2374              	.L126:
1094:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMMP001_STATUS_LEN, &Status);
1095:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   }
1096:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   else if(HandlePtr->PhaseHandlePtr[(uint32_t)PhaseNo -1U] == NULL)
 2375              		.loc 1 1096 0
 2376 002a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 2377 002c 03F1FF32 		add	r2, r3, #-1
 2378 0030 FB68     		ldr	r3, [r7, #12]
 2379 0032 02F10202 		add	r2, r2, #2
 2380 0036 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2381 003a 002B     		cmp	r3, #0
 2382 003c 03D1     		bne	.L128
1097:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   {
1098:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 	 Status = (uint32_t) PWMMP001_INVALID_PARAM_ERROR;
 2383              		.loc 1 1098 0
 2384 003e 4FF00203 		mov	r3, #2
 2385 0042 7B61     		str	r3, [r7, #20]
 2386 0044 0EE0     		b	.L127
 2387              	.L128:
1099:../Dave/Generated/src/PWMMP001/PWMMP001.c **** 	 DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMMP001_STATUS_LEN, &Status);
1100:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   }
1101:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   else
1102:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   {
1103:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     Status = CCU8PWMLIB_GetPendingEvent(
1104:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                  HandlePtr->PhaseHandlePtr[(uint32_t)PhaseNo -1U], 
 2388              		.loc 1 1104 0
 2389 0046 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 2390 0048 03F1FF32 		add	r2, r3, #-1
 2391 004c FB68     		ldr	r3, [r7, #12]
1103:../Dave/Generated/src/PWMMP001/PWMMP001.c ****     Status = CCU8PWMLIB_GetPendingEvent(
 2392              		.loc 1 1103 0
 2393 004e 02F10202 		add	r2, r2, #2
 2394 0052 53F82220 		ldr	r2, [r3, r2, lsl #2]
 2395 0056 BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 2396 0058 1046     		mov	r0, r2
 2397 005a 1946     		mov	r1, r3
 2398 005c 7A68     		ldr	r2, [r7, #4]
 2399 005e FFF7FEFF 		bl	CCU8PWMLIB_GetPendingEvent
 2400 0062 7861     		str	r0, [r7, #20]
 2401              	.L127:
1105:../Dave/Generated/src/PWMMP001/PWMMP001.c ****                  (CCU8PWMLIB_EventNameType)Event, EvtStatus);
1106:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   }
1107:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   DBG002_FUNCTION_EXIT(DBG002_GID_PWMMP001, PWMMP001_FUNCTION_EXIT);
1108:../Dave/Generated/src/PWMMP001/PWMMP001.c ****   return (Status);
 2402              		.loc 1 1108 0
 2403 0064 7B69     		ldr	r3, [r7, #20]
1109:../Dave/Generated/src/PWMMP001/PWMMP001.c **** }
 2404              		.loc 1 1109 0
 2405 0066 1846     		mov	r0, r3
 2406 0068 07F11807 		add	r7, r7, #24
 2407 006c BD46     		mov	sp, r7
 2408 006e 80BD     		pop	{r7, pc}
 2409              		.cfi_endproc
 2410              	.LFE158:
 2412              		.text
 2413              	.Letext0:
 2414              		.file 2 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
 2415              		.file 3 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 2416              		.file 4 "C:\\DAVE3_workspace\\wsHERBY\\LARIX_Software_150907\\Dave\\Generated\\inc\\DAVESupport/..
 2417              		.file 5 "C:\\DAVE3_workspace\\wsHERBY\\LARIX_Software_150907\\Dave\\Generated\\inc\\DAVESupport/..
 2418              		.file 6 "C:\\DAVE3_workspace\\wsHERBY\\LARIX_Software_150907\\Dave\\Generated\\inc\\DAVESupport/..
 2419              		.file 7 "C:\\DAVE3_workspace\\wsHERBY\\LARIX_Software_150907\\Dave\\Generated\\inc\\DAVESupport/..
 2420              		.file 8 "C:\\DAVE3_workspace\\wsHERBY\\LARIX_Software_150907\\Dave\\Generated\\inc\\DAVESupport/..
 2421              		.file 9 "C:\\DAVE3_workspace\\wsHERBY\\LARIX_Software_150907\\Dave\\Generated\\inc\\DAVESupport/..
 2422              		.file 10 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cm4.h"
 2423              		.file 11 "C:\\DAVE3_workspace\\wsHERBY\\LARIX_Software_150907\\Dave\\Generated\\inc\\DAVESupport/.
DEFINED SYMBOLS
                            *ABS*:00000000 PWMMP001.c
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:20     .text.PWMMP001_Init:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:25     .text.PWMMP001_Init:00000000 PWMMP001_Init
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:201    .text.PWMMP001_lInit:00000000 PWMMP001_lInit
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:503    .text.PWMMP001_Start:00000000 PWMMP001_Start
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:196    .text.PWMMP001_lInit:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:326    .text.PWMMP001_Deinit:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:331    .text.PWMMP001_Deinit:00000000 PWMMP001_Deinit
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:407    .text.PWMMP001_DisableGlobalStart:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:412    .text.PWMMP001_DisableGlobalStart:00000000 PWMMP001_DisableGlobalStart
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:453    .text.PWMMP001_EnableGlobalStart:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:458    .text.PWMMP001_EnableGlobalStart:00000000 PWMMP001_EnableGlobalStart
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:498    .text.PWMMP001_Start:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:683    .text.PWMMP001_Stop:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:688    .text.PWMMP001_Stop:00000000 PWMMP001_Stop
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:770    .text.PWMMP001_SetCompare:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:775    .text.PWMMP001_SetCompare:00000000 PWMMP001_SetCompare
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:883    .text.PWMMP001_SetDutyCycle:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:888    .text.PWMMP001_SetDutyCycle:00000000 PWMMP001_SetDutyCycle
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:1040   .text.PWMMP001_SetDutyCycle:00000104 $d
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:1045   .text.PWMMP001_SetPwmFreqAndDutyCycle:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:1050   .text.PWMMP001_SetPwmFreqAndDutyCycle:00000000 PWMMP001_SetPwmFreqAndDutyCycle
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:1216   .text.PWMMP001_SetPwmFreqAndDutyCycle:00000120 $d
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:1221   .text.PWMMP001_SetPwmFreq:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:1226   .text.PWMMP001_SetPwmFreq:00000000 PWMMP001_SetPwmFreq
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:1310   .text.PWMMP001_SetPeriodAndCompare:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:1315   .text.PWMMP001_SetPeriodAndCompare:00000000 PWMMP001_SetPeriodAndCompare
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:1429   .text.PWMMP001_SetPeriod:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:1434   .text.PWMMP001_SetPeriod:00000000 PWMMP001_SetPeriod
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:1523   .text.PWMMP001_SetTimerVal:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:1528   .text.PWMMP001_SetTimerVal:00000000 PWMMP001_SetTimerVal
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:1610   .text.PWMMP001_GetTimerStatus:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:1615   .text.PWMMP001_GetTimerStatus:00000000 PWMMP001_GetTimerStatus
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:1715   .text.PWMMP001_GetTimerRegsVal:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:1720   .text.PWMMP001_GetTimerRegsVal:00000000 PWMMP001_GetTimerRegsVal
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:1819   .text.PWMMP001_SWRequestShadowTransfer:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:1824   .text.PWMMP001_SWRequestShadowTransfer:00000000 PWMMP001_SWRequestShadowTransfer
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:1874   .text.PWMMP001_GetPeriodReg:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:1879   .text.PWMMP001_GetPeriodReg:00000000 PWMMP001_GetPeriodReg
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:1934   .text.PWMMP001_ResetTrapFlag:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:1939   .text.PWMMP001_ResetTrapFlag:00000000 PWMMP001_ResetTrapFlag
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:2021   .text.PWMMP001_EnableEvent:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:2026   .text.PWMMP001_EnableEvent:00000000 PWMMP001_EnableEvent
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:2099   .text.PWMMP001_DisableEvent:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:2104   .text.PWMMP001_DisableEvent:00000000 PWMMP001_DisableEvent
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:2177   .text.PWMMP001_ClearPendingEvent:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:2182   .text.PWMMP001_ClearPendingEvent:00000000 PWMMP001_ClearPendingEvent
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:2255   .text.PWMMP001_SetPendingEvent:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:2260   .text.PWMMP001_SetPendingEvent:00000000 PWMMP001_SetPendingEvent
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:2333   .text.PWMMP001_GetPendingEvent:00000000 $t
C:\Users\Herbert\AppData\Local\Temp\ccvEANaw.s:2338   .text.PWMMP001_GetPendingEvent:00000000 PWMMP001_GetPendingEvent
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.XMC4500.h.45.215f4b8c79f46c7645c15373868d08c0
                           .group:00000000 wm4.core_cm4.h.47.41af406cb4cda82c972f112a9cd0a024
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.39.3d3d1b4a79aef37532666dc6ee87c6ac
                           .group:00000000 wm4.core_cm4_simd.h.43.b5d1d38735af6366227b4256d330cf13
                           .group:00000000 wm4.core_cm4.h.178.e5ef5ce66d198d7f00f9d0076e267c41
                           .group:00000000 wm4.system_XMC4500.h.29.827f68baa362c84f2abae4ab67dde7c9
                           .group:00000000 wm4.XMC4500.h.198.8e022f279ff353ed081df898dc7b9cf3
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.types.h.60.e75c47576398c648cdcf9000ace5e3d8
                           .group:00000000 wm4.MULTIPLEXER.h.46.4a863fbae1c79f0db26da3ce2dc30d02
                           .group:00000000 wm4.CCU8PWMLIB.h.74.725ec81203769525cc7a424597055f47
                           .group:00000000 wm4.MOTORLIB.h.62.951091d95913dd2ff36d761323a1771d
                           .group:00000000 wm4.DBG001.h.116.d6d9e7459a0faa3905c97c1d2edb339d
                           .group:00000000 wm4.uc_id.h.35.91819d6149ee56f9404d69053d48d018
                           .group:00000000 wm4.CLK001_Const.h.50.e5e9c2ddc89f4cc9e7b93e9648fa94e4
                           .group:00000000 wm4.CLK001_Conf.h.81.851ac7a1268528f4d6739384c2f248a5
                           .group:00000000 wm4.NVIC002_Conf.h.63.9993755b03eb421826d0e4532aa15204
                           .group:00000000 wm4.ERU001_Conf.h.69.61c28b1ac8f55fb79ee064524d8b6415
                           .group:00000000 wm4.ERU002_Conf.h.49.449ecc05b9e62e9b43f2dc6ead06a5ce
                           .group:00000000 wm4.IO002_Conf.h.51.87e2c8c60b647393fe9ced2cae198f63
                           .group:00000000 wm4.Usic.h.54.8af9f733ba5771eeb374435d205ea54b
                           .group:00000000 wm4.UART001_Conf.h.53.31fc52a43d60ddd963b759dbc8ccb910
                           .group:00000000 wm4.UART001.h.109.3e835815a7a59791d8bd39655f4d4cc9
                           .group:00000000 wm4.CCU4Global_Conf.h.63.3185b28f5d60dcacb47ae61d590330d9
                           .group:00000000 wm4.PWMSP001.h.57.29b732b86baf3e81f49153f5f495912e
                           .group:00000000 wm4.usbd_config.h.64.bd01b2d6be88400f5b6095cc78dd2cee
                           .group:00000000 wm4.stdlib.h.13.603ed7eb09a1561ab06840b7c0fcff58
                           .group:00000000 wm4.stddef.h.161.e50ff8a9d5d1abbc15641da28ac571bf
                           .group:00000000 wm4._default_types.h.6.5e12cd604db8ce00b62bb2f02708eaf3
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.161.c6104a0666cf681b6269ddc9b4f516d4
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.53.c69c7609933ff56d59c757cec2d13230
                           .group:00000000 wm4.string.h.8.ef946ad0bc9ad5c970c365dcd1fc4b0a
                           .group:00000000 wm4.string.h.86.d5c872ff52e2712c985b588a0ef39f3c
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4.xmc4_usb.h.86.0df8e4bc81775a7befde6c395bcdee4c
                           .group:00000000 wm4.dwc_otg_regs.h.96.602358b1a0ef2f2c6d02620a154f0cfc
                           .group:00000000 wm4.xmc4_usb.h.97.59ae14584bb42292696e2197b500e282
                           .group:00000000 wm4.CDCClass.h.89.7fca95873b1cbf8116f62fa27fd7c792
                           .group:00000000 wm4.Common.h.87.ed9fec00c6f9ec3cf5c2ac4c6cfcb530
                           .group:00000000 wm4.Attributes.h.96.1b4ef8adf80de3cb4f8c62843bfaf7bf
                           .group:00000000 wm4.StdDescriptors.h.107.d2322ff0c138acada78976933b16bf7b
                           .group:00000000 wm4.Endpoint.h.111.e7536b4385918c15b4c37aa69fbe94e3
                           .group:00000000 wm4.USBController.h.105.7da122fb9e42a1d4ae2ea1662b47f042
                           .group:00000000 wm4.StdRequestType.h.87.0e2654a6e33ff7aef3db3461e4efa272
                           .group:00000000 wm4.CDCClassCommon.h.122.d15a1de5444b7c9e23eadf1dd367720e
                           .group:00000000 wm4.stdio.h.27.f2ac352bab34f31f9f478442827b2ba6
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.1f2c84c0d57dd52dd9936095d9ac218e
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.63.dfdea6580b080784d08faace69b6ed76
                           .group:00000000 wm4.Descriptors.h.92.e858ef8e2efa6b5ed9d1d80dd9b38006
                           .group:00000000 wm4.SYSTM001.h.64.6ecb31c49bc3e7691644fdcdfc11b5cd
                           .group:00000000 wm4.I2C001.h.97.5277d52889d6c741e048ea45ee1277b5
                           .group:00000000 wm4.I2C001_Conf.h.58.2b816ac2c964c55a6c88f9c406d78c9f
                           .group:00000000 wm4.CCU8GLOBAL_Conf.h.82.76c6b1bf357180d1e8ea1f462a66deb8
                           .group:00000000 wm4.PWMMP001.h.74.edfb025e8ccafbe02203b521c6030af5
                           .group:00000000 wm4.PWMSP003_Conf.h.49.d7c9ed31921edf4893f02e6f1d6268b4
                           .group:00000000 wm4.PWMSP003.h.103.903071678b9af5683776405c5b299fbb

UNDEFINED SYMBOLS
CLK001_Init
CCU8GLOBAL_Init
PWMMP001_Handle0
CCU8PWMLIB_Init
CCU8PWMLIB_Deinit
CCU8PWMLIB_Start
CCU8PWMLIB_EnableExtStart
CCU8PWMLIB_DisableExtStart
CCU8PWMLIB_Stop
CCU8PWMLIB_SetCompare
CCU8PWMLIB_SetDutyCenterAlignAsymmetric
CCU8PWMLIB_SetPwmFreqAndDutyCycle
CCU8PWMLIB_SetPwmFreq
CCU8PWMLIB_SetPeriodAndCompare
CCU8PWMLIB_SetPeriod
CCU8PWMLIB_SetTimerVal
CCU8PWMLIB_GetTimerStatus
CCU8PWMLIB_GetTimerRegsVal
CCU8PWMLIB_SWRequestShadowTransfer
CCU8PWMLIB_GetPeriodReg
CCU8PWMLIB_ResetTrapFlag
CCU8PWMLIB_EnableEvent
CCU8PWMLIB_DisableEvent
CCU8PWMLIB_ClearPendingEvent
CCU8PWMLIB_SetPendingEvent
CCU8PWMLIB_GetPendingEvent
