
Flightcontroller_PWM_CopterRocks_Working.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000e30c  08000000  0c000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00020000  2**0
                  ALLOC
  2 .data         000003c0  20000000  0c00e30c  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000008f8  200003c0  0c00e6cc  000183c0  2**2
                  ALLOC
  4 .no_init      00000014  2000ffc0  2000ffc0  0001ffc0  2**2
                  ALLOC
  5 DSRAM2_BSS    00000e00  30000000  0c00e6cc  00020000  2**2
                  ALLOC
  6 .debug_aranges 00001918  00000000  00000000  000183c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00045c5d  00000000  00000000  00019cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00007894  00000000  00000000  0005f935  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000f589  00000000  00000000  000671c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00006c7c  00000000  00000000  00076754  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00010735  00000000  00000000  0007d3d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000cb69  00000000  00000000  0008db05  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000014e0  00000000  00000000  0009a66e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .build_attributes 00001484  00000000  00000000  0009bb4e  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	e9 91 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 05 17 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 15 21 00 08 00 00 00 00 00 00 00 00     .....!..........
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 ed 2a 00 08 b1 02 00 08 b1 02 00 08     .....*..........
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 ad 26 00 08     .............&..
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 d1 09 00 08 49 2c 00 08 b1 02 00 08     ........I,......
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 0d 29 00 08 cd 26 00 08     .........)...&..
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	45 7f 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     E...............
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

	.align	1
    .thumb
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)

 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c00e30c 	.word	0x0c00e30c
 800024c:	20000000 	.word	0x20000000
 8000250:	000003c0 	.word	0x000003c0
 8000254:	0c00e6cc 	.word	0x0c00e6cc
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c00e30c 	.word	0x0c00e30c
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c00e30c 	.word	0x0c00e30c
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	200003c0 	.word	0x200003c0
 800027c:	000008f4 	.word	0x000008f4
 8000280:	30000000 	.word	0x30000000
 8000284:	00000e00 	.word	0x00000e00
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000290:	10000800 	.word	0x10000800

	.align	1
    .thumb
 8000294:	0800370d 	.word	0x0800370d
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	0800c16d 	.word	0x0800c16d
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	0800a4b5 	.word	0x0800a4b5

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <XMC_USIC_CH_TXFIFO_IsFull>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80002c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	bf14      	ite	ne
 80002ca:	2301      	movne	r3, #1
 80002cc:	2300      	moveq	r3, #0
 80002ce:	b2db      	uxtb	r3, r3
}
 80002d0:	4618      	mov	r0, r3
 80002d2:	370c      	adds	r7, #12
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr

080002dc <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80002ea:	f003 0308 	and.w	r3, r3, #8
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	bf14      	ite	ne
 80002f2:	2301      	movne	r3, #1
 80002f4:	2300      	moveq	r3, #0
 80002f6:	b2db      	uxtb	r3, r3
}
 80002f8:	4618      	mov	r0, r3
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr

08000304 <UART_GetReceivedWord>:
 *  }
 * @endcode
 *
 */
__STATIC_INLINE uint8_t UART_GetReceivedWord(const UART_t* const handle)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("UART APP handle invalid", (handle != NULL))
  return (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4618      	mov	r0, r3
 8000312:	f004 fd41 	bl	8004d98 <XMC_UART_CH_GetReceivedData>
 8000316:	4603      	mov	r3, r0
 8000318:	b2db      	uxtb	r3, r3
}
 800031a:	4618      	mov	r0, r3
 800031c:	3708      	adds	r7, #8
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop

08000324 <UART_TransmitWord>:
 *  }
 * @endcode
 *
 */
__STATIC_INLINE void UART_TransmitWord(const UART_t* const handle, uint8_t data)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	460b      	mov	r3, r1
 800032e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("UART APP handle invalid", (handle != NULL))
  XMC_UART_CH_Transmit(handle->channel, (uint16_t)data);
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	681a      	ldr	r2, [r3, #0]
 8000334:	78fb      	ldrb	r3, [r7, #3]
 8000336:	b29b      	uxth	r3, r3
 8000338:	4610      	mov	r0, r2
 800033a:	4619      	mov	r1, r3
 800033c:	f004 fd06 	bl	8004d4c <XMC_UART_CH_Transmit>
}
 8000340:	3708      	adds	r7, #8
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop

08000348 <UART_IsTXFIFOFull>:
 *   }
 * }
 * @endcode
 */
__STATIC_INLINE bool UART_IsTXFIFOFull(const UART_t* const handle)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("UART APP handle invalid", (handle != NULL))
  return XMC_USIC_CH_TXFIFO_IsFull(handle->channel);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4618      	mov	r0, r3
 8000356:	f7ff ffad 	bl	80002b4 <XMC_USIC_CH_TXFIFO_IsFull>
 800035a:	4603      	mov	r3, r0
}
 800035c:	4618      	mov	r0, r3
 800035e:	3708      	adds	r7, #8
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}

08000364 <UART_IsRXFIFOEmpty>:
 *   }
 * }
 * @endcode
 */
__STATIC_INLINE bool UART_IsRXFIFOEmpty(const UART_t* const handle)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("UART APP handle invalid", (handle != NULL))
  return XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel);
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4618      	mov	r0, r3
 8000372:	f7ff ffb3 	bl	80002dc <XMC_USIC_CH_RXFIFO_IsEmpty>
 8000376:	4603      	mov	r3, r0
}
 8000378:	4618      	mov	r0, r3
 800037a:	3708      	adds	r7, #8
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}

08000380 <UART_WriteDataBytes>:
 *  
 *  \details Transmits Data via UART specified by UART_Handle\n
 *  Data transmission is aborted when UART Transmit-FIFO is full.\n
 */
void UART_WriteDataBytes(UART_t* UART_Handle, uint8_t* DataPtr, uint32_t Count)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
 8000386:	60f8      	str	r0, [r7, #12]
 8000388:	60b9      	str	r1, [r7, #8]
 800038a:	607a      	str	r2, [r7, #4]
	while (!UART_IsTXFIFOFull(UART_Handle) && Count)
 800038c:	e00b      	b.n	80003a6 <UART_WriteDataBytes+0x26>
	{
		UART_TransmitWord(UART_Handle, *DataPtr);
 800038e:	68bb      	ldr	r3, [r7, #8]
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	68f8      	ldr	r0, [r7, #12]
 8000394:	4619      	mov	r1, r3
 8000396:	f7ff ffc5 	bl	8000324 <UART_TransmitWord>
		Count--;
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	3b01      	subs	r3, #1
 800039e:	607b      	str	r3, [r7, #4]
		DataPtr++;
 80003a0:	68bb      	ldr	r3, [r7, #8]
 80003a2:	3301      	adds	r3, #1
 80003a4:	60bb      	str	r3, [r7, #8]
 *  \details Transmits Data via UART specified by UART_Handle\n
 *  Data transmission is aborted when UART Transmit-FIFO is full.\n
 */
void UART_WriteDataBytes(UART_t* UART_Handle, uint8_t* DataPtr, uint32_t Count)
{
	while (!UART_IsTXFIFOFull(UART_Handle) && Count)
 80003a6:	68f8      	ldr	r0, [r7, #12]
 80003a8:	f7ff ffce 	bl	8000348 <UART_IsTXFIFOFull>
 80003ac:	4603      	mov	r3, r0
 80003ae:	f083 0301 	eor.w	r3, r3, #1
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d002      	beq.n	80003be <UART_WriteDataBytes+0x3e>
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d1e7      	bne.n	800038e <UART_WriteDataBytes+0xe>
	{
		UART_TransmitWord(UART_Handle, *DataPtr);
		Count--;
		DataPtr++;
	}
}
 80003be:	3710      	adds	r7, #16
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <UART_ReadDataBytes>:
 *  
 *  \details Reads out and deletes Count Bytes of Receive-FIFO or
 *   as many Bytes as possible when Count>Bytes received
 */
void UART_ReadDataBytes(UART_t* UART_Handle, uint8_t* DataPtr, uint32_t Count)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b084      	sub	sp, #16
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	60f8      	str	r0, [r7, #12]
 80003cc:	60b9      	str	r1, [r7, #8]
 80003ce:	607a      	str	r2, [r7, #4]
	while (!UART_IsRXFIFOEmpty(UART_Handle) && Count)
 80003d0:	e00c      	b.n	80003ec <UART_ReadDataBytes+0x28>
	{
		*DataPtr = (uint8_t) UART_GetReceivedWord(UART_Handle);
 80003d2:	68f8      	ldr	r0, [r7, #12]
 80003d4:	f7ff ff96 	bl	8000304 <UART_GetReceivedWord>
 80003d8:	4603      	mov	r3, r0
 80003da:	461a      	mov	r2, r3
 80003dc:	68bb      	ldr	r3, [r7, #8]
 80003de:	701a      	strb	r2, [r3, #0]
		Count--;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	3b01      	subs	r3, #1
 80003e4:	607b      	str	r3, [r7, #4]
		DataPtr++;
 80003e6:	68bb      	ldr	r3, [r7, #8]
 80003e8:	3301      	adds	r3, #1
 80003ea:	60bb      	str	r3, [r7, #8]
 *  \details Reads out and deletes Count Bytes of Receive-FIFO or
 *   as many Bytes as possible when Count>Bytes received
 */
void UART_ReadDataBytes(UART_t* UART_Handle, uint8_t* DataPtr, uint32_t Count)
{
	while (!UART_IsRXFIFOEmpty(UART_Handle) && Count)
 80003ec:	68f8      	ldr	r0, [r7, #12]
 80003ee:	f7ff ffb9 	bl	8000364 <UART_IsRXFIFOEmpty>
 80003f2:	4603      	mov	r3, r0
 80003f4:	f083 0301 	eor.w	r3, r3, #1
 80003f8:	b2db      	uxtb	r3, r3
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d002      	beq.n	8000404 <UART_ReadDataBytes+0x40>
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d1e6      	bne.n	80003d2 <UART_ReadDataBytes+0xe>
	{
		*DataPtr = (uint8_t) UART_GetReceivedWord(UART_Handle);
		Count--;
		DataPtr++;
	}
}
 8000404:	3710      	adds	r7, #16
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop

0800040c <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
 8000414:	460b      	mov	r3, r1
 8000416:	70fb      	strb	r3, [r7, #3]
 8000418:	4613      	mov	r3, r2
 800041a:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 800041c:	78f8      	ldrb	r0, [r7, #3]
 800041e:	78fb      	ldrb	r3, [r7, #3]
 8000420:	687a      	ldr	r2, [r7, #4]
 8000422:	3306      	adds	r3, #6
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	4413      	add	r3, r2
 8000428:	685b      	ldr	r3, [r3, #4]
 800042a:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 800042e:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8000430:	431a      	orrs	r2, r3
 8000432:	6879      	ldr	r1, [r7, #4]
 8000434:	1d83      	adds	r3, r0, #6
 8000436:	009b      	lsls	r3, r3, #2
 8000438:	440b      	add	r3, r1
 800043a:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 800043c:	370c      	adds	r7, #12
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop

08000448 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8000456:	f003 0308 	and.w	r3, r3, #8
 800045a:	2b00      	cmp	r3, #0
 800045c:	bf14      	ite	ne
 800045e:	2301      	movne	r3, #1
 8000460:	2300      	moveq	r3, #0
 8000462:	b2db      	uxtb	r3, r3
}
 8000464:	4618      	mov	r0, r3
 8000466:	370c      	adds	r7, #12
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr

08000470 <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
 8000478:	460b      	mov	r3, r1
 800047a:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000480:	f023 020f 	bic.w	r2, r3, #15
 8000484:	78fb      	ldrb	r3, [r7, #3]
 8000486:	431a      	orrs	r2, r3
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800048c:	370c      	adds	r7, #12
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop

08000498 <XMC_I2C_CH_Start>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetMode()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_Start(XMC_USIC_CH_t *const channel)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_I2C);
 80004a0:	6878      	ldr	r0, [r7, #4]
 80004a2:	2104      	movs	r1, #4
 80004a4:	f7ff ffe4 	bl	8000470 <XMC_USIC_CH_SetMode>
}
 80004a8:	3708      	adds	r7, #8
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop

080004b0 <XMC_I2C_CH_SetInputSource>:
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetInptSource(), XMC_USIC_CH_SetInterruptNodePointer()
 *
 */
__STATIC_INLINE void XMC_I2C_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_INPUT_t input, const uint8_t source)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	460b      	mov	r3, r1
 80004ba:	70fb      	strb	r3, [r7, #3]
 80004bc:	4613      	mov	r3, r2
 80004be:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] =  (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_INSW_Msk)) | USIC_CH_DX0CR_DSEN_Msk;
 80004c0:	78f8      	ldrb	r0, [r7, #3]
 80004c2:	78fb      	ldrb	r3, [r7, #3]
 80004c4:	687a      	ldr	r2, [r7, #4]
 80004c6:	3306      	adds	r3, #6
 80004c8:	009b      	lsls	r3, r3, #2
 80004ca:	4413      	add	r3, r2
 80004cc:	685b      	ldr	r3, [r3, #4]
 80004ce:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 80004d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80004d6:	6879      	ldr	r1, [r7, #4]
 80004d8:	1d83      	adds	r3, r0, #6
 80004da:	009b      	lsls	r3, r3, #2
 80004dc:	440b      	add	r3, r1
 80004de:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 80004e0:	78fa      	ldrb	r2, [r7, #3]
 80004e2:	78bb      	ldrb	r3, [r7, #2]
 80004e4:	6878      	ldr	r0, [r7, #4]
 80004e6:	4611      	mov	r1, r2
 80004e8:	461a      	mov	r2, r3
 80004ea:	f7ff ff8f 	bl	800040c <XMC_USIC_CH_SetInputSource>
}
 80004ee:	3708      	adds	r7, #8
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}

080004f4 <XMC_I2C_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_ClearStatusFlag()\n\n
 */
__STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  return (channel->PSR_IICMode);
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 8000500:	4618      	mov	r0, r3
 8000502:	370c      	adds	r7, #12
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr

0800050c <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	431a      	orrs	r2, r3
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr

0800052c <setupI2CInterfaceFIFO>:
 *  \details Pin-Configuration is being done
 *  \details FIFO size: 32 words
 */
void setupI2CInterfaceFIFO(XMC_USIC_CH_t *const i2c_channel,const uint8_t usic_sda_output,const uint8_t usic_scl_output, XMC_GPIO_PORT_t *const port_config,const uint8_t pin_number_sda,const uint8_t pin_number_scl,
		const XMC_GPIO_CONFIG_t *const gpio_config_sda,const XMC_GPIO_CONFIG_t *const gpio_config_scl,const XMC_I2C_CH_CONFIG_t *const pin_config)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	60f8      	str	r0, [r7, #12]
 8000534:	607b      	str	r3, [r7, #4]
 8000536:	460b      	mov	r3, r1
 8000538:	72fb      	strb	r3, [r7, #11]
 800053a:	4613      	mov	r3, r2
 800053c:	72bb      	strb	r3, [r7, #10]
	XMC_I2C_CH_Init(i2c_channel,pin_config);
 800053e:	68f8      	ldr	r0, [r7, #12]
 8000540:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000542:	f004 f9f3 	bl	800492c <XMC_I2C_CH_Init>
	XMC_I2C_CH_SetInputSource(i2c_channel, XMC_I2C_CH_INPUT_SDA, usic_sda_output);
 8000546:	7afb      	ldrb	r3, [r7, #11]
 8000548:	68f8      	ldr	r0, [r7, #12]
 800054a:	2100      	movs	r1, #0
 800054c:	461a      	mov	r2, r3
 800054e:	f7ff ffaf 	bl	80004b0 <XMC_I2C_CH_SetInputSource>
	XMC_I2C_CH_SetInputSource(i2c_channel, XMC_I2C_CH_INPUT_SCL, usic_scl_output);
 8000552:	7abb      	ldrb	r3, [r7, #10]
 8000554:	68f8      	ldr	r0, [r7, #12]
 8000556:	2101      	movs	r1, #1
 8000558:	461a      	mov	r2, r3
 800055a:	f7ff ffa9 	bl	80004b0 <XMC_I2C_CH_SetInputSource>
	XMC_USIC_CH_RXFIFO_Configure(i2c_channel,0,XMC_USIC_CH_FIFO_SIZE_32WORDS,0);
 800055e:	68f8      	ldr	r0, [r7, #12]
 8000560:	2100      	movs	r1, #0
 8000562:	2205      	movs	r2, #5
 8000564:	2300      	movs	r3, #0
 8000566:	f006 fae7 	bl	8006b38 <XMC_USIC_CH_RXFIFO_Configure>
	XMC_I2C_CH_Start(i2c_channel);
 800056a:	68f8      	ldr	r0, [r7, #12]
 800056c:	f7ff ff94 	bl	8000498 <XMC_I2C_CH_Start>
	//Pin-Configuration
	XMC_GPIO_Init(port_config, (uint8_t)pin_number_sda, gpio_config_sda);
 8000570:	7e3b      	ldrb	r3, [r7, #24]
 8000572:	6878      	ldr	r0, [r7, #4]
 8000574:	4619      	mov	r1, r3
 8000576:	6a3a      	ldr	r2, [r7, #32]
 8000578:	f003 f954 	bl	8003824 <XMC_GPIO_Init>
	XMC_GPIO_Init(port_config, (uint8_t)pin_number_scl, gpio_config_scl);
 800057c:	7f3b      	ldrb	r3, [r7, #28]
 800057e:	6878      	ldr	r0, [r7, #4]
 8000580:	4619      	mov	r1, r3
 8000582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000584:	f003 f94e 	bl	8003824 <XMC_GPIO_Init>
}
 8000588:	3710      	adds	r7, #16
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop

08000590 <I2Cdev_writeByte>:
 *  \return Returned value is always TRUE at the end
 *  
 *  \details Writes a byte into a register of an I2C device
 */
bool I2Cdev_writeByte(XMC_USIC_CH_t* handle,uint8_t devAddr, uint8_t regAddr, uint8_t data)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	4608      	mov	r0, r1
 800059a:	4611      	mov	r1, r2
 800059c:	461a      	mov	r2, r3
 800059e:	4603      	mov	r3, r0
 80005a0:	70fb      	strb	r3, [r7, #3]
 80005a2:	460b      	mov	r3, r1
 80005a4:	70bb      	strb	r3, [r7, #2]
 80005a6:	4613      	mov	r3, r2
 80005a8:	707b      	strb	r3, [r7, #1]
	uint16_t time_out_cnt = 0u;
 80005aa:	2300      	movs	r3, #0
 80005ac:	81fb      	strh	r3, [r7, #14]
	XMC_I2C_CH_MasterStart(handle, devAddr, XMC_I2C_CH_CMD_WRITE);
 80005ae:	78fb      	ldrb	r3, [r7, #3]
 80005b0:	b29b      	uxth	r3, r3
 80005b2:	6878      	ldr	r0, [r7, #4]
 80005b4:	4619      	mov	r1, r3
 80005b6:	2200      	movs	r2, #0
 80005b8:	f004 fa3c 	bl	8004a34 <XMC_I2C_CH_MasterStart>
	while ((XMC_I2C_CH_GetStatusFlag(handle) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 80005bc:	e00f      	b.n	80005de <I2Cdev_writeByte+0x4e>
	{
		time_out_cnt++;
 80005be:	89fb      	ldrh	r3, [r7, #14]
 80005c0:	3301      	adds	r3, #1
 80005c2:	81fb      	strh	r3, [r7, #14]
		if (time_out_cnt > 200u)
 80005c4:	89fb      	ldrh	r3, [r7, #14]
 80005c6:	2bc8      	cmp	r3, #200	; 0xc8
 80005c8:	d909      	bls.n	80005de <I2Cdev_writeByte+0x4e>
		{
			XMC_I2C_CH_ClearStatusFlag(handle,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 80005ca:	6878      	ldr	r0, [r7, #4]
 80005cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005d0:	f7ff ff9c 	bl	800050c <XMC_I2C_CH_ClearStatusFlag>
			XMC_I2C_CH_MasterStop(handle);
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f004 fa95 	bl	8004b04 <XMC_I2C_CH_MasterStop>
			return false;
 80005da:	2300      	movs	r3, #0
 80005dc:	e05a      	b.n	8000694 <I2Cdev_writeByte+0x104>
 */
bool I2Cdev_writeByte(XMC_USIC_CH_t* handle,uint8_t devAddr, uint8_t regAddr, uint8_t data)
{
	uint16_t time_out_cnt = 0u;
	XMC_I2C_CH_MasterStart(handle, devAddr, XMC_I2C_CH_CMD_WRITE);
	while ((XMC_I2C_CH_GetStatusFlag(handle) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f7ff ff88 	bl	80004f4 <XMC_I2C_CH_GetStatusFlag>
 80005e4:	4603      	mov	r3, r0
 80005e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d0e7      	beq.n	80005be <I2Cdev_writeByte+0x2e>
			XMC_I2C_CH_ClearStatusFlag(handle,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
			XMC_I2C_CH_MasterStop(handle);
			return false;
		}
	}
	XMC_I2C_CH_ClearStatusFlag(handle,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005f4:	f7ff ff8a 	bl	800050c <XMC_I2C_CH_ClearStatusFlag>
	//---------------------------------------------------------------------------------------------------------------------------------
	time_out_cnt = 0u;
 80005f8:	2300      	movs	r3, #0
 80005fa:	81fb      	strh	r3, [r7, #14]
	XMC_I2C_CH_MasterTransmit(handle, regAddr);
 80005fc:	78bb      	ldrb	r3, [r7, #2]
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	4619      	mov	r1, r3
 8000602:	f004 faa5 	bl	8004b50 <XMC_I2C_CH_MasterTransmit>
	while ((XMC_I2C_CH_GetStatusFlag(handle) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 8000606:	e00f      	b.n	8000628 <I2Cdev_writeByte+0x98>
	{
		time_out_cnt++;
 8000608:	89fb      	ldrh	r3, [r7, #14]
 800060a:	3301      	adds	r3, #1
 800060c:	81fb      	strh	r3, [r7, #14]
		if (time_out_cnt > 200u)
 800060e:	89fb      	ldrh	r3, [r7, #14]
 8000610:	2bc8      	cmp	r3, #200	; 0xc8
 8000612:	d909      	bls.n	8000628 <I2Cdev_writeByte+0x98>
		{
			XMC_I2C_CH_ClearStatusFlag(handle,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f44f 7100 	mov.w	r1, #512	; 0x200
 800061a:	f7ff ff77 	bl	800050c <XMC_I2C_CH_ClearStatusFlag>
			XMC_I2C_CH_MasterStop(handle);
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f004 fa70 	bl	8004b04 <XMC_I2C_CH_MasterStop>
			return false;
 8000624:	2300      	movs	r3, #0
 8000626:	e035      	b.n	8000694 <I2Cdev_writeByte+0x104>
	}
	XMC_I2C_CH_ClearStatusFlag(handle,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
	//---------------------------------------------------------------------------------------------------------------------------------
	time_out_cnt = 0u;
	XMC_I2C_CH_MasterTransmit(handle, regAddr);
	while ((XMC_I2C_CH_GetStatusFlag(handle) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 8000628:	6878      	ldr	r0, [r7, #4]
 800062a:	f7ff ff63 	bl	80004f4 <XMC_I2C_CH_GetStatusFlag>
 800062e:	4603      	mov	r3, r0
 8000630:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000634:	2b00      	cmp	r3, #0
 8000636:	d0e7      	beq.n	8000608 <I2Cdev_writeByte+0x78>
			XMC_I2C_CH_ClearStatusFlag(handle,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
			XMC_I2C_CH_MasterStop(handle);
			return false;
		}
	}
	XMC_I2C_CH_ClearStatusFlag(handle,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 8000638:	6878      	ldr	r0, [r7, #4]
 800063a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800063e:	f7ff ff65 	bl	800050c <XMC_I2C_CH_ClearStatusFlag>

	time_out_cnt = 0u;
 8000642:	2300      	movs	r3, #0
 8000644:	81fb      	strh	r3, [r7, #14]
	XMC_I2C_CH_MasterTransmit(handle, data);
 8000646:	787b      	ldrb	r3, [r7, #1]
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	4619      	mov	r1, r3
 800064c:	f004 fa80 	bl	8004b50 <XMC_I2C_CH_MasterTransmit>
	while ((XMC_I2C_CH_GetStatusFlag(handle) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 8000650:	e00f      	b.n	8000672 <I2Cdev_writeByte+0xe2>
	{
		time_out_cnt++;
 8000652:	89fb      	ldrh	r3, [r7, #14]
 8000654:	3301      	adds	r3, #1
 8000656:	81fb      	strh	r3, [r7, #14]
		if (time_out_cnt > 200u)
 8000658:	89fb      	ldrh	r3, [r7, #14]
 800065a:	2bc8      	cmp	r3, #200	; 0xc8
 800065c:	d909      	bls.n	8000672 <I2Cdev_writeByte+0xe2>
		{
			XMC_I2C_CH_ClearStatusFlag(handle,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000664:	f7ff ff52 	bl	800050c <XMC_I2C_CH_ClearStatusFlag>
			XMC_I2C_CH_MasterStop(handle);
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f004 fa4b 	bl	8004b04 <XMC_I2C_CH_MasterStop>
			return false;
 800066e:	2300      	movs	r3, #0
 8000670:	e010      	b.n	8000694 <I2Cdev_writeByte+0x104>
	}
	XMC_I2C_CH_ClearStatusFlag(handle,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);

	time_out_cnt = 0u;
	XMC_I2C_CH_MasterTransmit(handle, data);
	while ((XMC_I2C_CH_GetStatusFlag(handle) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 8000672:	6878      	ldr	r0, [r7, #4]
 8000674:	f7ff ff3e 	bl	80004f4 <XMC_I2C_CH_GetStatusFlag>
 8000678:	4603      	mov	r3, r0
 800067a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800067e:	2b00      	cmp	r3, #0
 8000680:	d0e7      	beq.n	8000652 <I2Cdev_writeByte+0xc2>
			XMC_I2C_CH_ClearStatusFlag(handle,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
			XMC_I2C_CH_MasterStop(handle);
			return false;
		}
	}
	XMC_I2C_CH_ClearStatusFlag(handle,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000688:	f7ff ff40 	bl	800050c <XMC_I2C_CH_ClearStatusFlag>

	XMC_I2C_CH_MasterStop(handle);
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f004 fa39 	bl	8004b04 <XMC_I2C_CH_MasterStop>
	return true;
 8000692:	2301      	movs	r3, #1
}
 8000694:	4618      	mov	r0, r3
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <I2Cdev_readByte>:
 *  \return Returned value is the data of a desired register address
 *  
 *  \details Reads a byte out of a register from an I2C device
 */
int16_t I2Cdev_readByte(XMC_USIC_CH_t* handle, uint8_t devAddr, uint8_t regAddr)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	460b      	mov	r3, r1
 80006a6:	70fb      	strb	r3, [r7, #3]
 80006a8:	4613      	mov	r3, r2
 80006aa:	70bb      	strb	r3, [r7, #2]
	uint16_t time_out_cnt = 0u;
 80006ac:	2300      	movs	r3, #0
 80006ae:	81fb      	strh	r3, [r7, #14]
	XMC_I2C_CH_MasterStart(handle, devAddr, XMC_I2C_CH_CMD_WRITE);
 80006b0:	78fb      	ldrb	r3, [r7, #3]
 80006b2:	b29b      	uxth	r3, r3
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	4619      	mov	r1, r3
 80006b8:	2200      	movs	r2, #0
 80006ba:	f004 f9bb 	bl	8004a34 <XMC_I2C_CH_MasterStart>
	while ((XMC_I2C_CH_GetStatusFlag(handle) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 80006be:	e010      	b.n	80006e2 <I2Cdev_readByte+0x46>
	{
		time_out_cnt++;
 80006c0:	89fb      	ldrh	r3, [r7, #14]
 80006c2:	3301      	adds	r3, #1
 80006c4:	81fb      	strh	r3, [r7, #14]
		if (time_out_cnt > 200u)
 80006c6:	89fb      	ldrh	r3, [r7, #14]
 80006c8:	2bc8      	cmp	r3, #200	; 0xc8
 80006ca:	d90a      	bls.n	80006e2 <I2Cdev_readByte+0x46>
		{
			XMC_I2C_CH_ClearStatusFlag(handle,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006d2:	f7ff ff1b 	bl	800050c <XMC_I2C_CH_ClearStatusFlag>
			XMC_I2C_CH_MasterStop(handle);
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f004 fa14 	bl	8004b04 <XMC_I2C_CH_MasterStop>
			return -1;
 80006dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006e0:	e069      	b.n	80007b6 <I2Cdev_readByte+0x11a>
 */
int16_t I2Cdev_readByte(XMC_USIC_CH_t* handle, uint8_t devAddr, uint8_t regAddr)
{
	uint16_t time_out_cnt = 0u;
	XMC_I2C_CH_MasterStart(handle, devAddr, XMC_I2C_CH_CMD_WRITE);
	while ((XMC_I2C_CH_GetStatusFlag(handle) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f7ff ff06 	bl	80004f4 <XMC_I2C_CH_GetStatusFlag>
 80006e8:	4603      	mov	r3, r0
 80006ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0e6      	beq.n	80006c0 <I2Cdev_readByte+0x24>
			XMC_I2C_CH_ClearStatusFlag(handle,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
			XMC_I2C_CH_MasterStop(handle);
			return -1;
		}
	}
	XMC_I2C_CH_ClearStatusFlag(handle,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 80006f2:	6878      	ldr	r0, [r7, #4]
 80006f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f8:	f7ff ff08 	bl	800050c <XMC_I2C_CH_ClearStatusFlag>
	//---------------------------------------------------------------------------------------------------------------------------------
	time_out_cnt = 0u;
 80006fc:	2300      	movs	r3, #0
 80006fe:	81fb      	strh	r3, [r7, #14]
	XMC_I2C_CH_MasterTransmit(handle, regAddr);
 8000700:	78bb      	ldrb	r3, [r7, #2]
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	4619      	mov	r1, r3
 8000706:	f004 fa23 	bl	8004b50 <XMC_I2C_CH_MasterTransmit>
	XMC_I2C_CH_MasterRepeatedStart(handle, devAddr,XMC_I2C_CH_CMD_READ);
 800070a:	78fb      	ldrb	r3, [r7, #3]
 800070c:	b29b      	uxth	r3, r3
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	4619      	mov	r1, r3
 8000712:	2201      	movs	r2, #1
 8000714:	f004 f9c2 	bl	8004a9c <XMC_I2C_CH_MasterRepeatedStart>
	while ((XMC_I2C_CH_GetStatusFlag(handle) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 8000718:	e010      	b.n	800073c <I2Cdev_readByte+0xa0>
	{
		time_out_cnt++;
 800071a:	89fb      	ldrh	r3, [r7, #14]
 800071c:	3301      	adds	r3, #1
 800071e:	81fb      	strh	r3, [r7, #14]
		if (time_out_cnt > 200u)
 8000720:	89fb      	ldrh	r3, [r7, #14]
 8000722:	2bc8      	cmp	r3, #200	; 0xc8
 8000724:	d90a      	bls.n	800073c <I2Cdev_readByte+0xa0>
		{
			XMC_I2C_CH_ClearStatusFlag(handle,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f44f 7100 	mov.w	r1, #512	; 0x200
 800072c:	f7ff feee 	bl	800050c <XMC_I2C_CH_ClearStatusFlag>
			XMC_I2C_CH_MasterStop(handle);
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	f004 f9e7 	bl	8004b04 <XMC_I2C_CH_MasterStop>
			return -1;
 8000736:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800073a:	e03c      	b.n	80007b6 <I2Cdev_readByte+0x11a>
	XMC_I2C_CH_ClearStatusFlag(handle,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
	//---------------------------------------------------------------------------------------------------------------------------------
	time_out_cnt = 0u;
	XMC_I2C_CH_MasterTransmit(handle, regAddr);
	XMC_I2C_CH_MasterRepeatedStart(handle, devAddr,XMC_I2C_CH_CMD_READ);
	while ((XMC_I2C_CH_GetStatusFlag(handle) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f7ff fed9 	bl	80004f4 <XMC_I2C_CH_GetStatusFlag>
 8000742:	4603      	mov	r3, r0
 8000744:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000748:	2b00      	cmp	r3, #0
 800074a:	d0e6      	beq.n	800071a <I2Cdev_readByte+0x7e>
			XMC_I2C_CH_ClearStatusFlag(handle,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
			XMC_I2C_CH_MasterStop(handle);
			return -1;
		}
	}
	XMC_I2C_CH_ClearStatusFlag(handle,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000752:	f7ff fedb 	bl	800050c <XMC_I2C_CH_ClearStatusFlag>

	time_out_cnt = 0u;
 8000756:	2300      	movs	r3, #0
 8000758:	81fb      	strh	r3, [r7, #14]
	XMC_I2C_CH_MasterReceiveNack(handle);
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f004 fa44 	bl	8004be8 <XMC_I2C_CH_MasterReceiveNack>
	while ((XMC_I2C_CH_GetStatusFlag(handle) & (XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION | XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION)) == 0U)
 8000760:	e010      	b.n	8000784 <I2Cdev_readByte+0xe8>
	{
		time_out_cnt++;
 8000762:	89fb      	ldrh	r3, [r7, #14]
 8000764:	3301      	adds	r3, #1
 8000766:	81fb      	strh	r3, [r7, #14]
		if (time_out_cnt > 200u)
 8000768:	89fb      	ldrh	r3, [r7, #14]
 800076a:	2bc8      	cmp	r3, #200	; 0xc8
 800076c:	d90a      	bls.n	8000784 <I2Cdev_readByte+0xe8>
		{
			XMC_I2C_CH_ClearStatusFlag(handle,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000774:	f7ff feca 	bl	800050c <XMC_I2C_CH_ClearStatusFlag>
			XMC_I2C_CH_MasterStop(handle);
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f004 f9c3 	bl	8004b04 <XMC_I2C_CH_MasterStop>
			return -1;
 800077e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000782:	e018      	b.n	80007b6 <I2Cdev_readByte+0x11a>
	}
	XMC_I2C_CH_ClearStatusFlag(handle,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);

	time_out_cnt = 0u;
	XMC_I2C_CH_MasterReceiveNack(handle);
	while ((XMC_I2C_CH_GetStatusFlag(handle) & (XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION | XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION)) == 0U)
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f7ff feb5 	bl	80004f4 <XMC_I2C_CH_GetStatusFlag>
 800078a:	4603      	mov	r3, r0
 800078c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000790:	2b00      	cmp	r3, #0
 8000792:	d0e6      	beq.n	8000762 <I2Cdev_readByte+0xc6>
			XMC_I2C_CH_ClearStatusFlag(handle,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
			XMC_I2C_CH_MasterStop(handle);
			return -1;
		}
	}
	XMC_I2C_CH_ClearStatusFlag(handle,XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION | XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION);
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800079a:	f7ff feb7 	bl	800050c <XMC_I2C_CH_ClearStatusFlag>

	uint8_t received_data = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	737b      	strb	r3, [r7, #13]
	received_data = XMC_I2C_CH_GetReceivedData(handle);
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f004 fa46 	bl	8004c34 <XMC_I2C_CH_GetReceivedData>
 80007a8:	4603      	mov	r3, r0
 80007aa:	737b      	strb	r3, [r7, #13]

	XMC_I2C_CH_MasterStop(handle);
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f004 f9a9 	bl	8004b04 <XMC_I2C_CH_MasterStop>

	return (int16_t)received_data;
 80007b2:	7b7b      	ldrb	r3, [r7, #13]
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	b21b      	sxth	r3, r3
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <I2Cdev_readBytes>:
 *  
 *  \details Reads data (more bytes) from a register of an I2C device
 *  \details You can choose the start address and the amount of bytes to be read
 */
int16_t I2Cdev_readBytes(XMC_USIC_CH_t* handle,uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* data)
{
 80007c0:	b590      	push	{r4, r7, lr}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	4608      	mov	r0, r1
 80007ca:	4611      	mov	r1, r2
 80007cc:	461a      	mov	r2, r3
 80007ce:	4603      	mov	r3, r0
 80007d0:	70fb      	strb	r3, [r7, #3]
 80007d2:	460b      	mov	r3, r1
 80007d4:	70bb      	strb	r3, [r7, #2]
 80007d6:	4613      	mov	r3, r2
 80007d8:	707b      	strb	r3, [r7, #1]
	uint16_t time_out_cnt = 0u;
 80007da:	2300      	movs	r3, #0
 80007dc:	81fb      	strh	r3, [r7, #14]
	XMC_I2C_CH_MasterStart(handle, devAddr, XMC_I2C_CH_CMD_WRITE);
 80007de:	78fb      	ldrb	r3, [r7, #3]
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	4619      	mov	r1, r3
 80007e6:	2200      	movs	r2, #0
 80007e8:	f004 f924 	bl	8004a34 <XMC_I2C_CH_MasterStart>
	while ((XMC_I2C_CH_GetStatusFlag(handle) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 80007ec:	e010      	b.n	8000810 <I2Cdev_readBytes+0x50>
	{
		time_out_cnt++;
 80007ee:	89fb      	ldrh	r3, [r7, #14]
 80007f0:	3301      	adds	r3, #1
 80007f2:	81fb      	strh	r3, [r7, #14]
		if (time_out_cnt > 200u)
 80007f4:	89fb      	ldrh	r3, [r7, #14]
 80007f6:	2bc8      	cmp	r3, #200	; 0xc8
 80007f8:	d90a      	bls.n	8000810 <I2Cdev_readBytes+0x50>
		{
			XMC_I2C_CH_ClearStatusFlag(handle,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000800:	f7ff fe84 	bl	800050c <XMC_I2C_CH_ClearStatusFlag>
			XMC_I2C_CH_MasterStop(handle);
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f004 f97d 	bl	8004b04 <XMC_I2C_CH_MasterStop>
			return -1;
 800080a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800080e:	e0b8      	b.n	8000982 <I2Cdev_readBytes+0x1c2>
 */
int16_t I2Cdev_readBytes(XMC_USIC_CH_t* handle,uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* data)
{
	uint16_t time_out_cnt = 0u;
	XMC_I2C_CH_MasterStart(handle, devAddr, XMC_I2C_CH_CMD_WRITE);
	while ((XMC_I2C_CH_GetStatusFlag(handle) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f7ff fe6f 	bl	80004f4 <XMC_I2C_CH_GetStatusFlag>
 8000816:	4603      	mov	r3, r0
 8000818:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800081c:	2b00      	cmp	r3, #0
 800081e:	d0e6      	beq.n	80007ee <I2Cdev_readBytes+0x2e>
			XMC_I2C_CH_ClearStatusFlag(handle,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
			XMC_I2C_CH_MasterStop(handle);
			return -1;
		}
	}
	XMC_I2C_CH_ClearStatusFlag(handle,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000826:	f7ff fe71 	bl	800050c <XMC_I2C_CH_ClearStatusFlag>

	time_out_cnt = 0u;
 800082a:	2300      	movs	r3, #0
 800082c:	81fb      	strh	r3, [r7, #14]
	XMC_I2C_CH_MasterTransmit(handle, regAddr);
 800082e:	78bb      	ldrb	r3, [r7, #2]
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	4619      	mov	r1, r3
 8000834:	f004 f98c 	bl	8004b50 <XMC_I2C_CH_MasterTransmit>
	while ((XMC_I2C_CH_GetStatusFlag(handle) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 8000838:	e010      	b.n	800085c <I2Cdev_readBytes+0x9c>
	{
		time_out_cnt++;
 800083a:	89fb      	ldrh	r3, [r7, #14]
 800083c:	3301      	adds	r3, #1
 800083e:	81fb      	strh	r3, [r7, #14]
		if (time_out_cnt > 200u)
 8000840:	89fb      	ldrh	r3, [r7, #14]
 8000842:	2bc8      	cmp	r3, #200	; 0xc8
 8000844:	d90a      	bls.n	800085c <I2Cdev_readBytes+0x9c>
		{
			XMC_I2C_CH_ClearStatusFlag(handle,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f44f 7100 	mov.w	r1, #512	; 0x200
 800084c:	f7ff fe5e 	bl	800050c <XMC_I2C_CH_ClearStatusFlag>
			XMC_I2C_CH_MasterStop(handle);
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f004 f957 	bl	8004b04 <XMC_I2C_CH_MasterStop>
			return -1;
 8000856:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800085a:	e092      	b.n	8000982 <I2Cdev_readBytes+0x1c2>
	}
	XMC_I2C_CH_ClearStatusFlag(handle,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);

	time_out_cnt = 0u;
	XMC_I2C_CH_MasterTransmit(handle, regAddr);
	while ((XMC_I2C_CH_GetStatusFlag(handle) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f7ff fe49 	bl	80004f4 <XMC_I2C_CH_GetStatusFlag>
 8000862:	4603      	mov	r3, r0
 8000864:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000868:	2b00      	cmp	r3, #0
 800086a:	d0e6      	beq.n	800083a <I2Cdev_readBytes+0x7a>
			XMC_I2C_CH_ClearStatusFlag(handle,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
			XMC_I2C_CH_MasterStop(handle);
			return -1;
		}
	}
	XMC_I2C_CH_ClearStatusFlag(handle,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000872:	f7ff fe4b 	bl	800050c <XMC_I2C_CH_ClearStatusFlag>

	//---------------------------------------------------------------------------------------------------------------------------------
	time_out_cnt = 0u;
 8000876:	2300      	movs	r3, #0
 8000878:	81fb      	strh	r3, [r7, #14]
	XMC_I2C_CH_MasterRepeatedStart(handle, devAddr,XMC_I2C_CH_CMD_READ);
 800087a:	78fb      	ldrb	r3, [r7, #3]
 800087c:	b29b      	uxth	r3, r3
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	4619      	mov	r1, r3
 8000882:	2201      	movs	r2, #1
 8000884:	f004 f90a 	bl	8004a9c <XMC_I2C_CH_MasterRepeatedStart>
	while ((XMC_I2C_CH_GetStatusFlag(handle) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 8000888:	e010      	b.n	80008ac <I2Cdev_readBytes+0xec>
	{
		time_out_cnt++;
 800088a:	89fb      	ldrh	r3, [r7, #14]
 800088c:	3301      	adds	r3, #1
 800088e:	81fb      	strh	r3, [r7, #14]
		if (time_out_cnt > 200u)
 8000890:	89fb      	ldrh	r3, [r7, #14]
 8000892:	2bc8      	cmp	r3, #200	; 0xc8
 8000894:	d90a      	bls.n	80008ac <I2Cdev_readBytes+0xec>
		{
			XMC_I2C_CH_ClearStatusFlag(handle,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f44f 7100 	mov.w	r1, #512	; 0x200
 800089c:	f7ff fe36 	bl	800050c <XMC_I2C_CH_ClearStatusFlag>
			XMC_I2C_CH_MasterStop(handle);
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f004 f92f 	bl	8004b04 <XMC_I2C_CH_MasterStop>
			return -1;
 80008a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008aa:	e06a      	b.n	8000982 <I2Cdev_readBytes+0x1c2>
	XMC_I2C_CH_ClearStatusFlag(handle,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);

	//---------------------------------------------------------------------------------------------------------------------------------
	time_out_cnt = 0u;
	XMC_I2C_CH_MasterRepeatedStart(handle, devAddr,XMC_I2C_CH_CMD_READ);
	while ((XMC_I2C_CH_GetStatusFlag(handle) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U)
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f7ff fe21 	bl	80004f4 <XMC_I2C_CH_GetStatusFlag>
 80008b2:	4603      	mov	r3, r0
 80008b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d0e6      	beq.n	800088a <I2Cdev_readBytes+0xca>
			XMC_I2C_CH_ClearStatusFlag(handle,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
			XMC_I2C_CH_MasterStop(handle);
			return -1;
		}
	}
	XMC_I2C_CH_ClearStatusFlag(handle,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 80008bc:	6878      	ldr	r0, [r7, #4]
 80008be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008c2:	f7ff fe23 	bl	800050c <XMC_I2C_CH_ClearStatusFlag>

	int16_t fifo_bytes;
	for(fifo_bytes = 0;fifo_bytes<length;fifo_bytes++)
 80008c6:	2300      	movs	r3, #0
 80008c8:	81bb      	strh	r3, [r7, #12]
 80008ca:	e032      	b.n	8000932 <I2Cdev_readBytes+0x172>
	{
		if(fifo_bytes < (length-1))
 80008cc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80008d0:	787b      	ldrb	r3, [r7, #1]
 80008d2:	3b01      	subs	r3, #1
 80008d4:	429a      	cmp	r2, r3
 80008d6:	da03      	bge.n	80008e0 <I2Cdev_readBytes+0x120>
			XMC_I2C_CH_MasterReceiveAck(handle);
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	f004 f95f 	bl	8004b9c <XMC_I2C_CH_MasterReceiveAck>
 80008de:	e002      	b.n	80008e6 <I2Cdev_readBytes+0x126>
		else
			XMC_I2C_CH_MasterReceiveNack(handle);
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	f004 f981 	bl	8004be8 <XMC_I2C_CH_MasterReceiveNack>
			time_out_cnt = 0u;
 80008e6:	2300      	movs	r3, #0
 80008e8:	81fb      	strh	r3, [r7, #14]
			while ((XMC_I2C_CH_GetStatusFlag(handle) & (XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION | XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION)) == 0U)
 80008ea:	e010      	b.n	800090e <I2Cdev_readBytes+0x14e>
			{
				time_out_cnt++;
 80008ec:	89fb      	ldrh	r3, [r7, #14]
 80008ee:	3301      	adds	r3, #1
 80008f0:	81fb      	strh	r3, [r7, #14]
				if (time_out_cnt > 200u)
 80008f2:	89fb      	ldrh	r3, [r7, #14]
 80008f4:	2bc8      	cmp	r3, #200	; 0xc8
 80008f6:	d90a      	bls.n	800090e <I2Cdev_readBytes+0x14e>
				{
					XMC_I2C_CH_ClearStatusFlag(handle,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008fe:	f7ff fe05 	bl	800050c <XMC_I2C_CH_ClearStatusFlag>
					XMC_I2C_CH_MasterStop(handle);
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f004 f8fe 	bl	8004b04 <XMC_I2C_CH_MasterStop>
					return -1;
 8000908:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800090c:	e039      	b.n	8000982 <I2Cdev_readBytes+0x1c2>
		if(fifo_bytes < (length-1))
			XMC_I2C_CH_MasterReceiveAck(handle);
		else
			XMC_I2C_CH_MasterReceiveNack(handle);
			time_out_cnt = 0u;
			while ((XMC_I2C_CH_GetStatusFlag(handle) & (XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION | XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION)) == 0U)
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f7ff fdf0 	bl	80004f4 <XMC_I2C_CH_GetStatusFlag>
 8000914:	4603      	mov	r3, r0
 8000916:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800091a:	2b00      	cmp	r3, #0
 800091c:	d0e6      	beq.n	80008ec <I2Cdev_readBytes+0x12c>
					XMC_I2C_CH_ClearStatusFlag(handle,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
					XMC_I2C_CH_MasterStop(handle);
					return -1;
				}
			}
		XMC_I2C_CH_ClearStatusFlag(handle,XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION | XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION);
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000924:	f7ff fdf2 	bl	800050c <XMC_I2C_CH_ClearStatusFlag>
		}
	}
	XMC_I2C_CH_ClearStatusFlag(handle,XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);

	int16_t fifo_bytes;
	for(fifo_bytes = 0;fifo_bytes<length;fifo_bytes++)
 8000928:	89bb      	ldrh	r3, [r7, #12]
 800092a:	b29b      	uxth	r3, r3
 800092c:	3301      	adds	r3, #1
 800092e:	b29b      	uxth	r3, r3
 8000930:	81bb      	strh	r3, [r7, #12]
 8000932:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000936:	787b      	ldrb	r3, [r7, #1]
 8000938:	429a      	cmp	r2, r3
 800093a:	dbc7      	blt.n	80008cc <I2Cdev_readBytes+0x10c>
				}
			}
		XMC_I2C_CH_ClearStatusFlag(handle,XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION | XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION);
	}

	XMC_I2C_CH_MasterStop(handle);
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f004 f8e1 	bl	8004b04 <XMC_I2C_CH_MasterStop>

	fifo_bytes=0;
 8000942:	2300      	movs	r3, #0
 8000944:	81bb      	strh	r3, [r7, #12]
	while(!XMC_USIC_CH_RXFIFO_IsEmpty(handle))
 8000946:	e00d      	b.n	8000964 <I2Cdev_readBytes+0x1a4>
	{
		data[fifo_bytes] = XMC_I2C_CH_GetReceivedData(handle);
 8000948:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800094c:	6a3a      	ldr	r2, [r7, #32]
 800094e:	18d4      	adds	r4, r2, r3
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f004 f96f 	bl	8004c34 <XMC_I2C_CH_GetReceivedData>
 8000956:	4603      	mov	r3, r0
 8000958:	7023      	strb	r3, [r4, #0]
		fifo_bytes++;
 800095a:	89bb      	ldrh	r3, [r7, #12]
 800095c:	b29b      	uxth	r3, r3
 800095e:	3301      	adds	r3, #1
 8000960:	b29b      	uxth	r3, r3
 8000962:	81bb      	strh	r3, [r7, #12]
	}

	XMC_I2C_CH_MasterStop(handle);

	fifo_bytes=0;
	while(!XMC_USIC_CH_RXFIFO_IsEmpty(handle))
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	f7ff fd6f 	bl	8000448 <XMC_USIC_CH_RXFIFO_IsEmpty>
 800096a:	4603      	mov	r3, r0
 800096c:	f083 0301 	eor.w	r3, r3, #1
 8000970:	b2db      	uxtb	r3, r3
 8000972:	2b00      	cmp	r3, #0
 8000974:	d1e8      	bne.n	8000948 <I2Cdev_readBytes+0x188>
	{
		data[fifo_bytes] = XMC_I2C_CH_GetReceivedData(handle);
		fifo_bytes++;
	}

	XMC_I2C_CH_ClearStatusFlag(handle,XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION | XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION);
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800097c:	f7ff fdc6 	bl	800050c <XMC_I2C_CH_ClearStatusFlag>
	return fifo_bytes;
 8000980:	89bb      	ldrh	r3, [r7, #12]
 8000982:	b21b      	sxth	r3, r3
}
 8000984:	4618      	mov	r0, r3
 8000986:	3714      	adds	r7, #20
 8000988:	46bd      	mov	sp, r7
 800098a:	bd90      	pop	{r4, r7, pc}

0800098c <delay>:
 *  \param [in] delayTimeInMillis delay length in milliseconds
 *  
 *  \details Lets the program wait for the desired time
 */
void delay(uint32_t delayTimeInMillis)
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	uint32_t now = timer_cnt;
 8000994:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <delay+0x28>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	60fb      	str	r3, [r7, #12]
	while((now+delayTimeInMillis)>timer_cnt);
 800099a:	bf00      	nop
 800099c:	68fa      	ldr	r2, [r7, #12]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	441a      	add	r2, r3
 80009a2:	4b04      	ldr	r3, [pc, #16]	; (80009b4 <delay+0x28>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	429a      	cmp	r2, r3
 80009a8:	d8f8      	bhi.n	800099c <delay+0x10>
}
 80009aa:	3714      	adds	r7, #20
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	200003c0 	.word	0x200003c0

080009b8 <getDelaymillis>:
 *  \return The current value of timer_cnt
 *  
 *  \details returns the current value of the delay timer
 */
uint32_t getDelaymillis(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
	return timer_cnt;
 80009bc:	4b03      	ldr	r3, [pc, #12]	; (80009cc <getDelaymillis+0x14>)
 80009be:	681b      	ldr	r3, [r3, #0]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	200003c0 	.word	0x200003c0

080009d0 <CCU43_0_IRQHandler>:
 *  
 *  
 *  \details elevates the timer count variable by 1
 */
void Util_Timer_ISR(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
	timer_cnt++;
 80009d4:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <CCU43_0_IRQHandler+0x18>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	3301      	adds	r3, #1
 80009da:	4a03      	ldr	r2, [pc, #12]	; (80009e8 <CCU43_0_IRQHandler+0x18>)
 80009dc:	6013      	str	r3, [r2, #0]
}
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	200003c0 	.word	0x200003c0

080009ec <FIR_FILTER>:
 *  \param [in] NewValue value to add
 *  \return renewed FIR struct
 *  
 */
struct structFIR FIR_FILTER(struct structFIR temp, float NewValue)
{
 80009ec:	b084      	sub	sp, #16
 80009ee:	b4b0      	push	{r4, r5, r7}
 80009f0:	b085      	sub	sp, #20
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
 80009f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80009fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Neuen Wert in den Ringbuffer schreiben
	temp.CIRC_BUFF[temp.POS] = NewValue;
 80009fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	f107 0220 	add.w	r2, r7, #32
 8000a06:	4413      	add	r3, r2
 8000a08:	3304      	adds	r3, #4
 8000a0a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000a0c:	601a      	str	r2, [r3, #0]

	//Neuen Zeiger auf das Array berrechnen
	temp.POS = ((temp.POS + 1) % FIR_SIZE);
 8000a0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a10:	1c59      	adds	r1, r3, #1
 8000a12:	4b28      	ldr	r3, [pc, #160]	; (8000ab4 <FIR_FILTER+0xc8>)
 8000a14:	fb83 3201 	smull	r3, r2, r3, r1
 8000a18:	17cb      	asrs	r3, r1, #31
 8000a1a:	1ad2      	subs	r2, r2, r3
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	4413      	add	r3, r2
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	1aca      	subs	r2, r1, r3
 8000a26:	65ba      	str	r2, [r7, #88]	; 0x58

	//Rückgabewert erstmal resetten
	temp.VALUE = 0;
 8000a28:	f04f 0300 	mov.w	r3, #0
 8000a2c:	657b      	str	r3, [r7, #84]	; 0x54

	//Eigentliches Werteberechnung durch Faltungsintegral
	for (int i = 0; i < FIR_SIZE; i++)
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	e027      	b.n	8000a84 <FIR_FILTER+0x98>
	{
		temp.VALUE += (temp.FIR_COEFF[i]
 8000a34:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	3306      	adds	r3, #6
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	f107 0220 	add.w	r2, r7, #32
 8000a42:	4413      	add	r3, r2
 8000a44:	3304      	adds	r3, #4
 8000a46:	edd3 6a00 	vldr	s13, [r3]
				* temp.CIRC_BUFF[(temp.POS + i) % FIR_SIZE]);
 8000a4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	18d1      	adds	r1, r2, r3
 8000a50:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <FIR_FILTER+0xc8>)
 8000a52:	fb83 3201 	smull	r3, r2, r3, r1
 8000a56:	17cb      	asrs	r3, r1, #31
 8000a58:	1ad2      	subs	r2, r2, r3
 8000a5a:	4613      	mov	r3, r2
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	4413      	add	r3, r2
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	1aca      	subs	r2, r1, r3
 8000a64:	0093      	lsls	r3, r2, #2
 8000a66:	f107 0220 	add.w	r2, r7, #32
 8000a6a:	4413      	add	r3, r2
 8000a6c:	3304      	adds	r3, #4
 8000a6e:	edd3 7a00 	vldr	s15, [r3]
 8000a72:	ee66 7aa7 	vmul.f32	s15, s13, s15
	temp.VALUE = 0;

	//Eigentliches Werteberechnung durch Faltungsintegral
	for (int i = 0; i < FIR_SIZE; i++)
	{
		temp.VALUE += (temp.FIR_COEFF[i]
 8000a76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a7a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

	//Rückgabewert erstmal resetten
	temp.VALUE = 0;

	//Eigentliches Werteberechnung durch Faltungsintegral
	for (int i = 0; i < FIR_SIZE; i++)
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	3301      	adds	r3, #1
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	2b05      	cmp	r3, #5
 8000a88:	ddd4      	ble.n	8000a34 <FIR_FILTER+0x48>
	{
		temp.VALUE += (temp.FIR_COEFF[i]
				* temp.CIRC_BUFF[(temp.POS + i) % FIR_SIZE]);
	}
	//Rueckgabewert des neuen Buffers
	return temp;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	461d      	mov	r5, r3
 8000a8e:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000a92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000aa2:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	3714      	adds	r7, #20
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bcb0      	pop	{r4, r5, r7}
 8000aae:	b004      	add	sp, #16
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	2aaaaaab 	.word	0x2aaaaaab

08000ab8 <Initialize_FIR_Filter>:
 *  \param [in] type type of filter coefficients used  
 *  \return initialized structFir
 *  
 */
struct structFIR Initialize_FIR_Filter(struct structFIR temp, int type)
{
 8000ab8:	b084      	sub	sp, #16
 8000aba:	b4b0      	push	{r4, r5, r7}
 8000abc:	b085      	sub	sp, #20
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
 8000ac2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000ac6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Alle Werte im Ringbuffer auf 0 setzen
	for (int i = 0; i < FIR_SIZE; i++)
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	e00b      	b.n	8000ae8 <Initialize_FIR_Filter+0x30>
		temp.CIRC_BUFF[i] = 0.0f;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	f107 0220 	add.w	r2, r7, #32
 8000ad8:	4413      	add	r3, r2
 8000ada:	3304      	adds	r3, #4
 8000adc:	f04f 0200 	mov.w	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 *  
 */
struct structFIR Initialize_FIR_Filter(struct structFIR temp, int type)
{
	//Alle Werte im Ringbuffer auf 0 setzen
	for (int i = 0; i < FIR_SIZE; i++)
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	2b05      	cmp	r3, #5
 8000aec:	ddf0      	ble.n	8000ad0 <Initialize_FIR_Filter+0x18>
		temp.CIRC_BUFF[i] = 0.0f;

	//Pointer im Circ-Buffer auf 0 setzen
	temp.POS = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	65bb      	str	r3, [r7, #88]	; 0x58
	//Filter-Koeffizienten erstellen und im Array befuellen
	switch (type)
	{
	case MOVING_AVERAGE:
	default:
		for (int i = 0; i < FIR_SIZE; i++)
 8000af2:	2300      	movs	r3, #0
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	e00b      	b.n	8000b10 <Initialize_FIR_Filter+0x58>
			temp.FIR_COEFF[i] = 1.0f / FIR_SIZE;
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	3306      	adds	r3, #6
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	f107 0220 	add.w	r2, r7, #32
 8000b02:	4413      	add	r3, r2
 8000b04:	3304      	adds	r3, #4
 8000b06:	4a0e      	ldr	r2, [pc, #56]	; (8000b40 <Initialize_FIR_Filter+0x88>)
 8000b08:	601a      	str	r2, [r3, #0]
	//Filter-Koeffizienten erstellen und im Array befuellen
	switch (type)
	{
	case MOVING_AVERAGE:
	default:
		for (int i = 0; i < FIR_SIZE; i++)
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	2b05      	cmp	r3, #5
 8000b14:	ddf0      	ble.n	8000af8 <Initialize_FIR_Filter+0x40>
			temp.FIR_COEFF[i] = 1.0f / FIR_SIZE;
		break;
 8000b16:	bf00      	nop
	}
	return temp;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	461d      	mov	r5, r3
 8000b1c:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000b20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b2c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b30:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bcb0      	pop	{r4, r5, r7}
 8000b3c:	b004      	add	sp, #16
 8000b3e:	4770      	bx	lr
 8000b40:	3e2aaaab 	.word	0x3e2aaaab

08000b44 <MadgwickQuaternionUpdateWithouMag>:
//	q[2] = q3 * norm;
//	q[3] = q4 * norm;
//}

void MadgwickQuaternionUpdateWithouMag(float* q, float deltat, float a_x, float a_y, float a_z, float w_x, float w_y, float w_z)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b09e      	sub	sp, #120	; 0x78
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
 8000b50:	603b      	str	r3, [r7, #0]
	float SEqDot_omega_1, SEqDot_omega_2, SEqDot_omega_3, SEqDot_omega_4; // quaternion derrivative from gyroscopes elements
	float f_1, f_2, f_3; // objective function elements
	float J_11or24, J_12or23, J_13or22, J_14or21, J_32, J_33; // objective function Jacobian elements
	float SEqHatDot_1, SEqHatDot_2, SEqHatDot_3, SEqHatDot_4; // estimated direction of the gyroscope error
	// Axulirary variables to avoid reapeated calcualtions
	float halfSEq_1 = 0.5f * q[0];
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	edd3 7a00 	vldr	s15, [r3]
 8000b58:	ed9f 7af1 	vldr	s14, [pc, #964]	; 8000f20 <MadgwickQuaternionUpdateWithouMag+0x3dc>
 8000b5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b60:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	float halfSEq_2 = 0.5f * q[1];
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	3304      	adds	r3, #4
 8000b68:	edd3 7a00 	vldr	s15, [r3]
 8000b6c:	ed9f 7aec 	vldr	s14, [pc, #944]	; 8000f20 <MadgwickQuaternionUpdateWithouMag+0x3dc>
 8000b70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b74:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	float halfSEq_3 = 0.5f * q[2];
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	3308      	adds	r3, #8
 8000b7c:	edd3 7a00 	vldr	s15, [r3]
 8000b80:	ed9f 7ae7 	vldr	s14, [pc, #924]	; 8000f20 <MadgwickQuaternionUpdateWithouMag+0x3dc>
 8000b84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b88:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	float halfSEq_4 = 0.5f * q[3];
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	330c      	adds	r3, #12
 8000b90:	edd3 7a00 	vldr	s15, [r3]
 8000b94:	ed9f 7ae2 	vldr	s14, [pc, #904]	; 8000f20 <MadgwickQuaternionUpdateWithouMag+0x3dc>
 8000b98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b9c:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	float twoSEq_1 = 2.0f * q[0];
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	edd3 7a00 	vldr	s15, [r3]
 8000ba6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000baa:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	float twoSEq_2 = 2.0f * q[1];
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	3304      	adds	r3, #4
 8000bb2:	edd3 7a00 	vldr	s15, [r3]
 8000bb6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000bba:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	float twoSEq_3 = 2.0f * q[2];
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	3308      	adds	r3, #8
 8000bc2:	edd3 7a00 	vldr	s15, [r3]
 8000bc6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000bca:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

	float beta = sqrtf(3.0f / 4.0f) * GYROMEASERROR;
 8000bce:	4bd5      	ldr	r3, [pc, #852]	; (8000f24 <MadgwickQuaternionUpdateWithouMag+0x3e0>)
 8000bd0:	65bb      	str	r3, [r7, #88]	; 0x58

	// Normalise the accelerometer measurement
	norm = sqrtf(a_x * a_x + a_y * a_y + a_z * a_z);
 8000bd2:	ed97 7a01 	vldr	s14, [r7, #4]
 8000bd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bde:	edd7 6a00 	vldr	s13, [r7]
 8000be2:	edd7 7a00 	vldr	s15, [r7]
 8000be6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000bee:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8000bf2:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8000bf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bfe:	ee17 0a90 	vmov	r0, s15
 8000c02:	f009 fe45 	bl	800a890 <sqrtf>
 8000c06:	6578      	str	r0, [r7, #84]	; 0x54
	a_x /= norm;
 8000c08:	ed97 7a01 	vldr	s14, [r7, #4]
 8000c0c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8000c10:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8000c14:	edc7 7a01 	vstr	s15, [r7, #4]
	a_y /= norm;
 8000c18:	ed97 7a00 	vldr	s14, [r7]
 8000c1c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8000c20:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8000c24:	edc7 7a00 	vstr	s15, [r7]
	a_z /= norm;
 8000c28:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8000c2c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8000c30:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8000c34:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	// Compute the objective function and Jacobian
	f_1 = twoSEq_2 * q[3] - twoSEq_1 * q[2] - a_x;
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	330c      	adds	r3, #12
 8000c3c:	ed93 7a00 	vldr	s14, [r3]
 8000c40:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8000c44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	3308      	adds	r3, #8
 8000c4c:	edd3 6a00 	vldr	s13, [r3]
 8000c50:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8000c54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c64:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	f_2 = twoSEq_1 * q[1] + twoSEq_3 * q[3] - a_y;
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	3304      	adds	r3, #4
 8000c6c:	ed93 7a00 	vldr	s14, [r3]
 8000c70:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8000c74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	330c      	adds	r3, #12
 8000c7c:	edd3 6a00 	vldr	s13, [r3]
 8000c80:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8000c84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c8c:	edd7 7a00 	vldr	s15, [r7]
 8000c90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c94:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	f_3 = 1.0f - twoSEq_2 * q[1] - twoSEq_3 * q[2] - a_z;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	3304      	adds	r3, #4
 8000c9c:	ed93 7a00 	vldr	s14, [r3]
 8000ca0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8000ca4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ca8:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8000f28 <MadgwickQuaternionUpdateWithouMag+0x3e4>
 8000cac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	3308      	adds	r3, #8
 8000cb4:	edd3 6a00 	vldr	s13, [r3]
 8000cb8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8000cbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cc0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000cc4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8000cc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ccc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	J_11or24 = twoSEq_3; // J_11 negated in matrix multiplication
 8000cd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000cd2:	647b      	str	r3, [r7, #68]	; 0x44
	J_12or23 = 2.0f * q[3];
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	330c      	adds	r3, #12
 8000cd8:	edd3 7a00 	vldr	s15, [r3]
 8000cdc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000ce0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	J_13or22 = twoSEq_1; // J_12 negated in matrix multiplication
 8000ce4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
	J_14or21 = twoSEq_2;
 8000ce8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000cea:	63bb      	str	r3, [r7, #56]	; 0x38
	J_32 = 2.0f * J_14or21; // negated in matrix multiplication
 8000cec:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000cf0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000cf4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	J_33 = 2.0f * J_11or24; // negated in matrix multiplication
 8000cf8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000cfc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000d00:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	// Compute the gradient (matrix multiplication)
	SEqHatDot_1 = J_14or21 * f_2 - J_11or24 * f_1;
 8000d04:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000d08:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8000d0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d10:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8000d14:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8000d18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d20:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	SEqHatDot_2 = J_12or23 * f_1 + J_13or22 * f_2 - J_32 * f_3;
 8000d24:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000d28:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8000d2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d30:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8000d34:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8000d38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d40:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8000d44:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000d48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d50:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	SEqHatDot_3 = J_12or23 * f_2 - J_33 * f_3 - J_13or22 * f_1;
 8000d54:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000d58:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8000d5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d60:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8000d64:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000d68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d6c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d70:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8000d74:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8000d78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d80:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	SEqHatDot_4 = J_14or21 * f_1 + J_11or24 * f_2;
 8000d84:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000d88:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8000d8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d90:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8000d94:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8000d98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000da0:	edc7 7a08 	vstr	s15, [r7, #32]
	// Normalise the gradient
	norm = sqrtf(SEqHatDot_1 * SEqHatDot_1 + SEqHatDot_2 * SEqHatDot_2 + SEqHatDot_3 * SEqHatDot_3 + SEqHatDot_4 * SEqHatDot_4);
 8000da4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000da8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000dac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000db0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8000db4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000db8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000dc0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8000dc4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000dc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dcc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000dd0:	edd7 6a08 	vldr	s13, [r7, #32]
 8000dd4:	edd7 7a08 	vldr	s15, [r7, #32]
 8000dd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ddc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000de0:	ee17 0a90 	vmov	r0, s15
 8000de4:	f009 fd54 	bl	800a890 <sqrtf>
 8000de8:	6578      	str	r0, [r7, #84]	; 0x54
	SEqHatDot_1 /= norm;
 8000dea:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000dee:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8000df2:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8000df6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	SEqHatDot_2 /= norm;
 8000dfa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000dfe:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8000e02:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8000e06:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	SEqHatDot_3 /= norm;
 8000e0a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000e0e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8000e12:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8000e16:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	SEqHatDot_4 /= norm;
 8000e1a:	ed97 7a08 	vldr	s14, [r7, #32]
 8000e1e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8000e22:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8000e26:	edc7 7a08 	vstr	s15, [r7, #32]
	// Compute the quaternion derrivative measured by gyroscopes
	SEqDot_omega_1 = -halfSEq_2 * w_x - halfSEq_3 * w_y - halfSEq_4 * w_z;
 8000e2a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8000e2e:	eeb1 7a67 	vneg.f32	s14, s15
 8000e32:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8000e36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e3a:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8000e3e:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8000e42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e46:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e4a:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8000e4e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8000e52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e5a:	edc7 7a07 	vstr	s15, [r7, #28]
	SEqDot_omega_2 = halfSEq_1 * w_x + halfSEq_3 * w_z - halfSEq_4 * w_y;
 8000e5e:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8000e62:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8000e66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e6a:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8000e6e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8000e72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e7a:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8000e7e:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8000e82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e8a:	edc7 7a06 	vstr	s15, [r7, #24]
	SEqDot_omega_3 = halfSEq_1 * w_y - halfSEq_2 * w_z + halfSEq_4 * w_x;
 8000e8e:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8000e92:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8000e96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e9a:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 8000e9e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8000ea2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ea6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000eaa:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8000eae:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8000eb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000eb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eba:	edc7 7a05 	vstr	s15, [r7, #20]
	SEqDot_omega_4 = halfSEq_1 * w_z + halfSEq_2 * w_y - halfSEq_3 * w_x;
 8000ebe:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8000ec2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8000ec6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000eca:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 8000ece:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8000ed2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ed6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000eda:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8000ede:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8000ee2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ee6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000eea:	edc7 7a04 	vstr	s15, [r7, #16]
	// Compute then integrate the estimated quaternion derrivative
	q[0] += (SEqDot_omega_1 - (beta * SEqHatDot_1)) * deltat;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	ed93 7a00 	vldr	s14, [r3]
 8000ef4:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8000ef8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000efc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f00:	edd7 6a07 	vldr	s13, [r7, #28]
 8000f04:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000f08:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	edc3 7a00 	vstr	s15, [r3]
	q[1] += (SEqDot_omega_2 - (beta * SEqHatDot_2)) * deltat;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	e006      	b.n	8000f2c <MadgwickQuaternionUpdateWithouMag+0x3e8>
 8000f1e:	bf00      	nop
 8000f20:	3f000000 	.word	0x3f000000
 8000f24:	3f1ac70d 	.word	0x3f1ac70d
 8000f28:	3f800000 	.word	0x3f800000
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	3204      	adds	r2, #4
 8000f32:	ed92 7a00 	vldr	s14, [r2]
 8000f36:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8000f3a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000f3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f42:	edd7 6a06 	vldr	s13, [r7, #24]
 8000f46:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000f4a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f56:	edc3 7a00 	vstr	s15, [r3]
	q[2] += (SEqDot_omega_3 - (beta * SEqHatDot_3)) * deltat;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	3308      	adds	r3, #8
 8000f5e:	68fa      	ldr	r2, [r7, #12]
 8000f60:	3208      	adds	r2, #8
 8000f62:	ed92 7a00 	vldr	s14, [r2]
 8000f66:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8000f6a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000f6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f72:	edd7 6a05 	vldr	s13, [r7, #20]
 8000f76:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000f7a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f86:	edc3 7a00 	vstr	s15, [r3]
	q[3] += (SEqDot_omega_4 - (beta * SEqHatDot_4)) * deltat;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	330c      	adds	r3, #12
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	320c      	adds	r2, #12
 8000f92:	ed92 7a00 	vldr	s14, [r2]
 8000f96:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8000f9a:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fa2:	edd7 6a04 	vldr	s13, [r7, #16]
 8000fa6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000faa:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fb6:	edc3 7a00 	vstr	s15, [r3]
	// Normalise quaternion
	norm = sqrtf(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	ed93 7a00 	vldr	s14, [r3]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	edd3 7a00 	vldr	s15, [r3]
 8000fc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	edd3 6a00 	vldr	s13, [r3]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	edd3 7a00 	vldr	s15, [r3]
 8000fda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	3308      	adds	r3, #8
 8000fe6:	edd3 6a00 	vldr	s13, [r3]
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	3308      	adds	r3, #8
 8000fee:	edd3 7a00 	vldr	s15, [r3]
 8000ff2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ff6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	330c      	adds	r3, #12
 8000ffe:	edd3 6a00 	vldr	s13, [r3]
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	330c      	adds	r3, #12
 8001006:	edd3 7a00 	vldr	s15, [r3]
 800100a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800100e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001012:	ee17 0a90 	vmov	r0, s15
 8001016:	f009 fc3b 	bl	800a890 <sqrtf>
 800101a:	6578      	str	r0, [r7, #84]	; 0x54
	q[0] /= norm;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	ed93 7a00 	vldr	s14, [r3]
 8001022:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001026:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	edc3 7a00 	vstr	s15, [r3]
	q[1] /= norm;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	3304      	adds	r3, #4
 8001034:	68fa      	ldr	r2, [r7, #12]
 8001036:	3204      	adds	r2, #4
 8001038:	ed92 7a00 	vldr	s14, [r2]
 800103c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001040:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8001044:	edc3 7a00 	vstr	s15, [r3]
	q[2] /= norm;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	3308      	adds	r3, #8
 800104c:	68fa      	ldr	r2, [r7, #12]
 800104e:	3208      	adds	r2, #8
 8001050:	ed92 7a00 	vldr	s14, [r2]
 8001054:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001058:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800105c:	edc3 7a00 	vstr	s15, [r3]
	q[3] /= norm;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	330c      	adds	r3, #12
 8001064:	68fa      	ldr	r2, [r7, #12]
 8001066:	320c      	adds	r2, #12
 8001068:	ed92 7a00 	vldr	s14, [r2]
 800106c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001070:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8001074:	edc3 7a00 	vstr	s15, [r3]
}
 8001078:	3778      	adds	r7, #120	; 0x78
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop

08001080 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800108a:	4908      	ldr	r1, [pc, #32]	; (80010ac <NVIC_EnableIRQ+0x2c>)
 800108c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001090:	095b      	lsrs	r3, r3, #5
 8001092:	79fa      	ldrb	r2, [r7, #7]
 8001094:	f002 021f 	and.w	r2, r2, #31
 8001098:	2001      	movs	r0, #1
 800109a:	fa00 f202 	lsl.w	r2, r0, r2
 800109e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000e100 	.word	0xe000e100

080010b0 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	b25b      	sxtb	r3, r3
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff ffde 	bl	8001080 <NVIC_EnableIRQ>
}
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop

080010cc <MPU9150_Setup>:
 *  \details Sets up I2C FIFO\n
 *  makes a selftest through reading the WHO_AM_I register\n
 *  
 */
void MPU9150_Setup(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af06      	add	r7, sp, #24
	setupI2CInterfaceFIFO(MPU9x50_USIC,MPU9x50_USIC_CH_PIN_SDA,MPU9x50_USIC_CH_PIN_SCL,(XMC_GPIO_PORT_t *)PORT5_BASE,0,2,&i2c_sda_mpu,&i2c_scl_mpu,&i2c_cfg_mpu);
 80010d2:	2300      	movs	r3, #0
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	2302      	movs	r3, #2
 80010d8:	9301      	str	r3, [sp, #4]
 80010da:	4b16      	ldr	r3, [pc, #88]	; (8001134 <MPU9150_Setup+0x68>)
 80010dc:	9302      	str	r3, [sp, #8]
 80010de:	4b16      	ldr	r3, [pc, #88]	; (8001138 <MPU9150_Setup+0x6c>)
 80010e0:	9303      	str	r3, [sp, #12]
 80010e2:	4b16      	ldr	r3, [pc, #88]	; (800113c <MPU9150_Setup+0x70>)
 80010e4:	9304      	str	r3, [sp, #16]
 80010e6:	4816      	ldr	r0, [pc, #88]	; (8001140 <MPU9150_Setup+0x74>)
 80010e8:	2101      	movs	r1, #1
 80010ea:	2200      	movs	r2, #0
 80010ec:	4b15      	ldr	r3, [pc, #84]	; (8001144 <MPU9150_Setup+0x78>)
 80010ee:	f7ff fa1d 	bl	800052c <setupI2CInterfaceFIFO>

	// Read the WHO_AM_I register, this is a good test of communication
	uint8_t c = I2Cdev_readByte(MPU9x50_USIC,MPU9150_ADDRESS, WHO_AM_I_MPU9150);  // Read WHO_AM_I register for MPU-9150
 80010f2:	4813      	ldr	r0, [pc, #76]	; (8001140 <MPU9150_Setup+0x74>)
 80010f4:	21d2      	movs	r1, #210	; 0xd2
 80010f6:	2275      	movs	r2, #117	; 0x75
 80010f8:	f7ff fad0 	bl	800069c <I2Cdev_readByte>
 80010fc:	4603      	mov	r3, r0
 80010fe:	71fb      	strb	r3, [r7, #7]

	if (c == 0x68 || c == 0x71 || c == 0x73) // WHO_AM_I should always be 0x68 (MPU9150 or MPU9250)
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	2b68      	cmp	r3, #104	; 0x68
 8001104:	d005      	beq.n	8001112 <MPU9150_Setup+0x46>
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	2b71      	cmp	r3, #113	; 0x71
 800110a:	d002      	beq.n	8001112 <MPU9150_Setup+0x46>
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	2b73      	cmp	r3, #115	; 0x73
 8001110:	d10d      	bne.n	800112e <MPU9150_Setup+0x62>
	{
		if (MPU9150_SelfTest())
 8001112:	f000 f88d 	bl	8001230 <MPU9150_SelfTest>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d008      	beq.n	800112e <MPU9150_Setup+0x62>
		{
			//MPU9150_Calibrate(); // Calibrate gyro and accelerometers, load biases in bias registers
			delay(1000);
 800111c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001120:	f7ff fc34 	bl	800098c <delay>
			MPU9150_Init(); // Inititalize and configure accelerometer and gyroscope
 8001124:	f000 f812 	bl	800114c <MPU9150_Init>
			INTERRUPT_Enable(&MPU9X50_Ext_Int_ISR_Handle);
 8001128:	4807      	ldr	r0, [pc, #28]	; (8001148 <MPU9150_Setup+0x7c>)
 800112a:	f7ff ffc1 	bl	80010b0 <INTERRUPT_Enable>
		}
	}
}
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000000 	.word	0x20000000
 8001138:	2000000c 	.word	0x2000000c
 800113c:	20000018 	.word	0x20000018
 8001140:	48024000 	.word	0x48024000
 8001144:	48028500 	.word	0x48028500
 8001148:	0800e098 	.word	0x0800e098

0800114c <MPU9150_Init>:
 *  self tests magnetometer(WHO_AM_I register)\n
 *  cofigures magnetometer for FIFO\n
 *  configures interrupts and bypass enable
 */
void MPU9150_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
	// wake up device
	I2Cdev_writeByte(MPU9x50_USIC,MPU9150_ADDRESS, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 8001150:	4834      	ldr	r0, [pc, #208]	; (8001224 <MPU9150_Init+0xd8>)
 8001152:	21d2      	movs	r1, #210	; 0xd2
 8001154:	226b      	movs	r2, #107	; 0x6b
 8001156:	2300      	movs	r3, #0
 8001158:	f7ff fa1a 	bl	8000590 <I2Cdev_writeByte>
	delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 800115c:	2064      	movs	r0, #100	; 0x64
 800115e:	f7ff fc15 	bl	800098c <delay>

	// get stable time source
	I2Cdev_writeByte(MPU9x50_USIC,MPU9150_ADDRESS, PWR_MGMT_1, 0x01);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 8001162:	4830      	ldr	r0, [pc, #192]	; (8001224 <MPU9150_Init+0xd8>)
 8001164:	21d2      	movs	r1, #210	; 0xd2
 8001166:	226b      	movs	r2, #107	; 0x6b
 8001168:	2301      	movs	r3, #1
 800116a:	f7ff fa11 	bl	8000590 <I2Cdev_writeByte>
	delay(200);
 800116e:	20c8      	movs	r0, #200	; 0xc8
 8001170:	f7ff fc0c 	bl	800098c <delay>
	// Configure Gyro and Accelerometer
	// Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively;
	// DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
	// Minimum delay time is 4.9 ms which sets the fastest rate at ~200 Hz
	//I2Cdev_writeByte(MPU9x50_USIC,MPU9150_ADDRESS, CONFIG, 0x01);
	I2Cdev_writeByte(MPU9x50_USIC,MPU9150_ADDRESS, CONFIG, 0x06);
 8001174:	482b      	ldr	r0, [pc, #172]	; (8001224 <MPU9150_Init+0xd8>)
 8001176:	21d2      	movs	r1, #210	; 0xd2
 8001178:	221a      	movs	r2, #26
 800117a:	2306      	movs	r3, #6
 800117c:	f7ff fa08 	bl	8000590 <I2Cdev_writeByte>

	// Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	I2Cdev_writeByte(MPU9x50_USIC,MPU9150_ADDRESS, SMPLRT_DIV, 0x01);  // Use a 200 Hz rate; the same rate set in CONFIG above
 8001180:	4828      	ldr	r0, [pc, #160]	; (8001224 <MPU9150_Init+0xd8>)
 8001182:	21d2      	movs	r1, #210	; 0xd2
 8001184:	2219      	movs	r2, #25
 8001186:	2301      	movs	r3, #1
 8001188:	f7ff fa02 	bl	8000590 <I2Cdev_writeByte>
	// Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
	//uint8_t c =  I2Cdev_readByte(MPU9x50_USIC,MPU9150_ADDRESS, GYRO_CONFIG);
	//I2Cdev_writeByte(MPU9x50_USIC,MPU9150_ADDRESS, GYRO_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
	//I2Cdev_writeByte(MPU9x50_USIC,MPU9150_ADDRESS, GYRO_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
	//I2Cdev_writeByte(MPU9x50_USIC,MPU9150_ADDRESS, GYRO_CONFIG, c | Gscale << 3); // Set full scale range for the gyro
	I2Cdev_writeByte(MPU9x50_USIC,MPU9150_ADDRESS, GYRO_CONFIG, Gscale << 3); // Set full scale range for the gyro
 800118c:	4b26      	ldr	r3, [pc, #152]	; (8001228 <MPU9150_Init+0xdc>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	b2db      	uxtb	r3, r3
 8001194:	4823      	ldr	r0, [pc, #140]	; (8001224 <MPU9150_Init+0xd8>)
 8001196:	21d2      	movs	r1, #210	; 0xd2
 8001198:	221b      	movs	r2, #27
 800119a:	f7ff f9f9 	bl	8000590 <I2Cdev_writeByte>
	// Set accelerometer configuration
	//c =  I2Cdev_readByte(MPU9x50_USIC,MPU9150_ADDRESS, ACCEL_CONFIG);
	//I2Cdev_writeByte(MPU9x50_USIC,MPU9150_ADDRESS, ACCEL_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
	//I2Cdev_writeByte(MPU9x50_USIC,MPU9150_ADDRESS, ACCEL_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
	//I2Cdev_writeByte(MPU9x50_USIC,MPU9150_ADDRESS, ACCEL_CONFIG, c | Ascale << 3); // Set full scale range for the accelerometer
	I2Cdev_writeByte(MPU9x50_USIC,MPU9150_ADDRESS, ACCEL_CONFIG, Ascale << 3); // Set full scale range for the accelerometer
 800119e:	4b23      	ldr	r3, [pc, #140]	; (800122c <MPU9150_Init+0xe0>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	481f      	ldr	r0, [pc, #124]	; (8001224 <MPU9150_Init+0xd8>)
 80011a8:	21d2      	movs	r1, #210	; 0xd2
 80011aa:	221c      	movs	r2, #28
 80011ac:	f7ff f9f0 	bl	8000590 <I2Cdev_writeByte>

	// Configure FIFO
	I2Cdev_writeByte(MPU9x50_USIC,MPU9150_ADDRESS, INT_ENABLE, 0x00); // Disable all interrupts
 80011b0:	481c      	ldr	r0, [pc, #112]	; (8001224 <MPU9150_Init+0xd8>)
 80011b2:	21d2      	movs	r1, #210	; 0xd2
 80011b4:	2238      	movs	r2, #56	; 0x38
 80011b6:	2300      	movs	r3, #0
 80011b8:	f7ff f9ea 	bl	8000590 <I2Cdev_writeByte>
	I2Cdev_writeByte(MPU9x50_USIC,MPU9150_ADDRESS, FIFO_EN, 0x00);    // Disable FIFO
 80011bc:	4819      	ldr	r0, [pc, #100]	; (8001224 <MPU9150_Init+0xd8>)
 80011be:	21d2      	movs	r1, #210	; 0xd2
 80011c0:	2223      	movs	r2, #35	; 0x23
 80011c2:	2300      	movs	r3, #0
 80011c4:	f7ff f9e4 	bl	8000590 <I2Cdev_writeByte>
	I2Cdev_writeByte(MPU9x50_USIC,MPU9150_ADDRESS, USER_CTRL, 0x02);  // Reset I2C master and FIFO and DMP
 80011c8:	4816      	ldr	r0, [pc, #88]	; (8001224 <MPU9150_Init+0xd8>)
 80011ca:	21d2      	movs	r1, #210	; 0xd2
 80011cc:	226a      	movs	r2, #106	; 0x6a
 80011ce:	2302      	movs	r3, #2
 80011d0:	f7ff f9de 	bl	8000590 <I2Cdev_writeByte>
	I2Cdev_writeByte(MPU9x50_USIC,MPU9150_ADDRESS, USER_CTRL, 0x00);  // Disable FIFO
 80011d4:	4813      	ldr	r0, [pc, #76]	; (8001224 <MPU9150_Init+0xd8>)
 80011d6:	21d2      	movs	r1, #210	; 0xd2
 80011d8:	226a      	movs	r2, #106	; 0x6a
 80011da:	2300      	movs	r3, #0
 80011dc:	f7ff f9d8 	bl	8000590 <I2Cdev_writeByte>
	I2Cdev_writeByte(MPU9x50_USIC,MPU9150_ADDRESS, INT_PIN_CFG, 0x02);
 80011e0:	4810      	ldr	r0, [pc, #64]	; (8001224 <MPU9150_Init+0xd8>)
 80011e2:	21d2      	movs	r1, #210	; 0xd2
 80011e4:	2237      	movs	r2, #55	; 0x37
 80011e6:	2302      	movs	r3, #2
 80011e8:	f7ff f9d2 	bl	8000590 <I2Cdev_writeByte>
	delay(100);
 80011ec:	2064      	movs	r0, #100	; 0x64
 80011ee:	f7ff fbcd 	bl	800098c <delay>
	//c = I2Cdev_readByte(MPU9x50_USIC,AK8975A_ADDRESS, WHO_AM_I_AK8975A);  // Read WHO_AM_I register for AK8975A
	//if (c == 0x48)
	//	MPU9150_InitAK8975A(magCalibration);

	// Configure Magnetometer for FIFO
	I2Cdev_writeByte(MPU9x50_USIC,MPU9150_ADDRESS, FIFO_EN, 0x78); // Enable all sensors for FIFO
 80011f2:	480c      	ldr	r0, [pc, #48]	; (8001224 <MPU9150_Init+0xd8>)
 80011f4:	21d2      	movs	r1, #210	; 0xd2
 80011f6:	2223      	movs	r2, #35	; 0x23
 80011f8:	2378      	movs	r3, #120	; 0x78
 80011fa:	f7ff f9c9 	bl	8000590 <I2Cdev_writeByte>
	I2Cdev_writeByte(MPU9x50_USIC,MPU9150_ADDRESS, I2C_SLV4_CTRL, 0x04);*/

	// Configure Interrupts and Bypass Enable
	// Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips
	// can join the I2C bus and all can be controlled by the Arduino as master
	I2Cdev_writeByte(MPU9x50_USIC,MPU9150_ADDRESS, INT_PIN_CFG, 0x00);
 80011fe:	4809      	ldr	r0, [pc, #36]	; (8001224 <MPU9150_Init+0xd8>)
 8001200:	21d2      	movs	r1, #210	; 0xd2
 8001202:	2237      	movs	r2, #55	; 0x37
 8001204:	2300      	movs	r3, #0
 8001206:	f7ff f9c3 	bl	8000590 <I2Cdev_writeByte>
	//I2Cdev_writeByte(MPU9x50_USIC,MPU9150_ADDRESS, INT_ENABLE, 0x11);  // Enable data ready (bit 0) interrupt
	I2Cdev_writeByte(MPU9x50_USIC,MPU9150_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
 800120a:	4806      	ldr	r0, [pc, #24]	; (8001224 <MPU9150_Init+0xd8>)
 800120c:	21d2      	movs	r1, #210	; 0xd2
 800120e:	2238      	movs	r2, #56	; 0x38
 8001210:	2301      	movs	r3, #1
 8001212:	f7ff f9bd 	bl	8000590 <I2Cdev_writeByte>

	//I2Cdev_writeByte(MPU9x50_USIC,MPU9150_ADDRESS, I2C_MST_DELAY_CTRL, 0x83); // Enable delay of external sensor data until all data registers have been read
	//I2Cdev_writeByte(MPU9x50_USIC,MPU9150_ADDRESS, USER_CTRL, 0x64);
	I2Cdev_writeByte(MPU9x50_USIC,MPU9150_ADDRESS, USER_CTRL, 0x44);
 8001216:	4803      	ldr	r0, [pc, #12]	; (8001224 <MPU9150_Init+0xd8>)
 8001218:	21d2      	movs	r1, #210	; 0xd2
 800121a:	226a      	movs	r2, #106	; 0x6a
 800121c:	2344      	movs	r3, #68	; 0x44
 800121e:	f7ff f9b7 	bl	8000590 <I2Cdev_writeByte>
#if ATTITUDEALGORITHM == 1
	KALMAN_Init(&kalmanX, 0.01, 0.03, 0.3);
	KALMAN_Init(&kalmanY, 0.01, 0.03, 0.3);
	KALMAN_Init(&kalmanZ, 0.01, 0.03, 0.3);
#endif
}
 8001222:	bd80      	pop	{r7, pc}
 8001224:	48024000 	.word	0x48024000
 8001228:	20000020 	.word	0x20000020
 800122c:	20000021 	.word	0x20000021

08001230 <MPU9150_SelfTest>:
 *  \return returns true if passed and false if not
 *
 *  \details Should return percent deviation from factory trim values, +/- 14 or less deviation is a pass
 */
bool MPU9150_SelfTest(void) // 
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b090      	sub	sp, #64	; 0x40
 8001234:	af00      	add	r7, sp, #0
   uint8_t selfTest[6];
   float factoryTrim[6];
   float result[6];

   // Configure the accelerometer for self-test
   I2Cdev_writeByte(MPU9x50_USIC,MPU9150_ADDRESS, ACCEL_CONFIG, 0xF0); // Enable self test on all three axes and set accelerometer range to +/- 8 g
 8001236:	48b6      	ldr	r0, [pc, #728]	; (8001510 <MPU9150_SelfTest+0x2e0>)
 8001238:	21d2      	movs	r1, #210	; 0xd2
 800123a:	221c      	movs	r2, #28
 800123c:	23f0      	movs	r3, #240	; 0xf0
 800123e:	f7ff f9a7 	bl	8000590 <I2Cdev_writeByte>
   I2Cdev_writeByte(MPU9x50_USIC,MPU9150_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 8001242:	48b3      	ldr	r0, [pc, #716]	; (8001510 <MPU9150_SelfTest+0x2e0>)
 8001244:	21d2      	movs	r1, #210	; 0xd2
 8001246:	221b      	movs	r2, #27
 8001248:	23e0      	movs	r3, #224	; 0xe0
 800124a:	f7ff f9a1 	bl	8000590 <I2Cdev_writeByte>
   delay(250);  // Delay a while to let the device execute the self-test
 800124e:	20fa      	movs	r0, #250	; 0xfa
 8001250:	f7ff fb9c 	bl	800098c <delay>
   rawData[0] = I2Cdev_readByte(MPU9x50_USIC,MPU9150_ADDRESS, SELF_TEST_X); // X-axis self-test results
 8001254:	48ae      	ldr	r0, [pc, #696]	; (8001510 <MPU9150_SelfTest+0x2e0>)
 8001256:	21d2      	movs	r1, #210	; 0xd2
 8001258:	220d      	movs	r2, #13
 800125a:	f7ff fa1f 	bl	800069c <I2Cdev_readByte>
 800125e:	4603      	mov	r3, r0
 8001260:	b2db      	uxtb	r3, r3
 8001262:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
   rawData[1] = I2Cdev_readByte(MPU9x50_USIC,MPU9150_ADDRESS, SELF_TEST_Y); // Y-axis self-test results
 8001266:	48aa      	ldr	r0, [pc, #680]	; (8001510 <MPU9150_SelfTest+0x2e0>)
 8001268:	21d2      	movs	r1, #210	; 0xd2
 800126a:	220e      	movs	r2, #14
 800126c:	f7ff fa16 	bl	800069c <I2Cdev_readByte>
 8001270:	4603      	mov	r3, r0
 8001272:	b2db      	uxtb	r3, r3
 8001274:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
   rawData[2] = I2Cdev_readByte(MPU9x50_USIC,MPU9150_ADDRESS, SELF_TEST_Z); // Z-axis self-test results
 8001278:	48a5      	ldr	r0, [pc, #660]	; (8001510 <MPU9150_SelfTest+0x2e0>)
 800127a:	21d2      	movs	r1, #210	; 0xd2
 800127c:	220f      	movs	r2, #15
 800127e:	f7ff fa0d 	bl	800069c <I2Cdev_readByte>
 8001282:	4603      	mov	r3, r0
 8001284:	b2db      	uxtb	r3, r3
 8001286:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
   rawData[3] = I2Cdev_readByte(MPU9x50_USIC,MPU9150_ADDRESS, SELF_TEST_A); // Mixed-axis self-test results
 800128a:	48a1      	ldr	r0, [pc, #644]	; (8001510 <MPU9150_SelfTest+0x2e0>)
 800128c:	21d2      	movs	r1, #210	; 0xd2
 800128e:	2210      	movs	r2, #16
 8001290:	f7ff fa04 	bl	800069c <I2Cdev_readByte>
 8001294:	4603      	mov	r3, r0
 8001296:	b2db      	uxtb	r3, r3
 8001298:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
   // Extract the acceleration test results first
   selfTest[0] = (rawData[0] >> 3) | (rawData[3] & 0x30) >> 4 ; // XA_TEST result is a five-bit unsigned integer
 800129c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80012a0:	08db      	lsrs	r3, r3, #3
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012aa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80012ae:	111b      	asrs	r3, r3, #4
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	4313      	orrs	r3, r2
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
   selfTest[1] = (rawData[1] >> 3) | (rawData[3] & 0x0C) >> 4 ; // YA_TEST result is a five-bit unsigned integer
 80012bc:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80012c0:	08db      	lsrs	r3, r3, #3
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
   selfTest[2] = (rawData[2] >> 3) | (rawData[3] & 0x03) >> 4 ; // ZA_TEST result is a five-bit unsigned integer
 80012c8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80012cc:	08db      	lsrs	r3, r3, #3
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
   // Extract the gyration test results first
   selfTest[3] = rawData[0]  & 0x1F ; // XG_TEST result is a five-bit unsigned integer
 80012d4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80012d8:	f003 031f 	and.w	r3, r3, #31
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
   selfTest[4] = rawData[1]  & 0x1F ; // YG_TEST result is a five-bit unsigned integer
 80012e2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80012e6:	f003 031f 	and.w	r3, r3, #31
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
   selfTest[5] = rawData[2]  & 0x1F ; // ZG_TEST result is a five-bit unsigned integer
 80012f0:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80012f4:	f003 031f 	and.w	r3, r3, #31
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
   // Process results to allow final comparison with factory set values
   factoryTrim[0] = (4096.0f*0.34f)*(powf( (0.92f/0.34f) , (((float)selfTest[0] - 1.0f)/30.0f))); // FT[Xa] factory trim calculation
 80012fe:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001302:	ee07 3a90 	vmov	s15, r3
 8001306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800130a:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8001514 <MPU9150_SelfTest+0x2e4>
 800130e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001312:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8001518 <MPU9150_SelfTest+0x2e8>
 8001316:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800131a:	4880      	ldr	r0, [pc, #512]	; (800151c <MPU9150_SelfTest+0x2ec>)
 800131c:	ee17 1a90 	vmov	r1, s15
 8001320:	f009 f922 	bl	800a568 <powf>
 8001324:	ee07 0a10 	vmov	s14, r0
 8001328:	eddf 7a7d 	vldr	s15, [pc, #500]	; 8001520 <MPU9150_SelfTest+0x2f0>
 800132c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001330:	edc7 7a06 	vstr	s15, [r7, #24]
   factoryTrim[1] = (4096.0f*0.34f)*(powf( (0.92f/0.34f) , (((float)selfTest[1] - 1.0f)/30.0f))); // FT[Ya] factory trim calculation
 8001334:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001338:	ee07 3a90 	vmov	s15, r3
 800133c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001340:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8001514 <MPU9150_SelfTest+0x2e4>
 8001344:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001348:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8001518 <MPU9150_SelfTest+0x2e8>
 800134c:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8001350:	4872      	ldr	r0, [pc, #456]	; (800151c <MPU9150_SelfTest+0x2ec>)
 8001352:	ee17 1a90 	vmov	r1, s15
 8001356:	f009 f907 	bl	800a568 <powf>
 800135a:	ee07 0a10 	vmov	s14, r0
 800135e:	eddf 7a70 	vldr	s15, [pc, #448]	; 8001520 <MPU9150_SelfTest+0x2f0>
 8001362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001366:	edc7 7a07 	vstr	s15, [r7, #28]
   factoryTrim[2] = (4096.0f*0.34f)*(powf( (0.92f/0.34f) , (((float)selfTest[2] - 1.0f)/30.0f))); // FT[Za] factory trim calculation
 800136a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800136e:	ee07 3a90 	vmov	s15, r3
 8001372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001376:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8001514 <MPU9150_SelfTest+0x2e4>
 800137a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800137e:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001518 <MPU9150_SelfTest+0x2e8>
 8001382:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8001386:	4865      	ldr	r0, [pc, #404]	; (800151c <MPU9150_SelfTest+0x2ec>)
 8001388:	ee17 1a90 	vmov	r1, s15
 800138c:	f009 f8ec 	bl	800a568 <powf>
 8001390:	ee07 0a10 	vmov	s14, r0
 8001394:	eddf 7a62 	vldr	s15, [pc, #392]	; 8001520 <MPU9150_SelfTest+0x2f0>
 8001398:	ee67 7a27 	vmul.f32	s15, s14, s15
 800139c:	edc7 7a08 	vstr	s15, [r7, #32]
   factoryTrim[3] =  ( 25.0f*131.0f)*(powf( 1.046f , ((float)selfTest[3] - 1.0f) ));             // FT[Xg] factory trim calculation
 80013a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013a4:	ee07 3a90 	vmov	s15, r3
 80013a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013ac:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8001514 <MPU9150_SelfTest+0x2e4>
 80013b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013b4:	485b      	ldr	r0, [pc, #364]	; (8001524 <MPU9150_SelfTest+0x2f4>)
 80013b6:	ee17 1a90 	vmov	r1, s15
 80013ba:	f009 f8d5 	bl	800a568 <powf>
 80013be:	ee07 0a10 	vmov	s14, r0
 80013c2:	eddf 7a59 	vldr	s15, [pc, #356]	; 8001528 <MPU9150_SelfTest+0x2f8>
 80013c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ca:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
   factoryTrim[4] =  (-25.0f*131.0f)*(powf( 1.046f , ((float)selfTest[4] - 1.0f) ));             // FT[Yg] factory trim calculation
 80013ce:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80013d2:	ee07 3a90 	vmov	s15, r3
 80013d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013da:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001514 <MPU9150_SelfTest+0x2e4>
 80013de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013e2:	4850      	ldr	r0, [pc, #320]	; (8001524 <MPU9150_SelfTest+0x2f4>)
 80013e4:	ee17 1a90 	vmov	r1, s15
 80013e8:	f009 f8be 	bl	800a568 <powf>
 80013ec:	ee07 0a10 	vmov	s14, r0
 80013f0:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800152c <MPU9150_SelfTest+0x2fc>
 80013f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013f8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
   factoryTrim[5] =  ( 25.0f*131.0f)*(powf( 1.046f , ((float)selfTest[5] - 1.0f) ));             // FT[Zg] factory trim calculation
 80013fc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001400:	ee07 3a90 	vmov	s15, r3
 8001404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001408:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8001514 <MPU9150_SelfTest+0x2e4>
 800140c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001410:	4844      	ldr	r0, [pc, #272]	; (8001524 <MPU9150_SelfTest+0x2f4>)
 8001412:	ee17 1a90 	vmov	r1, s15
 8001416:	f009 f8a7 	bl	800a568 <powf>
 800141a:	ee07 0a10 	vmov	s14, r0
 800141e:	eddf 7a42 	vldr	s15, [pc, #264]	; 8001528 <MPU9150_SelfTest+0x2f8>
 8001422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001426:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

   // Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
   // To get to percent, must multiply by 100 and subtract result from 100
   for (int i = 0; i < 6; i++)
 800142a:	2300      	movs	r3, #0
 800142c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800142e:	e02f      	b.n	8001490 <MPU9150_SelfTest+0x260>
	   result[i] = 100.0f + 100.0f*((float)selfTest[i] - factoryTrim[i])/factoryTrim[i]; // Report percent differences
 8001430:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001436:	4413      	add	r3, r2
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	ee07 3a90 	vmov	s15, r3
 800143e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800144a:	4413      	add	r3, r2
 800144c:	3b28      	subs	r3, #40	; 0x28
 800144e:	edd3 7a00 	vldr	s15, [r3]
 8001452:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001456:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001530 <MPU9150_SelfTest+0x300>
 800145a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800145e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001466:	4413      	add	r3, r2
 8001468:	3b28      	subs	r3, #40	; 0x28
 800146a:	edd3 7a00 	vldr	s15, [r3]
 800146e:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8001472:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001530 <MPU9150_SelfTest+0x300>
 8001476:	ee77 7a87 	vadd.f32	s15, s15, s14
 800147a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001482:	4413      	add	r3, r2
 8001484:	3b40      	subs	r3, #64	; 0x40
 8001486:	edc3 7a00 	vstr	s15, [r3]
   factoryTrim[4] =  (-25.0f*131.0f)*(powf( 1.046f , ((float)selfTest[4] - 1.0f) ));             // FT[Yg] factory trim calculation
   factoryTrim[5] =  ( 25.0f*131.0f)*(powf( 1.046f , ((float)selfTest[5] - 1.0f) ));             // FT[Zg] factory trim calculation

   // Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
   // To get to percent, must multiply by 100 and subtract result from 100
   for (int i = 0; i < 6; i++)
 800148a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800148c:	3301      	adds	r3, #1
 800148e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001492:	2b05      	cmp	r3, #5
 8001494:	ddcc      	ble.n	8001430 <MPU9150_SelfTest+0x200>
	   result[i] = 100.0f + 100.0f*((float)selfTest[i] - factoryTrim[i])/factoryTrim[i]; // Report percent differences

   if(result[0] < 1.0f && result[1] < 1.0f && result[2] < 1.0f && result[3] < 1.0f && result[4] < 1.0f && result[5] < 1.0f)
 8001496:	edd7 7a00 	vldr	s15, [r7]
 800149a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001514 <MPU9150_SelfTest+0x2e4>
 800149e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a6:	d52e      	bpl.n	8001506 <MPU9150_SelfTest+0x2d6>
 80014a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ac:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001514 <MPU9150_SelfTest+0x2e4>
 80014b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b8:	d525      	bpl.n	8001506 <MPU9150_SelfTest+0x2d6>
 80014ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80014be:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001514 <MPU9150_SelfTest+0x2e4>
 80014c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ca:	d51c      	bpl.n	8001506 <MPU9150_SelfTest+0x2d6>
 80014cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80014d0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001514 <MPU9150_SelfTest+0x2e4>
 80014d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014dc:	d513      	bpl.n	8001506 <MPU9150_SelfTest+0x2d6>
 80014de:	edd7 7a04 	vldr	s15, [r7, #16]
 80014e2:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001514 <MPU9150_SelfTest+0x2e4>
 80014e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ee:	d50a      	bpl.n	8001506 <MPU9150_SelfTest+0x2d6>
 80014f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80014f4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001514 <MPU9150_SelfTest+0x2e4>
 80014f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001500:	d501      	bpl.n	8001506 <MPU9150_SelfTest+0x2d6>
	   return true;
 8001502:	2301      	movs	r3, #1
 8001504:	e000      	b.n	8001508 <MPU9150_SelfTest+0x2d8>
   else
	   return false;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	3740      	adds	r7, #64	; 0x40
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	48024000 	.word	0x48024000
 8001514:	3f800000 	.word	0x3f800000
 8001518:	41f00000 	.word	0x41f00000
 800151c:	402d2d2d 	.word	0x402d2d2d
 8001520:	44ae147b 	.word	0x44ae147b
 8001524:	3f85e354 	.word	0x3f85e354
 8001528:	454cb000 	.word	0x454cb000
 800152c:	c54cb000 	.word	0xc54cb000
 8001530:	42c80000 	.word	0x42c80000

08001534 <getGres>:
 *
 *
 *  \details Function sets a global variable
 */
void getGres(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
	switch (Gscale)
 8001538:	4b11      	ldr	r3, [pc, #68]	; (8001580 <getGres+0x4c>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b03      	cmp	r3, #3
 800153e:	d81b      	bhi.n	8001578 <getGres+0x44>
 8001540:	a201      	add	r2, pc, #4	; (adr r2, 8001548 <getGres+0x14>)
 8001542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001546:	bf00      	nop
 8001548:	08001559 	.word	0x08001559
 800154c:	08001561 	.word	0x08001561
 8001550:	08001569 	.word	0x08001569
 8001554:	08001571 	.word	0x08001571
	{
		// Possible gyro scales (and their register bit settings) are:
		// 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    	case GFS_250DPS:
    		gRes = 250.0f/32768.0f;
 8001558:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <getGres+0x50>)
 800155a:	4a0b      	ldr	r2, [pc, #44]	; (8001588 <getGres+0x54>)
 800155c:	601a      	str	r2, [r3, #0]
    		break;
 800155e:	e00b      	b.n	8001578 <getGres+0x44>
    	case GFS_500DPS:
    		gRes = 500.0f/32768.0f;
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <getGres+0x50>)
 8001562:	4a0a      	ldr	r2, [pc, #40]	; (800158c <getGres+0x58>)
 8001564:	601a      	str	r2, [r3, #0]
    		break;
 8001566:	e007      	b.n	8001578 <getGres+0x44>
    	case GFS_1000DPS:
    		gRes = 1000.0f/32768.0f;
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <getGres+0x50>)
 800156a:	4a09      	ldr	r2, [pc, #36]	; (8001590 <getGres+0x5c>)
 800156c:	601a      	str	r2, [r3, #0]
    		break;
 800156e:	e003      	b.n	8001578 <getGres+0x44>
    	case GFS_2000DPS:
    		gRes = 2000.0f/32768.0f;
 8001570:	4b04      	ldr	r3, [pc, #16]	; (8001584 <getGres+0x50>)
 8001572:	4a08      	ldr	r2, [pc, #32]	; (8001594 <getGres+0x60>)
 8001574:	601a      	str	r2, [r3, #0]
    		break;
 8001576:	bf00      	nop
	}
}
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	20000020 	.word	0x20000020
 8001584:	20000578 	.word	0x20000578
 8001588:	3bfa0000 	.word	0x3bfa0000
 800158c:	3c7a0000 	.word	0x3c7a0000
 8001590:	3cfa0000 	.word	0x3cfa0000
 8001594:	3d7a0000 	.word	0x3d7a0000

08001598 <getAres>:
 *  \brief sets Ares variable for calculating accelerometer value
 *  
 *  \details Function sets a global variable
 */
void getAres(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
	switch (Ascale)
 800159c:	4b13      	ldr	r3, [pc, #76]	; (80015ec <getAres+0x54>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b03      	cmp	r3, #3
 80015a2:	d81f      	bhi.n	80015e4 <getAres+0x4c>
 80015a4:	a201      	add	r2, pc, #4	; (adr r2, 80015ac <getAres+0x14>)
 80015a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015aa:	bf00      	nop
 80015ac:	080015bd 	.word	0x080015bd
 80015b0:	080015c7 	.word	0x080015c7
 80015b4:	080015d1 	.word	0x080015d1
 80015b8:	080015db 	.word	0x080015db
	{
		// Possible accelerometer scales (and their register bit settings) are:
		// 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    	case AFS_2G:
    		aRes = 2.0f/32768.0f;
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <getAres+0x58>)
 80015be:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80015c2:	601a      	str	r2, [r3, #0]
    		break;
 80015c4:	e00e      	b.n	80015e4 <getAres+0x4c>
    	case AFS_4G:
    		aRes = 4.0f/32768.0f;
 80015c6:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <getAres+0x58>)
 80015c8:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 80015cc:	601a      	str	r2, [r3, #0]
    		break;
 80015ce:	e009      	b.n	80015e4 <getAres+0x4c>
    	case AFS_8G:
    		aRes = 8.0f/32768.0f;
 80015d0:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <getAres+0x58>)
 80015d2:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 80015d6:	601a      	str	r2, [r3, #0]
    		break;
 80015d8:	e004      	b.n	80015e4 <getAres+0x4c>
    	case AFS_16G:
    		aRes = 16.0f/32768.0f;
 80015da:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <getAres+0x58>)
 80015dc:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 80015e0:	601a      	str	r2, [r3, #0]
    		break;
 80015e2:	bf00      	nop
	}
}
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	20000021 	.word	0x20000021
 80015f0:	20000574 	.word	0x20000574

080015f4 <GetAngles>:
 *  \param [in] angles pointer to the output
 *
 *  \details calculates the angles with the selected algorithm
 */
void GetAngles(float* angles)
{
 80015f4:	b590      	push	{r4, r7, lr}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
	angles[2]=kalAngleX;
#elif ATTITUDEALGORITHM == 2
	/*if (YAW_OFFSET == 0.0)
		YAW_OFFSET = atan2(2.0f * (q[1] * q[2] + q[0] * q[3]), q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3]) * RAD_TO_DEG;
	angles[0]=atan2(2.0f * (q[1] * q[2] + q[0] * q[3]), q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3]) * RAD_TO_DEG - YAW_OFFSET;*/
	angles[0]=gyro[2]*RAD_TO_DEG;
 80015fc:	4b3e      	ldr	r3, [pc, #248]	; (80016f8 <GetAngles+0x104>)
 80015fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8001602:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80016fc <GetAngles+0x108>
 8001606:	ee67 7a87 	vmul.f32	s15, s15, s14
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	edc3 7a00 	vstr	s15, [r3]
	angles[1]= asinf(2.0f * (q[1] * q[3] - q[0] * q[2])) * RAD_TO_DEG;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	1d1c      	adds	r4, r3, #4
 8001614:	4b3a      	ldr	r3, [pc, #232]	; (8001700 <GetAngles+0x10c>)
 8001616:	ed93 7a01 	vldr	s14, [r3, #4]
 800161a:	4b39      	ldr	r3, [pc, #228]	; (8001700 <GetAngles+0x10c>)
 800161c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001620:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001624:	4b36      	ldr	r3, [pc, #216]	; (8001700 <GetAngles+0x10c>)
 8001626:	edd3 6a00 	vldr	s13, [r3]
 800162a:	4b35      	ldr	r3, [pc, #212]	; (8001700 <GetAngles+0x10c>)
 800162c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001630:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001634:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001638:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800163c:	ee17 0a90 	vmov	r0, s15
 8001640:	f008 ff3e 	bl	800a4c0 <asinf>
 8001644:	ee07 0a10 	vmov	s14, r0
 8001648:	eddf 7a2c 	vldr	s15, [pc, #176]	; 80016fc <GetAngles+0x108>
 800164c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001650:	edc4 7a00 	vstr	s15, [r4]
	angles[2]= -atan2f(2.0f * (q[0] * q[1] + q[2] * q[3]), q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3]) * RAD_TO_DEG;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f103 0408 	add.w	r4, r3, #8
 800165a:	4b29      	ldr	r3, [pc, #164]	; (8001700 <GetAngles+0x10c>)
 800165c:	ed93 7a00 	vldr	s14, [r3]
 8001660:	4b27      	ldr	r3, [pc, #156]	; (8001700 <GetAngles+0x10c>)
 8001662:	edd3 7a01 	vldr	s15, [r3, #4]
 8001666:	ee27 7a27 	vmul.f32	s14, s14, s15
 800166a:	4b25      	ldr	r3, [pc, #148]	; (8001700 <GetAngles+0x10c>)
 800166c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001670:	4b23      	ldr	r3, [pc, #140]	; (8001700 <GetAngles+0x10c>)
 8001672:	edd3 7a03 	vldr	s15, [r3, #12]
 8001676:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800167a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800167e:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8001682:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <GetAngles+0x10c>)
 8001684:	ed93 7a00 	vldr	s14, [r3]
 8001688:	4b1d      	ldr	r3, [pc, #116]	; (8001700 <GetAngles+0x10c>)
 800168a:	edd3 7a00 	vldr	s15, [r3]
 800168e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001692:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <GetAngles+0x10c>)
 8001694:	edd3 6a01 	vldr	s13, [r3, #4]
 8001698:	4b19      	ldr	r3, [pc, #100]	; (8001700 <GetAngles+0x10c>)
 800169a:	edd3 7a01 	vldr	s15, [r3, #4]
 800169e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016a6:	4b16      	ldr	r3, [pc, #88]	; (8001700 <GetAngles+0x10c>)
 80016a8:	edd3 6a02 	vldr	s13, [r3, #8]
 80016ac:	4b14      	ldr	r3, [pc, #80]	; (8001700 <GetAngles+0x10c>)
 80016ae:	edd3 7a02 	vldr	s15, [r3, #8]
 80016b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <GetAngles+0x10c>)
 80016bc:	edd3 6a03 	vldr	s13, [r3, #12]
 80016c0:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <GetAngles+0x10c>)
 80016c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80016c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ce:	ee16 0a10 	vmov	r0, s12
 80016d2:	ee17 1a90 	vmov	r1, s15
 80016d6:	f008 ff45 	bl	800a564 <atan2f>
 80016da:	4603      	mov	r3, r0
 80016dc:	ee07 3a90 	vmov	s15, r3
 80016e0:	eef1 7a67 	vneg.f32	s15, s15
 80016e4:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80016fc <GetAngles+0x108>
 80016e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016ec:	edc4 7a00 	vstr	s15, [r4]
#endif
}
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd90      	pop	{r4, r7, pc}
 80016f6:	bf00      	nop
 80016f8:	200003d0 	.word	0x200003d0
 80016fc:	42652ee1 	.word	0x42652ee1
 8001700:	20000024 	.word	0x20000024

08001704 <ERU1_0_IRQHandler>:
 *  
 *  \details gets called when the mpu has new data and sets the interrupt pin\n
 *  reads in the raw data and processes it
 */
void MPU9X50_Ext_Int_ISR(void)
{
 8001704:	b5b0      	push	{r4, r5, r7, lr}
 8001706:	b08e      	sub	sp, #56	; 0x38
 8001708:	af04      	add	r7, sp, #16
	//uint8_t data[19];
	uint8_t data[12];
	uint8_t mpuIntStatus;
	//uint8_t magDRDY;

	dcounter++;
 800170a:	4b90      	ldr	r3, [pc, #576]	; (800194c <ERU1_0_IRQHandler+0x248>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	3301      	adds	r3, #1
 8001710:	4a8e      	ldr	r2, [pc, #568]	; (800194c <ERU1_0_IRQHandler+0x248>)
 8001712:	6013      	str	r3, [r2, #0]

		mpuIntStatus = I2Cdev_readByte(MPU9x50_USIC,MPU9150_ADDRESS, INT_STATUS);
 8001714:	488e      	ldr	r0, [pc, #568]	; (8001950 <ERU1_0_IRQHandler+0x24c>)
 8001716:	21d2      	movs	r1, #210	; 0xd2
 8001718:	223a      	movs	r2, #58	; 0x3a
 800171a:	f7fe ffbf 	bl	800069c <I2Cdev_readByte>
 800171e:	4603      	mov	r3, r0
 8001720:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		//FIFO-Count
		I2Cdev_readBytes(MPU9x50_USIC,MPU9150_ADDRESS, FIFO_COUNTH, 2, data);
 8001724:	f107 0310 	add.w	r3, r7, #16
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	4889      	ldr	r0, [pc, #548]	; (8001950 <ERU1_0_IRQHandler+0x24c>)
 800172c:	21d2      	movs	r1, #210	; 0xd2
 800172e:	2272      	movs	r2, #114	; 0x72
 8001730:	2302      	movs	r3, #2
 8001732:	f7ff f845 	bl	80007c0 <I2Cdev_readBytes>
		uint16_t fifoCount = (((uint16_t)data[0]) << 8) | data[1];
 8001736:	7c3b      	ldrb	r3, [r7, #16]
 8001738:	021b      	lsls	r3, r3, #8
 800173a:	b29a      	uxth	r2, r3
 800173c:	7c7b      	ldrb	r3, [r7, #17]
 800173e:	b29b      	uxth	r3, r3
 8001740:	4313      	orrs	r3, r2
 8001742:	b29b      	uxth	r3, r3
 8001744:	84bb      	strh	r3, [r7, #36]	; 0x24

		if ((mpuIntStatus & 0x10) || fifoCount == 1024)
 8001746:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800174a:	f003 0310 	and.w	r3, r3, #16
 800174e:	2b00      	cmp	r3, #0
 8001750:	d103      	bne.n	800175a <ERU1_0_IRQHandler+0x56>
 8001752:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001758:	d106      	bne.n	8001768 <ERU1_0_IRQHandler+0x64>
		{
			//Reset FIFO
			I2Cdev_writeByte(MPU9x50_USIC,MPU9150_ADDRESS, USER_CTRL, 0x64);
 800175a:	487d      	ldr	r0, [pc, #500]	; (8001950 <ERU1_0_IRQHandler+0x24c>)
 800175c:	21d2      	movs	r1, #210	; 0xd2
 800175e:	226a      	movs	r2, #106	; 0x6a
 8001760:	2364      	movs	r3, #100	; 0x64
 8001762:	f7fe ff15 	bl	8000590 <I2Cdev_writeByte>
 8001766:	e377      	b.n	8001e58 <ERU1_0_IRQHandler+0x754>
		}
		else if (mpuIntStatus & 0x01)
 8001768:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	2b00      	cmp	r3, #0
 8001772:	f000 8371 	beq.w	8001e58 <ERU1_0_IRQHandler+0x754>
		{
			//Read from FIFO
			//if (I2Cdev_readBytes(MPU9x50_USIC,MPU9150_ADDRESS, FIFO_R_W, 19, data))
			if (I2Cdev_readBytes(MPU9x50_USIC,MPU9150_ADDRESS, FIFO_R_W, 12, data))
 8001776:	f107 0310 	add.w	r3, r7, #16
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	4874      	ldr	r0, [pc, #464]	; (8001950 <ERU1_0_IRQHandler+0x24c>)
 800177e:	21d2      	movs	r1, #210	; 0xd2
 8001780:	2274      	movs	r2, #116	; 0x74
 8001782:	230c      	movs	r3, #12
 8001784:	f7ff f81c 	bl	80007c0 <I2Cdev_readBytes>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	f000 8364 	beq.w	8001e58 <ERU1_0_IRQHandler+0x754>
			{
				// Read the x/y/z adc values
				accRaw[0]=((int16_t)data[0] << 8) | data[1];
 8001790:	7c3b      	ldrb	r3, [r7, #16]
 8001792:	021b      	lsls	r3, r3, #8
 8001794:	b29a      	uxth	r2, r3
 8001796:	7c7b      	ldrb	r3, [r7, #17]
 8001798:	b29b      	uxth	r3, r3
 800179a:	4313      	orrs	r3, r2
 800179c:	b29a      	uxth	r2, r3
 800179e:	4b6d      	ldr	r3, [pc, #436]	; (8001954 <ERU1_0_IRQHandler+0x250>)
 80017a0:	801a      	strh	r2, [r3, #0]
				accRaw[1]=((int16_t)data[2] << 8) | data[3];
 80017a2:	7cbb      	ldrb	r3, [r7, #18]
 80017a4:	021b      	lsls	r3, r3, #8
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	7cfb      	ldrb	r3, [r7, #19]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	4313      	orrs	r3, r2
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	4b68      	ldr	r3, [pc, #416]	; (8001954 <ERU1_0_IRQHandler+0x250>)
 80017b2:	805a      	strh	r2, [r3, #2]
				accRaw[2]=((int16_t)data[4] << 8) | data[5];
 80017b4:	7d3b      	ldrb	r3, [r7, #20]
 80017b6:	021b      	lsls	r3, r3, #8
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	7d7b      	ldrb	r3, [r7, #21]
 80017bc:	b29b      	uxth	r3, r3
 80017be:	4313      	orrs	r3, r2
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	4b64      	ldr	r3, [pc, #400]	; (8001954 <ERU1_0_IRQHandler+0x250>)
 80017c4:	809a      	strh	r2, [r3, #4]

				// Read the x/y/z adc values
				gyroRaw[0]=((int16_t)data[6] << 8) | data[7];
 80017c6:	7dbb      	ldrb	r3, [r7, #22]
 80017c8:	021b      	lsls	r3, r3, #8
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	7dfb      	ldrb	r3, [r7, #23]
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	4313      	orrs	r3, r2
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	4b60      	ldr	r3, [pc, #384]	; (8001958 <ERU1_0_IRQHandler+0x254>)
 80017d6:	801a      	strh	r2, [r3, #0]
				gyroRaw[1]=((int16_t)data[8] << 8) | data[9];
 80017d8:	7e3b      	ldrb	r3, [r7, #24]
 80017da:	021b      	lsls	r3, r3, #8
 80017dc:	b29a      	uxth	r2, r3
 80017de:	7e7b      	ldrb	r3, [r7, #25]
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	4313      	orrs	r3, r2
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	4b5c      	ldr	r3, [pc, #368]	; (8001958 <ERU1_0_IRQHandler+0x254>)
 80017e8:	805a      	strh	r2, [r3, #2]
				gyroRaw[2]=((int16_t)data[10] << 8) | data[11];
 80017ea:	7ebb      	ldrb	r3, [r7, #26]
 80017ec:	021b      	lsls	r3, r3, #8
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	7efb      	ldrb	r3, [r7, #27]
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	4313      	orrs	r3, r2
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	4b57      	ldr	r3, [pc, #348]	; (8001958 <ERU1_0_IRQHandler+0x254>)
 80017fa:	809a      	strh	r2, [r3, #4]

				if (calib)
 80017fc:	4b57      	ldr	r3, [pc, #348]	; (800195c <ERU1_0_IRQHandler+0x258>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	f000 828f 	beq.w	8001d24 <ERU1_0_IRQHandler+0x620>
				{
					calib_cnt++;
 8001806:	4b56      	ldr	r3, [pc, #344]	; (8001960 <ERU1_0_IRQHandler+0x25c>)
 8001808:	881b      	ldrh	r3, [r3, #0]
 800180a:	b29b      	uxth	r3, r3
 800180c:	b29b      	uxth	r3, r3
 800180e:	3301      	adds	r3, #1
 8001810:	b29b      	uxth	r3, r3
 8001812:	b29a      	uxth	r2, r3
 8001814:	4b52      	ldr	r3, [pc, #328]	; (8001960 <ERU1_0_IRQHandler+0x25c>)
 8001816:	801a      	strh	r2, [r3, #0]

					accBias[0]+=accRaw[0];
 8001818:	4b52      	ldr	r3, [pc, #328]	; (8001964 <ERU1_0_IRQHandler+0x260>)
 800181a:	881b      	ldrh	r3, [r3, #0]
 800181c:	b29a      	uxth	r2, r3
 800181e:	4b4d      	ldr	r3, [pc, #308]	; (8001954 <ERU1_0_IRQHandler+0x250>)
 8001820:	881b      	ldrh	r3, [r3, #0]
 8001822:	b29b      	uxth	r3, r3
 8001824:	4413      	add	r3, r2
 8001826:	b29b      	uxth	r3, r3
 8001828:	b29a      	uxth	r2, r3
 800182a:	4b4e      	ldr	r3, [pc, #312]	; (8001964 <ERU1_0_IRQHandler+0x260>)
 800182c:	801a      	strh	r2, [r3, #0]
					accBias[1]+=accRaw[1];
 800182e:	4b4d      	ldr	r3, [pc, #308]	; (8001964 <ERU1_0_IRQHandler+0x260>)
 8001830:	885b      	ldrh	r3, [r3, #2]
 8001832:	b29a      	uxth	r2, r3
 8001834:	4b47      	ldr	r3, [pc, #284]	; (8001954 <ERU1_0_IRQHandler+0x250>)
 8001836:	885b      	ldrh	r3, [r3, #2]
 8001838:	b29b      	uxth	r3, r3
 800183a:	4413      	add	r3, r2
 800183c:	b29b      	uxth	r3, r3
 800183e:	b29a      	uxth	r2, r3
 8001840:	4b48      	ldr	r3, [pc, #288]	; (8001964 <ERU1_0_IRQHandler+0x260>)
 8001842:	805a      	strh	r2, [r3, #2]

					//Remove gravity
					switch (Ascale)
 8001844:	4b48      	ldr	r3, [pc, #288]	; (8001968 <ERU1_0_IRQHandler+0x264>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b03      	cmp	r3, #3
 800184a:	d847      	bhi.n	80018dc <ERU1_0_IRQHandler+0x1d8>
 800184c:	a201      	add	r2, pc, #4	; (adr r2, 8001854 <ERU1_0_IRQHandler+0x150>)
 800184e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001852:	bf00      	nop
 8001854:	08001865 	.word	0x08001865
 8001858:	08001883 	.word	0x08001883
 800185c:	080018a1 	.word	0x080018a1
 8001860:	080018bf 	.word	0x080018bf
					{
						case AFS_2G:
							accBias[2]+=accRaw[2]-16384;
 8001864:	4b3f      	ldr	r3, [pc, #252]	; (8001964 <ERU1_0_IRQHandler+0x260>)
 8001866:	889b      	ldrh	r3, [r3, #4]
 8001868:	b29a      	uxth	r2, r3
 800186a:	4b3a      	ldr	r3, [pc, #232]	; (8001954 <ERU1_0_IRQHandler+0x250>)
 800186c:	889b      	ldrh	r3, [r3, #4]
 800186e:	b29b      	uxth	r3, r3
 8001870:	4413      	add	r3, r2
 8001872:	b29b      	uxth	r3, r3
 8001874:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8001878:	b29b      	uxth	r3, r3
 800187a:	b29a      	uxth	r2, r3
 800187c:	4b39      	ldr	r3, [pc, #228]	; (8001964 <ERU1_0_IRQHandler+0x260>)
 800187e:	809a      	strh	r2, [r3, #4]
							break;
 8001880:	e02c      	b.n	80018dc <ERU1_0_IRQHandler+0x1d8>
						case AFS_4G:
							accBias[2]+=accRaw[2]-8192;
 8001882:	4b38      	ldr	r3, [pc, #224]	; (8001964 <ERU1_0_IRQHandler+0x260>)
 8001884:	889b      	ldrh	r3, [r3, #4]
 8001886:	b29a      	uxth	r2, r3
 8001888:	4b32      	ldr	r3, [pc, #200]	; (8001954 <ERU1_0_IRQHandler+0x250>)
 800188a:	889b      	ldrh	r3, [r3, #4]
 800188c:	b29b      	uxth	r3, r3
 800188e:	4413      	add	r3, r2
 8001890:	b29b      	uxth	r3, r3
 8001892:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8001896:	b29b      	uxth	r3, r3
 8001898:	b29a      	uxth	r2, r3
 800189a:	4b32      	ldr	r3, [pc, #200]	; (8001964 <ERU1_0_IRQHandler+0x260>)
 800189c:	809a      	strh	r2, [r3, #4]
							break;
 800189e:	e01d      	b.n	80018dc <ERU1_0_IRQHandler+0x1d8>
						case AFS_8G:
							accBias[2]+=accRaw[2]-4096;
 80018a0:	4b30      	ldr	r3, [pc, #192]	; (8001964 <ERU1_0_IRQHandler+0x260>)
 80018a2:	889b      	ldrh	r3, [r3, #4]
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	4b2b      	ldr	r3, [pc, #172]	; (8001954 <ERU1_0_IRQHandler+0x250>)
 80018a8:	889b      	ldrh	r3, [r3, #4]
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	4413      	add	r3, r2
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	4b2a      	ldr	r3, [pc, #168]	; (8001964 <ERU1_0_IRQHandler+0x260>)
 80018ba:	809a      	strh	r2, [r3, #4]
							break;
 80018bc:	e00e      	b.n	80018dc <ERU1_0_IRQHandler+0x1d8>
						case AFS_16G:
							accBias[2]+=accRaw[2]-2048;
 80018be:	4b29      	ldr	r3, [pc, #164]	; (8001964 <ERU1_0_IRQHandler+0x260>)
 80018c0:	889b      	ldrh	r3, [r3, #4]
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	4b23      	ldr	r3, [pc, #140]	; (8001954 <ERU1_0_IRQHandler+0x250>)
 80018c6:	889b      	ldrh	r3, [r3, #4]
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	4413      	add	r3, r2
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	4b23      	ldr	r3, [pc, #140]	; (8001964 <ERU1_0_IRQHandler+0x260>)
 80018d8:	809a      	strh	r2, [r3, #4]
							break;
 80018da:	bf00      	nop
					}

					gyroBias[0]+=gyroRaw[0];
 80018dc:	4b23      	ldr	r3, [pc, #140]	; (800196c <ERU1_0_IRQHandler+0x268>)
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	4b1d      	ldr	r3, [pc, #116]	; (8001958 <ERU1_0_IRQHandler+0x254>)
 80018e4:	881b      	ldrh	r3, [r3, #0]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	4413      	add	r3, r2
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	4b1f      	ldr	r3, [pc, #124]	; (800196c <ERU1_0_IRQHandler+0x268>)
 80018f0:	801a      	strh	r2, [r3, #0]
					gyroBias[1]+=gyroRaw[1];
 80018f2:	4b1e      	ldr	r3, [pc, #120]	; (800196c <ERU1_0_IRQHandler+0x268>)
 80018f4:	885b      	ldrh	r3, [r3, #2]
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	4b17      	ldr	r3, [pc, #92]	; (8001958 <ERU1_0_IRQHandler+0x254>)
 80018fa:	885b      	ldrh	r3, [r3, #2]
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	4413      	add	r3, r2
 8001900:	b29b      	uxth	r3, r3
 8001902:	b29a      	uxth	r2, r3
 8001904:	4b19      	ldr	r3, [pc, #100]	; (800196c <ERU1_0_IRQHandler+0x268>)
 8001906:	805a      	strh	r2, [r3, #2]
					gyroBias[2]+=gyroRaw[2];
 8001908:	4b18      	ldr	r3, [pc, #96]	; (800196c <ERU1_0_IRQHandler+0x268>)
 800190a:	889b      	ldrh	r3, [r3, #4]
 800190c:	b29a      	uxth	r2, r3
 800190e:	4b12      	ldr	r3, [pc, #72]	; (8001958 <ERU1_0_IRQHandler+0x254>)
 8001910:	889b      	ldrh	r3, [r3, #4]
 8001912:	b29b      	uxth	r3, r3
 8001914:	4413      	add	r3, r2
 8001916:	b29b      	uxth	r3, r3
 8001918:	b29a      	uxth	r2, r3
 800191a:	4b14      	ldr	r3, [pc, #80]	; (800196c <ERU1_0_IRQHandler+0x268>)
 800191c:	809a      	strh	r2, [r3, #4]

					if (calib_cnt > 512)
 800191e:	4b10      	ldr	r3, [pc, #64]	; (8001960 <ERU1_0_IRQHandler+0x25c>)
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	b21b      	sxth	r3, r3
 8001924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001928:	f340 8296 	ble.w	8001e58 <ERU1_0_IRQHandler+0x754>
					{
						switch (Ascale)
 800192c:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <ERU1_0_IRQHandler+0x264>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b03      	cmp	r3, #3
 8001932:	d875      	bhi.n	8001a20 <ERU1_0_IRQHandler+0x31c>
 8001934:	a201      	add	r2, pc, #4	; (adr r2, 800193c <ERU1_0_IRQHandler+0x238>)
 8001936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800193a:	bf00      	nop
 800193c:	08001971 	.word	0x08001971
 8001940:	0800199d 	.word	0x0800199d
 8001944:	080019c9 	.word	0x080019c9
 8001948:	080019f5 	.word	0x080019f5
 800194c:	200003f4 	.word	0x200003f4
 8001950:	48024000 	.word	0x48024000
 8001954:	2000056c 	.word	0x2000056c
 8001958:	20000564 	.word	0x20000564
 800195c:	20000034 	.word	0x20000034
 8001960:	200003f8 	.word	0x200003f8
 8001964:	200003dc 	.word	0x200003dc
 8001968:	20000021 	.word	0x20000021
 800196c:	200003e4 	.word	0x200003e4
						{
							case AFS_2G:
								accBias[0] = accBias[0] >> 12;
 8001970:	4b8b      	ldr	r3, [pc, #556]	; (8001ba0 <ERU1_0_IRQHandler+0x49c>)
 8001972:	881b      	ldrh	r3, [r3, #0]
 8001974:	b21b      	sxth	r3, r3
 8001976:	131b      	asrs	r3, r3, #12
 8001978:	b29a      	uxth	r2, r3
 800197a:	4b89      	ldr	r3, [pc, #548]	; (8001ba0 <ERU1_0_IRQHandler+0x49c>)
 800197c:	801a      	strh	r2, [r3, #0]
								accBias[1] = accBias[1] >> 12;
 800197e:	4b88      	ldr	r3, [pc, #544]	; (8001ba0 <ERU1_0_IRQHandler+0x49c>)
 8001980:	885b      	ldrh	r3, [r3, #2]
 8001982:	b21b      	sxth	r3, r3
 8001984:	131b      	asrs	r3, r3, #12
 8001986:	b29a      	uxth	r2, r3
 8001988:	4b85      	ldr	r3, [pc, #532]	; (8001ba0 <ERU1_0_IRQHandler+0x49c>)
 800198a:	805a      	strh	r2, [r3, #2]
								accBias[2] = accBias[2] >> 12;
 800198c:	4b84      	ldr	r3, [pc, #528]	; (8001ba0 <ERU1_0_IRQHandler+0x49c>)
 800198e:	889b      	ldrh	r3, [r3, #4]
 8001990:	b21b      	sxth	r3, r3
 8001992:	131b      	asrs	r3, r3, #12
 8001994:	b29a      	uxth	r2, r3
 8001996:	4b82      	ldr	r3, [pc, #520]	; (8001ba0 <ERU1_0_IRQHandler+0x49c>)
 8001998:	809a      	strh	r2, [r3, #4]
								break;
 800199a:	e041      	b.n	8001a20 <ERU1_0_IRQHandler+0x31c>
							case AFS_4G:
								accBias[0] = accBias[0] >> 11;
 800199c:	4b80      	ldr	r3, [pc, #512]	; (8001ba0 <ERU1_0_IRQHandler+0x49c>)
 800199e:	881b      	ldrh	r3, [r3, #0]
 80019a0:	b21b      	sxth	r3, r3
 80019a2:	12db      	asrs	r3, r3, #11
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	4b7e      	ldr	r3, [pc, #504]	; (8001ba0 <ERU1_0_IRQHandler+0x49c>)
 80019a8:	801a      	strh	r2, [r3, #0]
								accBias[1] = accBias[1] >> 11;
 80019aa:	4b7d      	ldr	r3, [pc, #500]	; (8001ba0 <ERU1_0_IRQHandler+0x49c>)
 80019ac:	885b      	ldrh	r3, [r3, #2]
 80019ae:	b21b      	sxth	r3, r3
 80019b0:	12db      	asrs	r3, r3, #11
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	4b7a      	ldr	r3, [pc, #488]	; (8001ba0 <ERU1_0_IRQHandler+0x49c>)
 80019b6:	805a      	strh	r2, [r3, #2]
								accBias[2] = accBias[2] >> 11;
 80019b8:	4b79      	ldr	r3, [pc, #484]	; (8001ba0 <ERU1_0_IRQHandler+0x49c>)
 80019ba:	889b      	ldrh	r3, [r3, #4]
 80019bc:	b21b      	sxth	r3, r3
 80019be:	12db      	asrs	r3, r3, #11
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	4b77      	ldr	r3, [pc, #476]	; (8001ba0 <ERU1_0_IRQHandler+0x49c>)
 80019c4:	809a      	strh	r2, [r3, #4]
								break;
 80019c6:	e02b      	b.n	8001a20 <ERU1_0_IRQHandler+0x31c>
							case AFS_8G:
								accBias[0] = accBias[0] >> 10;
 80019c8:	4b75      	ldr	r3, [pc, #468]	; (8001ba0 <ERU1_0_IRQHandler+0x49c>)
 80019ca:	881b      	ldrh	r3, [r3, #0]
 80019cc:	b21b      	sxth	r3, r3
 80019ce:	129b      	asrs	r3, r3, #10
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	4b73      	ldr	r3, [pc, #460]	; (8001ba0 <ERU1_0_IRQHandler+0x49c>)
 80019d4:	801a      	strh	r2, [r3, #0]
								accBias[1] = accBias[1] >> 10;
 80019d6:	4b72      	ldr	r3, [pc, #456]	; (8001ba0 <ERU1_0_IRQHandler+0x49c>)
 80019d8:	885b      	ldrh	r3, [r3, #2]
 80019da:	b21b      	sxth	r3, r3
 80019dc:	129b      	asrs	r3, r3, #10
 80019de:	b29a      	uxth	r2, r3
 80019e0:	4b6f      	ldr	r3, [pc, #444]	; (8001ba0 <ERU1_0_IRQHandler+0x49c>)
 80019e2:	805a      	strh	r2, [r3, #2]
								accBias[2] = accBias[2] >> 10;
 80019e4:	4b6e      	ldr	r3, [pc, #440]	; (8001ba0 <ERU1_0_IRQHandler+0x49c>)
 80019e6:	889b      	ldrh	r3, [r3, #4]
 80019e8:	b21b      	sxth	r3, r3
 80019ea:	129b      	asrs	r3, r3, #10
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	4b6c      	ldr	r3, [pc, #432]	; (8001ba0 <ERU1_0_IRQHandler+0x49c>)
 80019f0:	809a      	strh	r2, [r3, #4]
								break;
 80019f2:	e015      	b.n	8001a20 <ERU1_0_IRQHandler+0x31c>
							case AFS_16G:
								accBias[0] = accBias[0] >> 9;
 80019f4:	4b6a      	ldr	r3, [pc, #424]	; (8001ba0 <ERU1_0_IRQHandler+0x49c>)
 80019f6:	881b      	ldrh	r3, [r3, #0]
 80019f8:	b21b      	sxth	r3, r3
 80019fa:	125b      	asrs	r3, r3, #9
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	4b68      	ldr	r3, [pc, #416]	; (8001ba0 <ERU1_0_IRQHandler+0x49c>)
 8001a00:	801a      	strh	r2, [r3, #0]
								accBias[1] = accBias[1] >> 9;
 8001a02:	4b67      	ldr	r3, [pc, #412]	; (8001ba0 <ERU1_0_IRQHandler+0x49c>)
 8001a04:	885b      	ldrh	r3, [r3, #2]
 8001a06:	b21b      	sxth	r3, r3
 8001a08:	125b      	asrs	r3, r3, #9
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	4b64      	ldr	r3, [pc, #400]	; (8001ba0 <ERU1_0_IRQHandler+0x49c>)
 8001a0e:	805a      	strh	r2, [r3, #2]
								accBias[2] = accBias[2] >> 9;
 8001a10:	4b63      	ldr	r3, [pc, #396]	; (8001ba0 <ERU1_0_IRQHandler+0x49c>)
 8001a12:	889b      	ldrh	r3, [r3, #4]
 8001a14:	b21b      	sxth	r3, r3
 8001a16:	125b      	asrs	r3, r3, #9
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	4b61      	ldr	r3, [pc, #388]	; (8001ba0 <ERU1_0_IRQHandler+0x49c>)
 8001a1c:	809a      	strh	r2, [r3, #4]
								break;
 8001a1e:	bf00      	nop
						}

						int32_t acc_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
 8001a20:	2300      	movs	r3, #0
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	2300      	movs	r3, #0
 8001a26:	60bb      	str	r3, [r7, #8]
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60fb      	str	r3, [r7, #12]
						I2Cdev_readBytes(MPU9x50_USIC, MPU9150_ADDRESS, XA_OFFSET_H, 2, data); // Read factory accelerometer trim values
 8001a2c:	f107 0310 	add.w	r3, r7, #16
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	485c      	ldr	r0, [pc, #368]	; (8001ba4 <ERU1_0_IRQHandler+0x4a0>)
 8001a34:	21d2      	movs	r1, #210	; 0xd2
 8001a36:	2277      	movs	r2, #119	; 0x77
 8001a38:	2302      	movs	r3, #2
 8001a3a:	f7fe fec1 	bl	80007c0 <I2Cdev_readBytes>
						acc_bias_reg[0] = ((int16_t) ((int16_t)data[0] << 8) | data[1]) >> 1;
 8001a3e:	7c3b      	ldrb	r3, [r7, #16]
 8001a40:	021b      	lsls	r3, r3, #8
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	b21b      	sxth	r3, r3
 8001a46:	7c7a      	ldrb	r2, [r7, #17]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	105b      	asrs	r3, r3, #1
 8001a4c:	607b      	str	r3, [r7, #4]
						I2Cdev_readBytes(MPU9x50_USIC, MPU9150_ADDRESS, YA_OFFSET_H, 2, data);
 8001a4e:	f107 0310 	add.w	r3, r7, #16
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	4853      	ldr	r0, [pc, #332]	; (8001ba4 <ERU1_0_IRQHandler+0x4a0>)
 8001a56:	21d2      	movs	r1, #210	; 0xd2
 8001a58:	227a      	movs	r2, #122	; 0x7a
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	f7fe feb0 	bl	80007c0 <I2Cdev_readBytes>
						acc_bias_reg[1] = ((int16_t) ((int16_t)data[0] << 8) | data[1]) >> 1;
 8001a60:	7c3b      	ldrb	r3, [r7, #16]
 8001a62:	021b      	lsls	r3, r3, #8
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	b21b      	sxth	r3, r3
 8001a68:	7c7a      	ldrb	r2, [r7, #17]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	105b      	asrs	r3, r3, #1
 8001a6e:	60bb      	str	r3, [r7, #8]
						I2Cdev_readBytes(MPU9x50_USIC, MPU9150_ADDRESS, ZA_OFFSET_H, 2, data);
 8001a70:	f107 0310 	add.w	r3, r7, #16
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	484b      	ldr	r0, [pc, #300]	; (8001ba4 <ERU1_0_IRQHandler+0x4a0>)
 8001a78:	21d2      	movs	r1, #210	; 0xd2
 8001a7a:	227d      	movs	r2, #125	; 0x7d
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	f7fe fe9f 	bl	80007c0 <I2Cdev_readBytes>
						acc_bias_reg[2] = ((int16_t) ((int16_t)data[0] << 8) | data[1]) >> 1;
 8001a82:	7c3b      	ldrb	r3, [r7, #16]
 8001a84:	021b      	lsls	r3, r3, #8
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	b21b      	sxth	r3, r3
 8001a8a:	7c7a      	ldrb	r2, [r7, #17]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	105b      	asrs	r3, r3, #1
 8001a90:	60fb      	str	r3, [r7, #12]

						// Construct total accelerometer bias, including calculated average accelerometer bias from above
						acc_bias_reg[0] -= accBias[0]; // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	4b42      	ldr	r3, [pc, #264]	; (8001ba0 <ERU1_0_IRQHandler+0x49c>)
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	b21b      	sxth	r3, r3
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	607b      	str	r3, [r7, #4]
						acc_bias_reg[1] -= accBias[1];
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	4b3f      	ldr	r3, [pc, #252]	; (8001ba0 <ERU1_0_IRQHandler+0x49c>)
 8001aa2:	885b      	ldrh	r3, [r3, #2]
 8001aa4:	b21b      	sxth	r3, r3
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	60bb      	str	r3, [r7, #8]
						acc_bias_reg[2] -= accBias[2];
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	4b3c      	ldr	r3, [pc, #240]	; (8001ba0 <ERU1_0_IRQHandler+0x49c>)
 8001aae:	889b      	ldrh	r3, [r3, #4]
 8001ab0:	b21b      	sxth	r3, r3
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	60fb      	str	r3, [r7, #12]

						acc_bias_reg[0] = acc_bias_reg[0] << 1;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	607b      	str	r3, [r7, #4]
						acc_bias_reg[1] = acc_bias_reg[1] << 1;
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	60bb      	str	r3, [r7, #8]
						acc_bias_reg[2] = acc_bias_reg[2] << 1;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	60fb      	str	r3, [r7, #12]

						data[0] = (acc_bias_reg[0] >> 8) & 0xFF;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	121b      	asrs	r3, r3, #8
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	743b      	strb	r3, [r7, #16]
						data[1] = (acc_bias_reg[0])      & 0xFF;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	747b      	strb	r3, [r7, #17]
						data[2] = (acc_bias_reg[1] >> 8) & 0xFF;
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	121b      	asrs	r3, r3, #8
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	74bb      	strb	r3, [r7, #18]
						data[3] = (acc_bias_reg[1])      & 0xFF;
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	74fb      	strb	r3, [r7, #19]
						data[4] = (acc_bias_reg[2] >> 8) & 0xFF;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	121b      	asrs	r3, r3, #8
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	753b      	strb	r3, [r7, #20]
						data[5] = (acc_bias_reg[2])      & 0xFF;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	757b      	strb	r3, [r7, #21]

						// Push accelerometer biases to hardware registers
						I2Cdev_writeByte(MPU9x50_USIC, MPU9150_ADDRESS, XA_OFFSET_H, data[0]);
 8001af2:	7c3b      	ldrb	r3, [r7, #16]
 8001af4:	482b      	ldr	r0, [pc, #172]	; (8001ba4 <ERU1_0_IRQHandler+0x4a0>)
 8001af6:	21d2      	movs	r1, #210	; 0xd2
 8001af8:	2277      	movs	r2, #119	; 0x77
 8001afa:	f7fe fd49 	bl	8000590 <I2Cdev_writeByte>
						I2Cdev_writeByte(MPU9x50_USIC, MPU9150_ADDRESS, XA_OFFSET_L_TC, data[1]);
 8001afe:	7c7b      	ldrb	r3, [r7, #17]
 8001b00:	4828      	ldr	r0, [pc, #160]	; (8001ba4 <ERU1_0_IRQHandler+0x4a0>)
 8001b02:	21d2      	movs	r1, #210	; 0xd2
 8001b04:	2278      	movs	r2, #120	; 0x78
 8001b06:	f7fe fd43 	bl	8000590 <I2Cdev_writeByte>
						I2Cdev_writeByte(MPU9x50_USIC, MPU9150_ADDRESS, YA_OFFSET_H, data[2]);
 8001b0a:	7cbb      	ldrb	r3, [r7, #18]
 8001b0c:	4825      	ldr	r0, [pc, #148]	; (8001ba4 <ERU1_0_IRQHandler+0x4a0>)
 8001b0e:	21d2      	movs	r1, #210	; 0xd2
 8001b10:	227a      	movs	r2, #122	; 0x7a
 8001b12:	f7fe fd3d 	bl	8000590 <I2Cdev_writeByte>
						I2Cdev_writeByte(MPU9x50_USIC, MPU9150_ADDRESS, YA_OFFSET_L_TC, data[3]);
 8001b16:	7cfb      	ldrb	r3, [r7, #19]
 8001b18:	4822      	ldr	r0, [pc, #136]	; (8001ba4 <ERU1_0_IRQHandler+0x4a0>)
 8001b1a:	21d2      	movs	r1, #210	; 0xd2
 8001b1c:	227b      	movs	r2, #123	; 0x7b
 8001b1e:	f7fe fd37 	bl	8000590 <I2Cdev_writeByte>
						I2Cdev_writeByte(MPU9x50_USIC, MPU9150_ADDRESS, ZA_OFFSET_H, data[4]);
 8001b22:	7d3b      	ldrb	r3, [r7, #20]
 8001b24:	481f      	ldr	r0, [pc, #124]	; (8001ba4 <ERU1_0_IRQHandler+0x4a0>)
 8001b26:	21d2      	movs	r1, #210	; 0xd2
 8001b28:	227d      	movs	r2, #125	; 0x7d
 8001b2a:	f7fe fd31 	bl	8000590 <I2Cdev_writeByte>
						I2Cdev_writeByte(MPU9x50_USIC, MPU9150_ADDRESS, ZA_OFFSET_L_TC, data[5]);
 8001b2e:	7d7b      	ldrb	r3, [r7, #21]
 8001b30:	481c      	ldr	r0, [pc, #112]	; (8001ba4 <ERU1_0_IRQHandler+0x4a0>)
 8001b32:	21d2      	movs	r1, #210	; 0xd2
 8001b34:	227e      	movs	r2, #126	; 0x7e
 8001b36:	f7fe fd2b 	bl	8000590 <I2Cdev_writeByte>

						switch (Gscale)
 8001b3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ba8 <ERU1_0_IRQHandler+0x4a4>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b03      	cmp	r3, #3
 8001b40:	f200 809c 	bhi.w	8001c7c <ERU1_0_IRQHandler+0x578>
 8001b44:	a201      	add	r2, pc, #4	; (adr r2, 8001b4c <ERU1_0_IRQHandler+0x448>)
 8001b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b4a:	bf00      	nop
 8001b4c:	08001b5d 	.word	0x08001b5d
 8001b50:	08001bb1 	.word	0x08001bb1
 8001b54:	08001bf5 	.word	0x08001bf5
 8001b58:	08001c39 	.word	0x08001c39
						{
							case GFS_250DPS:
								gyroBias[0]=-(gyroBias[0]>>11);
 8001b5c:	4b13      	ldr	r3, [pc, #76]	; (8001bac <ERU1_0_IRQHandler+0x4a8>)
 8001b5e:	881b      	ldrh	r3, [r3, #0]
 8001b60:	b21b      	sxth	r3, r3
 8001b62:	12db      	asrs	r3, r3, #11
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	425b      	negs	r3, r3
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	4b0f      	ldr	r3, [pc, #60]	; (8001bac <ERU1_0_IRQHandler+0x4a8>)
 8001b70:	801a      	strh	r2, [r3, #0]
								gyroBias[1]=-(gyroBias[1]>>11);
 8001b72:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <ERU1_0_IRQHandler+0x4a8>)
 8001b74:	885b      	ldrh	r3, [r3, #2]
 8001b76:	b21b      	sxth	r3, r3
 8001b78:	12db      	asrs	r3, r3, #11
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	425b      	negs	r3, r3
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	4b09      	ldr	r3, [pc, #36]	; (8001bac <ERU1_0_IRQHandler+0x4a8>)
 8001b86:	805a      	strh	r2, [r3, #2]
								gyroBias[2]=-(gyroBias[2]>>11);
 8001b88:	4b08      	ldr	r3, [pc, #32]	; (8001bac <ERU1_0_IRQHandler+0x4a8>)
 8001b8a:	889b      	ldrh	r3, [r3, #4]
 8001b8c:	b21b      	sxth	r3, r3
 8001b8e:	12db      	asrs	r3, r3, #11
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	425b      	negs	r3, r3
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	4b04      	ldr	r3, [pc, #16]	; (8001bac <ERU1_0_IRQHandler+0x4a8>)
 8001b9c:	809a      	strh	r2, [r3, #4]
								break;
 8001b9e:	e06d      	b.n	8001c7c <ERU1_0_IRQHandler+0x578>
 8001ba0:	200003dc 	.word	0x200003dc
 8001ba4:	48024000 	.word	0x48024000
 8001ba8:	20000020 	.word	0x20000020
 8001bac:	200003e4 	.word	0x200003e4
							case GFS_500DPS:
								gyroBias[0]=-(gyroBias[0]>>10);
 8001bb0:	4b58      	ldr	r3, [pc, #352]	; (8001d14 <ERU1_0_IRQHandler+0x610>)
 8001bb2:	881b      	ldrh	r3, [r3, #0]
 8001bb4:	b21b      	sxth	r3, r3
 8001bb6:	129b      	asrs	r3, r3, #10
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	425b      	negs	r3, r3
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	4b54      	ldr	r3, [pc, #336]	; (8001d14 <ERU1_0_IRQHandler+0x610>)
 8001bc4:	801a      	strh	r2, [r3, #0]
								gyroBias[1]=-(gyroBias[1]>>10);
 8001bc6:	4b53      	ldr	r3, [pc, #332]	; (8001d14 <ERU1_0_IRQHandler+0x610>)
 8001bc8:	885b      	ldrh	r3, [r3, #2]
 8001bca:	b21b      	sxth	r3, r3
 8001bcc:	129b      	asrs	r3, r3, #10
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	425b      	negs	r3, r3
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	4b4e      	ldr	r3, [pc, #312]	; (8001d14 <ERU1_0_IRQHandler+0x610>)
 8001bda:	805a      	strh	r2, [r3, #2]
								gyroBias[2]=-(gyroBias[2]>>10);
 8001bdc:	4b4d      	ldr	r3, [pc, #308]	; (8001d14 <ERU1_0_IRQHandler+0x610>)
 8001bde:	889b      	ldrh	r3, [r3, #4]
 8001be0:	b21b      	sxth	r3, r3
 8001be2:	129b      	asrs	r3, r3, #10
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	425b      	negs	r3, r3
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	4b49      	ldr	r3, [pc, #292]	; (8001d14 <ERU1_0_IRQHandler+0x610>)
 8001bf0:	809a      	strh	r2, [r3, #4]
								break;
 8001bf2:	e043      	b.n	8001c7c <ERU1_0_IRQHandler+0x578>
							case GFS_1000DPS:
								gyroBias[0]=-(gyroBias[0]>>9);
 8001bf4:	4b47      	ldr	r3, [pc, #284]	; (8001d14 <ERU1_0_IRQHandler+0x610>)
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	b21b      	sxth	r3, r3
 8001bfa:	125b      	asrs	r3, r3, #9
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	425b      	negs	r3, r3
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	4b43      	ldr	r3, [pc, #268]	; (8001d14 <ERU1_0_IRQHandler+0x610>)
 8001c08:	801a      	strh	r2, [r3, #0]
								gyroBias[1]=-(gyroBias[1]>>9);
 8001c0a:	4b42      	ldr	r3, [pc, #264]	; (8001d14 <ERU1_0_IRQHandler+0x610>)
 8001c0c:	885b      	ldrh	r3, [r3, #2]
 8001c0e:	b21b      	sxth	r3, r3
 8001c10:	125b      	asrs	r3, r3, #9
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	425b      	negs	r3, r3
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	4b3d      	ldr	r3, [pc, #244]	; (8001d14 <ERU1_0_IRQHandler+0x610>)
 8001c1e:	805a      	strh	r2, [r3, #2]
								gyroBias[2]=-(gyroBias[2]>>9);
 8001c20:	4b3c      	ldr	r3, [pc, #240]	; (8001d14 <ERU1_0_IRQHandler+0x610>)
 8001c22:	889b      	ldrh	r3, [r3, #4]
 8001c24:	b21b      	sxth	r3, r3
 8001c26:	125b      	asrs	r3, r3, #9
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	425b      	negs	r3, r3
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	4b38      	ldr	r3, [pc, #224]	; (8001d14 <ERU1_0_IRQHandler+0x610>)
 8001c34:	809a      	strh	r2, [r3, #4]
								break;
 8001c36:	e021      	b.n	8001c7c <ERU1_0_IRQHandler+0x578>
							case GFS_2000DPS:
								gyroBias[0]=-(gyroBias[0]>>8);
 8001c38:	4b36      	ldr	r3, [pc, #216]	; (8001d14 <ERU1_0_IRQHandler+0x610>)
 8001c3a:	881b      	ldrh	r3, [r3, #0]
 8001c3c:	b21b      	sxth	r3, r3
 8001c3e:	121b      	asrs	r3, r3, #8
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	425b      	negs	r3, r3
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	4b32      	ldr	r3, [pc, #200]	; (8001d14 <ERU1_0_IRQHandler+0x610>)
 8001c4c:	801a      	strh	r2, [r3, #0]
								gyroBias[1]=-(gyroBias[1]>>8);
 8001c4e:	4b31      	ldr	r3, [pc, #196]	; (8001d14 <ERU1_0_IRQHandler+0x610>)
 8001c50:	885b      	ldrh	r3, [r3, #2]
 8001c52:	b21b      	sxth	r3, r3
 8001c54:	121b      	asrs	r3, r3, #8
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	425b      	negs	r3, r3
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	4b2c      	ldr	r3, [pc, #176]	; (8001d14 <ERU1_0_IRQHandler+0x610>)
 8001c62:	805a      	strh	r2, [r3, #2]
								gyroBias[2]=-(gyroBias[2]>>8);
 8001c64:	4b2b      	ldr	r3, [pc, #172]	; (8001d14 <ERU1_0_IRQHandler+0x610>)
 8001c66:	889b      	ldrh	r3, [r3, #4]
 8001c68:	b21b      	sxth	r3, r3
 8001c6a:	121b      	asrs	r3, r3, #8
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	425b      	negs	r3, r3
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	4b27      	ldr	r3, [pc, #156]	; (8001d14 <ERU1_0_IRQHandler+0x610>)
 8001c78:	809a      	strh	r2, [r3, #4]
								break;
 8001c7a:	bf00      	nop
						}

						// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
						data[0] = (gyroBias[0]  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8001c7c:	4b25      	ldr	r3, [pc, #148]	; (8001d14 <ERU1_0_IRQHandler+0x610>)
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	b21b      	sxth	r3, r3
 8001c82:	121b      	asrs	r3, r3, #8
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	743b      	strb	r3, [r7, #16]
						data[1] = (gyroBias[0])       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 8001c8a:	4b22      	ldr	r3, [pc, #136]	; (8001d14 <ERU1_0_IRQHandler+0x610>)
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	747b      	strb	r3, [r7, #17]
						data[2] = (gyroBias[1]  >> 8) & 0xFF;
 8001c92:	4b20      	ldr	r3, [pc, #128]	; (8001d14 <ERU1_0_IRQHandler+0x610>)
 8001c94:	885b      	ldrh	r3, [r3, #2]
 8001c96:	b21b      	sxth	r3, r3
 8001c98:	121b      	asrs	r3, r3, #8
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	74bb      	strb	r3, [r7, #18]
						data[3] = (gyroBias[1])       & 0xFF;
 8001ca0:	4b1c      	ldr	r3, [pc, #112]	; (8001d14 <ERU1_0_IRQHandler+0x610>)
 8001ca2:	885b      	ldrh	r3, [r3, #2]
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	74fb      	strb	r3, [r7, #19]
						data[4] = (gyroBias[2]  >> 8) & 0xFF;
 8001ca8:	4b1a      	ldr	r3, [pc, #104]	; (8001d14 <ERU1_0_IRQHandler+0x610>)
 8001caa:	889b      	ldrh	r3, [r3, #4]
 8001cac:	b21b      	sxth	r3, r3
 8001cae:	121b      	asrs	r3, r3, #8
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	753b      	strb	r3, [r7, #20]
						data[5] = (gyroBias[2])       & 0xFF;
 8001cb6:	4b17      	ldr	r3, [pc, #92]	; (8001d14 <ERU1_0_IRQHandler+0x610>)
 8001cb8:	889b      	ldrh	r3, [r3, #4]
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	757b      	strb	r3, [r7, #21]

						// Push gyro biases to hardware registers
						I2Cdev_writeByte(MPU9x50_USIC, MPU9150_ADDRESS, XG_OFFS_USRH, data[0]);
 8001cbe:	7c3b      	ldrb	r3, [r7, #16]
 8001cc0:	4815      	ldr	r0, [pc, #84]	; (8001d18 <ERU1_0_IRQHandler+0x614>)
 8001cc2:	21d2      	movs	r1, #210	; 0xd2
 8001cc4:	2213      	movs	r2, #19
 8001cc6:	f7fe fc63 	bl	8000590 <I2Cdev_writeByte>
						I2Cdev_writeByte(MPU9x50_USIC, MPU9150_ADDRESS, XG_OFFS_USRL, data[1]);
 8001cca:	7c7b      	ldrb	r3, [r7, #17]
 8001ccc:	4812      	ldr	r0, [pc, #72]	; (8001d18 <ERU1_0_IRQHandler+0x614>)
 8001cce:	21d2      	movs	r1, #210	; 0xd2
 8001cd0:	2214      	movs	r2, #20
 8001cd2:	f7fe fc5d 	bl	8000590 <I2Cdev_writeByte>
						I2Cdev_writeByte(MPU9x50_USIC, MPU9150_ADDRESS, YG_OFFS_USRH, data[2]);
 8001cd6:	7cbb      	ldrb	r3, [r7, #18]
 8001cd8:	480f      	ldr	r0, [pc, #60]	; (8001d18 <ERU1_0_IRQHandler+0x614>)
 8001cda:	21d2      	movs	r1, #210	; 0xd2
 8001cdc:	2215      	movs	r2, #21
 8001cde:	f7fe fc57 	bl	8000590 <I2Cdev_writeByte>
						I2Cdev_writeByte(MPU9x50_USIC, MPU9150_ADDRESS, YG_OFFS_USRL, data[3]);
 8001ce2:	7cfb      	ldrb	r3, [r7, #19]
 8001ce4:	480c      	ldr	r0, [pc, #48]	; (8001d18 <ERU1_0_IRQHandler+0x614>)
 8001ce6:	21d2      	movs	r1, #210	; 0xd2
 8001ce8:	2216      	movs	r2, #22
 8001cea:	f7fe fc51 	bl	8000590 <I2Cdev_writeByte>
						I2Cdev_writeByte(MPU9x50_USIC, MPU9150_ADDRESS, ZG_OFFS_USRH, data[4]);
 8001cee:	7d3b      	ldrb	r3, [r7, #20]
 8001cf0:	4809      	ldr	r0, [pc, #36]	; (8001d18 <ERU1_0_IRQHandler+0x614>)
 8001cf2:	21d2      	movs	r1, #210	; 0xd2
 8001cf4:	2217      	movs	r2, #23
 8001cf6:	f7fe fc4b 	bl	8000590 <I2Cdev_writeByte>
						I2Cdev_writeByte(MPU9x50_USIC, MPU9150_ADDRESS, ZG_OFFS_USRL, data[5]);
 8001cfa:	7d7b      	ldrb	r3, [r7, #21]
 8001cfc:	4806      	ldr	r0, [pc, #24]	; (8001d18 <ERU1_0_IRQHandler+0x614>)
 8001cfe:	21d2      	movs	r1, #210	; 0xd2
 8001d00:	2218      	movs	r2, #24
 8001d02:	f7fe fc45 	bl	8000590 <I2Cdev_writeByte>

						calib = 0;
 8001d06:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <ERU1_0_IRQHandler+0x618>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	701a      	strb	r2, [r3, #0]
						calib_cnt=0;
 8001d0c:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <ERU1_0_IRQHandler+0x61c>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	801a      	strh	r2, [r3, #0]
 8001d12:	e0a1      	b.n	8001e58 <ERU1_0_IRQHandler+0x754>
 8001d14:	200003e4 	.word	0x200003e4
 8001d18:	48024000 	.word	0x48024000
 8001d1c:	20000034 	.word	0x20000034
 8001d20:	200003f8 	.word	0x200003f8
					}
				}
				else
				{
					getAres();
 8001d24:	f7ff fc38 	bl	8001598 <getAres>
					getGres();
 8001d28:	f7ff fc04 	bl	8001534 <getGres>

					// Now we'll calculate the accleration value into actual g's
					acc[0] = (float)accRaw[0]*aRes;  // get actual g value, this depends on scale being set
 8001d2c:	4b4c      	ldr	r3, [pc, #304]	; (8001e60 <ERU1_0_IRQHandler+0x75c>)
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	b21b      	sxth	r3, r3
 8001d32:	ee07 3a90 	vmov	s15, r3
 8001d36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d3a:	4b4a      	ldr	r3, [pc, #296]	; (8001e64 <ERU1_0_IRQHandler+0x760>)
 8001d3c:	edd3 7a00 	vldr	s15, [r3]
 8001d40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d44:	4b48      	ldr	r3, [pc, #288]	; (8001e68 <ERU1_0_IRQHandler+0x764>)
 8001d46:	edc3 7a00 	vstr	s15, [r3]
					acc[1] = (float)accRaw[1]*aRes;
 8001d4a:	4b45      	ldr	r3, [pc, #276]	; (8001e60 <ERU1_0_IRQHandler+0x75c>)
 8001d4c:	885b      	ldrh	r3, [r3, #2]
 8001d4e:	b21b      	sxth	r3, r3
 8001d50:	ee07 3a90 	vmov	s15, r3
 8001d54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d58:	4b42      	ldr	r3, [pc, #264]	; (8001e64 <ERU1_0_IRQHandler+0x760>)
 8001d5a:	edd3 7a00 	vldr	s15, [r3]
 8001d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d62:	4b41      	ldr	r3, [pc, #260]	; (8001e68 <ERU1_0_IRQHandler+0x764>)
 8001d64:	edc3 7a01 	vstr	s15, [r3, #4]
					acc[2] = (float)accRaw[2]*aRes;
 8001d68:	4b3d      	ldr	r3, [pc, #244]	; (8001e60 <ERU1_0_IRQHandler+0x75c>)
 8001d6a:	889b      	ldrh	r3, [r3, #4]
 8001d6c:	b21b      	sxth	r3, r3
 8001d6e:	ee07 3a90 	vmov	s15, r3
 8001d72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d76:	4b3b      	ldr	r3, [pc, #236]	; (8001e64 <ERU1_0_IRQHandler+0x760>)
 8001d78:	edd3 7a00 	vldr	s15, [r3]
 8001d7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d80:	4b39      	ldr	r3, [pc, #228]	; (8001e68 <ERU1_0_IRQHandler+0x764>)
 8001d82:	edc3 7a02 	vstr	s15, [r3, #8]
					//transformation(acc);

					// Calculate the gyro value into actual degrees per rad
					gyro[0] = (float)gyroRaw[0]*gRes * DEG_TO_RAD;  // get actual gyro value, this depends on scale being set
 8001d86:	4b39      	ldr	r3, [pc, #228]	; (8001e6c <ERU1_0_IRQHandler+0x768>)
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	b21b      	sxth	r3, r3
 8001d8c:	ee07 3a90 	vmov	s15, r3
 8001d90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d94:	4b36      	ldr	r3, [pc, #216]	; (8001e70 <ERU1_0_IRQHandler+0x76c>)
 8001d96:	edd3 7a00 	vldr	s15, [r3]
 8001d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d9e:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001e74 <ERU1_0_IRQHandler+0x770>
 8001da2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001da6:	4b34      	ldr	r3, [pc, #208]	; (8001e78 <ERU1_0_IRQHandler+0x774>)
 8001da8:	edc3 7a00 	vstr	s15, [r3]
					gyro[1] = (float)gyroRaw[1]*gRes * DEG_TO_RAD;
 8001dac:	4b2f      	ldr	r3, [pc, #188]	; (8001e6c <ERU1_0_IRQHandler+0x768>)
 8001dae:	885b      	ldrh	r3, [r3, #2]
 8001db0:	b21b      	sxth	r3, r3
 8001db2:	ee07 3a90 	vmov	s15, r3
 8001db6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dba:	4b2d      	ldr	r3, [pc, #180]	; (8001e70 <ERU1_0_IRQHandler+0x76c>)
 8001dbc:	edd3 7a00 	vldr	s15, [r3]
 8001dc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dc4:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001e74 <ERU1_0_IRQHandler+0x770>
 8001dc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dcc:	4b2a      	ldr	r3, [pc, #168]	; (8001e78 <ERU1_0_IRQHandler+0x774>)
 8001dce:	edc3 7a01 	vstr	s15, [r3, #4]
					gyro[2] = (float)gyroRaw[2]*gRes * DEG_TO_RAD;
 8001dd2:	4b26      	ldr	r3, [pc, #152]	; (8001e6c <ERU1_0_IRQHandler+0x768>)
 8001dd4:	889b      	ldrh	r3, [r3, #4]
 8001dd6:	b21b      	sxth	r3, r3
 8001dd8:	ee07 3a90 	vmov	s15, r3
 8001ddc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001de0:	4b23      	ldr	r3, [pc, #140]	; (8001e70 <ERU1_0_IRQHandler+0x76c>)
 8001de2:	edd3 7a00 	vldr	s15, [r3]
 8001de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dea:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001e74 <ERU1_0_IRQHandler+0x770>
 8001dee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001df2:	4b21      	ldr	r3, [pc, #132]	; (8001e78 <ERU1_0_IRQHandler+0x774>)
 8001df4:	edc3 7a02 	vstr	s15, [r3, #8]
					//transformation(gyro);

					uint32_t Now = getDelaymillis();
 8001df8:	f7fe fdde 	bl	80009b8 <getDelaymillis>
 8001dfc:	6238      	str	r0, [r7, #32]
					float dt = ((Now - lastUpdate)/1000.0f); // set integration time by time elapsed since last filter update
 8001dfe:	4b1f      	ldr	r3, [pc, #124]	; (8001e7c <ERU1_0_IRQHandler+0x778>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6a3a      	ldr	r2, [r7, #32]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	ee07 3a90 	vmov	s15, r3
 8001e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e0e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001e80 <ERU1_0_IRQHandler+0x77c>
 8001e12:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8001e16:	edc7 7a07 	vstr	s15, [r7, #28]
					lastUpdate = Now;
 8001e1a:	4a18      	ldr	r2, [pc, #96]	; (8001e7c <ERU1_0_IRQHandler+0x778>)
 8001e1c:	6a3b      	ldr	r3, [r7, #32]
 8001e1e:	6013      	str	r3, [r2, #0]
					// We have to make some allowance for this orientation mismatch in feeding the output to the quaternion filter.
					// For the MPU-9150, we have chosen a magnetic rotation that keeps the sensor forward along the x-axis just like
					// in the LSM9DS0 sensor. This rotation can be modified to allow any convenient orientation convention.
					// This is ok by aircraft orientation standards!
					// Pass gyro rate as rad/s
					MadgwickQuaternionUpdateWithouMag(q, dt, acc[0], acc[1], acc[2], gyro[0], gyro[1], gyro[2]);
 8001e20:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <ERU1_0_IRQHandler+0x764>)
 8001e22:	681d      	ldr	r5, [r3, #0]
 8001e24:	4b10      	ldr	r3, [pc, #64]	; (8001e68 <ERU1_0_IRQHandler+0x764>)
 8001e26:	685c      	ldr	r4, [r3, #4]
 8001e28:	4b0f      	ldr	r3, [pc, #60]	; (8001e68 <ERU1_0_IRQHandler+0x764>)
 8001e2a:	6898      	ldr	r0, [r3, #8]
 8001e2c:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <ERU1_0_IRQHandler+0x774>)
 8001e2e:	6819      	ldr	r1, [r3, #0]
 8001e30:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <ERU1_0_IRQHandler+0x774>)
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	4b10      	ldr	r3, [pc, #64]	; (8001e78 <ERU1_0_IRQHandler+0x774>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	9000      	str	r0, [sp, #0]
 8001e3a:	9101      	str	r1, [sp, #4]
 8001e3c:	9202      	str	r2, [sp, #8]
 8001e3e:	9303      	str	r3, [sp, #12]
 8001e40:	4810      	ldr	r0, [pc, #64]	; (8001e84 <ERU1_0_IRQHandler+0x780>)
 8001e42:	69f9      	ldr	r1, [r7, #28]
 8001e44:	462a      	mov	r2, r5
 8001e46:	4623      	mov	r3, r4
 8001e48:	f7fe fe7c 	bl	8000b44 <MadgwickQuaternionUpdateWithouMag>
					//MadgwickQuaternionUpdate(q, dt, acc[0], acc[1], acc[2], gyro[0], gyro[1], gyro[2], mag[0], mag[1], mag[2]);
					//MahonyQuaternionUpdate(q, eInt, dt, acc[0], acc[1], acc[2], gyro[0], gyro[1], gyro[2], mag[0], mag[1], mag[2]);

#endif
					counterSensor++;
 8001e4c:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <ERU1_0_IRQHandler+0x784>)
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	3301      	adds	r3, #1
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <ERU1_0_IRQHandler+0x784>)
 8001e56:	801a      	strh	r2, [r3, #0]
				}
			}
		}
}
 8001e58:	3728      	adds	r7, #40	; 0x28
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	2000056c 	.word	0x2000056c
 8001e64:	20000574 	.word	0x20000574
 8001e68:	200003c4 	.word	0x200003c4
 8001e6c:	20000564 	.word	0x20000564
 8001e70:	20000578 	.word	0x20000578
 8001e74:	3c8efa35 	.word	0x3c8efa35
 8001e78:	200003d0 	.word	0x200003d0
 8001e7c:	200003ec 	.word	0x200003ec
 8001e80:	447a0000 	.word	0x447a0000
 8001e84:	20000024 	.word	0x20000024
 8001e88:	200003f0 	.word	0x200003f0

08001e8c <updateValues>:
 *
 *  \details gets raw values and processes it in useable values. \n
 *  values are return through parameter pointers
 */
void updateValues(float *Pcomp,float *Tcomp)
{
 8001e8c:	b5b0      	push	{r4, r5, r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
	uint8_t x08 = I2Cdev_readByte(DPS310_USIC,DPS310_Address,0x08);
 8001e96:	488c      	ldr	r0, [pc, #560]	; (80020c8 <updateValues+0x23c>)
 8001e98:	21ee      	movs	r1, #238	; 0xee
 8001e9a:	2208      	movs	r2, #8
 8001e9c:	f7fe fbfe 	bl	800069c <I2Cdev_readByte>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	73fb      	strb	r3, [r7, #15]
	if (x08>>4 == 15)						// read pressure register only if values are ready (==13 if pressure measurement; ==15 if pressure & temperature measurement
 8001ea4:	7bfb      	ldrb	r3, [r7, #15]
 8001ea6:	091b      	lsrs	r3, r3, #4
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b0f      	cmp	r3, #15
 8001eac:	f040 8108 	bne.w	80020c0 <updateValues+0x234>
	{
		// generate Praw
		Praw = getPressure();				// 24bit two�s complement value out of reg 0-2
 8001eb0:	f000 f96c 	bl	800218c <getPressure>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	4b85      	ldr	r3, [pc, #532]	; (80020cc <updateValues+0x240>)
 8001eb8:	601a      	str	r2, [r3, #0]
		if (Praw > (pow(2, 23) - 1))		// convert to signed int
 8001eba:	4b84      	ldr	r3, [pc, #528]	; (80020cc <updateValues+0x240>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f009 fdd6 	bl	800ba70 <__aeabi_i2d>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4610      	mov	r0, r2
 8001eca:	4619      	mov	r1, r3
 8001ecc:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8001ed0:	4b7f      	ldr	r3, [pc, #508]	; (80020d0 <updateValues+0x244>)
 8001ed2:	f00a f8c3 	bl	800c05c <__aeabi_dcmpgt>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d016      	beq.n	8001f0a <updateValues+0x7e>
		{
			Praw = Praw - pow(2, 24);
 8001edc:	4b7b      	ldr	r3, [pc, #492]	; (80020cc <updateValues+0x240>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f009 fdc5 	bl	800ba70 <__aeabi_i2d>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	4610      	mov	r0, r2
 8001eec:	4619      	mov	r1, r3
 8001eee:	f04f 0200 	mov.w	r2, #0
 8001ef2:	4b78      	ldr	r3, [pc, #480]	; (80020d4 <updateValues+0x248>)
 8001ef4:	f009 fc6e 	bl	800b7d4 <__aeabi_dsub>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	4610      	mov	r0, r2
 8001efe:	4619      	mov	r1, r3
 8001f00:	f00a f8b6 	bl	800c070 <__aeabi_d2iz>
 8001f04:	4602      	mov	r2, r0
 8001f06:	4b71      	ldr	r3, [pc, #452]	; (80020cc <updateValues+0x240>)
 8001f08:	601a      	str	r2, [r3, #0]
		}

		// generate Traw
		Traw = getTemperature();			// 24bit two�s complement value out of reg 3-5
 8001f0a:	f000 f965 	bl	80021d8 <getTemperature>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	4b71      	ldr	r3, [pc, #452]	; (80020d8 <updateValues+0x24c>)
 8001f12:	601a      	str	r2, [r3, #0]
		if (Traw > (pow(2, 23) - 1))		// convert to signed int
 8001f14:	4b70      	ldr	r3, [pc, #448]	; (80020d8 <updateValues+0x24c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f009 fda9 	bl	800ba70 <__aeabi_i2d>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	460b      	mov	r3, r1
 8001f22:	4610      	mov	r0, r2
 8001f24:	4619      	mov	r1, r3
 8001f26:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8001f2a:	4b69      	ldr	r3, [pc, #420]	; (80020d0 <updateValues+0x244>)
 8001f2c:	f00a f896 	bl	800c05c <__aeabi_dcmpgt>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d016      	beq.n	8001f64 <updateValues+0xd8>
		{
			Traw = Traw - pow(2, 24);
 8001f36:	4b68      	ldr	r3, [pc, #416]	; (80020d8 <updateValues+0x24c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f009 fd98 	bl	800ba70 <__aeabi_i2d>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	4610      	mov	r0, r2
 8001f46:	4619      	mov	r1, r3
 8001f48:	f04f 0200 	mov.w	r2, #0
 8001f4c:	4b61      	ldr	r3, [pc, #388]	; (80020d4 <updateValues+0x248>)
 8001f4e:	f009 fc41 	bl	800b7d4 <__aeabi_dsub>
 8001f52:	4602      	mov	r2, r0
 8001f54:	460b      	mov	r3, r1
 8001f56:	4610      	mov	r0, r2
 8001f58:	4619      	mov	r1, r3
 8001f5a:	f00a f889 	bl	800c070 <__aeabi_d2iz>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	4b5d      	ldr	r3, [pc, #372]	; (80020d8 <updateValues+0x24c>)
 8001f62:	601a      	str	r2, [r3, #0]
		}

		// calculate physical temperature Tcomp [�C]
		Traw_sc = (float)Traw/kT;
 8001f64:	4b5c      	ldr	r3, [pc, #368]	; (80020d8 <updateValues+0x24c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	ee07 3a90 	vmov	s15, r3
 8001f6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f70:	4b5a      	ldr	r3, [pc, #360]	; (80020dc <updateValues+0x250>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	ee07 3a90 	vmov	s15, r3
 8001f78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f7c:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8001f80:	4b57      	ldr	r3, [pc, #348]	; (80020e0 <updateValues+0x254>)
 8001f82:	edc3 7a00 	vstr	s15, [r3]
		*Tcomp = c0*0.5 + c1*Traw_sc;
 8001f86:	4b57      	ldr	r3, [pc, #348]	; (80020e4 <updateValues+0x258>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f009 fd70 	bl	800ba70 <__aeabi_i2d>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4610      	mov	r0, r2
 8001f96:	4619      	mov	r1, r3
 8001f98:	f04f 0200 	mov.w	r2, #0
 8001f9c:	4b52      	ldr	r3, [pc, #328]	; (80020e8 <updateValues+0x25c>)
 8001f9e:	f009 fdcd 	bl	800bb3c <__aeabi_dmul>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	4614      	mov	r4, r2
 8001fa8:	461d      	mov	r5, r3
 8001faa:	4b50      	ldr	r3, [pc, #320]	; (80020ec <updateValues+0x260>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	ee07 3a90 	vmov	s15, r3
 8001fb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fb6:	4b4a      	ldr	r3, [pc, #296]	; (80020e0 <updateValues+0x254>)
 8001fb8:	edd3 7a00 	vldr	s15, [r3]
 8001fbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fc0:	ee17 0a90 	vmov	r0, s15
 8001fc4:	f009 fd66 	bl	800ba94 <__aeabi_f2d>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4620      	mov	r0, r4
 8001fce:	4629      	mov	r1, r5
 8001fd0:	f009 fc02 	bl	800b7d8 <__adddf3>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	4610      	mov	r0, r2
 8001fda:	4619      	mov	r1, r3
 8001fdc:	f00a f870 	bl	800c0c0 <__aeabi_d2f>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	601a      	str	r2, [r3, #0]
		// calculate physical pressure Pcomp [Pa]
		Praw_sc = (float)Praw/kP;
 8001fe6:	4b39      	ldr	r3, [pc, #228]	; (80020cc <updateValues+0x240>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	ee07 3a90 	vmov	s15, r3
 8001fee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ff2:	4b3f      	ldr	r3, [pc, #252]	; (80020f0 <updateValues+0x264>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	ee07 3a90 	vmov	s15, r3
 8001ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ffe:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8002002:	4b3c      	ldr	r3, [pc, #240]	; (80020f4 <updateValues+0x268>)
 8002004:	edc3 7a00 	vstr	s15, [r3]
		*Pcomp = c00 + Praw_sc*(c10 + Praw_sc *(c20+ Praw_sc *c30)) + Traw_sc*c01 + Traw_sc *Praw_sc *(c11+Praw_sc*c21);
 8002008:	4b3b      	ldr	r3, [pc, #236]	; (80020f8 <updateValues+0x26c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	ee07 3a90 	vmov	s15, r3
 8002010:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002014:	4b39      	ldr	r3, [pc, #228]	; (80020fc <updateValues+0x270>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	ee07 3a90 	vmov	s15, r3
 800201c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002020:	4b37      	ldr	r3, [pc, #220]	; (8002100 <updateValues+0x274>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	ee07 3a90 	vmov	s15, r3
 8002028:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800202c:	4b35      	ldr	r3, [pc, #212]	; (8002104 <updateValues+0x278>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	ee07 3a90 	vmov	s15, r3
 8002034:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8002038:	4b2e      	ldr	r3, [pc, #184]	; (80020f4 <updateValues+0x268>)
 800203a:	edd3 7a00 	vldr	s15, [r3]
 800203e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002042:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002046:	4b2b      	ldr	r3, [pc, #172]	; (80020f4 <updateValues+0x268>)
 8002048:	edd3 7a00 	vldr	s15, [r3]
 800204c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002050:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002054:	4b27      	ldr	r3, [pc, #156]	; (80020f4 <updateValues+0x268>)
 8002056:	edd3 7a00 	vldr	s15, [r3]
 800205a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800205e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002062:	4b29      	ldr	r3, [pc, #164]	; (8002108 <updateValues+0x27c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	ee07 3a90 	vmov	s15, r3
 800206a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800206e:	4b1c      	ldr	r3, [pc, #112]	; (80020e0 <updateValues+0x254>)
 8002070:	edd3 7a00 	vldr	s15, [r3]
 8002074:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002078:	ee37 7a27 	vadd.f32	s14, s14, s15
 800207c:	4b18      	ldr	r3, [pc, #96]	; (80020e0 <updateValues+0x254>)
 800207e:	edd3 6a00 	vldr	s13, [r3]
 8002082:	4b1c      	ldr	r3, [pc, #112]	; (80020f4 <updateValues+0x268>)
 8002084:	edd3 7a00 	vldr	s15, [r3]
 8002088:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800208c:	4b1f      	ldr	r3, [pc, #124]	; (800210c <updateValues+0x280>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	ee07 3a90 	vmov	s15, r3
 8002094:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8002098:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <updateValues+0x284>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	ee07 3a90 	vmov	s15, r3
 80020a0:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80020a4:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <updateValues+0x268>)
 80020a6:	edd3 7a00 	vldr	s15, [r3]
 80020aa:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80020ae:	ee76 7a27 	vadd.f32	s15, s12, s15
 80020b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bdb0      	pop	{r4, r5, r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40030200 	.word	0x40030200
 80020cc:	200003fc 	.word	0x200003fc
 80020d0:	415fffff 	.word	0x415fffff
 80020d4:	41700000 	.word	0x41700000
 80020d8:	20000400 	.word	0x20000400
 80020dc:	20000434 	.word	0x20000434
 80020e0:	20000408 	.word	0x20000408
 80020e4:	20000428 	.word	0x20000428
 80020e8:	3fe00000 	.word	0x3fe00000
 80020ec:	2000042c 	.word	0x2000042c
 80020f0:	20000430 	.word	0x20000430
 80020f4:	20000404 	.word	0x20000404
 80020f8:	2000040c 	.word	0x2000040c
 80020fc:	20000410 	.word	0x20000410
 8002100:	20000414 	.word	0x20000414
 8002104:	20000418 	.word	0x20000418
 8002108:	2000041c 	.word	0x2000041c
 800210c:	20000420 	.word	0x20000420
 8002110:	20000424 	.word	0x20000424

08002114 <ERU1_3_IRQHandler>:
 *  \return Return_Description
 *
 *  \details Details
 */
void DPS310_EXT_INT_ISR(void)
{
 8002114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002118:	b09a      	sub	sp, #104	; 0x68
 800211a:	af0c      	add	r7, sp, #48	; 0x30
	updateValues(&pressure, &temperature);
 800211c:	4817      	ldr	r0, [pc, #92]	; (800217c <ERU1_3_IRQHandler+0x68>)
 800211e:	4918      	ldr	r1, [pc, #96]	; (8002180 <ERU1_3_IRQHandler+0x6c>)
 8002120:	f7ff feb4 	bl	8001e8c <updateValues>
	I2Cdev_readByte(DPS310_USIC,DPS310_Address,0x0A);
 8002124:	4817      	ldr	r0, [pc, #92]	; (8002184 <ERU1_3_IRQHandler+0x70>)
 8002126:	21ee      	movs	r1, #238	; 0xee
 8002128:	220a      	movs	r2, #10
 800212a:	f7fe fab7 	bl	800069c <I2Cdev_readByte>
	PressureFIR = FIR_FILTER(PressureFIR, pressure);
 800212e:	4b13      	ldr	r3, [pc, #76]	; (800217c <ERU1_3_IRQHandler+0x68>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8002188 <ERU1_3_IRQHandler+0x74>
 8002136:	46be      	mov	lr, r7
 8002138:	4e13      	ldr	r6, [pc, #76]	; (8002188 <ERU1_3_IRQHandler+0x74>)
 800213a:	930b      	str	r3, [sp, #44]	; 0x2c
 800213c:	466d      	mov	r5, sp
 800213e:	f106 040c 	add.w	r4, r6, #12
 8002142:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002144:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002146:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002148:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800214a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800214e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002152:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002156:	4670      	mov	r0, lr
 8002158:	f7fe fc48 	bl	80009ec <FIR_FILTER>
 800215c:	4645      	mov	r5, r8
 800215e:	463c      	mov	r4, r7
 8002160:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002162:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002164:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002166:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002168:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800216a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800216c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002170:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8002174:	3738      	adds	r7, #56	; 0x38
 8002176:	46bd      	mov	sp, r7
 8002178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800217c:	20000468 	.word	0x20000468
 8002180:	2000046c 	.word	0x2000046c
 8002184:	40030200 	.word	0x40030200
 8002188:	200005ec 	.word	0x200005ec

0800218c <getPressure>:
 *  \return Raw pressure value
 *
 *  \details Reads the 3 registers and merges them to a 32bit integer
 */
int32_t getPressure(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
	//Read Pressure start------------------------------------------------------------------------------------------------------------------------------
	uint32_t register0 = I2Cdev_readByte(DPS310_USIC,DPS310_Address,0x00);
 8002192:	4810      	ldr	r0, [pc, #64]	; (80021d4 <getPressure+0x48>)
 8002194:	21ee      	movs	r1, #238	; 0xee
 8002196:	2200      	movs	r2, #0
 8002198:	f7fe fa80 	bl	800069c <I2Cdev_readByte>
 800219c:	4603      	mov	r3, r0
 800219e:	60fb      	str	r3, [r7, #12]
	uint32_t register1 = I2Cdev_readByte(DPS310_USIC,DPS310_Address,0x01);
 80021a0:	480c      	ldr	r0, [pc, #48]	; (80021d4 <getPressure+0x48>)
 80021a2:	21ee      	movs	r1, #238	; 0xee
 80021a4:	2201      	movs	r2, #1
 80021a6:	f7fe fa79 	bl	800069c <I2Cdev_readByte>
 80021aa:	4603      	mov	r3, r0
 80021ac:	60bb      	str	r3, [r7, #8]
	uint32_t register2 = I2Cdev_readByte(DPS310_USIC,DPS310_Address,0x02);
 80021ae:	4809      	ldr	r0, [pc, #36]	; (80021d4 <getPressure+0x48>)
 80021b0:	21ee      	movs	r1, #238	; 0xee
 80021b2:	2202      	movs	r2, #2
 80021b4:	f7fe fa72 	bl	800069c <I2Cdev_readByte>
 80021b8:	4603      	mov	r3, r0
 80021ba:	607b      	str	r3, [r7, #4]
	//Read Pressure end------------------------------------------------------------------------------------------------------------------------------
	return (uint32_t)(register0<<16 | register1<<8 | register2);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	041a      	lsls	r2, r3, #16
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	021b      	lsls	r3, r3, #8
 80021c4:	431a      	orrs	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4313      	orrs	r3, r2
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40030200 	.word	0x40030200

080021d8 <getTemperature>:
 *  \return Raw temperature value
 *
 *  \details Reads the 3 registers and merges them to a 32bit integer
 */
int32_t getTemperature(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
	//Read Temp start------------------------------------------------------------------------------------------------------------------------------
	uint32_t register3 = I2Cdev_readByte(DPS310_USIC,DPS310_Address,0x03);
 80021de:	4810      	ldr	r0, [pc, #64]	; (8002220 <getTemperature+0x48>)
 80021e0:	21ee      	movs	r1, #238	; 0xee
 80021e2:	2203      	movs	r2, #3
 80021e4:	f7fe fa5a 	bl	800069c <I2Cdev_readByte>
 80021e8:	4603      	mov	r3, r0
 80021ea:	60fb      	str	r3, [r7, #12]
	uint32_t register4 = I2Cdev_readByte(DPS310_USIC,DPS310_Address,0x04);
 80021ec:	480c      	ldr	r0, [pc, #48]	; (8002220 <getTemperature+0x48>)
 80021ee:	21ee      	movs	r1, #238	; 0xee
 80021f0:	2204      	movs	r2, #4
 80021f2:	f7fe fa53 	bl	800069c <I2Cdev_readByte>
 80021f6:	4603      	mov	r3, r0
 80021f8:	60bb      	str	r3, [r7, #8]
	uint32_t register5 = I2Cdev_readByte(DPS310_USIC,DPS310_Address,0x05);
 80021fa:	4809      	ldr	r0, [pc, #36]	; (8002220 <getTemperature+0x48>)
 80021fc:	21ee      	movs	r1, #238	; 0xee
 80021fe:	2205      	movs	r2, #5
 8002200:	f7fe fa4c 	bl	800069c <I2Cdev_readByte>
 8002204:	4603      	mov	r3, r0
 8002206:	607b      	str	r3, [r7, #4]
	//Read Temp end------------------------------------------------------------------------------------------------------------------------------
	return (uint32_t)(register3<<16 | register4<<8 | register5);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	041a      	lsls	r2, r3, #16
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	021b      	lsls	r3, r3, #8
 8002210:	431a      	orrs	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4313      	orrs	r3, r2
}
 8002216:	4618      	mov	r0, r3
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40030200 	.word	0x40030200

08002224 <initBluetoothStorage>:
 *  \brief Allocates storage for Bluetooth
 *  
 *  \details alllocates storage for ReadBufBT and all control_value components
 */
void initBluetoothStorage()
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
	ReadBufBT = malloc(sizeof(uint8_t)*BLUETOOTH_INPUT_BUFFER);
 8002228:	2020      	movs	r0, #32
 800222a:	f009 ffc5 	bl	800c1b8 <malloc>
 800222e:	4603      	mov	r3, r0
 8002230:	461a      	mov	r2, r3
 8002232:	4b1a      	ldr	r3, [pc, #104]	; (800229c <initBluetoothStorage+0x78>)
 8002234:	601a      	str	r2, [r3, #0]
	control_value.header = malloc(sizeof(uint8_t));
 8002236:	2001      	movs	r0, #1
 8002238:	f009 ffbe 	bl	800c1b8 <malloc>
 800223c:	4603      	mov	r3, r0
 800223e:	461a      	mov	r2, r3
 8002240:	4b17      	ldr	r3, [pc, #92]	; (80022a0 <initBluetoothStorage+0x7c>)
 8002242:	601a      	str	r2, [r3, #0]
	control_value.height_control = malloc(sizeof(uint8_t));
 8002244:	2001      	movs	r0, #1
 8002246:	f009 ffb7 	bl	800c1b8 <malloc>
 800224a:	4603      	mov	r3, r0
 800224c:	461a      	mov	r2, r3
 800224e:	4b14      	ldr	r3, [pc, #80]	; (80022a0 <initBluetoothStorage+0x7c>)
 8002250:	605a      	str	r2, [r3, #4]
	control_value.speed = malloc(sizeof(uint8_t));
 8002252:	2001      	movs	r0, #1
 8002254:	f009 ffb0 	bl	800c1b8 <malloc>
 8002258:	4603      	mov	r3, r0
 800225a:	461a      	mov	r2, r3
 800225c:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <initBluetoothStorage+0x7c>)
 800225e:	609a      	str	r2, [r3, #8]
	control_value.x_pitch = malloc(sizeof(float));
 8002260:	2004      	movs	r0, #4
 8002262:	f009 ffa9 	bl	800c1b8 <malloc>
 8002266:	4603      	mov	r3, r0
 8002268:	461a      	mov	r2, r3
 800226a:	4b0d      	ldr	r3, [pc, #52]	; (80022a0 <initBluetoothStorage+0x7c>)
 800226c:	611a      	str	r2, [r3, #16]
	control_value.y_roll = malloc(sizeof(float));
 800226e:	2004      	movs	r0, #4
 8002270:	f009 ffa2 	bl	800c1b8 <malloc>
 8002274:	4603      	mov	r3, r0
 8002276:	461a      	mov	r2, r3
 8002278:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <initBluetoothStorage+0x7c>)
 800227a:	615a      	str	r2, [r3, #20]
	control_value.z_rotate = malloc(sizeof(float));
 800227c:	2004      	movs	r0, #4
 800227e:	f009 ff9b 	bl	800c1b8 <malloc>
 8002282:	4603      	mov	r3, r0
 8002284:	461a      	mov	r2, r3
 8002286:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <initBluetoothStorage+0x7c>)
 8002288:	60da      	str	r2, [r3, #12]
	control_value.checksum = malloc(sizeof(uint32_t));
 800228a:	2004      	movs	r0, #4
 800228c:	f009 ff94 	bl	800c1b8 <malloc>
 8002290:	4603      	mov	r3, r0
 8002292:	461a      	mov	r2, r3
 8002294:	4b02      	ldr	r3, [pc, #8]	; (80022a0 <initBluetoothStorage+0x7c>)
 8002296:	619a      	str	r2, [r3, #24]
}
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	200005ac 	.word	0x200005ac
 80022a0:	200005b0 	.word	0x200005b0

080022a4 <maintainBluetoothInputBuffer>:
 *  values.
 */
int32_t maintainBluetoothInputBuffer(
		uint8_t input_buffer[BLUETOOTH_INPUT_BUFFER],
		ControlValue *control_value, DataPacket* packet)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08a      	sub	sp, #40	; 0x28
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
	static int packet_counter = 0;
	static int packets_to_be_received = 0;
	uint32_t checksum;
	checksum = input_buffer[0];
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
	checksum ^= ((input_buffer[1] << 8 | input_buffer[2]) & 0xFFFF);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	3301      	adds	r3, #1
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	021b      	lsls	r3, r3, #8
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	3202      	adds	r2, #2
 80022c2:	7812      	ldrb	r2, [r2, #0]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ca:	4053      	eors	r3, r2
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
	for (int i = 3; i < (PACKET_SIZE - PACKET_CHECKSUM) - 1; i += 4)
 80022ce:	2303      	movs	r3, #3
 80022d0:	623b      	str	r3, [r7, #32]
 80022d2:	e01f      	b.n	8002314 <maintainBluetoothInputBuffer+0x70>
	{
		checksum ^= (input_buffer[i] << 24 | input_buffer[i + 1] << 16
 80022d4:	6a3b      	ldr	r3, [r7, #32]
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	4413      	add	r3, r2
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	061a      	lsls	r2, r3, #24
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	3301      	adds	r3, #1
 80022e2:	68f9      	ldr	r1, [r7, #12]
 80022e4:	440b      	add	r3, r1
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	041b      	lsls	r3, r3, #16
 80022ea:	431a      	orrs	r2, r3
				| input_buffer[i + 2] << 8 | input_buffer[i + 3]);
 80022ec:	6a3b      	ldr	r3, [r7, #32]
 80022ee:	3302      	adds	r3, #2
 80022f0:	68f9      	ldr	r1, [r7, #12]
 80022f2:	440b      	add	r3, r1
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	021b      	lsls	r3, r3, #8
 80022f8:	4313      	orrs	r3, r2
 80022fa:	6a3a      	ldr	r2, [r7, #32]
 80022fc:	3203      	adds	r2, #3
 80022fe:	68f9      	ldr	r1, [r7, #12]
 8002300:	440a      	add	r2, r1
 8002302:	7812      	ldrb	r2, [r2, #0]
 8002304:	4313      	orrs	r3, r2
	uint32_t checksum;
	checksum = input_buffer[0];
	checksum ^= ((input_buffer[1] << 8 | input_buffer[2]) & 0xFFFF);
	for (int i = 3; i < (PACKET_SIZE - PACKET_CHECKSUM) - 1; i += 4)
	{
		checksum ^= (input_buffer[i] << 24 | input_buffer[i + 1] << 16
 8002306:	461a      	mov	r2, r3
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	4053      	eors	r3, r2
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
	static int packet_counter = 0;
	static int packets_to_be_received = 0;
	uint32_t checksum;
	checksum = input_buffer[0];
	checksum ^= ((input_buffer[1] << 8 | input_buffer[2]) & 0xFFFF);
	for (int i = 3; i < (PACKET_SIZE - PACKET_CHECKSUM) - 1; i += 4)
 800230e:	6a3b      	ldr	r3, [r7, #32]
 8002310:	3304      	adds	r3, #4
 8002312:	623b      	str	r3, [r7, #32]
 8002314:	6a3b      	ldr	r3, [r7, #32]
 8002316:	2b0d      	cmp	r3, #13
 8002318:	dddc      	ble.n	80022d4 <maintainBluetoothInputBuffer+0x30>
	{
		checksum ^= (input_buffer[i] << 24 | input_buffer[i + 1] << 16
				| input_buffer[i + 2] << 8 | input_buffer[i + 3]);
	}
	for(int j = 0;j < 4;j++)
 800231a:	2300      	movs	r3, #0
 800231c:	61fb      	str	r3, [r7, #28]
 800231e:	e00f      	b.n	8002340 <maintainBluetoothInputBuffer+0x9c>
	{
		*((uint8_t*)(control_value->checksum) + 3-j) = input_buffer[15+j];
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	699a      	ldr	r2, [r3, #24]
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	f1c3 0303 	rsb	r3, r3, #3
 800232a:	4413      	add	r3, r2
 800232c:	69fa      	ldr	r2, [r7, #28]
 800232e:	320f      	adds	r2, #15
 8002330:	4611      	mov	r1, r2
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	440a      	add	r2, r1
 8002336:	7812      	ldrb	r2, [r2, #0]
 8002338:	701a      	strb	r2, [r3, #0]
	for (int i = 3; i < (PACKET_SIZE - PACKET_CHECKSUM) - 1; i += 4)
	{
		checksum ^= (input_buffer[i] << 24 | input_buffer[i + 1] << 16
				| input_buffer[i + 2] << 8 | input_buffer[i + 3]);
	}
	for(int j = 0;j < 4;j++)
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	3301      	adds	r3, #1
 800233e:	61fb      	str	r3, [r7, #28]
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	2b03      	cmp	r3, #3
 8002344:	ddec      	ble.n	8002320 <maintainBluetoothInputBuffer+0x7c>
	{
		*((uint8_t*)(control_value->checksum) + 3-j) = input_buffer[15+j];
	}
	control_value->header = (uint8_t*)&input_buffer[0];
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	601a      	str	r2, [r3, #0]
	if (*(control_value->checksum) == checksum)//received checksum is the same as calculated checksum
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	429a      	cmp	r2, r3
 8002356:	f040 8084 	bne.w	8002462 <maintainBluetoothInputBuffer+0x1be>
	{
		if (*control_value->header)//Got a valid Data-Package
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d042      	beq.n	80023ea <maintainBluetoothInputBuffer+0x146>
			{
			if (packets_to_be_received == 0)
 8002364:	4b46      	ldr	r3, [pc, #280]	; (8002480 <maintainBluetoothInputBuffer+0x1dc>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d104      	bne.n	8002376 <maintainBluetoothInputBuffer+0xd2>
			{
				packets_to_be_received = input_buffer[0];
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	461a      	mov	r2, r3
 8002372:	4b43      	ldr	r3, [pc, #268]	; (8002480 <maintainBluetoothInputBuffer+0x1dc>)
 8002374:	601a      	str	r2, [r3, #0]
			}
			int current_val = packet_counter;
 8002376:	4b43      	ldr	r3, [pc, #268]	; (8002484 <maintainBluetoothInputBuffer+0x1e0>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	617b      	str	r3, [r7, #20]
			for (; packet_counter < (current_val + DATA_SIZE);
 800237c:	e010      	b.n	80023a0 <maintainBluetoothInputBuffer+0xfc>
				packet_counter++)
			{
				packet->cmd[packet_counter] = input_buffer[packet_counter
 800237e:	4b41      	ldr	r3, [pc, #260]	; (8002484 <maintainBluetoothInputBuffer+0x1e0>)
 8002380:	681b      	ldr	r3, [r3, #0]
						- current_val + PACKET_HEADER];
 8002382:	4a40      	ldr	r2, [pc, #256]	; (8002484 <maintainBluetoothInputBuffer+0x1e0>)
 8002384:	6811      	ldr	r1, [r2, #0]
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	1a8a      	subs	r2, r1, r2
			}
			int current_val = packet_counter;
			for (; packet_counter < (current_val + DATA_SIZE);
				packet_counter++)
			{
				packet->cmd[packet_counter] = input_buffer[packet_counter
 800238a:	3201      	adds	r2, #1
 800238c:	68f9      	ldr	r1, [r7, #12]
 800238e:	440a      	add	r2, r1
 8002390:	7811      	ldrb	r1, [r2, #0]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	54d1      	strb	r1, [r2, r3]
			{
				packets_to_be_received = input_buffer[0];
			}
			int current_val = packet_counter;
			for (; packet_counter < (current_val + DATA_SIZE);
				packet_counter++)
 8002396:	4b3b      	ldr	r3, [pc, #236]	; (8002484 <maintainBluetoothInputBuffer+0x1e0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	3301      	adds	r3, #1
 800239c:	4a39      	ldr	r2, [pc, #228]	; (8002484 <maintainBluetoothInputBuffer+0x1e0>)
 800239e:	6013      	str	r3, [r2, #0]
			if (packets_to_be_received == 0)
			{
				packets_to_be_received = input_buffer[0];
			}
			int current_val = packet_counter;
			for (; packet_counter < (current_val + DATA_SIZE);
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	f103 020e 	add.w	r2, r3, #14
 80023a6:	4b37      	ldr	r3, [pc, #220]	; (8002484 <maintainBluetoothInputBuffer+0x1e0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	dce7      	bgt.n	800237e <maintainBluetoothInputBuffer+0xda>
				packet_counter++)
			{
				packet->cmd[packet_counter] = input_buffer[packet_counter
						- current_val + PACKET_HEADER];
			}
			if ((input_buffer[0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b0e      	cmp	r3, #14
 80023b4:	d812      	bhi.n	80023dc <maintainBluetoothInputBuffer+0x138>
					<= (PACKET_SIZE - PACKET_HEADER - PACKET_CHECKSUM)))
			{ //all cmd-bytes are within this data-package
				packet->character_count = packets_to_be_received;
 80023b6:	4b32      	ldr	r3, [pc, #200]	; (8002480 <maintainBluetoothInputBuffer+0x1dc>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				packet_counter = 0;
 80023c2:	4b30      	ldr	r3, [pc, #192]	; (8002484 <maintainBluetoothInputBuffer+0x1e0>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
				packets_to_be_received = 0;
 80023c8:	4b2d      	ldr	r3, [pc, #180]	; (8002480 <maintainBluetoothInputBuffer+0x1dc>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]
				//Cleanup Buffer//
				memset(input_buffer, 0x00,PACKET_SIZE);
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	2100      	movs	r1, #0
 80023d2:	2213      	movs	r2, #19
 80023d4:	f009 ff03 	bl	800c1de <memset>
				return RECEIVED_DATA_PACKET; //Got a complete and valid Data-Package
 80023d8:	2301      	movs	r3, #1
 80023da:	e04c      	b.n	8002476 <maintainBluetoothInputBuffer+0x1d2>
			} else {
				memset(input_buffer, 0x00,PACKET_SIZE);
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	2100      	movs	r1, #0
 80023e0:	2213      	movs	r2, #19
 80023e2:	f009 fefc 	bl	800c1de <memset>
				return RECEIVED_DATA_PACKET_N_C; //must do another read operation
 80023e6:	2302      	movs	r3, #2
 80023e8:	e045      	b.n	8002476 <maintainBluetoothInputBuffer+0x1d2>
			}
		} else
		{
			*((uint8_t*)(control_value->height_control)) = input_buffer[1];
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	7852      	ldrb	r2, [r2, #1]
 80023f2:	701a      	strb	r2, [r3, #0]
			*((uint8_t*)(control_value->speed)) = input_buffer[2];
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	7892      	ldrb	r2, [r2, #2]
 80023fc:	701a      	strb	r2, [r3, #0]
			for(int k = 0;k < 4;k++)
 80023fe:	2300      	movs	r3, #0
 8002400:	61bb      	str	r3, [r7, #24]
 8002402:	e029      	b.n	8002458 <maintainBluetoothInputBuffer+0x1b4>
			{
				*((uint8_t*)(control_value->z_rotate) + 3-k) = input_buffer[3+k];
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	68da      	ldr	r2, [r3, #12]
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	f1c3 0303 	rsb	r3, r3, #3
 800240e:	4413      	add	r3, r2
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	3203      	adds	r2, #3
 8002414:	4611      	mov	r1, r2
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	440a      	add	r2, r1
 800241a:	7812      	ldrb	r2, [r2, #0]
 800241c:	701a      	strb	r2, [r3, #0]
				*((uint8_t*)(control_value->x_pitch) + 3-k) = input_buffer[7+k];
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	691a      	ldr	r2, [r3, #16]
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	f1c3 0303 	rsb	r3, r3, #3
 8002428:	4413      	add	r3, r2
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	3207      	adds	r2, #7
 800242e:	4611      	mov	r1, r2
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	440a      	add	r2, r1
 8002434:	7812      	ldrb	r2, [r2, #0]
 8002436:	701a      	strb	r2, [r3, #0]
				*((uint8_t*)(control_value->y_roll) + 3-k) = input_buffer[11+k];
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	695a      	ldr	r2, [r3, #20]
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	f1c3 0303 	rsb	r3, r3, #3
 8002442:	4413      	add	r3, r2
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	320b      	adds	r2, #11
 8002448:	4611      	mov	r1, r2
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	440a      	add	r2, r1
 800244e:	7812      	ldrb	r2, [r2, #0]
 8002450:	701a      	strb	r2, [r3, #0]
			}
		} else
		{
			*((uint8_t*)(control_value->height_control)) = input_buffer[1];
			*((uint8_t*)(control_value->speed)) = input_buffer[2];
			for(int k = 0;k < 4;k++)
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	3301      	adds	r3, #1
 8002456:	61bb      	str	r3, [r7, #24]
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	2b03      	cmp	r3, #3
 800245c:	ddd2      	ble.n	8002404 <maintainBluetoothInputBuffer+0x160>
			{
				*((uint8_t*)(control_value->z_rotate) + 3-k) = input_buffer[3+k];
				*((uint8_t*)(control_value->x_pitch) + 3-k) = input_buffer[7+k];
				*((uint8_t*)(control_value->y_roll) + 3-k) = input_buffer[11+k];
			}
			return RECEIVED_CONTROL_PACKET; //Got a valid Control-Package
 800245e:	2300      	movs	r3, #0
 8002460:	e009      	b.n	8002476 <maintainBluetoothInputBuffer+0x1d2>
		}
	} else {
			packet_counter = 0; //if it happens between data-packages...
 8002462:	4b08      	ldr	r3, [pc, #32]	; (8002484 <maintainBluetoothInputBuffer+0x1e0>)
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
			//Cleanup Buffer//
			memset(input_buffer, 0x00,PACKET_SIZE);
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	2100      	movs	r1, #0
 800246c:	2213      	movs	r2, #19
 800246e:	f009 feb6 	bl	800c1de <memset>
			return CHECKSUM_ERROR; //Wrong checksum
 8002472:	f04f 33ff 	mov.w	r3, #4294967295
	}
	return UNDEFINED_ERROR; //error by default but in fact never reachable
}
 8002476:	4618      	mov	r0, r3
 8002478:	3728      	adds	r7, #40	; 0x28
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20000438 	.word	0x20000438
 8002484:	2000043c 	.word	0x2000043c

08002488 <XMC_USIC_CH_RXFIFO_Flush>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002496:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <GetRCData>:
 *  \param [in] roll Pointer to variable for the value of roll
 *  
 *  \details Starts taking actions after checking if the connection should be per bluetooth or remote control
 */
void GetRCData(float* power,uint8_t* height_control, float* yaw_dot, float* pitch, float* roll)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
 80024b0:	603b      	str	r3, [r7, #0]
				*roll = -30.0f;
			}
		}

#else		//for RC Control with switch to BT Control
	if (flightmode == 0)
 80024b2:	4b67      	ldr	r3, [pc, #412]	; (8002650 <GetRCData+0x1ac>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d158      	bne.n	800256c <GetRCData+0xc8>
		{
			if (RCTimeOut)
 80024ba:	4b66      	ldr	r3, [pc, #408]	; (8002654 <GetRCData+0x1b0>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d010      	beq.n	80024e4 <GetRCData+0x40>
			{
				*power   = 0.0f;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f04f 0200 	mov.w	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
				*yaw_dot = 0.0f;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f04f 0200 	mov.w	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
				*pitch   = 0.0f;
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	f04f 0200 	mov.w	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]
				*roll    = 0.0f;
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	f04f 0200 	mov.w	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	e0af      	b.n	8002644 <GetRCData+0x1a0>
			}
			else
			{
				*power = SCALE_POWER * g_joystick_values.throttle;
 80024e4:	4b5c      	ldr	r3, [pc, #368]	; (8002658 <GetRCData+0x1b4>)
 80024e6:	edd3 7a00 	vldr	s15, [r3]
 80024ea:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 800265c <GetRCData+0x1b8>
 80024ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	edc3 7a00 	vstr	s15, [r3]
				if (g_joystick_values.rudder > 0.01f || g_joystick_values.rudder < -0.01f)
 80024f8:	4b57      	ldr	r3, [pc, #348]	; (8002658 <GetRCData+0x1b4>)
 80024fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80024fe:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002660 <GetRCData+0x1bc>
 8002502:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250a:	dc09      	bgt.n	8002520 <GetRCData+0x7c>
 800250c:	4b52      	ldr	r3, [pc, #328]	; (8002658 <GetRCData+0x1b4>)
 800250e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002512:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8002664 <GetRCData+0x1c0>
 8002516:	eef4 7ac7 	vcmpe.f32	s15, s14
 800251a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800251e:	d50a      	bpl.n	8002536 <GetRCData+0x92>
					*yaw_dot = g_joystick_values.rudder * SCALE_YAW;
 8002520:	4b4d      	ldr	r3, [pc, #308]	; (8002658 <GetRCData+0x1b4>)
 8002522:	edd3 7a01 	vldr	s15, [r3, #4]
 8002526:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8002668 <GetRCData+0x1c4>
 800252a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	edc3 7a00 	vstr	s15, [r3]
 8002534:	e003      	b.n	800253e <GetRCData+0x9a>
				else
					*yaw_dot = 0.0f;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f04f 0200 	mov.w	r2, #0
 800253c:	601a      	str	r2, [r3, #0]
					*pitch=g_joystick_values.elevator*SCALE_PITCH;
 800253e:	4b46      	ldr	r3, [pc, #280]	; (8002658 <GetRCData+0x1b4>)
 8002540:	edd3 7a02 	vldr	s15, [r3, #8]
 8002544:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800266c <GetRCData+0x1c8>
 8002548:	ee67 7a87 	vmul.f32	s15, s15, s14
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	edc3 7a00 	vstr	s15, [r3]
					*roll=-g_joystick_values.aileron*SCALE_ROLL;
 8002552:	4b41      	ldr	r3, [pc, #260]	; (8002658 <GetRCData+0x1b4>)
 8002554:	edd3 7a03 	vldr	s15, [r3, #12]
 8002558:	eef1 7a67 	vneg.f32	s15, s15
 800255c:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800266c <GetRCData+0x1c8>
 8002560:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	edc3 7a00 	vstr	s15, [r3]
 800256a:	e06b      	b.n	8002644 <GetRCData+0x1a0>
			}
		}
		else
		{
			if (BTTimeOut || RCTimeOut)
 800256c:	4b40      	ldr	r3, [pc, #256]	; (8002670 <GetRCData+0x1cc>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d103      	bne.n	800257c <GetRCData+0xd8>
 8002574:	4b37      	ldr	r3, [pc, #220]	; (8002654 <GetRCData+0x1b0>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d010      	beq.n	800259e <GetRCData+0xfa>
			{
				*power   = 0.0f;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
				*yaw_dot = 0.0f;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
				*pitch   = 0.0f;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	f04f 0200 	mov.w	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
				*roll    = 0.0f;
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	e052      	b.n	8002644 <GetRCData+0x1a0>
			}
			else
			{
				*power =(float) g_bluetooth_values.throttle;
 800259e:	4b35      	ldr	r3, [pc, #212]	; (8002674 <GetRCData+0x1d0>)
 80025a0:	881b      	ldrh	r3, [r3, #0]
 80025a2:	ee07 3a90 	vmov	s15, r3
 80025a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	edc3 7a00 	vstr	s15, [r3]
				*height_control = g_bluetooth_values.heightControl;
 80025b0:	4b30      	ldr	r3, [pc, #192]	; (8002674 <GetRCData+0x1d0>)
 80025b2:	789a      	ldrb	r2, [r3, #2]
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	701a      	strb	r2, [r3, #0]
				*pitch = g_bluetooth_values.elevator;
 80025b8:	4b2e      	ldr	r3, [pc, #184]	; (8002674 <GetRCData+0x1d0>)
 80025ba:	68da      	ldr	r2, [r3, #12]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	601a      	str	r2, [r3, #0]
				*roll = -g_bluetooth_values.aileron;
 80025c0:	4b2c      	ldr	r3, [pc, #176]	; (8002674 <GetRCData+0x1d0>)
 80025c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80025c6:	eef1 7a67 	vneg.f32	s15, s15
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	edc3 7a00 	vstr	s15, [r3]
				*yaw_dot = g_bluetooth_values.rudder;
 80025d0:	4b28      	ldr	r3, [pc, #160]	; (8002674 <GetRCData+0x1d0>)
 80025d2:	685a      	ldr	r2, [r3, #4]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	601a      	str	r2, [r3, #0]
				if (*pitch > 30.0f)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	edd3 7a00 	vldr	s15, [r3]
 80025de:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800266c <GetRCData+0x1c8>
 80025e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ea:	dd03      	ble.n	80025f4 <GetRCData+0x150>
				{
					*pitch = 30.0f;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	4a22      	ldr	r2, [pc, #136]	; (8002678 <GetRCData+0x1d4>)
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	e00c      	b.n	800260e <GetRCData+0x16a>
				}
				else if (*pitch < -30.0f)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	edd3 7a00 	vldr	s15, [r3]
 80025fa:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800267c <GetRCData+0x1d8>
 80025fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002606:	d502      	bpl.n	800260e <GetRCData+0x16a>
				{
					*pitch = -30.0f;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	4a1d      	ldr	r2, [pc, #116]	; (8002680 <GetRCData+0x1dc>)
 800260c:	601a      	str	r2, [r3, #0]
				}

				if (*roll > 30.0f)
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	edd3 7a00 	vldr	s15, [r3]
 8002614:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800266c <GetRCData+0x1c8>
 8002618:	eef4 7ac7 	vcmpe.f32	s15, s14
 800261c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002620:	dd03      	ble.n	800262a <GetRCData+0x186>
				{
					*roll = 30.0f;
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	4a14      	ldr	r2, [pc, #80]	; (8002678 <GetRCData+0x1d4>)
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	e00c      	b.n	8002644 <GetRCData+0x1a0>
				}
				else if (*roll < -30.0f)
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	edd3 7a00 	vldr	s15, [r3]
 8002630:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800267c <GetRCData+0x1d8>
 8002634:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800263c:	d502      	bpl.n	8002644 <GetRCData+0x1a0>
				{
					*roll = -30.0f;
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	4a0f      	ldr	r2, [pc, #60]	; (8002680 <GetRCData+0x1dc>)
 8002642:	601a      	str	r2, [r3, #0]
				}
			}
		}
#endif
}
 8002644:	3714      	adds	r7, #20
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	20000440 	.word	0x20000440
 8002654:	20000035 	.word	0x20000035
 8002658:	20000444 	.word	0x20000444
 800265c:	42c80000 	.word	0x42c80000
 8002660:	3c23d70a 	.word	0x3c23d70a
 8002664:	bc23d70a 	.word	0xbc23d70a
 8002668:	42b40000 	.word	0x42b40000
 800266c:	41f00000 	.word	0x41f00000
 8002670:	20000036 	.word	0x20000036
 8002674:	20000454 	.word	0x20000454
 8002678:	41f00000 	.word	0x41f00000
 800267c:	c1f00000 	.word	0xc1f00000
 8002680:	c1f00000 	.word	0xc1f00000

08002684 <mergeBytes>:
 *  \return uint16_t variable with merged Bytes
 *  
 *  \details This is required for extracting two Bytes of the data frame into one variable
 */
int mergeBytes(uint8_t highBytes, uint8_t lowBytes)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	460a      	mov	r2, r1
 800268e:	71fb      	strb	r3, [r7, #7]
 8002690:	4613      	mov	r3, r2
 8002692:	71bb      	strb	r3, [r7, #6]
	int c = highBytes;
 8002694:	79fb      	ldrb	r3, [r7, #7]
 8002696:	60fb      	str	r3, [r7, #12]
	return (c << 8) | lowBytes;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	021a      	lsls	r2, r3, #8
 800269c:	79bb      	ldrb	r3, [r7, #6]
 800269e:	4313      	orrs	r3, r2
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <CCU41_2_IRQHandler>:
 *  
 *  
 *  \details This function is for messaging the connected device that the connection is alive
 */
void GeneralPurpose_Timer_Bluetooth_Keep_Alive_ISR()
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
	uint8_t keep_alive = 0xFF;
 80026b2:	23ff      	movs	r3, #255	; 0xff
 80026b4:	71fb      	strb	r3, [r7, #7]
	UART_WriteDataBytes(&Bluetooth_Handle, &keep_alive, 1);
 80026b6:	1dfb      	adds	r3, r7, #7
 80026b8:	4803      	ldr	r0, [pc, #12]	; (80026c8 <CCU41_2_IRQHandler+0x1c>)
 80026ba:	4619      	mov	r1, r3
 80026bc:	2201      	movs	r2, #1
 80026be:	f7fd fe5f 	bl	8000380 <UART_WriteDataBytes>
}
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	200000b0 	.word	0x200000b0

080026cc <USIC1_0_IRQHandler>:
 *  
 *  
 *  \details When buffer is full, new data is ready to read
 */
void RemoteControl_RX_ISR()
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b090      	sub	sp, #64	; 0x40
 80026d0:	af02      	add	r7, sp, #8
	int elevatorRaw;
	int aileronRaw;
	int flightmodeRaw;

	uint8_t ReadBufRC[32]; //Readbuffer
	int start = 0; //Index of start byte (contains 0x30)
 80026d2:	2300      	movs	r3, #0
 80026d4:	637b      	str	r3, [r7, #52]	; 0x34


	//Read data from UART buffer
	UART_ReadDataBytes(&RemoteControl_Handle, ReadBufRC, 32);
 80026d6:	463b      	mov	r3, r7
 80026d8:	4884      	ldr	r0, [pc, #528]	; (80028ec <USIC1_0_IRQHandler+0x220>)
 80026da:	4619      	mov	r1, r3
 80026dc:	2220      	movs	r2, #32
 80026de:	f7fd fe71 	bl	80003c4 <UART_ReadDataBytes>

	//Search for start byte and check static values
	while (ReadBufRC[start] != 0x30 || ReadBufRC[start + 1] != 0x00
 80026e2:	e005      	b.n	80026f0 <USIC1_0_IRQHandler+0x24>
			|| ReadBufRC[start + 5] != 0xA2 || ReadBufRC[start + 8] != 0x2B
			|| ReadBufRC[start + 9] != 0xFE)
	{
		if (start++ > 16)
 80026e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e6:	1c5a      	adds	r2, r3, #1
 80026e8:	637a      	str	r2, [r7, #52]	; 0x34
 80026ea:	2b10      	cmp	r3, #16
 80026ec:	f300 80fa 	bgt.w	80028e4 <USIC1_0_IRQHandler+0x218>

	//Read data from UART buffer
	UART_ReadDataBytes(&RemoteControl_Handle, ReadBufRC, 32);

	//Search for start byte and check static values
	while (ReadBufRC[start] != 0x30 || ReadBufRC[start + 1] != 0x00
 80026f0:	463a      	mov	r2, r7
 80026f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f4:	4413      	add	r3, r2
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	2b30      	cmp	r3, #48	; 0x30
 80026fa:	d1f3      	bne.n	80026e4 <USIC1_0_IRQHandler+0x18>
 80026fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026fe:	3301      	adds	r3, #1
 8002700:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002704:	4413      	add	r3, r2
 8002706:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1ea      	bne.n	80026e4 <USIC1_0_IRQHandler+0x18>
			|| ReadBufRC[start + 5] != 0xA2 || ReadBufRC[start + 8] != 0x2B
 800270e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002710:	3305      	adds	r3, #5
 8002712:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002716:	4413      	add	r3, r2
 8002718:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 800271c:	2ba2      	cmp	r3, #162	; 0xa2
 800271e:	d1e1      	bne.n	80026e4 <USIC1_0_IRQHandler+0x18>
 8002720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002722:	3308      	adds	r3, #8
 8002724:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002728:	4413      	add	r3, r2
 800272a:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 800272e:	2b2b      	cmp	r3, #43	; 0x2b
 8002730:	d1d8      	bne.n	80026e4 <USIC1_0_IRQHandler+0x18>
			|| ReadBufRC[start + 9] != 0xFE)
 8002732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002734:	3309      	adds	r3, #9
 8002736:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800273a:	4413      	add	r3, r2
 800273c:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8002740:	2bfe      	cmp	r3, #254	; 0xfe
 8002742:	d1cf      	bne.n	80026e4 <USIC1_0_IRQHandler+0x18>
			return;
		}
	}
	//Get data from stream
	//get raw values
	throttleRaw = mergeBytes(ReadBufRC[start + 2], ReadBufRC[start + 3]);
 8002744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002746:	3302      	adds	r3, #2
 8002748:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800274c:	4413      	add	r3, r2
 800274e:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 8002752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002754:	3303      	adds	r3, #3
 8002756:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800275a:	440b      	add	r3, r1
 800275c:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8002760:	4610      	mov	r0, r2
 8002762:	4619      	mov	r1, r3
 8002764:	f7ff ff8e 	bl	8002684 <mergeBytes>
 8002768:	6338      	str	r0, [r7, #48]	; 0x30
	aileronRaw = mergeBytes(ReadBufRC[start + 6], ReadBufRC[start + 7]);
 800276a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800276c:	3306      	adds	r3, #6
 800276e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002772:	4413      	add	r3, r2
 8002774:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 8002778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800277a:	3307      	adds	r3, #7
 800277c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002780:	440b      	add	r3, r1
 8002782:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8002786:	4610      	mov	r0, r2
 8002788:	4619      	mov	r1, r3
 800278a:	f7ff ff7b 	bl	8002684 <mergeBytes>
 800278e:	62f8      	str	r0, [r7, #44]	; 0x2c
	elevatorRaw = mergeBytes(ReadBufRC[start + 10], ReadBufRC[start + 11]);
 8002790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002792:	330a      	adds	r3, #10
 8002794:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002798:	4413      	add	r3, r2
 800279a:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 800279e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a0:	330b      	adds	r3, #11
 80027a2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80027a6:	440b      	add	r3, r1
 80027a8:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80027ac:	4610      	mov	r0, r2
 80027ae:	4619      	mov	r1, r3
 80027b0:	f7ff ff68 	bl	8002684 <mergeBytes>
 80027b4:	62b8      	str	r0, [r7, #40]	; 0x28
	rudderRaw = mergeBytes(ReadBufRC[start + 14], ReadBufRC[start + 15]);
 80027b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027b8:	330e      	adds	r3, #14
 80027ba:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80027be:	4413      	add	r3, r2
 80027c0:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 80027c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027c6:	330f      	adds	r3, #15
 80027c8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80027cc:	440b      	add	r3, r1
 80027ce:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80027d2:	4610      	mov	r0, r2
 80027d4:	4619      	mov	r1, r3
 80027d6:	f7ff ff55 	bl	8002684 <mergeBytes>
 80027da:	6278      	str	r0, [r7, #36]	; 0x24
	flightmodeRaw = mergeBytes(ReadBufRC[start + 12],ReadBufRC[start + 13]);
 80027dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027de:	330c      	adds	r3, #12
 80027e0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80027e4:	4413      	add	r3, r2
 80027e6:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 80027ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ec:	330d      	adds	r3, #13
 80027ee:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80027f2:	440b      	add	r3, r1
 80027f4:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80027f8:	4610      	mov	r0, r2
 80027fa:	4619      	mov	r1, r3
 80027fc:	f7ff ff42 	bl	8002684 <mergeBytes>
 8002800:	6238      	str	r0, [r7, #32]
	//remap raw values to control values
	g_joystick_values.throttle = map(throttleRaw, THROTTLE_MIN, THROTTLE_MAX, 0, 60000)/ 60000.0f;
 8002802:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800280a:	f44f 7199 	mov.w	r1, #306	; 0x132
 800280e:	f240 62f7 	movw	r2, #1783	; 0x6f7
 8002812:	2300      	movs	r3, #0
 8002814:	f000 f94e 	bl	8002ab4 <map>
 8002818:	ee07 0a90 	vmov	s15, r0
 800281c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002820:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80028f0 <USIC1_0_IRQHandler+0x224>
 8002824:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8002828:	4b32      	ldr	r3, [pc, #200]	; (80028f4 <USIC1_0_IRQHandler+0x228>)
 800282a:	edc3 7a00 	vstr	s15, [r3]
	g_joystick_values.aileron = map(aileronRaw, AILERON_MIN, AILERON_MAX, -30000, 30000)/ 30000.0f;
 800282e:	f247 5330 	movw	r3, #30000	; 0x7530
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002836:	f640 1132 	movw	r1, #2354	; 0x932
 800283a:	f640 62cc 	movw	r2, #3788	; 0xecc
 800283e:	4b2e      	ldr	r3, [pc, #184]	; (80028f8 <USIC1_0_IRQHandler+0x22c>)
 8002840:	f000 f938 	bl	8002ab4 <map>
 8002844:	ee07 0a90 	vmov	s15, r0
 8002848:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800284c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80028fc <USIC1_0_IRQHandler+0x230>
 8002850:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8002854:	4b27      	ldr	r3, [pc, #156]	; (80028f4 <USIC1_0_IRQHandler+0x228>)
 8002856:	edc3 7a03 	vstr	s15, [r3, #12]
	g_joystick_values.elevator = map(elevatorRaw, ELEVATOR_MIN, ELEVATOR_MAX, -30000, 30000)/ 30000.0f;
 800285a:	f247 5330 	movw	r3, #30000	; 0x7530
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002862:	f241 1130 	movw	r1, #4400	; 0x1130
 8002866:	f241 62ca 	movw	r2, #5834	; 0x16ca
 800286a:	4b23      	ldr	r3, [pc, #140]	; (80028f8 <USIC1_0_IRQHandler+0x22c>)
 800286c:	f000 f922 	bl	8002ab4 <map>
 8002870:	ee07 0a90 	vmov	s15, r0
 8002874:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002878:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80028fc <USIC1_0_IRQHandler+0x230>
 800287c:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8002880:	4b1c      	ldr	r3, [pc, #112]	; (80028f4 <USIC1_0_IRQHandler+0x228>)
 8002882:	edc3 7a02 	vstr	s15, [r3, #8]
	g_joystick_values.rudder = map(rudderRaw, RUDDER_MIN, RUDDER_MAX, -30000, 30000)/ 30000.0f;
 8002886:	f247 5330 	movw	r3, #30000	; 0x7530
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800288e:	f641 1132 	movw	r1, #6450	; 0x1932
 8002892:	f641 62cc 	movw	r2, #7884	; 0x1ecc
 8002896:	4b18      	ldr	r3, [pc, #96]	; (80028f8 <USIC1_0_IRQHandler+0x22c>)
 8002898:	f000 f90c 	bl	8002ab4 <map>
 800289c:	ee07 0a90 	vmov	s15, r0
 80028a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028a4:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80028fc <USIC1_0_IRQHandler+0x230>
 80028a8:	eec7 7a87 	vdiv.f32	s15, s15, s14
 80028ac:	4b11      	ldr	r3, [pc, #68]	; (80028f4 <USIC1_0_IRQHandler+0x228>)
 80028ae:	edc3 7a01 	vstr	s15, [r3, #4]

	if (flightmodeRaw == FLIGHTMODE0)
 80028b2:	6a3b      	ldr	r3, [r7, #32]
 80028b4:	f242 1232 	movw	r2, #8498	; 0x2132
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d102      	bne.n	80028c2 <USIC1_0_IRQHandler+0x1f6>
		flightmode = 0;
 80028bc:	4b10      	ldr	r3, [pc, #64]	; (8002900 <USIC1_0_IRQHandler+0x234>)
 80028be:	2200      	movs	r2, #0
 80028c0:	701a      	strb	r2, [r3, #0]
	if (flightmodeRaw == FLIGHTMODE1)
 80028c2:	6a3b      	ldr	r3, [r7, #32]
 80028c4:	f242 62ca 	movw	r2, #9930	; 0x26ca
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d102      	bne.n	80028d2 <USIC1_0_IRQHandler+0x206>
		flightmode = 1;
 80028cc:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <USIC1_0_IRQHandler+0x234>)
 80028ce:	2201      	movs	r2, #1
 80028d0:	701a      	strb	r2, [r3, #0]
	//Set values for RC Timeout check
	RCTimeOut = 0;
 80028d2:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <USIC1_0_IRQHandler+0x238>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	701a      	strb	r2, [r3, #0]
	RCCount++;
 80028d8:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <USIC1_0_IRQHandler+0x23c>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	3301      	adds	r3, #1
 80028de:	b2da      	uxtb	r2, r3
 80028e0:	4b09      	ldr	r3, [pc, #36]	; (8002908 <USIC1_0_IRQHandler+0x23c>)
 80028e2:	701a      	strb	r2, [r3, #0]

}
 80028e4:	3738      	adds	r7, #56	; 0x38
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	200000bc 	.word	0x200000bc
 80028f0:	476a6000 	.word	0x476a6000
 80028f4:	20000444 	.word	0x20000444
 80028f8:	ffff8ad0 	.word	0xffff8ad0
 80028fc:	46ea6000 	.word	0x46ea6000
 8002900:	20000440 	.word	0x20000440
 8002904:	20000035 	.word	0x20000035
 8002908:	20000441 	.word	0x20000441

0800290c <USIC0_5_IRQHandler>:
 *  
 *  \details reads data bytes, analyzes the data and checks if error occurs
 *  \details if errors occur -> motors are stopped
 */
void Bluetooth_RX_ISR()
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
	UART_ReadDataBytes(&Bluetooth_Handle, ReadBufBT, PACKET_SIZE);
 8002912:	4b39      	ldr	r3, [pc, #228]	; (80029f8 <USIC0_5_IRQHandler+0xec>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4839      	ldr	r0, [pc, #228]	; (80029fc <USIC0_5_IRQHandler+0xf0>)
 8002918:	4619      	mov	r1, r3
 800291a:	2213      	movs	r2, #19
 800291c:	f7fd fd52 	bl	80003c4 <UART_ReadDataBytes>
	BTTimeOut = 0;
 8002920:	4b37      	ldr	r3, [pc, #220]	; (8002a00 <USIC0_5_IRQHandler+0xf4>)
 8002922:	2200      	movs	r2, #0
 8002924:	701a      	strb	r2, [r3, #0]
	BTCount++;
 8002926:	4b37      	ldr	r3, [pc, #220]	; (8002a04 <USIC0_5_IRQHandler+0xf8>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	3301      	adds	r3, #1
 800292c:	b2da      	uxtb	r2, r3
 800292e:	4b35      	ldr	r3, [pc, #212]	; (8002a04 <USIC0_5_IRQHandler+0xf8>)
 8002930:	701a      	strb	r2, [r3, #0]
	int32_t rec_mode = maintainBluetoothInputBuffer(ReadBufBT,&control_value, &dpacket);
 8002932:	4b31      	ldr	r3, [pc, #196]	; (80029f8 <USIC0_5_IRQHandler+0xec>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	4933      	ldr	r1, [pc, #204]	; (8002a08 <USIC0_5_IRQHandler+0xfc>)
 800293a:	4a34      	ldr	r2, [pc, #208]	; (8002a0c <USIC0_5_IRQHandler+0x100>)
 800293c:	f7ff fcb2 	bl	80022a4 <maintainBluetoothInputBuffer>
 8002940:	6078      	str	r0, [r7, #4]
	switch (rec_mode)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	3302      	adds	r3, #2
 8002946:	2b03      	cmp	r3, #3
 8002948:	d853      	bhi.n	80029f2 <USIC0_5_IRQHandler+0xe6>
 800294a:	a201      	add	r2, pc, #4	; (adr r2, 8002950 <USIC0_5_IRQHandler+0x44>)
 800294c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002950:	080029c9 	.word	0x080029c9
 8002954:	0800299f 	.word	0x0800299f
 8002958:	08002961 	.word	0x08002961
 800295c:	080029f3 	.word	0x080029f3
	{
	case RECEIVED_CONTROL_PACKET:
		g_bluetooth_values.throttle = (uint16_t)*control_value.speed;
 8002960:	4b29      	ldr	r3, [pc, #164]	; (8002a08 <USIC0_5_IRQHandler+0xfc>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	b29a      	uxth	r2, r3
 8002968:	4b29      	ldr	r3, [pc, #164]	; (8002a10 <USIC0_5_IRQHandler+0x104>)
 800296a:	801a      	strh	r2, [r3, #0]
		g_bluetooth_values.heightControl = *control_value.height_control;
 800296c:	4b26      	ldr	r3, [pc, #152]	; (8002a08 <USIC0_5_IRQHandler+0xfc>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	781a      	ldrb	r2, [r3, #0]
 8002972:	4b27      	ldr	r3, [pc, #156]	; (8002a10 <USIC0_5_IRQHandler+0x104>)
 8002974:	709a      	strb	r2, [r3, #2]
		g_bluetooth_values.aileron = (*control_value.x_pitch);
 8002976:	4b24      	ldr	r3, [pc, #144]	; (8002a08 <USIC0_5_IRQHandler+0xfc>)
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a24      	ldr	r2, [pc, #144]	; (8002a10 <USIC0_5_IRQHandler+0x104>)
 800297e:	6093      	str	r3, [r2, #8]
		g_bluetooth_values.elevator = (-*control_value.y_roll);
 8002980:	4b21      	ldr	r3, [pc, #132]	; (8002a08 <USIC0_5_IRQHandler+0xfc>)
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	edd3 7a00 	vldr	s15, [r3]
 8002988:	eef1 7a67 	vneg.f32	s15, s15
 800298c:	4b20      	ldr	r3, [pc, #128]	; (8002a10 <USIC0_5_IRQHandler+0x104>)
 800298e:	edc3 7a03 	vstr	s15, [r3, #12]
		g_bluetooth_values.rudder = (*control_value.z_rotate);
 8002992:	4b1d      	ldr	r3, [pc, #116]	; (8002a08 <USIC0_5_IRQHandler+0xfc>)
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a1d      	ldr	r2, [pc, #116]	; (8002a10 <USIC0_5_IRQHandler+0x104>)
 800299a:	6053      	str	r3, [r2, #4]
		break;
 800299c:	e029      	b.n	80029f2 <USIC0_5_IRQHandler+0xe6>
	case RECEIVED_DATA_PACKET:
		break;
	case CHECKSUM_ERROR:
		g_bluetooth_values.throttle = 0;
 800299e:	4b1c      	ldr	r3, [pc, #112]	; (8002a10 <USIC0_5_IRQHandler+0x104>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	801a      	strh	r2, [r3, #0]
		g_bluetooth_values.aileron  = 0.0f;
 80029a4:	4b1a      	ldr	r3, [pc, #104]	; (8002a10 <USIC0_5_IRQHandler+0x104>)
 80029a6:	f04f 0200 	mov.w	r2, #0
 80029aa:	609a      	str	r2, [r3, #8]
		g_bluetooth_values.elevator = 0.0f;
 80029ac:	4b18      	ldr	r3, [pc, #96]	; (8002a10 <USIC0_5_IRQHandler+0x104>)
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	60da      	str	r2, [r3, #12]
		g_bluetooth_values.rudder   = 0.0f;
 80029b4:	4b16      	ldr	r3, [pc, #88]	; (8002a10 <USIC0_5_IRQHandler+0x104>)
 80029b6:	f04f 0200 	mov.w	r2, #0
 80029ba:	605a      	str	r2, [r3, #4]
		XMC_USIC_CH_RXFIFO_Flush(Bluetooth_Handle.channel);
 80029bc:	4b0f      	ldr	r3, [pc, #60]	; (80029fc <USIC0_5_IRQHandler+0xf0>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff fd61 	bl	8002488 <XMC_USIC_CH_RXFIFO_Flush>
		//Todo: Add Error-Handling
		break;
 80029c6:	e014      	b.n	80029f2 <USIC0_5_IRQHandler+0xe6>
	case UNDEFINED_ERROR:
		g_bluetooth_values.throttle = 0;
 80029c8:	4b11      	ldr	r3, [pc, #68]	; (8002a10 <USIC0_5_IRQHandler+0x104>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	801a      	strh	r2, [r3, #0]
		g_bluetooth_values.aileron  = 0.0f;
 80029ce:	4b10      	ldr	r3, [pc, #64]	; (8002a10 <USIC0_5_IRQHandler+0x104>)
 80029d0:	f04f 0200 	mov.w	r2, #0
 80029d4:	609a      	str	r2, [r3, #8]
		g_bluetooth_values.elevator = 0.0f;
 80029d6:	4b0e      	ldr	r3, [pc, #56]	; (8002a10 <USIC0_5_IRQHandler+0x104>)
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	60da      	str	r2, [r3, #12]
		g_bluetooth_values.rudder   = 0.0f;
 80029de:	4b0c      	ldr	r3, [pc, #48]	; (8002a10 <USIC0_5_IRQHandler+0x104>)
 80029e0:	f04f 0200 	mov.w	r2, #0
 80029e4:	605a      	str	r2, [r3, #4]
		XMC_USIC_CH_RXFIFO_Flush(Bluetooth_Handle.channel);
 80029e6:	4b05      	ldr	r3, [pc, #20]	; (80029fc <USIC0_5_IRQHandler+0xf0>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff fd4c 	bl	8002488 <XMC_USIC_CH_RXFIFO_Flush>
		//Todo: Add Error-Handling
		break;
 80029f0:	bf00      	nop
	}
}
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	200005ac 	.word	0x200005ac
 80029fc:	200000b0 	.word	0x200000b0
 8002a00:	20000036 	.word	0x20000036
 8002a04:	20000442 	.word	0x20000442
 8002a08:	200005b0 	.word	0x200005b0
 8002a0c:	20000580 	.word	0x20000580
 8002a10:	20000454 	.word	0x20000454

08002a14 <WatchRC>:
 *  
 *  \details This function is called from software Timer "TimerWatchRC"
 *  \details
 */
void WatchRC(void* Temp)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
	static uint8_t lastCount;
	static uint8_t lastBTCount;

	if (lastCount == RCCount)
 8002a1c:	4b10      	ldr	r3, [pc, #64]	; (8002a60 <WatchRC+0x4c>)
 8002a1e:	781a      	ldrb	r2, [r3, #0]
 8002a20:	4b10      	ldr	r3, [pc, #64]	; (8002a64 <WatchRC+0x50>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d102      	bne.n	8002a2e <WatchRC+0x1a>
		RCTimeOut = 1;
 8002a28:	4b0f      	ldr	r3, [pc, #60]	; (8002a68 <WatchRC+0x54>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	701a      	strb	r2, [r3, #0]
	lastCount = RCCount;
 8002a2e:	4b0d      	ldr	r3, [pc, #52]	; (8002a64 <WatchRC+0x50>)
 8002a30:	781a      	ldrb	r2, [r3, #0]
 8002a32:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <WatchRC+0x4c>)
 8002a34:	701a      	strb	r2, [r3, #0]

	if (lastBTCount == BTCount)
 8002a36:	4b0d      	ldr	r3, [pc, #52]	; (8002a6c <WatchRC+0x58>)
 8002a38:	781a      	ldrb	r2, [r3, #0]
 8002a3a:	4b0d      	ldr	r3, [pc, #52]	; (8002a70 <WatchRC+0x5c>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d107      	bne.n	8002a52 <WatchRC+0x3e>
	{
		BTTimeOut = 1;
 8002a42:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <WatchRC+0x60>)
 8002a44:	2201      	movs	r2, #1
 8002a46:	701a      	strb	r2, [r3, #0]
		XMC_USIC_CH_RXFIFO_Flush(Bluetooth_Handle.channel);
 8002a48:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <WatchRC+0x64>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff fd1b 	bl	8002488 <XMC_USIC_CH_RXFIFO_Flush>
	}
	lastBTCount = BTCount;
 8002a52:	4b07      	ldr	r3, [pc, #28]	; (8002a70 <WatchRC+0x5c>)
 8002a54:	781a      	ldrb	r2, [r3, #0]
 8002a56:	4b05      	ldr	r3, [pc, #20]	; (8002a6c <WatchRC+0x58>)
 8002a58:	701a      	strb	r2, [r3, #0]
}
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	20000464 	.word	0x20000464
 8002a64:	20000441 	.word	0x20000441
 8002a68:	20000035 	.word	0x20000035
 8002a6c:	20000465 	.word	0x20000465
 8002a70:	20000442 	.word	0x20000442
 8002a74:	20000036 	.word	0x20000036
 8002a78:	200000b0 	.word	0x200000b0

08002a7c <WatchRC_Init>:
 *  
 *  \details Timer overflows every 0.2 seconds
 *  \details Further it's been checked if the timer is running
 */
void WatchRC_Init()
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
	TimerWatchRC = (uint32_t)SYSTIMER_CreateTimer(200000,SYSTIMER_MODE_PERIODIC,(void*)WatchRC,NULL);
 8002a80:	4809      	ldr	r0, [pc, #36]	; (8002aa8 <WatchRC_Init+0x2c>)
 8002a82:	2101      	movs	r1, #1
 8002a84:	4a09      	ldr	r2, [pc, #36]	; (8002aac <WatchRC_Init+0x30>)
 8002a86:	2300      	movs	r3, #0
 8002a88:	f006 fc0c 	bl	80092a4 <SYSTIMER_CreateTimer>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	4b08      	ldr	r3, [pc, #32]	; (8002ab0 <WatchRC_Init+0x34>)
 8002a90:	601a      	str	r2, [r3, #0]
	if (TimerWatchRC != 0U)
 8002a92:	4b07      	ldr	r3, [pc, #28]	; (8002ab0 <WatchRC_Init+0x34>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d004      	beq.n	8002aa4 <WatchRC_Init+0x28>
	{
		//Timer is created successfully
		// Start/Run Software Timer
		if (SYSTIMER_StartTimer(TimerWatchRC) == SYSTIMER_STATUS_SUCCESS)
 8002a9a:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <WatchRC_Init+0x34>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f006 fc9e 	bl	80093e0 <SYSTIMER_StartTimer>
		{
			// Timer is running
		}
	}
}
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	00030d40 	.word	0x00030d40
 8002aac:	08002a15 	.word	0x08002a15
 8002ab0:	200005cc 	.word	0x200005cc

08002ab4 <map>:
 * 	\return if x==in_max it returns out_max
 *  
 *  \details This function is used to scale the value of x from the value range [in_min ... in_max] to the value range [out_min ... out_max]
 */
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
 8002ac0:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	69b9      	ldr	r1, [r7, #24]
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	1a8a      	subs	r2, r1, r2
 8002ace:	fb02 f203 	mul.w	r2, r2, r3
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	1acb      	subs	r3, r1, r3
 8002ad8:	fb92 f2f3 	sdiv	r2, r2, r3
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	4413      	add	r3, r2
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <VADC0_C0_2_IRQHandler>:
 * Red LED flashing -> Battery Voltage < 10.5V\n
 * The VBat Pin has to be connected to the right Pin of the Bat Safety Connector, and R13 must be min. 30kOhm and C29(10uF) has to be mounted.\n
 */

void VBat_Measurement_ISR(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
	XMC_VADC_RESULT_SIZE_t ADC_Result = ADC_MEASUREMENT_GetResult(&ADC_MEASUREMENT_Channel_VBat);
 8002af2:	4822      	ldr	r0, [pc, #136]	; (8002b7c <VADC0_C0_2_IRQHandler+0x90>)
 8002af4:	f007 fba6 	bl	800a244 <ADC_MEASUREMENT_GetResult>
 8002af8:	4603      	mov	r3, r0
 8002afa:	80fb      	strh	r3, [r7, #6]

	//LED Display
	if (ADC_Result > Battery_State1)
 8002afc:	88fb      	ldrh	r3, [r7, #6]
 8002afe:	f640 628c 	movw	r2, #3724	; 0xe8c
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d909      	bls.n	8002b1a <VADC0_C0_2_IRQHandler+0x2e>
	{
		Set(P3_0); 		 //VBat_LED_Green
 8002b06:	4b1e      	ldr	r3, [pc, #120]	; (8002b80 <VADC0_C0_2_IRQHandler+0x94>)
 8002b08:	2201      	movs	r2, #1
 8002b0a:	605a      	str	r2, [r3, #4]
		Set(P3_1);		 //VBat_LED_Yellow
 8002b0c:	4b1c      	ldr	r3, [pc, #112]	; (8002b80 <VADC0_C0_2_IRQHandler+0x94>)
 8002b0e:	2202      	movs	r2, #2
 8002b10:	605a      	str	r2, [r3, #4]
		Set(P3_2);		 //VBat_LED_Red
 8002b12:	4b1b      	ldr	r3, [pc, #108]	; (8002b80 <VADC0_C0_2_IRQHandler+0x94>)
 8002b14:	2204      	movs	r2, #4
 8002b16:	605a      	str	r2, [r3, #4]
 8002b18:	e02c      	b.n	8002b74 <VADC0_C0_2_IRQHandler+0x88>
	}
	else if (ADC_Result > Battery_State2)
 8002b1a:	88fb      	ldrh	r3, [r7, #6]
 8002b1c:	f640 5255 	movw	r2, #3413	; 0xd55
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d90a      	bls.n	8002b3a <VADC0_C0_2_IRQHandler+0x4e>
	{
		Reset(P3_0);	//VBat_LED_Green
 8002b24:	4b16      	ldr	r3, [pc, #88]	; (8002b80 <VADC0_C0_2_IRQHandler+0x94>)
 8002b26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b2a:	605a      	str	r2, [r3, #4]
		Set(P3_1);		//VBat_LED_Yellow
 8002b2c:	4b14      	ldr	r3, [pc, #80]	; (8002b80 <VADC0_C0_2_IRQHandler+0x94>)
 8002b2e:	2202      	movs	r2, #2
 8002b30:	605a      	str	r2, [r3, #4]
		Set(P3_2);		//VBat_LED_Red
 8002b32:	4b13      	ldr	r3, [pc, #76]	; (8002b80 <VADC0_C0_2_IRQHandler+0x94>)
 8002b34:	2204      	movs	r2, #4
 8002b36:	605a      	str	r2, [r3, #4]
 8002b38:	e01c      	b.n	8002b74 <VADC0_C0_2_IRQHandler+0x88>
	}
	else if (ADC_Result > Battery_State3)
 8002b3a:	88fb      	ldrh	r3, [r7, #6]
 8002b3c:	f640 42ba 	movw	r2, #3258	; 0xcba
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d90b      	bls.n	8002b5c <VADC0_C0_2_IRQHandler+0x70>
	{
		Reset(P3_0);	//VBat_LED_Green
 8002b44:	4b0e      	ldr	r3, [pc, #56]	; (8002b80 <VADC0_C0_2_IRQHandler+0x94>)
 8002b46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b4a:	605a      	str	r2, [r3, #4]
		Reset(P3_1);	//VBat_LED_Yellow
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <VADC0_C0_2_IRQHandler+0x94>)
 8002b4e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b52:	605a      	str	r2, [r3, #4]
		Set(P3_2);		//VBat_LED_Red
 8002b54:	4b0a      	ldr	r3, [pc, #40]	; (8002b80 <VADC0_C0_2_IRQHandler+0x94>)
 8002b56:	2204      	movs	r2, #4
 8002b58:	605a      	str	r2, [r3, #4]
 8002b5a:	e00b      	b.n	8002b74 <VADC0_C0_2_IRQHandler+0x88>
	}
	else
	{
		Reset(P3_0);	//VBat_LED_Green
 8002b5c:	4b08      	ldr	r3, [pc, #32]	; (8002b80 <VADC0_C0_2_IRQHandler+0x94>)
 8002b5e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b62:	605a      	str	r2, [r3, #4]
		Reset(P3_1);	//VBat_LED_Yellow
 8002b64:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <VADC0_C0_2_IRQHandler+0x94>)
 8002b66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b6a:	605a      	str	r2, [r3, #4]
		Toggle(P3_2);	//VBat_LED_Red
 8002b6c:	4b04      	ldr	r3, [pc, #16]	; (8002b80 <VADC0_C0_2_IRQHandler+0x94>)
 8002b6e:	f04f 1204 	mov.w	r2, #262148	; 0x40004
 8002b72:	605a      	str	r2, [r3, #4]
	}
}
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	200002f0 	.word	0x200002f0
 8002b80:	48028300 	.word	0x48028300

08002b84 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002b8e:	4908      	ldr	r1, [pc, #32]	; (8002bb0 <NVIC_EnableIRQ+0x2c>)
 8002b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b94:	095b      	lsrs	r3, r3, #5
 8002b96:	79fa      	ldrb	r2, [r7, #7]
 8002b98:	f002 021f 	and.w	r2, r2, #31
 8002b9c:	2001      	movs	r0, #1
 8002b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	e000e100 	.word	0xe000e100

08002bb4 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	4603      	mov	r3, r0
 8002bbc:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002bbe:	4909      	ldr	r1, [pc, #36]	; (8002be4 <NVIC_DisableIRQ+0x30>)
 8002bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc4:	095b      	lsrs	r3, r3, #5
 8002bc6:	79fa      	ldrb	r2, [r7, #7]
 8002bc8:	f002 021f 	and.w	r2, r2, #31
 8002bcc:	2001      	movs	r0, #1
 8002bce:	fa00 f202 	lsl.w	r2, r0, r2
 8002bd2:	3320      	adds	r3, #32
 8002bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	e000e100 	.word	0xe000e100

08002be8 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	b25b      	sxtb	r3, r3
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff ffc4 	bl	8002b84 <NVIC_EnableIRQ>
}
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop

08002c04 <INTERRUPT_Disable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Disable(const INTERRUPT_t *const handler)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_DisableIRQ(handler->node);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	b25b      	sxtb	r3, r3
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff ffce 	bl	8002bb4 <NVIC_DisableIRQ>
}
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop

08002c20 <UART_SetRXFIFOTriggerLimit>:
 *    }
 *  }
 * @endcode
 */
__STATIC_INLINE void UART_SetRXFIFOTriggerLimit(const UART_t* const handle, uint32_t limit)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("UART APP handle invalid", (handle != NULL))
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, handle->config->rx_fifo_size, limit);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c36:	4610      	mov	r0, r2
 8002c38:	4619      	mov	r1, r3
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	f003 ffa6 	bl	8006b8c <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
}
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop

08002c48 <CCU43_1_IRQHandler>:
 *  Electric Speed Controller
 *
 */

void Control_Timer_ISR(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b08a      	sub	sp, #40	; 0x28
 8002c4c:	af04      	add	r7, sp, #16

	static float x_pitch[CONTROL_ORDER];
	static float x_roll[CONTROL_ORDER];


	uint32_t PWM_APP_OUTPUT[4]={0,0,0,0};
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60bb      	str	r3, [r7, #8]
 8002c52:	2300      	movs	r3, #0
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	2300      	movs	r3, #0
 8002c58:	613b      	str	r3, [r7, #16]
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	617b      	str	r3, [r7, #20]
	uint8_t height_control = 0;/* for enabling height-control, activated: 0xff, disabled: 0x00*/
 8002c5e:	2300      	movs	r3, #0
 8002c60:	71fb      	strb	r3, [r7, #7]

	GetAngles(YPR);
 8002c62:	488f      	ldr	r0, [pc, #572]	; (8002ea0 <CCU43_1_IRQHandler+0x258>)
 8002c64:	f7fe fcc6 	bl	80015f4 <GetAngles>
	GetRCData(&powerD, &height_control, &yawD_dot, &pitchD, &rollD);
 8002c68:	1dfa      	adds	r2, r7, #7
 8002c6a:	4b8e      	ldr	r3, [pc, #568]	; (8002ea4 <CCU43_1_IRQHandler+0x25c>)
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	488e      	ldr	r0, [pc, #568]	; (8002ea8 <CCU43_1_IRQHandler+0x260>)
 8002c70:	4611      	mov	r1, r2
 8002c72:	4a8e      	ldr	r2, [pc, #568]	; (8002eac <CCU43_1_IRQHandler+0x264>)
 8002c74:	4b8e      	ldr	r3, [pc, #568]	; (8002eb0 <CCU43_1_IRQHandler+0x268>)
 8002c76:	f7ff fc15 	bl	80024a4 <GetRCData>
	//yaw control
	AngleRateController(&yawD_dot, &YPR[0], &parameter.P_yaw, &u_yaw_dot);
 8002c7a:	488c      	ldr	r0, [pc, #560]	; (8002eac <CCU43_1_IRQHandler+0x264>)
 8002c7c:	4988      	ldr	r1, [pc, #544]	; (8002ea0 <CCU43_1_IRQHandler+0x258>)
 8002c7e:	4a8d      	ldr	r2, [pc, #564]	; (8002eb4 <CCU43_1_IRQHandler+0x26c>)
 8002c80:	4b8d      	ldr	r3, [pc, #564]	; (8002eb8 <CCU43_1_IRQHandler+0x270>)
 8002c82:	f000 f9c9 	bl	8003018 <AngleRateController>
	//pitch control
	AngleController(&pitchD, &YPR[1], CONTROL_ORDER, polynoms.a_pitch, polynoms.b_pitch, x_pitch, &u_pitch);
 8002c86:	4b8d      	ldr	r3, [pc, #564]	; (8002ebc <CCU43_1_IRQHandler+0x274>)
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	4b8d      	ldr	r3, [pc, #564]	; (8002ec0 <CCU43_1_IRQHandler+0x278>)
 8002c8c:	9301      	str	r3, [sp, #4]
 8002c8e:	4b8d      	ldr	r3, [pc, #564]	; (8002ec4 <CCU43_1_IRQHandler+0x27c>)
 8002c90:	9302      	str	r3, [sp, #8]
 8002c92:	4887      	ldr	r0, [pc, #540]	; (8002eb0 <CCU43_1_IRQHandler+0x268>)
 8002c94:	498c      	ldr	r1, [pc, #560]	; (8002ec8 <CCU43_1_IRQHandler+0x280>)
 8002c96:	2202      	movs	r2, #2
 8002c98:	4b8c      	ldr	r3, [pc, #560]	; (8002ecc <CCU43_1_IRQHandler+0x284>)
 8002c9a:	f000 f931 	bl	8002f00 <AngleController>
	//roll control
	AngleController(&rollD, &YPR[2], CONTROL_ORDER, polynoms.a_roll, polynoms.b_roll, x_roll, &u_roll);
 8002c9e:	4b8c      	ldr	r3, [pc, #560]	; (8002ed0 <CCU43_1_IRQHandler+0x288>)
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	4b8c      	ldr	r3, [pc, #560]	; (8002ed4 <CCU43_1_IRQHandler+0x28c>)
 8002ca4:	9301      	str	r3, [sp, #4]
 8002ca6:	4b8c      	ldr	r3, [pc, #560]	; (8002ed8 <CCU43_1_IRQHandler+0x290>)
 8002ca8:	9302      	str	r3, [sp, #8]
 8002caa:	487e      	ldr	r0, [pc, #504]	; (8002ea4 <CCU43_1_IRQHandler+0x25c>)
 8002cac:	498b      	ldr	r1, [pc, #556]	; (8002edc <CCU43_1_IRQHandler+0x294>)
 8002cae:	2202      	movs	r2, #2
 8002cb0:	4b8b      	ldr	r3, [pc, #556]	; (8002ee0 <CCU43_1_IRQHandler+0x298>)
 8002cb2:	f000 f925 	bl	8002f00 <AngleController>
	//generate actuator values
	CreatePulseWidth(&u_roll, &u_pitch, &u_yaw_dot, &powerD, PWM_percent);
 8002cb6:	4b8b      	ldr	r3, [pc, #556]	; (8002ee4 <CCU43_1_IRQHandler+0x29c>)
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	4887      	ldr	r0, [pc, #540]	; (8002ed8 <CCU43_1_IRQHandler+0x290>)
 8002cbc:	4981      	ldr	r1, [pc, #516]	; (8002ec4 <CCU43_1_IRQHandler+0x27c>)
 8002cbe:	4a7e      	ldr	r2, [pc, #504]	; (8002eb8 <CCU43_1_IRQHandler+0x270>)
 8002cc0:	4b79      	ldr	r3, [pc, #484]	; (8002ea8 <CCU43_1_IRQHandler+0x260>)
 8002cc2:	f000 f9f1 	bl	80030a8 <CreatePulseWidth>

	if (powerD > 5.0f){
 8002cc6:	4b78      	ldr	r3, [pc, #480]	; (8002ea8 <CCU43_1_IRQHandler+0x260>)
 8002cc8:	edd3 7a00 	vldr	s15, [r3]
 8002ccc:	eeb1 7a04 	vmov.f32	s14, #20
 8002cd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cd8:	f340 80c5 	ble.w	8002e66 <CCU43_1_IRQHandler+0x21e>
		PWM_percent[0]=0.45*PWM_percent[0]+45;
 8002cdc:	4b81      	ldr	r3, [pc, #516]	; (8002ee4 <CCU43_1_IRQHandler+0x29c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f008 fed7 	bl	800ba94 <__aeabi_f2d>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	4610      	mov	r0, r2
 8002cec:	4619      	mov	r1, r3
 8002cee:	a36a      	add	r3, pc, #424	; (adr r3, 8002e98 <CCU43_1_IRQHandler+0x250>)
 8002cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf4:	f008 ff22 	bl	800bb3c <__aeabi_dmul>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	4610      	mov	r0, r2
 8002cfe:	4619      	mov	r1, r3
 8002d00:	f04f 0200 	mov.w	r2, #0
 8002d04:	4b78      	ldr	r3, [pc, #480]	; (8002ee8 <CCU43_1_IRQHandler+0x2a0>)
 8002d06:	f008 fd67 	bl	800b7d8 <__adddf3>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	4610      	mov	r0, r2
 8002d10:	4619      	mov	r1, r3
 8002d12:	f009 f9d5 	bl	800c0c0 <__aeabi_d2f>
 8002d16:	4602      	mov	r2, r0
 8002d18:	4b72      	ldr	r3, [pc, #456]	; (8002ee4 <CCU43_1_IRQHandler+0x29c>)
 8002d1a:	601a      	str	r2, [r3, #0]
		PWM_percent[1]=0.45*PWM_percent[1]+45;
 8002d1c:	4b71      	ldr	r3, [pc, #452]	; (8002ee4 <CCU43_1_IRQHandler+0x29c>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f008 feb7 	bl	800ba94 <__aeabi_f2d>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4610      	mov	r0, r2
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	a35a      	add	r3, pc, #360	; (adr r3, 8002e98 <CCU43_1_IRQHandler+0x250>)
 8002d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d34:	f008 ff02 	bl	800bb3c <__aeabi_dmul>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	4619      	mov	r1, r3
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	4b68      	ldr	r3, [pc, #416]	; (8002ee8 <CCU43_1_IRQHandler+0x2a0>)
 8002d46:	f008 fd47 	bl	800b7d8 <__adddf3>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4610      	mov	r0, r2
 8002d50:	4619      	mov	r1, r3
 8002d52:	f009 f9b5 	bl	800c0c0 <__aeabi_d2f>
 8002d56:	4602      	mov	r2, r0
 8002d58:	4b62      	ldr	r3, [pc, #392]	; (8002ee4 <CCU43_1_IRQHandler+0x29c>)
 8002d5a:	605a      	str	r2, [r3, #4]
		PWM_percent[2]=0.45*PWM_percent[2]+45;
 8002d5c:	4b61      	ldr	r3, [pc, #388]	; (8002ee4 <CCU43_1_IRQHandler+0x29c>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f008 fe97 	bl	800ba94 <__aeabi_f2d>
 8002d66:	4602      	mov	r2, r0
 8002d68:	460b      	mov	r3, r1
 8002d6a:	4610      	mov	r0, r2
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	a34a      	add	r3, pc, #296	; (adr r3, 8002e98 <CCU43_1_IRQHandler+0x250>)
 8002d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d74:	f008 fee2 	bl	800bb3c <__aeabi_dmul>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	4610      	mov	r0, r2
 8002d7e:	4619      	mov	r1, r3
 8002d80:	f04f 0200 	mov.w	r2, #0
 8002d84:	4b58      	ldr	r3, [pc, #352]	; (8002ee8 <CCU43_1_IRQHandler+0x2a0>)
 8002d86:	f008 fd27 	bl	800b7d8 <__adddf3>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	4610      	mov	r0, r2
 8002d90:	4619      	mov	r1, r3
 8002d92:	f009 f995 	bl	800c0c0 <__aeabi_d2f>
 8002d96:	4602      	mov	r2, r0
 8002d98:	4b52      	ldr	r3, [pc, #328]	; (8002ee4 <CCU43_1_IRQHandler+0x29c>)
 8002d9a:	609a      	str	r2, [r3, #8]
		PWM_percent[3]=0.45*PWM_percent[3]+45;
 8002d9c:	4b51      	ldr	r3, [pc, #324]	; (8002ee4 <CCU43_1_IRQHandler+0x29c>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f008 fe77 	bl	800ba94 <__aeabi_f2d>
 8002da6:	4602      	mov	r2, r0
 8002da8:	460b      	mov	r3, r1
 8002daa:	4610      	mov	r0, r2
 8002dac:	4619      	mov	r1, r3
 8002dae:	a33a      	add	r3, pc, #232	; (adr r3, 8002e98 <CCU43_1_IRQHandler+0x250>)
 8002db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db4:	f008 fec2 	bl	800bb3c <__aeabi_dmul>
 8002db8:	4602      	mov	r2, r0
 8002dba:	460b      	mov	r3, r1
 8002dbc:	4610      	mov	r0, r2
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	f04f 0200 	mov.w	r2, #0
 8002dc4:	4b48      	ldr	r3, [pc, #288]	; (8002ee8 <CCU43_1_IRQHandler+0x2a0>)
 8002dc6:	f008 fd07 	bl	800b7d8 <__adddf3>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4610      	mov	r0, r2
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	f009 f975 	bl	800c0c0 <__aeabi_d2f>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	4b42      	ldr	r3, [pc, #264]	; (8002ee4 <CCU43_1_IRQHandler+0x29c>)
 8002dda:	60da      	str	r2, [r3, #12]

		PWM_APP_OUTPUT[0]= (uint32_t) (PWM_percent[0]*100u);
 8002ddc:	4b41      	ldr	r3, [pc, #260]	; (8002ee4 <CCU43_1_IRQHandler+0x29c>)
 8002dde:	edd3 7a00 	vldr	s15, [r3]
 8002de2:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8002eec <CCU43_1_IRQHandler+0x2a4>
 8002de6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dee:	ee17 3a90 	vmov	r3, s15
 8002df2:	60bb      	str	r3, [r7, #8]
		PWM_APP_OUTPUT[1]= (uint32_t) (PWM_percent[1]*100u);
 8002df4:	4b3b      	ldr	r3, [pc, #236]	; (8002ee4 <CCU43_1_IRQHandler+0x29c>)
 8002df6:	edd3 7a01 	vldr	s15, [r3, #4]
 8002dfa:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002eec <CCU43_1_IRQHandler+0x2a4>
 8002dfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e06:	ee17 3a90 	vmov	r3, s15
 8002e0a:	60fb      	str	r3, [r7, #12]
		PWM_APP_OUTPUT[2]= (uint32_t) (PWM_percent[2]*100u);
 8002e0c:	4b35      	ldr	r3, [pc, #212]	; (8002ee4 <CCU43_1_IRQHandler+0x29c>)
 8002e0e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e12:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002eec <CCU43_1_IRQHandler+0x2a4>
 8002e16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e1e:	ee17 3a90 	vmov	r3, s15
 8002e22:	613b      	str	r3, [r7, #16]
		PWM_APP_OUTPUT[3]= (uint32_t) (PWM_percent[3]*100u);
 8002e24:	4b2f      	ldr	r3, [pc, #188]	; (8002ee4 <CCU43_1_IRQHandler+0x29c>)
 8002e26:	edd3 7a03 	vldr	s15, [r3, #12]
 8002e2a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002eec <CCU43_1_IRQHandler+0x2a4>
 8002e2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e36:	ee17 3a90 	vmov	r3, s15
 8002e3a:	617b      	str	r3, [r7, #20]

		PWM_CCU4_SetDutyCycle(&PWM_OUTPUT_1,PWM_APP_OUTPUT[2]);
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	482c      	ldr	r0, [pc, #176]	; (8002ef0 <CCU43_1_IRQHandler+0x2a8>)
 8002e40:	4619      	mov	r1, r3
 8002e42:	f006 fdd5 	bl	80099f0 <PWM_CCU4_SetDutyCycle>
		PWM_CCU4_SetDutyCycle(&PWM_OUTPUT_2,PWM_APP_OUTPUT[0]);
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	482a      	ldr	r0, [pc, #168]	; (8002ef4 <CCU43_1_IRQHandler+0x2ac>)
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	f006 fdd0 	bl	80099f0 <PWM_CCU4_SetDutyCycle>
		PWM_CCU4_SetDutyCycle(&PWM_OUTPUT_3,PWM_APP_OUTPUT[1]);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	4829      	ldr	r0, [pc, #164]	; (8002ef8 <CCU43_1_IRQHandler+0x2b0>)
 8002e54:	4619      	mov	r1, r3
 8002e56:	f006 fdcb 	bl	80099f0 <PWM_CCU4_SetDutyCycle>
		PWM_CCU4_SetDutyCycle(&PWM_OUTPUT_4,PWM_APP_OUTPUT[3]);
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	4827      	ldr	r0, [pc, #156]	; (8002efc <CCU43_1_IRQHandler+0x2b4>)
 8002e5e:	4619      	mov	r1, r3
 8002e60:	f006 fdc6 	bl	80099f0 <PWM_CCU4_SetDutyCycle>
 8002e64:	e013      	b.n	8002e8e <CCU43_1_IRQHandler+0x246>
	}else
	{
		PWM_CCU4_SetDutyCycle(&PWM_OUTPUT_1,4500u);
 8002e66:	4822      	ldr	r0, [pc, #136]	; (8002ef0 <CCU43_1_IRQHandler+0x2a8>)
 8002e68:	f241 1194 	movw	r1, #4500	; 0x1194
 8002e6c:	f006 fdc0 	bl	80099f0 <PWM_CCU4_SetDutyCycle>
		PWM_CCU4_SetDutyCycle(&PWM_OUTPUT_2,4500u);
 8002e70:	4820      	ldr	r0, [pc, #128]	; (8002ef4 <CCU43_1_IRQHandler+0x2ac>)
 8002e72:	f241 1194 	movw	r1, #4500	; 0x1194
 8002e76:	f006 fdbb 	bl	80099f0 <PWM_CCU4_SetDutyCycle>
		PWM_CCU4_SetDutyCycle(&PWM_OUTPUT_3,4500u);
 8002e7a:	481f      	ldr	r0, [pc, #124]	; (8002ef8 <CCU43_1_IRQHandler+0x2b0>)
 8002e7c:	f241 1194 	movw	r1, #4500	; 0x1194
 8002e80:	f006 fdb6 	bl	80099f0 <PWM_CCU4_SetDutyCycle>
		PWM_CCU4_SetDutyCycle(&PWM_OUTPUT_4,4500u);
 8002e84:	481d      	ldr	r0, [pc, #116]	; (8002efc <CCU43_1_IRQHandler+0x2b4>)
 8002e86:	f241 1194 	movw	r1, #4500	; 0x1194
 8002e8a:	f006 fdb1 	bl	80099f0 <PWM_CCU4_SetDutyCycle>
	}

}
 8002e8e:	3718      	adds	r7, #24
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	f3af 8000 	nop.w
 8002e98:	cccccccd 	.word	0xcccccccd
 8002e9c:	3fdccccc 	.word	0x3fdccccc
 8002ea0:	200005d0 	.word	0x200005d0
 8002ea4:	2000047c 	.word	0x2000047c
 8002ea8:	20000470 	.word	0x20000470
 8002eac:	20000474 	.word	0x20000474
 8002eb0:	20000478 	.word	0x20000478
 8002eb4:	2000005c 	.word	0x2000005c
 8002eb8:	20000480 	.word	0x20000480
 8002ebc:	20000640 	.word	0x20000640
 8002ec0:	2000048c 	.word	0x2000048c
 8002ec4:	20000484 	.word	0x20000484
 8002ec8:	200005d4 	.word	0x200005d4
 8002ecc:	2000062c 	.word	0x2000062c
 8002ed0:	20000634 	.word	0x20000634
 8002ed4:	20000494 	.word	0x20000494
 8002ed8:	20000488 	.word	0x20000488
 8002edc:	200005d8 	.word	0x200005d8
 8002ee0:	20000624 	.word	0x20000624
 8002ee4:	200005dc 	.word	0x200005dc
 8002ee8:	40468000 	.word	0x40468000
 8002eec:	42c80000 	.word	0x42c80000
 8002ef0:	20000188 	.word	0x20000188
 8002ef4:	200001b0 	.word	0x200001b0
 8002ef8:	200001d8 	.word	0x200001d8
 8002efc:	20000200 	.word	0x20000200

08002f00 <AngleController>:
 *  \param [in] x
 *  \param [in] u Controller output
 *  
 */
void AngleController(float *r, float *y, int n, const float *a, const float *b,float *x, float *u)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b087      	sub	sp, #28
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
 8002f0c:	603b      	str	r3, [r7, #0]
	//PID-Controller

	//control error
	float e = (*r - *y) * (float)M_PI / 180.0f;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	ed93 7a00 	vldr	s14, [r3]
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	edd3 7a00 	vldr	s15, [r3]
 8002f1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f1e:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800300c <AngleController+0x10c>
 8002f22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f26:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8003010 <AngleController+0x110>
 8002f2a:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8002f2e:	edc7 7a04 	vstr	s15, [r7, #16]

	//calculate plant input
	*u = x[n - 1] + b[n] * e;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f3e:	4413      	add	r3, r2
 8002f40:	ed93 7a00 	vldr	s14, [r3]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	6a3a      	ldr	r2, [r7, #32]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	edd3 6a00 	vldr	s13, [r3]
 8002f50:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5e:	edc3 7a00 	vstr	s15, [r3]

	//calculate new coefficients
	for (int i = n - 1; i > 0; i--)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	3b01      	subs	r3, #1
 8002f66:	617b      	str	r3, [r7, #20]
 8002f68:	e02a      	b.n	8002fc0 <AngleController+0xc0>
		x[i] = b[i] * e - a[i] * (*u) + x[i - 1];
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f70:	441a      	add	r2, r3
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	6a39      	ldr	r1, [r7, #32]
 8002f78:	440b      	add	r3, r1
 8002f7a:	ed93 7a00 	vldr	s14, [r3]
 8002f7e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	6839      	ldr	r1, [r7, #0]
 8002f8c:	440b      	add	r3, r1
 8002f8e:	edd3 6a00 	vldr	s13, [r3]
 8002f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f94:	edd3 7a00 	vldr	s15, [r3]
 8002f98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f9c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fac:	440b      	add	r3, r1
 8002fae:	edd3 7a00 	vldr	s15, [r3]
 8002fb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fb6:	edc2 7a00 	vstr	s15, [r2]

	//calculate plant input
	*u = x[n - 1] + b[n] * e;

	//calculate new coefficients
	for (int i = n - 1; i > 0; i--)
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	617b      	str	r3, [r7, #20]
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	dcd1      	bgt.n	8002f6a <AngleController+0x6a>
		x[i] = b[i] * e - a[i] * (*u) + x[i - 1];

	x[0] = b[0] * e - a[0] * (*u);
 8002fc6:	6a3b      	ldr	r3, [r7, #32]
 8002fc8:	ed93 7a00 	vldr	s14, [r3]
 8002fcc:	edd7 7a04 	vldr	s15, [r7, #16]
 8002fd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	edd3 6a00 	vldr	s13, [r3]
 8002fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fdc:	edd3 7a00 	vldr	s15, [r3]
 8002fe0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fe4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fea:	edc3 7a00 	vstr	s15, [r3]

	*u /= 4.0f;
 8002fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff0:	edd3 7a00 	vldr	s15, [r3]
 8002ff4:	eeb1 7a00 	vmov.f32	s14, #16
 8002ff8:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8002ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffe:	edc3 7a00 	vstr	s15, [r3]
}
 8003002:	371c      	adds	r7, #28
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	40490fdb 	.word	0x40490fdb
 8003010:	43340000 	.word	0x43340000
 8003014:	00000000 	.word	0x00000000

08003018 <AngleRateController>:
 *  \param [in] P Value of P_yaw
 *  \param [in] u Controller output
 *  
 */
void AngleRateController(float *r, float *y, const float *P, float *u)
{
 8003018:	b5b0      	push	{r4, r5, r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
 8003024:	603b      	str	r3, [r7, #0]
	//P-Controller
	*u = (*r - *y) * M_PI / (180.0f * 4.0f) * *P;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	ed93 7a00 	vldr	s14, [r3]
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	edd3 7a00 	vldr	s15, [r3]
 8003032:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003036:	ee17 0a90 	vmov	r0, s15
 800303a:	f008 fd2b 	bl	800ba94 <__aeabi_f2d>
 800303e:	4602      	mov	r2, r0
 8003040:	460b      	mov	r3, r1
 8003042:	4610      	mov	r0, r2
 8003044:	4619      	mov	r1, r3
 8003046:	a315      	add	r3, pc, #84	; (adr r3, 800309c <AngleRateController+0x84>)
 8003048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304c:	f008 fd76 	bl	800bb3c <__aeabi_dmul>
 8003050:	4602      	mov	r2, r0
 8003052:	460b      	mov	r3, r1
 8003054:	4610      	mov	r0, r2
 8003056:	4619      	mov	r1, r3
 8003058:	f04f 0200 	mov.w	r2, #0
 800305c:	4b0e      	ldr	r3, [pc, #56]	; (8003098 <AngleRateController+0x80>)
 800305e:	f008 fe97 	bl	800bd90 <__aeabi_ddiv>
 8003062:	4602      	mov	r2, r0
 8003064:	460b      	mov	r3, r1
 8003066:	4614      	mov	r4, r2
 8003068:	461d      	mov	r5, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4618      	mov	r0, r3
 8003070:	f008 fd10 	bl	800ba94 <__aeabi_f2d>
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	4620      	mov	r0, r4
 800307a:	4629      	mov	r1, r5
 800307c:	f008 fd5e 	bl	800bb3c <__aeabi_dmul>
 8003080:	4602      	mov	r2, r0
 8003082:	460b      	mov	r3, r1
 8003084:	4610      	mov	r0, r2
 8003086:	4619      	mov	r1, r3
 8003088:	f009 f81a 	bl	800c0c0 <__aeabi_d2f>
 800308c:	4602      	mov	r2, r0
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	601a      	str	r2, [r3, #0]
}
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bdb0      	pop	{r4, r5, r7, pc}
 8003098:	40868000 	.word	0x40868000
 800309c:	54442d18 	.word	0x54442d18
 80030a0:	400921fb 	.word	0x400921fb
 80030a4:	f3af 8000 	nop.w

080030a8 <CreatePulseWidth>:
 *  \param [in] PWM_width Desired width of the PWM
 *  
 *  \details Roll, pitch and yaw movements are are based on the linearized mathematical model of the system
 */
void CreatePulseWidth(float *u_phi, float *u_theta, float *u_psi_dot,float *u_hover, float *PWM_width)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b087      	sub	sp, #28
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
 80030b4:	603b      	str	r3, [r7, #0]
	float saturationMax = 100.0f;
 80030b6:	4b7a      	ldr	r3, [pc, #488]	; (80032a0 <CreatePulseWidth+0x1f8>)
 80030b8:	617b      	str	r3, [r7, #20]
	float saturationMin = 10.0f;
 80030ba:	4b7a      	ldr	r3, [pc, #488]	; (80032a4 <CreatePulseWidth+0x1fc>)
 80030bc:	613b      	str	r3, [r7, #16]

	if (*u_hover > 5.0f)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	edd3 7a00 	vldr	s15, [r3]
 80030c4:	eeb1 7a04 	vmov.f32	s14, #20
 80030c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d0:	dd59      	ble.n	8003186 <CreatePulseWidth+0xde>
	{
		PWM_width[0] = -*u_theta + *u_phi - *u_psi_dot + *u_hover;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	ed93 7a00 	vldr	s14, [r3]
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	edd3 7a00 	vldr	s15, [r3]
 80030de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	edd3 7a00 	vldr	s15, [r3]
 80030e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	edd3 7a00 	vldr	s15, [r3]
 80030f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030f6:	6a3b      	ldr	r3, [r7, #32]
 80030f8:	edc3 7a00 	vstr	s15, [r3]
		PWM_width[1] = -*u_theta - *u_phi + *u_psi_dot + *u_hover;
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	3304      	adds	r3, #4
 8003100:	68ba      	ldr	r2, [r7, #8]
 8003102:	edd2 7a00 	vldr	s15, [r2]
 8003106:	eeb1 7a67 	vneg.f32	s14, s15
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	edd2 7a00 	vldr	s15, [r2]
 8003110:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	edd2 7a00 	vldr	s15, [r2]
 800311a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	edd2 7a00 	vldr	s15, [r2]
 8003124:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003128:	edc3 7a00 	vstr	s15, [r3]
		PWM_width[2] = *u_theta + *u_phi + *u_psi_dot + *u_hover;
 800312c:	6a3b      	ldr	r3, [r7, #32]
 800312e:	3308      	adds	r3, #8
 8003130:	68ba      	ldr	r2, [r7, #8]
 8003132:	ed92 7a00 	vldr	s14, [r2]
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	edd2 7a00 	vldr	s15, [r2]
 800313c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	edd2 7a00 	vldr	s15, [r2]
 8003146:	ee37 7a27 	vadd.f32	s14, s14, s15
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	edd2 7a00 	vldr	s15, [r2]
 8003150:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003154:	edc3 7a00 	vstr	s15, [r3]
		PWM_width[3] = *u_theta - *u_phi - *u_psi_dot + *u_hover;
 8003158:	6a3b      	ldr	r3, [r7, #32]
 800315a:	330c      	adds	r3, #12
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	ed92 7a00 	vldr	s14, [r2]
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	edd2 7a00 	vldr	s15, [r2]
 8003168:	ee37 7a67 	vsub.f32	s14, s14, s15
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	edd2 7a00 	vldr	s15, [r2]
 8003172:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	edd2 7a00 	vldr	s15, [r2]
 800317c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003180:	edc3 7a00 	vstr	s15, [r3]
 8003184:	e012      	b.n	80031ac <CreatePulseWidth+0x104>
	}
	else
	{
		PWM_width[0] = *u_hover;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	6a3b      	ldr	r3, [r7, #32]
 800318c:	601a      	str	r2, [r3, #0]
		PWM_width[1] = *u_hover;
 800318e:	6a3b      	ldr	r3, [r7, #32]
 8003190:	3304      	adds	r3, #4
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	6812      	ldr	r2, [r2, #0]
 8003196:	601a      	str	r2, [r3, #0]
		PWM_width[2] = *u_hover;
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	3308      	adds	r3, #8
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	6812      	ldr	r2, [r2, #0]
 80031a0:	601a      	str	r2, [r3, #0]
		PWM_width[3] = *u_hover;
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	330c      	adds	r3, #12
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	6812      	ldr	r2, [r2, #0]
 80031aa:	601a      	str	r2, [r3, #0]
	}

	if (PWM_width[0] > saturationMax)
 80031ac:	6a3b      	ldr	r3, [r7, #32]
 80031ae:	ed93 7a00 	vldr	s14, [r3]
 80031b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80031b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031be:	dd02      	ble.n	80031c6 <CreatePulseWidth+0x11e>
		PWM_width[0] = saturationMax;
 80031c0:	6a3b      	ldr	r3, [r7, #32]
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	601a      	str	r2, [r3, #0]

	if (PWM_width[0] < saturationMin)
 80031c6:	6a3b      	ldr	r3, [r7, #32]
 80031c8:	ed93 7a00 	vldr	s14, [r3]
 80031cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80031d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d8:	d502      	bpl.n	80031e0 <CreatePulseWidth+0x138>
		PWM_width[0] = saturationMin;
 80031da:	6a3b      	ldr	r3, [r7, #32]
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	601a      	str	r2, [r3, #0]

	if (PWM_width[1] > saturationMax)
 80031e0:	6a3b      	ldr	r3, [r7, #32]
 80031e2:	3304      	adds	r3, #4
 80031e4:	ed93 7a00 	vldr	s14, [r3]
 80031e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80031ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f4:	dd03      	ble.n	80031fe <CreatePulseWidth+0x156>
		PWM_width[1] = saturationMax;
 80031f6:	6a3b      	ldr	r3, [r7, #32]
 80031f8:	3304      	adds	r3, #4
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	601a      	str	r2, [r3, #0]

	if (PWM_width[1] < saturationMin)
 80031fe:	6a3b      	ldr	r3, [r7, #32]
 8003200:	3304      	adds	r3, #4
 8003202:	ed93 7a00 	vldr	s14, [r3]
 8003206:	edd7 7a04 	vldr	s15, [r7, #16]
 800320a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800320e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003212:	d503      	bpl.n	800321c <CreatePulseWidth+0x174>
		PWM_width[1] = saturationMin;
 8003214:	6a3b      	ldr	r3, [r7, #32]
 8003216:	3304      	adds	r3, #4
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	601a      	str	r2, [r3, #0]

	if (PWM_width[2] > saturationMax)
 800321c:	6a3b      	ldr	r3, [r7, #32]
 800321e:	3308      	adds	r3, #8
 8003220:	ed93 7a00 	vldr	s14, [r3]
 8003224:	edd7 7a05 	vldr	s15, [r7, #20]
 8003228:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800322c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003230:	dd03      	ble.n	800323a <CreatePulseWidth+0x192>
		PWM_width[2] = saturationMax;
 8003232:	6a3b      	ldr	r3, [r7, #32]
 8003234:	3308      	adds	r3, #8
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	601a      	str	r2, [r3, #0]

	if (PWM_width[2] < saturationMin)
 800323a:	6a3b      	ldr	r3, [r7, #32]
 800323c:	3308      	adds	r3, #8
 800323e:	ed93 7a00 	vldr	s14, [r3]
 8003242:	edd7 7a04 	vldr	s15, [r7, #16]
 8003246:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800324a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800324e:	d503      	bpl.n	8003258 <CreatePulseWidth+0x1b0>
		PWM_width[2] = saturationMin;
 8003250:	6a3b      	ldr	r3, [r7, #32]
 8003252:	3308      	adds	r3, #8
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	601a      	str	r2, [r3, #0]

	if (PWM_width[3] > saturationMax)
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	330c      	adds	r3, #12
 800325c:	ed93 7a00 	vldr	s14, [r3]
 8003260:	edd7 7a05 	vldr	s15, [r7, #20]
 8003264:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800326c:	dd03      	ble.n	8003276 <CreatePulseWidth+0x1ce>
		PWM_width[3] = saturationMax;
 800326e:	6a3b      	ldr	r3, [r7, #32]
 8003270:	330c      	adds	r3, #12
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	601a      	str	r2, [r3, #0]

	if (PWM_width[3] < saturationMin)
 8003276:	6a3b      	ldr	r3, [r7, #32]
 8003278:	330c      	adds	r3, #12
 800327a:	ed93 7a00 	vldr	s14, [r3]
 800327e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003282:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800328a:	d503      	bpl.n	8003294 <CreatePulseWidth+0x1ec>
		PWM_width[3] = saturationMin;
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	330c      	adds	r3, #12
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	601a      	str	r2, [r3, #0]
}
 8003294:	371c      	adds	r7, #28
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	42c80000 	.word	0x42c80000
 80032a4:	41200000 	.word	0x41200000

080032a8 <setup>:
 *
 *
 *  \details Sensors are set up, polynomials are calculated and other general preparations are made
 */
void setup(void)
{
 80032a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032ac:	b09c      	sub	sp, #112	; 0x70
 80032ae:	af0c      	add	r7, sp, #48	; 0x30
	initBluetoothStorage();//initialize space for variables used for Bluetooth Communication
 80032b0:	f7fe ffb8 	bl	8002224 <initBluetoothStorage>
	//-------------------Dave Setup---------------------
	DAVE_STATUS_t status;
	status = DAVE_Init();//Initialization of DAVE APPs
 80032b4:	f006 ffde 	bl	800a274 <DAVE_Init>
 80032b8:	4603      	mov	r3, r0
 80032ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (status == DAVE_STATUS_FAILURE)
 80032be:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d100      	bne.n	80032c8 <setup+0x20>
	{
		/* Placeholder for error handler code. The while loop below can be replaced with an user error handler. */
		XMC_DEBUG("DAVE APPs initialization failed\n");
		while (1U);
 80032c6:	e7fe      	b.n	80032c6 <setup+0x1e>
	}
	disableIRQ();//disables all Interrupts
 80032c8:	f000 f9ca 	bl	8003660 <disableIRQ>
	delay(2000);//waits 2000ms
 80032cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80032d0:	f7fd fb5c 	bl	800098c <delay>
	enableIRQ();//enables configurated Interrupts
 80032d4:	f000 f9f4 	bl	80036c0 <enableIRQ>
	setup_STATE_LEDs();//setup Status-LED's
 80032d8:	f000 f980 	bl	80035dc <setup_STATE_LEDs>
	WatchRC_Init();//initialize RC-Watchdog
 80032dc:	f7ff fbce 	bl	8002a7c <WatchRC_Init>
	setup_UART_Trigger_limits();//setup Trigger-Limits of UART-FIFO
 80032e0:	f000 f9ae 	bl	8003640 <setup_UART_Trigger_limits>
	PressureFIR = Initialize_FIR_Filter(PressureFIR, MOVING_AVERAGE);//initialize FIR Filter
 80032e4:	f8df 82d4 	ldr.w	r8, [pc, #724]	; 80035bc <setup+0x314>
 80032e8:	46be      	mov	lr, r7
 80032ea:	4eb4      	ldr	r6, [pc, #720]	; (80035bc <setup+0x314>)
 80032ec:	2300      	movs	r3, #0
 80032ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80032f0:	466d      	mov	r5, sp
 80032f2:	f106 040c 	add.w	r4, r6, #12
 80032f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032fe:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003302:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003306:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800330a:	4670      	mov	r0, lr
 800330c:	f7fd fbd4 	bl	8000ab8 <Initialize_FIR_Filter>
 8003310:	4645      	mov	r5, r8
 8003312:	463c      	mov	r4, r7
 8003314:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003316:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003318:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800331a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800331c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800331e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003320:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003324:	e885 0003 	stmia.w	r5, {r0, r1}
//  Uncomment to activate PressureSensor
//	setupDPS310I2C();//initialize DPS310
//  setupDPS310();//setup DPS Hardware
//  getCoefficients();//get Coefficients of DPS310

	MPU9150_Setup();//configures the IMU
 8003328:	f7fd fed0 	bl	80010cc <MPU9150_Setup>
	delay(3000);//wait 3000ms to wait for ESC's to startup
 800332c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003330:	f7fd fb2c 	bl	800098c <delay>
	// initialize controller polynomials
	polynoms.b_roll[0]=parameter.P_roll-parameter.I_roll*parameter.T-parameter.P_roll*parameter.N_roll*parameter.T+parameter.N_roll*parameter.I_roll*parameter.T*parameter.T+parameter.D_roll*parameter.N_roll;
 8003334:	4ba2      	ldr	r3, [pc, #648]	; (80035c0 <setup+0x318>)
 8003336:	ed93 7a01 	vldr	s14, [r3, #4]
 800333a:	4ba1      	ldr	r3, [pc, #644]	; (80035c0 <setup+0x318>)
 800333c:	edd3 6a02 	vldr	s13, [r3, #8]
 8003340:	4b9f      	ldr	r3, [pc, #636]	; (80035c0 <setup+0x318>)
 8003342:	edd3 7a00 	vldr	s15, [r3]
 8003346:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800334a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800334e:	4b9c      	ldr	r3, [pc, #624]	; (80035c0 <setup+0x318>)
 8003350:	edd3 6a01 	vldr	s13, [r3, #4]
 8003354:	4b9a      	ldr	r3, [pc, #616]	; (80035c0 <setup+0x318>)
 8003356:	edd3 7a04 	vldr	s15, [r3, #16]
 800335a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800335e:	4b98      	ldr	r3, [pc, #608]	; (80035c0 <setup+0x318>)
 8003360:	edd3 7a00 	vldr	s15, [r3]
 8003364:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003368:	ee37 7a67 	vsub.f32	s14, s14, s15
 800336c:	4b94      	ldr	r3, [pc, #592]	; (80035c0 <setup+0x318>)
 800336e:	edd3 6a04 	vldr	s13, [r3, #16]
 8003372:	4b93      	ldr	r3, [pc, #588]	; (80035c0 <setup+0x318>)
 8003374:	edd3 7a02 	vldr	s15, [r3, #8]
 8003378:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800337c:	4b90      	ldr	r3, [pc, #576]	; (80035c0 <setup+0x318>)
 800337e:	edd3 7a00 	vldr	s15, [r3]
 8003382:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003386:	4b8e      	ldr	r3, [pc, #568]	; (80035c0 <setup+0x318>)
 8003388:	edd3 7a00 	vldr	s15, [r3]
 800338c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003390:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003394:	4b8a      	ldr	r3, [pc, #552]	; (80035c0 <setup+0x318>)
 8003396:	edd3 6a03 	vldr	s13, [r3, #12]
 800339a:	4b89      	ldr	r3, [pc, #548]	; (80035c0 <setup+0x318>)
 800339c:	edd3 7a04 	vldr	s15, [r3, #16]
 80033a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033a8:	4b86      	ldr	r3, [pc, #536]	; (80035c4 <setup+0x31c>)
 80033aa:	edc3 7a04 	vstr	s15, [r3, #16]
	polynoms.b_roll[1]=parameter.I_roll*parameter.T-2*parameter.P_roll+parameter.P_roll*parameter.N_roll*parameter.T-2*parameter.D_roll*parameter.N_roll;
 80033ae:	4b84      	ldr	r3, [pc, #528]	; (80035c0 <setup+0x318>)
 80033b0:	ed93 7a02 	vldr	s14, [r3, #8]
 80033b4:	4b82      	ldr	r3, [pc, #520]	; (80035c0 <setup+0x318>)
 80033b6:	edd3 7a00 	vldr	s15, [r3]
 80033ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033be:	4b80      	ldr	r3, [pc, #512]	; (80035c0 <setup+0x318>)
 80033c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80033c4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80033c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80033cc:	4b7c      	ldr	r3, [pc, #496]	; (80035c0 <setup+0x318>)
 80033ce:	edd3 6a01 	vldr	s13, [r3, #4]
 80033d2:	4b7b      	ldr	r3, [pc, #492]	; (80035c0 <setup+0x318>)
 80033d4:	edd3 7a04 	vldr	s15, [r3, #16]
 80033d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80033dc:	4b78      	ldr	r3, [pc, #480]	; (80035c0 <setup+0x318>)
 80033de:	edd3 7a00 	vldr	s15, [r3]
 80033e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033ea:	4b75      	ldr	r3, [pc, #468]	; (80035c0 <setup+0x318>)
 80033ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80033f0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80033f4:	4b72      	ldr	r3, [pc, #456]	; (80035c0 <setup+0x318>)
 80033f6:	edd3 7a04 	vldr	s15, [r3, #16]
 80033fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003402:	4b70      	ldr	r3, [pc, #448]	; (80035c4 <setup+0x31c>)
 8003404:	edc3 7a05 	vstr	s15, [r3, #20]
	polynoms.b_roll[2]=parameter.P_roll+parameter.D_roll*parameter.N_roll;
 8003408:	4b6d      	ldr	r3, [pc, #436]	; (80035c0 <setup+0x318>)
 800340a:	ed93 7a01 	vldr	s14, [r3, #4]
 800340e:	4b6c      	ldr	r3, [pc, #432]	; (80035c0 <setup+0x318>)
 8003410:	edd3 6a03 	vldr	s13, [r3, #12]
 8003414:	4b6a      	ldr	r3, [pc, #424]	; (80035c0 <setup+0x318>)
 8003416:	edd3 7a04 	vldr	s15, [r3, #16]
 800341a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800341e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003422:	4b68      	ldr	r3, [pc, #416]	; (80035c4 <setup+0x31c>)
 8003424:	edc3 7a06 	vstr	s15, [r3, #24]
	polynoms.a_roll[0]=1-parameter.N_roll*parameter.T;
 8003428:	4b65      	ldr	r3, [pc, #404]	; (80035c0 <setup+0x318>)
 800342a:	ed93 7a04 	vldr	s14, [r3, #16]
 800342e:	4b64      	ldr	r3, [pc, #400]	; (80035c0 <setup+0x318>)
 8003430:	edd3 7a00 	vldr	s15, [r3]
 8003434:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003438:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 800343c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003440:	4b60      	ldr	r3, [pc, #384]	; (80035c4 <setup+0x31c>)
 8003442:	edc3 7a00 	vstr	s15, [r3]
	polynoms.a_roll[1]=parameter.N_roll*parameter.T-2;
 8003446:	4b5e      	ldr	r3, [pc, #376]	; (80035c0 <setup+0x318>)
 8003448:	ed93 7a04 	vldr	s14, [r3, #16]
 800344c:	4b5c      	ldr	r3, [pc, #368]	; (80035c0 <setup+0x318>)
 800344e:	edd3 7a00 	vldr	s15, [r3]
 8003452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003456:	eeb0 7a00 	vmov.f32	s14, #0
 800345a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800345e:	4b59      	ldr	r3, [pc, #356]	; (80035c4 <setup+0x31c>)
 8003460:	edc3 7a01 	vstr	s15, [r3, #4]

	polynoms.b_pitch[0]=parameter.P_pitch-parameter.I_pitch*parameter.T-parameter.P_pitch*parameter.N_pitch*parameter.T+parameter.N_pitch*parameter.I_pitch*parameter.T*parameter.T+parameter.D_pitch*parameter.N_pitch;
 8003464:	4b56      	ldr	r3, [pc, #344]	; (80035c0 <setup+0x318>)
 8003466:	ed93 7a05 	vldr	s14, [r3, #20]
 800346a:	4b55      	ldr	r3, [pc, #340]	; (80035c0 <setup+0x318>)
 800346c:	edd3 6a06 	vldr	s13, [r3, #24]
 8003470:	4b53      	ldr	r3, [pc, #332]	; (80035c0 <setup+0x318>)
 8003472:	edd3 7a00 	vldr	s15, [r3]
 8003476:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800347a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800347e:	4b50      	ldr	r3, [pc, #320]	; (80035c0 <setup+0x318>)
 8003480:	edd3 6a05 	vldr	s13, [r3, #20]
 8003484:	4b4e      	ldr	r3, [pc, #312]	; (80035c0 <setup+0x318>)
 8003486:	edd3 7a08 	vldr	s15, [r3, #32]
 800348a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800348e:	4b4c      	ldr	r3, [pc, #304]	; (80035c0 <setup+0x318>)
 8003490:	edd3 7a00 	vldr	s15, [r3]
 8003494:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003498:	ee37 7a67 	vsub.f32	s14, s14, s15
 800349c:	4b48      	ldr	r3, [pc, #288]	; (80035c0 <setup+0x318>)
 800349e:	edd3 6a08 	vldr	s13, [r3, #32]
 80034a2:	4b47      	ldr	r3, [pc, #284]	; (80035c0 <setup+0x318>)
 80034a4:	edd3 7a06 	vldr	s15, [r3, #24]
 80034a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80034ac:	4b44      	ldr	r3, [pc, #272]	; (80035c0 <setup+0x318>)
 80034ae:	edd3 7a00 	vldr	s15, [r3]
 80034b2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80034b6:	4b42      	ldr	r3, [pc, #264]	; (80035c0 <setup+0x318>)
 80034b8:	edd3 7a00 	vldr	s15, [r3]
 80034bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034c4:	4b3e      	ldr	r3, [pc, #248]	; (80035c0 <setup+0x318>)
 80034c6:	edd3 6a07 	vldr	s13, [r3, #28]
 80034ca:	4b3d      	ldr	r3, [pc, #244]	; (80035c0 <setup+0x318>)
 80034cc:	edd3 7a08 	vldr	s15, [r3, #32]
 80034d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034d8:	4b3a      	ldr	r3, [pc, #232]	; (80035c4 <setup+0x31c>)
 80034da:	edc3 7a07 	vstr	s15, [r3, #28]
	polynoms.b_pitch[1]=parameter.I_pitch*parameter.T-2*parameter.P_pitch+parameter.P_pitch*parameter.N_pitch*parameter.T-2*parameter.D_pitch*parameter.N_pitch;
 80034de:	4b38      	ldr	r3, [pc, #224]	; (80035c0 <setup+0x318>)
 80034e0:	ed93 7a06 	vldr	s14, [r3, #24]
 80034e4:	4b36      	ldr	r3, [pc, #216]	; (80035c0 <setup+0x318>)
 80034e6:	edd3 7a00 	vldr	s15, [r3]
 80034ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034ee:	4b34      	ldr	r3, [pc, #208]	; (80035c0 <setup+0x318>)
 80034f0:	edd3 7a05 	vldr	s15, [r3, #20]
 80034f4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80034f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80034fc:	4b30      	ldr	r3, [pc, #192]	; (80035c0 <setup+0x318>)
 80034fe:	edd3 6a05 	vldr	s13, [r3, #20]
 8003502:	4b2f      	ldr	r3, [pc, #188]	; (80035c0 <setup+0x318>)
 8003504:	edd3 7a08 	vldr	s15, [r3, #32]
 8003508:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800350c:	4b2c      	ldr	r3, [pc, #176]	; (80035c0 <setup+0x318>)
 800350e:	edd3 7a00 	vldr	s15, [r3]
 8003512:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003516:	ee37 7a27 	vadd.f32	s14, s14, s15
 800351a:	4b29      	ldr	r3, [pc, #164]	; (80035c0 <setup+0x318>)
 800351c:	edd3 7a07 	vldr	s15, [r3, #28]
 8003520:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003524:	4b26      	ldr	r3, [pc, #152]	; (80035c0 <setup+0x318>)
 8003526:	edd3 7a08 	vldr	s15, [r3, #32]
 800352a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800352e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003532:	4b24      	ldr	r3, [pc, #144]	; (80035c4 <setup+0x31c>)
 8003534:	edc3 7a08 	vstr	s15, [r3, #32]
	polynoms.b_pitch[2]=parameter.P_pitch+parameter.D_pitch*parameter.N_pitch;
 8003538:	4b21      	ldr	r3, [pc, #132]	; (80035c0 <setup+0x318>)
 800353a:	ed93 7a05 	vldr	s14, [r3, #20]
 800353e:	4b20      	ldr	r3, [pc, #128]	; (80035c0 <setup+0x318>)
 8003540:	edd3 6a07 	vldr	s13, [r3, #28]
 8003544:	4b1e      	ldr	r3, [pc, #120]	; (80035c0 <setup+0x318>)
 8003546:	edd3 7a08 	vldr	s15, [r3, #32]
 800354a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800354e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003552:	4b1c      	ldr	r3, [pc, #112]	; (80035c4 <setup+0x31c>)
 8003554:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	polynoms.a_pitch[0]=1-parameter.N_pitch*parameter.T;
 8003558:	4b19      	ldr	r3, [pc, #100]	; (80035c0 <setup+0x318>)
 800355a:	ed93 7a08 	vldr	s14, [r3, #32]
 800355e:	4b18      	ldr	r3, [pc, #96]	; (80035c0 <setup+0x318>)
 8003560:	edd3 7a00 	vldr	s15, [r3]
 8003564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003568:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 800356c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003570:	4b14      	ldr	r3, [pc, #80]	; (80035c4 <setup+0x31c>)
 8003572:	edc3 7a02 	vstr	s15, [r3, #8]
	polynoms.a_pitch[1]=parameter.N_pitch*parameter.T-2;
 8003576:	4b12      	ldr	r3, [pc, #72]	; (80035c0 <setup+0x318>)
 8003578:	ed93 7a08 	vldr	s14, [r3, #32]
 800357c:	4b10      	ldr	r3, [pc, #64]	; (80035c0 <setup+0x318>)
 800357e:	edd3 7a00 	vldr	s15, [r3]
 8003582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003586:	eeb0 7a00 	vmov.f32	s14, #0
 800358a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800358e:	4b0d      	ldr	r3, [pc, #52]	; (80035c4 <setup+0x31c>)
 8003590:	edc3 7a03 	vstr	s15, [r3, #12]

	TIMER_Start(&Control_Timer);//start Timer for Controller
 8003594:	480c      	ldr	r0, [pc, #48]	; (80035c8 <setup+0x320>)
 8003596:	f005 fb73 	bl	8008c80 <TIMER_Start>
	PWM_CCU4_Start(&PWM_OUTPUT_1);
 800359a:	480c      	ldr	r0, [pc, #48]	; (80035cc <setup+0x324>)
 800359c:	f006 f9fc 	bl	8009998 <PWM_CCU4_Start>
	PWM_CCU4_Start(&PWM_OUTPUT_2);
 80035a0:	480b      	ldr	r0, [pc, #44]	; (80035d0 <setup+0x328>)
 80035a2:	f006 f9f9 	bl	8009998 <PWM_CCU4_Start>
	PWM_CCU4_Start(&PWM_OUTPUT_3);
 80035a6:	480b      	ldr	r0, [pc, #44]	; (80035d4 <setup+0x32c>)
 80035a8:	f006 f9f6 	bl	8009998 <PWM_CCU4_Start>
	PWM_CCU4_Start(&PWM_OUTPUT_4);
 80035ac:	480a      	ldr	r0, [pc, #40]	; (80035d8 <setup+0x330>)
 80035ae:	f006 f9f3 	bl	8009998 <PWM_CCU4_Start>
}
 80035b2:	3740      	adds	r7, #64	; 0x40
 80035b4:	46bd      	mov	sp, r7
 80035b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035ba:	bf00      	nop
 80035bc:	200005ec 	.word	0x200005ec
 80035c0:	20000038 	.word	0x20000038
 80035c4:	20000624 	.word	0x20000624
 80035c8:	20000100 	.word	0x20000100
 80035cc:	20000188 	.word	0x20000188
 80035d0:	200001b0 	.word	0x200001b0
 80035d4:	200001d8 	.word	0x200001d8
 80035d8:	20000200 	.word	0x20000200

080035dc <setup_STATE_LEDs>:
/**
 *  \brief Function for setup of the pins for the Battery-LEDs on the LARIX-Board
 */
void setup_STATE_LEDs(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
	Control_P3_0(OUTPUT_PP_GP, VERYSTRONG);	//Configure Pin 3.0 -->BatteryState1 (See: _Quadrocopter/BatterySafety/BatterySafety.h)
 80035e0:	4a16      	ldr	r2, [pc, #88]	; (800363c <setup_STATE_LEDs+0x60>)
 80035e2:	4b16      	ldr	r3, [pc, #88]	; (800363c <setup_STATE_LEDs+0x60>)
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80035ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035ee:	6113      	str	r3, [r2, #16]
 80035f0:	4a12      	ldr	r2, [pc, #72]	; (800363c <setup_STATE_LEDs+0x60>)
 80035f2:	4b12      	ldr	r3, [pc, #72]	; (800363c <setup_STATE_LEDs+0x60>)
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	f023 0307 	bic.w	r3, r3, #7
 80035fa:	6413      	str	r3, [r2, #64]	; 0x40
	Control_P3_1(OUTPUT_PP_GP, VERYSTRONG); //Configure Pin 3.1 -->BatteryState2
 80035fc:	4a0f      	ldr	r2, [pc, #60]	; (800363c <setup_STATE_LEDs+0x60>)
 80035fe:	4b0f      	ldr	r3, [pc, #60]	; (800363c <setup_STATE_LEDs+0x60>)
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 8003606:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800360a:	6113      	str	r3, [r2, #16]
 800360c:	4a0b      	ldr	r2, [pc, #44]	; (800363c <setup_STATE_LEDs+0x60>)
 800360e:	4b0b      	ldr	r3, [pc, #44]	; (800363c <setup_STATE_LEDs+0x60>)
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003616:	6413      	str	r3, [r2, #64]	; 0x40
	Control_P3_2(OUTPUT_PP_GP, VERYSTRONG); //Configure Pin 3.2 -->BatteryState3
 8003618:	4a08      	ldr	r2, [pc, #32]	; (800363c <setup_STATE_LEDs+0x60>)
 800361a:	4b08      	ldr	r3, [pc, #32]	; (800363c <setup_STATE_LEDs+0x60>)
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	f423 0378 	bic.w	r3, r3, #16252928	; 0xf80000
 8003622:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003626:	6113      	str	r3, [r2, #16]
 8003628:	4a04      	ldr	r2, [pc, #16]	; (800363c <setup_STATE_LEDs+0x60>)
 800362a:	4b04      	ldr	r3, [pc, #16]	; (800363c <setup_STATE_LEDs+0x60>)
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003632:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	48028300 	.word	0x48028300

08003640 <setup_UART_Trigger_limits>:
 *
 *  \details Receive FIFO trigger limit is configured for Bluetooth & the Remote Control
 *  \details When the FIFO filling level rises above the trigger limit -> Interrupt will be generated
 */
void setup_UART_Trigger_limits(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
	UART_SetRXFIFOTriggerLimit(&RemoteControl_Handle, 31);
 8003644:	4804      	ldr	r0, [pc, #16]	; (8003658 <setup_UART_Trigger_limits+0x18>)
 8003646:	211f      	movs	r1, #31
 8003648:	f7ff faea 	bl	8002c20 <UART_SetRXFIFOTriggerLimit>
	UART_SetRXFIFOTriggerLimit(&Bluetooth_Handle, 18);
 800364c:	4803      	ldr	r0, [pc, #12]	; (800365c <setup_UART_Trigger_limits+0x1c>)
 800364e:	2112      	movs	r1, #18
 8003650:	f7ff fae6 	bl	8002c20 <UART_SetRXFIFOTriggerLimit>
}
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	200000bc 	.word	0x200000bc
 800365c:	200000b0 	.word	0x200000b0

08003660 <disableIRQ>:
 *  *
 *  \details This function disables all Interrupt-Service-Routines\n
 *  except the Util_Timer_ISR
 */
void disableIRQ(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
	INTERRUPT_Disable(&Control_Timer_ISR_Handle);
 8003664:	480e      	ldr	r0, [pc, #56]	; (80036a0 <disableIRQ+0x40>)
 8003666:	f7ff facd 	bl	8002c04 <INTERRUPT_Disable>
	INTERRUPT_Disable(&GeneralPurpose_Timer_ISR_Handle);
 800366a:	480e      	ldr	r0, [pc, #56]	; (80036a4 <disableIRQ+0x44>)
 800366c:	f7ff faca 	bl	8002c04 <INTERRUPT_Disable>
	INTERRUPT_Disable(&MagnetometerCal_Timer_ISR_Handle);
 8003670:	480d      	ldr	r0, [pc, #52]	; (80036a8 <disableIRQ+0x48>)
 8003672:	f7ff fac7 	bl	8002c04 <INTERRUPT_Disable>
	NVIC_DisableIRQ(backgnd_rs_intr_handle.node_id);//Disable ADC Interrupt
 8003676:	4b0d      	ldr	r3, [pc, #52]	; (80036ac <disableIRQ+0x4c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	b2db      	uxtb	r3, r3
 800367c:	b25b      	sxtb	r3, r3
 800367e:	4618      	mov	r0, r3
 8003680:	f7ff fa98 	bl	8002bb4 <NVIC_DisableIRQ>
	INTERRUPT_Disable(&DPS310_Ext_Int_ISR_Handle);
 8003684:	480a      	ldr	r0, [pc, #40]	; (80036b0 <disableIRQ+0x50>)
 8003686:	f7ff fabd 	bl	8002c04 <INTERRUPT_Disable>
	INTERRUPT_Disable(&MPU9X50_Ext_Int_ISR_Handle);
 800368a:	480a      	ldr	r0, [pc, #40]	; (80036b4 <disableIRQ+0x54>)
 800368c:	f7ff faba 	bl	8002c04 <INTERRUPT_Disable>
	INTERRUPT_Disable(&Bluetooth_RX_ISR_Handle);
 8003690:	4809      	ldr	r0, [pc, #36]	; (80036b8 <disableIRQ+0x58>)
 8003692:	f7ff fab7 	bl	8002c04 <INTERRUPT_Disable>
	INTERRUPT_Disable(&RemoteControl_RX_ISR_Handle);
 8003696:	4809      	ldr	r0, [pc, #36]	; (80036bc <disableIRQ+0x5c>)
 8003698:	f7ff fab4 	bl	8002c04 <INTERRUPT_Disable>
}
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	0800e09c 	.word	0x0800e09c
 80036a4:	0800e0a4 	.word	0x0800e0a4
 80036a8:	0800e0a0 	.word	0x0800e0a0
 80036ac:	0800e168 	.word	0x0800e168
 80036b0:	0800e094 	.word	0x0800e094
 80036b4:	0800e098 	.word	0x0800e098
 80036b8:	0800e08c 	.word	0x0800e08c
 80036bc:	0800e090 	.word	0x0800e090

080036c0 <enableIRQ>:
 *  \brief Function for enabling all Interrupt-Service-Routines
 *
 *  \details This function enables all Interrupt-Service-Routines
 */
void enableIRQ(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
	INTERRUPT_Enable(&GeneralPurpose_Timer_ISR_Handle);
 80036c4:	480b      	ldr	r0, [pc, #44]	; (80036f4 <enableIRQ+0x34>)
 80036c6:	f7ff fa8f 	bl	8002be8 <INTERRUPT_Enable>
	NVIC_EnableIRQ(backgnd_rs_intr_handle.node_id); //Enables ADC Interrupt
 80036ca:	4b0b      	ldr	r3, [pc, #44]	; (80036f8 <enableIRQ+0x38>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	b25b      	sxtb	r3, r3
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7ff fa56 	bl	8002b84 <NVIC_EnableIRQ>
	INTERRUPT_Enable(&Control_Timer_ISR_Handle);
 80036d8:	4808      	ldr	r0, [pc, #32]	; (80036fc <enableIRQ+0x3c>)
 80036da:	f7ff fa85 	bl	8002be8 <INTERRUPT_Enable>
    INTERRUPT_Enable(&Bluetooth_RX_ISR_Handle);
 80036de:	4808      	ldr	r0, [pc, #32]	; (8003700 <enableIRQ+0x40>)
 80036e0:	f7ff fa82 	bl	8002be8 <INTERRUPT_Enable>
    INTERRUPT_Enable(&DPS310_Ext_Int_ISR_Handle);
 80036e4:	4807      	ldr	r0, [pc, #28]	; (8003704 <enableIRQ+0x44>)
 80036e6:	f7ff fa7f 	bl	8002be8 <INTERRUPT_Enable>
	INTERRUPT_Enable(&RemoteControl_RX_ISR_Handle);
 80036ea:	4807      	ldr	r0, [pc, #28]	; (8003708 <enableIRQ+0x48>)
 80036ec:	f7ff fa7c 	bl	8002be8 <INTERRUPT_Enable>
}
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	0800e0a4 	.word	0x0800e0a4
 80036f8:	0800e168 	.word	0x0800e168
 80036fc:	0800e09c 	.word	0x0800e09c
 8003700:	0800e08c 	.word	0x0800e08c
 8003704:	0800e094 	.word	0x0800e094
 8003708:	0800e090 	.word	0x0800e090

0800370c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 800370c:	b598      	push	{r3, r4, r7, lr}
 800370e:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8003710:	4a05      	ldr	r2, [pc, #20]	; (8003728 <SystemInit+0x1c>)
 8003712:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003716:	4614      	mov	r4, r2
 8003718:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800371a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 800371e:	f006 fb81 	bl	8009e24 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 8003722:	f006 fbe9 	bl	8009ef8 <SystemCoreClockSetup>
}
 8003726:	bd98      	pop	{r3, r4, r7, pc}
 8003728:	2000ffc4 	.word	0x2000ffc4

0800372c <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 8003732:	4b2f      	ldr	r3, [pc, #188]	; (80037f0 <SystemCoreClockUpdate+0xc4>)
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d03e      	beq.n	80037bc <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 800373e:	4b2d      	ldr	r3, [pc, #180]	; (80037f4 <SystemCoreClockUpdate+0xc8>)
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d002      	beq.n	8003750 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 800374a:	4b2b      	ldr	r3, [pc, #172]	; (80037f8 <SystemCoreClockUpdate+0xcc>)
 800374c:	60fb      	str	r3, [r7, #12]
 800374e:	e002      	b.n	8003756 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8003750:	f006 fbc8 	bl	8009ee4 <OSCHP_GetFrequency>
 8003754:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 8003756:	4b27      	ldr	r3, [pc, #156]	; (80037f4 <SystemCoreClockUpdate+0xc8>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0304 	and.w	r3, r3, #4
 800375e:	2b00      	cmp	r3, #0
 8003760:	d020      	beq.n	80037a4 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8003762:	4b24      	ldr	r3, [pc, #144]	; (80037f4 <SystemCoreClockUpdate+0xc8>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800376a:	0e1b      	lsrs	r3, r3, #24
 800376c:	3301      	adds	r3, #1
 800376e:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8003770:	4b20      	ldr	r3, [pc, #128]	; (80037f4 <SystemCoreClockUpdate+0xc8>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8003778:	0a1b      	lsrs	r3, r3, #8
 800377a:	3301      	adds	r3, #1
 800377c:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800377e:	4b1d      	ldr	r3, [pc, #116]	; (80037f4 <SystemCoreClockUpdate+0xc8>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003786:	0c1b      	lsrs	r3, r3, #16
 8003788:	3301      	adds	r3, #1
 800378a:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	fb02 f303 	mul.w	r3, r2, r3
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	fbb2 f3f3 	udiv	r3, r2, r3
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	fb02 f303 	mul.w	r3, r2, r3
 80037a0:	60fb      	str	r3, [r7, #12]
 80037a2:	e00d      	b.n	80037c0 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 80037a4:	4b13      	ldr	r3, [pc, #76]	; (80037f4 <SystemCoreClockUpdate+0xc8>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037ac:	3301      	adds	r3, #1
 80037ae:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b8:	60fb      	str	r3, [r7, #12]
 80037ba:	e001      	b.n	80037c0 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 80037bc:	4b0e      	ldr	r3, [pc, #56]	; (80037f8 <SystemCoreClockUpdate+0xcc>)
 80037be:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80037c0:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <SystemCoreClockUpdate+0xc4>)
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	3301      	adds	r3, #1
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ce:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 80037d0:	4b07      	ldr	r3, [pc, #28]	; (80037f0 <SystemCoreClockUpdate+0xc4>)
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	f003 0301 	and.w	r3, r3, #1
 80037d8:	3301      	adds	r3, #1
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e0:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 80037e2:	4a06      	ldr	r2, [pc, #24]	; (80037fc <SystemCoreClockUpdate+0xd0>)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6013      	str	r3, [r2, #0]
}
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	50004600 	.word	0x50004600
 80037f4:	50004710 	.word	0x50004710
 80037f8:	016e3600 	.word	0x016e3600
 80037fc:	2000ffc0 	.word	0x2000ffc0

08003800 <XMC_ERU_Enable>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* Enable the clock and De-assert the ERU module from the reset state. */
void XMC_ERU_Enable(XMC_ERU_t *const eru)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
#if defined(XMC_ERU1)
  if (eru == XMC_ERU1)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a05      	ldr	r2, [pc, #20]	; (8003820 <XMC_ERU_Enable+0x20>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d103      	bne.n	8003818 <XMC_ERU_Enable+0x18>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ERU1);
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ERU1);
 8003810:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003814:	f000 f960 	bl	8003ad8 <XMC_SCU_RESET_DeassertPeripheralReset>
  }
#else
  XMC_UNUSED_ARG(eru);
  #endif
}
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	40044000 	.word	0x40044000

08003824 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	460b      	mov	r3, r1
 800382e:	607a      	str	r2, [r7, #4]
 8003830:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 8003832:	7afb      	ldrb	r3, [r7, #11]
 8003834:	089b      	lsrs	r3, r3, #2
 8003836:	b2db      	uxtb	r3, r3
 8003838:	4618      	mov	r0, r3
 800383a:	7afb      	ldrb	r3, [r7, #11]
 800383c:	089b      	lsrs	r3, r3, #2
 800383e:	b2db      	uxtb	r3, r3
 8003840:	461a      	mov	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	3204      	adds	r2, #4
 8003846:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800384a:	7afb      	ldrb	r3, [r7, #11]
 800384c:	f003 0303 	and.w	r3, r3, #3
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	4619      	mov	r1, r3
 8003854:	23f8      	movs	r3, #248	; 0xf8
 8003856:	408b      	lsls	r3, r1
 8003858:	43db      	mvns	r3, r3
 800385a:	ea02 0103 	and.w	r1, r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	1d02      	adds	r2, r0, #4
 8003862:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800386a:	7afb      	ldrb	r3, [r7, #11]
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	4619      	mov	r1, r3
 8003870:	2303      	movs	r3, #3
 8003872:	408b      	lsls	r3, r1
 8003874:	43db      	mvns	r3, r3
 8003876:	401a      	ands	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4a37      	ldr	r2, [pc, #220]	; (800395c <XMC_GPIO_Init+0x138>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d003      	beq.n	800388c <XMC_GPIO_Init+0x68>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	4a36      	ldr	r2, [pc, #216]	; (8003960 <XMC_GPIO_Init+0x13c>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d10a      	bne.n	80038a2 <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003890:	7afb      	ldrb	r3, [r7, #11]
 8003892:	2101      	movs	r1, #1
 8003894:	fa01 f303 	lsl.w	r3, r1, r3
 8003898:	43db      	mvns	r3, r3
 800389a:	401a      	ands	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	661a      	str	r2, [r3, #96]	; 0x60
 80038a0:	e03c      	b.n	800391c <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	7afb      	ldrb	r3, [r7, #11]
 80038a8:	409a      	lsls	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 80038ae:	7afb      	ldrb	r3, [r7, #11]
 80038b0:	08db      	lsrs	r3, r3, #3
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	4618      	mov	r0, r3
 80038b6:	7afb      	ldrb	r3, [r7, #11]
 80038b8:	08db      	lsrs	r3, r3, #3
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	461a      	mov	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	3210      	adds	r2, #16
 80038c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80038c6:	7afb      	ldrb	r3, [r7, #11]
 80038c8:	f003 0307 	and.w	r3, r3, #7
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	4619      	mov	r1, r3
 80038d0:	2307      	movs	r3, #7
 80038d2:	408b      	lsls	r3, r1
 80038d4:	43db      	mvns	r3, r3
 80038d6:	ea02 0103 	and.w	r1, r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f100 0210 	add.w	r2, r0, #16
 80038e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 80038e4:	7afb      	ldrb	r3, [r7, #11]
 80038e6:	08db      	lsrs	r3, r3, #3
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	4618      	mov	r0, r3
 80038ec:	7afb      	ldrb	r3, [r7, #11]
 80038ee:	08db      	lsrs	r3, r3, #3
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	461a      	mov	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	3210      	adds	r2, #16
 80038f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	7a1b      	ldrb	r3, [r3, #8]
 8003900:	4619      	mov	r1, r3
 8003902:	7afb      	ldrb	r3, [r7, #11]
 8003904:	f003 0307 	and.w	r3, r3, #7
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	fa01 f303 	lsl.w	r3, r1, r3
 800390e:	ea42 0103 	orr.w	r1, r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f100 0210 	add.w	r2, r0, #16
 8003918:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 800391c:	7afb      	ldrb	r3, [r7, #11]
 800391e:	089b      	lsrs	r3, r3, #2
 8003920:	b2db      	uxtb	r3, r3
 8003922:	4618      	mov	r0, r3
 8003924:	7afb      	ldrb	r3, [r7, #11]
 8003926:	089b      	lsrs	r3, r3, #2
 8003928:	b2db      	uxtb	r3, r3
 800392a:	461a      	mov	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	3204      	adds	r2, #4
 8003930:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	4619      	mov	r1, r3
 800393a:	7afb      	ldrb	r3, [r7, #11]
 800393c:	f003 0303 	and.w	r3, r3, #3
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	fa01 f303 	lsl.w	r3, r1, r3
 8003946:	ea42 0103 	orr.w	r1, r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	1d02      	adds	r2, r0, #4
 800394e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8003952:	3714      	adds	r7, #20
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	48028e00 	.word	0x48028e00
 8003960:	48028f00 	.word	0x48028f00

08003964 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003968:	4b03      	ldr	r3, [pc, #12]	; (8003978 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 800396a:	681b      	ldr	r3, [r3, #0]
}
 800396c:	4618      	mov	r0, r3
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	2000ffc0 	.word	0x2000ffc0

0800397c <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8003984:	f7ff fed2 	bl	800372c <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8003988:	4b0b      	ldr	r3, [pc, #44]	; (80039b8 <XMC_SCU_lDelay+0x3c>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a0b      	ldr	r2, [pc, #44]	; (80039bc <XMC_SCU_lDelay+0x40>)
 800398e:	fba2 2303 	umull	r2, r3, r2, r3
 8003992:	0c9a      	lsrs	r2, r3, #18
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	fb02 f303 	mul.w	r3, r2, r3
 800399a:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 800399c:	2300      	movs	r3, #0
 800399e:	60fb      	str	r3, [r7, #12]
 80039a0:	e003      	b.n	80039aa <XMC_SCU_lDelay+0x2e>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80039a2:	bf00      	nop
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	3301      	adds	r3, #1
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d3f7      	bcc.n	80039a2 <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	2000ffc0 	.word	0x2000ffc0
 80039bc:	431bde83 	.word	0x431bde83

080039c0 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 80039c0:	b5b0      	push	{r4, r5, r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af02      	add	r7, sp, #8
 80039c6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 80039c8:	2000      	movs	r0, #0
 80039ca:	f000 f8b1 	bl	8003b30 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 80039ce:	f000 fa5b 	bl	8003e88 <XMC_SCU_HIB_EnableHibernateDomain>
  if (config->enable_osculp == true)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	79db      	ldrb	r3, [r3, #7]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <XMC_SCU_CLOCK_Init+0x1e>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 80039da:	f000 fa81 	bl	8003ee0 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
  }
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	7a5b      	ldrb	r3, [r3, #9]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 f91e 	bl	8003c24 <XMC_SCU_HIB_SetStandbyClockSource>

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	7a1b      	ldrb	r3, [r3, #8]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f000 fa0d 	bl	8003e0c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	7c1b      	ldrb	r3, [r3, #16]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 f932 	bl	8003c60 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	7c5b      	ldrb	r3, [r3, #17]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f000 f955 	bl	8003cb0 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	7c9b      	ldrb	r3, [r3, #18]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 f93c 	bl	8003c88 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	7cdb      	ldrb	r3, [r3, #19]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f000 f95f 	bl	8003cd8 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	799b      	ldrb	r3, [r3, #6]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <XMC_SCU_CLOCK_Init+0x66>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 8003a22:	f000 fa97 	bl	8003f54 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	78db      	ldrb	r3, [r3, #3]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d102      	bne.n	8003a34 <XMC_SCU_CLOCK_Init+0x74>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 8003a2e:	f000 fad1 	bl	8003fd4 <XMC_SCU_CLOCK_DisableSystemPll>
 8003a32:	e014      	b.n	8003a5e <XMC_SCU_CLOCK_Init+0x9e>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8003a34:	f000 fabe 	bl	8003fb4 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	8899      	ldrh	r1, [r3, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8003a44:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8003a4a:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	4608      	mov	r0, r1
 8003a54:	4611      	mov	r1, r2
 8003a56:	462a      	mov	r2, r5
 8003a58:	4623      	mov	r3, r4
 8003a5a:	f000 facb 	bl	8003ff4 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a66:	d103      	bne.n	8003a70 <XMC_SCU_CLOCK_Init+0xb0>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 8003a68:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003a6c:	f000 f860 	bl	8003b30 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8003a70:	f7ff fe5c 	bl	800372c <SystemCoreClockUpdate>
}
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bdb0      	pop	{r4, r5, r7, pc}
 8003a7a:	bf00      	nop

08003a7c <XMC_SCU_INTERRUPT_EnableNmiRequest>:
  SCU_PARITY->PETE &= (uint32_t)~memory; 
}

/* Enables a NMI source */
void XMC_SCU_INTERRUPT_EnableNmiRequest(const uint32_t request)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->NMIREQEN |= (uint32_t)request;
 8003a84:	4905      	ldr	r1, [pc, #20]	; (8003a9c <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 8003a86:	4b05      	ldr	r3, [pc, #20]	; (8003a9c <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 8003a88:	695a      	ldr	r2, [r3, #20]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	614b      	str	r3, [r1, #20]
}
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	50004074 	.word	0x50004074

08003aa0 <XMC_SCU_RESET_AssertPeripheralReset>:
  SCU_INTERRUPT->NMIREQEN &= (uint32_t)~request;
}

/* API to manually assert a reset request */
void XMC_SCU_RESET_AssertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	0f1b      	lsrs	r3, r3, #28
 8003aac:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003ab4:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	005b      	lsls	r3, r3, #1
 8003abc:	4413      	add	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	4b04      	ldr	r3, [pc, #16]	; (8003ad4 <XMC_SCU_RESET_AssertPeripheralReset+0x34>)
 8003ac4:	4413      	add	r3, r2
 8003ac6:	68ba      	ldr	r2, [r7, #8]
 8003ac8:	601a      	str	r2, [r3, #0]
}
 8003aca:	3714      	adds	r7, #20
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	50004410 	.word	0x50004410

08003ad8 <XMC_SCU_RESET_DeassertPeripheralReset>:

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	0f1b      	lsrs	r3, r3, #28
 8003ae4:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003aec:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	4613      	mov	r3, r2
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	4413      	add	r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	461a      	mov	r2, r3
 8003afa:	4b04      	ldr	r3, [pc, #16]	; (8003b0c <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 8003afc:	4413      	add	r3, r2
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	601a      	str	r2, [r3, #0]
}
 8003b02:	3714      	adds	r7, #20
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	50004414 	.word	0x50004414

08003b10 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8003b14:	f7ff ff26 	bl	8003964 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8003b18:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 8003b1a:	4b04      	ldr	r3, [pc, #16]	; (8003b2c <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8003b1c:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	50004600 	.word	0x50004600

08003b30 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8003b38:	4906      	ldr	r1, [pc, #24]	; (8003b54 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8003b3a:	4b06      	ldr	r3, [pc, #24]	; (8003b54 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	50004600 	.word	0x50004600

08003b58 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8003b60:	4906      	ldr	r1, [pc, #24]	; (8003b7c <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8003b62:	4b06      	ldr	r3, [pc, #24]	; (8003b7c <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	50004600 	.word	0x50004600

08003b80 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8003b88:	4906      	ldr	r1, [pc, #24]	; (8003ba4 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8003b8a:	4b06      	ldr	r3, [pc, #24]	; (8003ba4 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	50004600 	.word	0x50004600

08003ba8 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	4603      	mov	r3, r0
 8003bb0:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 8003bb2:	88fb      	ldrh	r3, [r7, #6]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d108      	bne.n	8003bca <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8003bb8:	4a0a      	ldr	r2, [pc, #40]	; (8003be4 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8003bba:	4b0a      	ldr	r3, [pc, #40]	; (8003be4 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bc2:	f023 0301 	bic.w	r3, r3, #1
 8003bc6:	60d3      	str	r3, [r2, #12]
 8003bc8:	e007      	b.n	8003bda <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8003bca:	4a06      	ldr	r2, [pc, #24]	; (8003be4 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8003bcc:	4b05      	ldr	r3, [pc, #20]	; (8003be4 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bd4:	f043 0301 	orr.w	r3, r3, #1
 8003bd8:	60d3      	str	r3, [r2, #12]
  }
}
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	50004710 	.word	0x50004710

08003be8 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	4603      	mov	r3, r0
 8003bf0:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8003bf2:	bf00      	nop
 8003bf4:	4b09      	ldr	r3, [pc, #36]	; (8003c1c <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 8003bf6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003bfa:	f003 0308 	and.w	r3, r3, #8
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1f8      	bne.n	8003bf4 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8003c02:	4907      	ldr	r1, [pc, #28]	; (8003c20 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8003c04:	4b06      	ldr	r3, [pc, #24]	; (8003c20 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 8003c0c:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	50004000 	.word	0x50004000
 8003c20:	50004300 	.word	0x50004300

08003c24 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8003c2e:	bf00      	nop
 8003c30:	4b09      	ldr	r3, [pc, #36]	; (8003c58 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 8003c32:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003c36:	f003 0308 	and.w	r3, r3, #8
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1f8      	bne.n	8003c30 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8003c3e:	4907      	ldr	r1, [pc, #28]	; (8003c5c <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8003c40:	4b06      	ldr	r3, [pc, #24]	; (8003c5c <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 8003c48:	79fb      	ldrb	r3, [r7, #7]
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr
 8003c58:	50004000 	.word	0x50004000
 8003c5c:	50004300 	.word	0x50004300

08003c60 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8003c68:	4906      	ldr	r1, [pc, #24]	; (8003c84 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8003c6a:	4b06      	ldr	r3, [pc, #24]	; (8003c84 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8003c76:	4313      	orrs	r3, r2
 8003c78:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	50004600 	.word	0x50004600

08003c88 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8003c90:	4906      	ldr	r1, [pc, #24]	; (8003cac <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8003c92:	4b06      	ldr	r3, [pc, #24]	; (8003cac <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	50004600 	.word	0x50004600

08003cb0 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8003cb8:	4906      	ldr	r1, [pc, #24]	; (8003cd4 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8003cba:	4b06      	ldr	r3, [pc, #24]	; (8003cd4 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	50004600 	.word	0x50004600

08003cd8 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8003ce0:	4906      	ldr	r1, [pc, #24]	; (8003cfc <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8003ce2:	4b06      	ldr	r3, [pc, #24]	; (8003cfc <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	50004600 	.word	0x50004600

08003d00 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8003d08:	4906      	ldr	r1, [pc, #24]	; (8003d24 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8003d0a:	4b06      	ldr	r3, [pc, #24]	; (8003d24 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8003d16:	4313      	orrs	r3, r2
 8003d18:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr
 8003d24:	50004600 	.word	0x50004600

08003d28 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8003d30:	4906      	ldr	r1, [pc, #24]	; (8003d4c <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8003d32:	4b06      	ldr	r3, [pc, #24]	; (8003d4c <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr
 8003d4c:	50004600 	.word	0x50004600

08003d50 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8003d58:	4906      	ldr	r1, [pc, #24]	; (8003d74 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8003d5a:	4b06      	ldr	r3, [pc, #24]	; (8003d74 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8003d66:	4313      	orrs	r3, r2
 8003d68:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	50004600 	.word	0x50004600

08003d78 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	4603      	mov	r3, r0
 8003d80:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 8003d82:	4a04      	ldr	r2, [pc, #16]	; (8003d94 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8003d84:	79fb      	ldrb	r3, [r7, #7]
 8003d86:	6053      	str	r3, [r2, #4]
}
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	50004600 	.word	0x50004600

08003d98 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8003da2:	4a19      	ldr	r2, [pc, #100]	; (8003e08 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8003da4:	4b18      	ldr	r3, [pc, #96]	; (8003e08 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	f043 0301 	orr.w	r3, r3, #1
 8003dac:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8003dae:	4a16      	ldr	r2, [pc, #88]	; (8003e08 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8003db0:	4b15      	ldr	r3, [pc, #84]	; (8003e08 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	f043 0310 	orr.w	r3, r3, #16
 8003db8:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8003dba:	4913      	ldr	r1, [pc, #76]	; (8003e08 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	614b      	str	r3, [r1, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8003dcc:	4a0e      	ldr	r2, [pc, #56]	; (8003e08 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8003dce:	4b0e      	ldr	r3, [pc, #56]	; (8003e08 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dd6:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8003dd8:	4a0b      	ldr	r2, [pc, #44]	; (8003e08 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8003dda:	4b0b      	ldr	r3, [pc, #44]	; (8003e08 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	f023 0310 	bic.w	r3, r3, #16
 8003de2:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8003de4:	4a08      	ldr	r2, [pc, #32]	; (8003e08 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8003de6:	4b08      	ldr	r3, [pc, #32]	; (8003e08 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dee:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8003df0:	bf00      	nop
 8003df2:	4b05      	ldr	r3, [pc, #20]	; (8003e08 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	f003 0304 	and.w	r3, r3, #4
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d0f9      	beq.n	8003df2 <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	50004710 	.word	0x50004710

08003e0c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	4603      	mov	r3, r0
 8003e14:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8003e16:	4a0f      	ldr	r2, [pc, #60]	; (8003e54 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8003e18:	4b0e      	ldr	r3, [pc, #56]	; (8003e54 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e20:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8003e22:	79fb      	ldrb	r3, [r7, #7]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d10e      	bne.n	8003e46 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8003e28:	4a0a      	ldr	r2, [pc, #40]	; (8003e54 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8003e2a:	4b0a      	ldr	r3, [pc, #40]	; (8003e54 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003e32:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8003e34:	2064      	movs	r0, #100	; 0x64
 8003e36:	f7ff fda1 	bl	800397c <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8003e3a:	4a06      	ldr	r2, [pc, #24]	; (8003e54 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8003e3c:	4b05      	ldr	r3, [pc, #20]	; (8003e54 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e44:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8003e46:	2064      	movs	r0, #100	; 0x64
 8003e48:	f7ff fd98 	bl	800397c <XMC_SCU_lDelay>
}
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	50004710 	.word	0x50004710

08003e58 <XMC_SCU_POWER_EnableUsb>:



/* API to enable USB Phy and comparator */
void XMC_SCU_POWER_EnableUsb(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRSET = (uint32_t)(SCU_POWER_PWRSET_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 8003e5c:	4b03      	ldr	r3, [pc, #12]	; (8003e6c <XMC_SCU_POWER_EnableUsb+0x14>)
 8003e5e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003e62:	605a      	str	r2, [r3, #4]
#else
  SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_USBPHYPDQ_Msk;
#endif
}
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	50004200 	.word	0x50004200

08003e70 <XMC_SCU_POWER_DisableUsb>:

/* API to power down USB Phy and comparator */
void XMC_SCU_POWER_DisableUsb(void)
{
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRCLR = (uint32_t)(SCU_POWER_PWRCLR_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 8003e74:	4b03      	ldr	r3, [pc, #12]	; (8003e84 <XMC_SCU_POWER_DisableUsb+0x14>)
 8003e76:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003e7a:	609a      	str	r2, [r3, #8]
#else
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_USBPHYPDQ_Msk;
#endif    
}
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	50004200 	.word	0x50004200

08003e88 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8003e8c:	4b12      	ldr	r3, [pc, #72]	; (8003ed8 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d109      	bne.n	8003eac <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8003e98:	4b0f      	ldr	r3, [pc, #60]	; (8003ed8 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8003e9e:	bf00      	nop
 8003ea0:	4b0d      	ldr	r3, [pc, #52]	; (8003ed8 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d0f9      	beq.n	8003ea0 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8003eac:	4b0b      	ldr	r3, [pc, #44]	; (8003edc <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00a      	beq.n	8003ece <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8003eb8:	4b08      	ldr	r3, [pc, #32]	; (8003edc <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8003eba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ebe:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8003ec0:	bf00      	nop
 8003ec2:	4b06      	ldr	r3, [pc, #24]	; (8003edc <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1f9      	bne.n	8003ec2 <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	50004200 	.word	0x50004200
 8003edc:	50004400 	.word	0x50004400

08003ee0 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:
  }
}

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8003ee4:	bf00      	nop
 8003ee6:	4b19      	ldr	r3, [pc, #100]	; (8003f4c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8003ee8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1f8      	bne.n	8003ee6 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6>
  {
    /* Wait until the update of OSCULCTRL register in hibernate domain is completed */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8003ef4:	4a16      	ldr	r2, [pc, #88]	; (8003f50 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8003ef6:	4b16      	ldr	r3, [pc, #88]	; (8003f50 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003efe:	61d3      	str	r3, [r2, #28]

  /* Check if the input clock is OK using OSCULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8003f00:	bf00      	nop
 8003f02:	4b12      	ldr	r3, [pc, #72]	; (8003f4c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8003f04:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003f08:	f003 0308 	and.w	r3, r3, #8
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1f8      	bne.n	8003f02 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x22>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8003f10:	4a0f      	ldr	r2, [pc, #60]	; (8003f50 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8003f12:	4b0f      	ldr	r3, [pc, #60]	; (8003f50 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	f043 0308 	orr.w	r3, r3, #8
 8003f1a:	60d3      	str	r3, [r2, #12]

  /* wait till clock is stable */
  do
  {
    while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCLR_Msk)
 8003f1c:	bf00      	nop
 8003f1e:	4b0b      	ldr	r3, [pc, #44]	; (8003f4c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8003f20:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1f8      	bne.n	8003f1e <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3e>
    {
      /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    }
    SCU_HIBERNATE->HDCLR |= (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8003f2c:	4a08      	ldr	r2, [pc, #32]	; (8003f50 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8003f2e:	4b08      	ldr	r3, [pc, #32]	; (8003f50 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f043 0308 	orr.w	r3, r3, #8
 8003f36:	6053      	str	r3, [r2, #4]

    XMC_SCU_lDelay(50U);
 8003f38:	2032      	movs	r0, #50	; 0x32
 8003f3a:	f7ff fd1f 	bl	800397c <XMC_SCU_lDelay>

  } while ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) != 0UL);
 8003f3e:	4b04      	ldr	r3, [pc, #16]	; (8003f50 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0308 	and.w	r3, r3, #8
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1e8      	bne.n	8003f1c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3c>

}
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	50004000 	.word	0x50004000
 8003f50:	50004300 	.word	0x50004300

08003f54 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  SCU_HIBERNATE->OSCULCTRL |= (uint32_t)SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8003f54:	b5b0      	push	{r4, r5, r7, lr}
 8003f56:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8003f58:	4a13      	ldr	r2, [pc, #76]	; (8003fa8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x54>)
 8003f5a:	4b13      	ldr	r3, [pc, #76]	; (8003fa8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x54>)
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f62:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8003f64:	4d11      	ldr	r5, [pc, #68]	; (8003fac <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x58>)
 8003f66:	4b11      	ldr	r3, [pc, #68]	; (8003fac <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x58>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8003f6e:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8003f72:	f005 ffb7 	bl	8009ee4 <OSCHP_GetFrequency>
 8003f76:	4602      	mov	r2, r0
 8003f78:	4b0d      	ldr	r3, [pc, #52]	; (8003fb0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x5c>)
 8003f7a:	fba3 2302 	umull	r2, r3, r3, r2
 8003f7e:	0d1b      	lsrs	r3, r3, #20
 8003f80:	3b01      	subs	r3, #1
 8003f82:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8003f84:	4323      	orrs	r3, r4
 8003f86:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8003f88:	4a07      	ldr	r2, [pc, #28]	; (8003fa8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x54>)
 8003f8a:	4b07      	ldr	r3, [pc, #28]	; (8003fa8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x54>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003f92:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) != XMC_SCU_PLL_PLLSTAT_OSC_USABLE)
 8003f94:	bf00      	nop
 8003f96:	4b04      	ldr	r3, [pc, #16]	; (8003fa8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x54>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8003f9e:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8003fa2:	d1f8      	bne.n	8003f96 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x42>
  {
      /* wait till OSC_HP output frequency is usable */
  }
}
 8003fa4:	bdb0      	pop	{r4, r5, r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	50004710 	.word	0x50004710
 8003fac:	50004700 	.word	0x50004700
 8003fb0:	6b5fca6b 	.word	0x6b5fca6b

08003fb4 <XMC_SCU_CLOCK_EnableSystemPll>:
  SCU_OSC->OSCHPCTRL |= (uint32_t)SCU_OSC_OSCHPCTRL_MODE_Msk;
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8003fb8:	4a05      	ldr	r2, [pc, #20]	; (8003fd0 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8003fba:	4b05      	ldr	r3, [pc, #20]	; (8003fd0 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fc2:	f023 0302 	bic.w	r3, r3, #2
 8003fc6:	6053      	str	r3, [r2, #4]
}
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr
 8003fd0:	50004710 	.word	0x50004710

08003fd4 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8003fd8:	4a05      	ldr	r2, [pc, #20]	; (8003ff0 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8003fda:	4b05      	ldr	r3, [pc, #20]	; (8003ff0 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe2:	f043 0302 	orr.w	r3, r3, #2
 8003fe6:	6053      	str	r3, [r2, #4]
}
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr
 8003ff0:	50004710 	.word	0x50004710

08003ff4 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60ba      	str	r2, [r7, #8]
 8003ffc:	607b      	str	r3, [r7, #4]
 8003ffe:	4603      	mov	r3, r0
 8004000:	81fb      	strh	r3, [r7, #14]
 8004002:	460b      	mov	r3, r1
 8004004:	737b      	strb	r3, [r7, #13]

  float vco_frequency;
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8004006:	89fb      	ldrh	r3, [r7, #14]
 8004008:	4618      	mov	r0, r3
 800400a:	f7ff fdcd 	bl	8003ba8 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 800400e:	7b7b      	ldrb	r3, [r7, #13]
 8004010:	2b01      	cmp	r3, #1
 8004012:	f040 8099 	bne.w	8004148 <XMC_SCU_CLOCK_StartSystemPll+0x154>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8004016:	89fb      	ldrh	r3, [r7, #14]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d108      	bne.n	800402e <XMC_SCU_CLOCK_StartSystemPll+0x3a>
    {
      vco_frequency = (float)OSCHP_GetFrequency();
 800401c:	f005 ff62 	bl	8009ee4 <OSCHP_GetFrequency>
 8004020:	ee07 0a90 	vmov	s15, r0
 8004024:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004028:	edc7 7a05 	vstr	s15, [r7, #20]
 800402c:	e001      	b.n	8004032 <XMC_SCU_CLOCK_StartSystemPll+0x3e>
    }
    else
    {
      vco_frequency = (float)OFI_FREQUENCY;
 800402e:	4b53      	ldr	r3, [pc, #332]	; (800417c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8004030:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = (float)((vco_frequency * (float)ndiv) / (float)pdiv);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	ee07 3a90 	vmov	s15, r3
 8004038:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800403c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004040:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	ee07 3a90 	vmov	s15, r3
 800404a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800404e:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8004052:	edc7 7a05 	vstr	s15, [r7, #20]
    kdiv_temp = (uint32_t)((uint32_t)vco_frequency / OFI_FREQUENCY);
 8004056:	edd7 7a05 	vldr	s15, [r7, #20]
 800405a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800405e:	ee17 2a90 	vmov	r2, s15
 8004062:	4b47      	ldr	r3, [pc, #284]	; (8004180 <XMC_SCU_CLOCK_StartSystemPll+0x18c>)
 8004064:	fba3 2302 	umull	r2, r3, r3, r2
 8004068:	0d5b      	lsrs	r3, r3, #21
 800406a:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 800406c:	4a45      	ldr	r2, [pc, #276]	; (8004184 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 800406e:	4b45      	ldr	r3, [pc, #276]	; (8004184 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f043 0301 	orr.w	r3, r3, #1
 8004076:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8004078:	4a42      	ldr	r2, [pc, #264]	; (8004184 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 800407a:	4b42      	ldr	r3, [pc, #264]	; (8004184 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f043 0310 	orr.w	r3, r3, #16
 8004082:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8004084:	493f      	ldr	r1, [pc, #252]	; (8004184 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8004086:	4b3f      	ldr	r3, [pc, #252]	; (8004184 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8004088:	689a      	ldr	r2, [r3, #8]
 800408a:	4b3f      	ldr	r3, [pc, #252]	; (8004188 <XMC_SCU_CLOCK_StartSystemPll+0x194>)
 800408c:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	3a01      	subs	r2, #1
 8004092:	0212      	lsls	r2, r2, #8
 8004094:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	3b01      	subs	r3, #1
 800409a:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 800409c:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	3b01      	subs	r3, #1
 80040a2:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 80040a4:	4313      	orrs	r3, r2
 80040a6:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80040a8:	4a36      	ldr	r2, [pc, #216]	; (8004184 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 80040aa:	4b36      	ldr	r3, [pc, #216]	; (8004184 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040b2:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 80040b4:	4a33      	ldr	r2, [pc, #204]	; (8004184 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 80040b6:	4b33      	ldr	r3, [pc, #204]	; (8004184 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f023 0310 	bic.w	r3, r3, #16
 80040be:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 80040c0:	4a30      	ldr	r2, [pc, #192]	; (8004184 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 80040c2:	4b30      	ldr	r3, [pc, #192]	; (8004184 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040ca:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80040cc:	bf00      	nop
 80040ce:	4b2d      	ldr	r3, [pc, #180]	; (8004184 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0304 	and.w	r3, r3, #4
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d0f9      	beq.n	80040ce <XMC_SCU_CLOCK_StartSystemPll+0xda>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 80040da:	4a2a      	ldr	r2, [pc, #168]	; (8004184 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 80040dc:	4b29      	ldr	r3, [pc, #164]	; (8004184 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f023 0301 	bic.w	r3, r3, #1
 80040e4:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 80040e6:	bf00      	nop
 80040e8:	4b26      	ldr	r3, [pc, #152]	; (8004184 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1f9      	bne.n	80040e8 <XMC_SCU_CLOCK_StartSystemPll+0xf4>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (uint32_t)((uint32_t)vco_frequency / 60000000UL);
 80040f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80040f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040fc:	ee17 3a90 	vmov	r3, s15
 8004100:	0a1b      	lsrs	r3, r3, #8
 8004102:	4a22      	ldr	r2, [pc, #136]	; (800418c <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 8004104:	fba2 2303 	umull	r2, r3, r2, r3
 8004108:	0a9b      	lsrs	r3, r3, #10
 800410a:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 800410c:	6a3a      	ldr	r2, [r7, #32]
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	429a      	cmp	r2, r3
 8004112:	d202      	bcs.n	800411a <XMC_SCU_CLOCK_StartSystemPll+0x126>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8004114:	6938      	ldr	r0, [r7, #16]
 8004116:	f000 f83d 	bl	8004194 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (uint32_t)((uint32_t)vco_frequency / 90000000UL);
 800411a:	edd7 7a05 	vldr	s15, [r7, #20]
 800411e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004122:	ee17 3a90 	vmov	r3, s15
 8004126:	09db      	lsrs	r3, r3, #7
 8004128:	4a19      	ldr	r2, [pc, #100]	; (8004190 <XMC_SCU_CLOCK_StartSystemPll+0x19c>)
 800412a:	fba2 2303 	umull	r2, r3, r2, r3
 800412e:	0adb      	lsrs	r3, r3, #11
 8004130:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8004132:	6a3a      	ldr	r2, [r7, #32]
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	429a      	cmp	r2, r3
 8004138:	d202      	bcs.n	8004140 <XMC_SCU_CLOCK_StartSystemPll+0x14c>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 800413a:	6938      	ldr	r0, [r7, #16]
 800413c:	f000 f82a 	bl	8004194 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8004140:	6a38      	ldr	r0, [r7, #32]
 8004142:	f000 f827 	bl	8004194 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8004146:	e015      	b.n	8004174 <XMC_SCU_CLOCK_StartSystemPll+0x180>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8004148:	490e      	ldr	r1, [pc, #56]	; (8004184 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 800414a:	4b0e      	ldr	r3, [pc, #56]	; (8004184 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8004152:	6a3b      	ldr	r3, [r7, #32]
 8004154:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8004156:	4313      	orrs	r3, r2
 8004158:	608b      	str	r3, [r1, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 800415a:	4a0a      	ldr	r2, [pc, #40]	; (8004184 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 800415c:	4b09      	ldr	r3, [pc, #36]	; (8004184 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f043 0301 	orr.w	r3, r3, #1
 8004164:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8004166:	bf00      	nop
 8004168:	4b06      	ldr	r3, [pc, #24]	; (8004184 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	2b00      	cmp	r3, #0
 8004172:	d0f9      	beq.n	8004168 <XMC_SCU_CLOCK_StartSystemPll+0x174>
    {
      /* wait for prescaler mode */
    }
  }
}
 8004174:	3718      	adds	r7, #24
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	4bb71b00 	.word	0x4bb71b00
 8004180:	165e9f81 	.word	0x165e9f81
 8004184:	50004710 	.word	0x50004710
 8004188:	f08080ff 	.word	0xf08080ff
 800418c:	011e54c7 	.word	0x011e54c7
 8004190:	00bee32f 	.word	0x00bee32f

08004194 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 800419c:	4907      	ldr	r1, [pc, #28]	; (80041bc <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 800419e:	4b07      	ldr	r3, [pc, #28]	; (80041bc <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	3b01      	subs	r3, #1
 80041aa:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 80041ac:	4313      	orrs	r3, r2
 80041ae:	608b      	str	r3, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 80041b0:	2032      	movs	r0, #50	; 0x32
 80041b2:	f7ff fbe3 	bl	800397c <XMC_SCU_lDelay>
}
 80041b6:	3708      	adds	r7, #8
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	50004710 	.word	0x50004710

080041c0 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	60da      	str	r2, [r3, #12]
}
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop

080041e0 <XMC_CCU4_lDeassertReset>:

  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  switch ((uint32_t)module)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a12      	ldr	r2, [pc, #72]	; (8004234 <XMC_CCU4_lDeassertReset+0x54>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d011      	beq.n	8004214 <XMC_CCU4_lDeassertReset+0x34>
 80041f0:	4a10      	ldr	r2, [pc, #64]	; (8004234 <XMC_CCU4_lDeassertReset+0x54>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d803      	bhi.n	80041fe <XMC_CCU4_lDeassertReset+0x1e>
 80041f6:	4a10      	ldr	r2, [pc, #64]	; (8004238 <XMC_CCU4_lDeassertReset+0x58>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d007      	beq.n	800420c <XMC_CCU4_lDeassertReset+0x2c>
      break;
#endif

    default:
      XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
      break;   
 80041fc:	e016      	b.n	800422c <XMC_CCU4_lDeassertReset+0x4c>
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
  switch ((uint32_t)module)
 80041fe:	4a0f      	ldr	r2, [pc, #60]	; (800423c <XMC_CCU4_lDeassertReset+0x5c>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d00b      	beq.n	800421c <XMC_CCU4_lDeassertReset+0x3c>
 8004204:	4a0e      	ldr	r2, [pc, #56]	; (8004240 <XMC_CCU4_lDeassertReset+0x60>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d00c      	beq.n	8004224 <XMC_CCU4_lDeassertReset+0x44>
      break;
#endif

    default:
      XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
      break;   
 800420a:	e00f      	b.n	800422c <XMC_CCU4_lDeassertReset+0x4c>
__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
  switch ((uint32_t)module)
  {
    case (uint32_t)CCU40:
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 800420c:	2004      	movs	r0, #4
 800420e:	f7ff fc63 	bl	8003ad8 <XMC_SCU_RESET_DeassertPeripheralReset>
      break;
 8004212:	e00b      	b.n	800422c <XMC_CCU4_lDeassertReset+0x4c>
      
#if defined(CCU41)
    case (uint32_t)CCU41:
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8004214:	2008      	movs	r0, #8
 8004216:	f7ff fc5f 	bl	8003ad8 <XMC_SCU_RESET_DeassertPeripheralReset>
      break;
 800421a:	e007      	b.n	800422c <XMC_CCU4_lDeassertReset+0x4c>
#endif

#if defined(CCU42)
    case (uint32_t)CCU42:
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 800421c:	2010      	movs	r0, #16
 800421e:	f7ff fc5b 	bl	8003ad8 <XMC_SCU_RESET_DeassertPeripheralReset>
      break;
 8004222:	e003      	b.n	800422c <XMC_CCU4_lDeassertReset+0x4c>
#endif

#if defined(CCU43)
    case (uint32_t)CCU43:
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8004224:	4807      	ldr	r0, [pc, #28]	; (8004244 <XMC_CCU4_lDeassertReset+0x64>)
 8004226:	f7ff fc57 	bl	8003ad8 <XMC_SCU_RESET_DeassertPeripheralReset>
      break;
 800422a:	bf00      	nop
    default:
      XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
      break;   

  }
}
 800422c:	3708      	adds	r7, #8
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	40010000 	.word	0x40010000
 8004238:	4000c000 	.word	0x4000c000
 800423c:	40014000 	.word	0x40014000
 8004240:	48004000 	.word	0x48004000
 8004244:	10000001 	.word	0x10000001

08004248 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8004250:	2010      	movs	r0, #16
 8004252:	f7ff fd91 	bl	8003d78 <XMC_SCU_CLOCK_EnableClock>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7ff ffc2 	bl	80041e0 <XMC_CCU4_lDeassertReset>
#endif
}
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop

08004264 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	460b      	mov	r3, r1
 800426e:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7ff ffe9 	bl	8004248 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7ff ffa2 	bl	80041c0 <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004288:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 800428a:	78fb      	ldrb	r3, [r7, #3]
 800428c:	039b      	lsls	r3, r3, #14
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	4313      	orrs	r3, r2
 8004292:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	601a      	str	r2, [r3, #0]
}
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <XMC_CCU4_SetMultiChannelShadowTransferMode>:
  module->GCTRL = gctrl;
}

/* API to configure the multichannel shadow transfer request via SW and via the CCU4x.MCSS input. */
void XMC_CCU4_SetMultiChannelShadowTransferMode(XMC_CCU4_MODULE_t *const module, const uint32_t slice_mode_msk)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU4_SetMultiChannelShadowTransferMode:Invalid module Pointer", XMC_CCU4_IsValidModule(module));
  
  gctrl = module->GCTRL;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t)slice_mode_msk >> 16U);
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	0c1b      	lsrs	r3, r3, #16
 80042b4:	43db      	mvns	r3, r3
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	4013      	ands	r3, r2
 80042ba:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t)slice_mode_msk & 0xFFFFU);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	b29b      	uxth	r3, r3
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	60fb      	str	r3, [r7, #12]
  module->GCTRL = gctrl;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	601a      	str	r2, [r3, #0]
}
 80042cc:	3714      	adds	r7, #20
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop

080042d8 <XMC_CCU4_SLICE_CompareInit>:

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
		                            const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	795b      	ldrb	r3, [r3, #5]
 80042ee:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	051a      	lsls	r2, r3, #20
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	791b      	ldrb	r3, [r3, #4]
 80042fe:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004302:	b2db      	uxtb	r3, r3
 8004304:	461a      	mov	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	795b      	ldrb	r3, [r3, #5]
 800430e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004312:	b2db      	uxtb	r3, r3
 8004314:	461a      	mov	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	795b      	ldrb	r3, [r3, #5]
 800431e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004322:	b2db      	uxtb	r3, r3
 8004324:	461a      	mov	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	791b      	ldrb	r3, [r3, #4]
 800432e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004332:	b2db      	uxtb	r3, r3
 8004334:	461a      	mov	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <XMC_CCU4_SLICE_StartConfig>:

/* API to configure the Start trigger function of a slice */
void XMC_CCU4_SLICE_StartConfig(XMC_CCU4_SLICE_t *const slice,
		                        const XMC_CCU4_SLICE_EVENT_t event,
                                const XMC_CCU4_SLICE_START_MODE_t start_mode)
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	460b      	mov	r3, r1
 800434e:	70fb      	strb	r3, [r7, #3]
 8004350:	4613      	mov	r3, r2
 8004352:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Start Mode", 
             ((start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR) ||\
		          (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START)));
  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	60bb      	str	r3, [r7, #8]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_STRTS_Msk);
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	f023 0303 	bic.w	r3, r3, #3
 8004360:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_STRTS_Pos;
 8004362:	78fb      	ldrb	r3, [r7, #3]
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	4313      	orrs	r3, r2
 8004368:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68ba      	ldr	r2, [r7, #8]
 800436e:	605a      	str	r2, [r3, #4]
  
  tc  = slice->TC;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	60fb      	str	r3, [r7, #12]
  /* Next, Configure the start mode */
  if (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR)
 8004376:	78bb      	ldrb	r3, [r7, #2]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d104      	bne.n	8004386 <XMC_CCU4_SLICE_StartConfig+0x42>
  {
    tc |= (uint32_t)CCU4_CC4_TC_STRM_Msk;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	e003      	b.n	800438e <XMC_CCU4_SLICE_StartConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t)CCU4_CC4_TC_STRM_Msk);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800438c:	60fb      	str	r3, [r7, #12]
  }
  
  slice->TC = tc;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	615a      	str	r2, [r3, #20]
}
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop

080043a0 <XMC_CCU4_SLICE_StopConfig>:

/* API to configure the Stop trigger function of a slice */
void XMC_CCU4_SLICE_StopConfig(XMC_CCU4_SLICE_t *const slice,
		                       const XMC_CCU4_SLICE_EVENT_t event,
                               const XMC_CCU4_SLICE_END_MODE_t end_mode)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	460b      	mov	r3, r1
 80043aa:	70fb      	strb	r3, [r7, #3]
 80043ac:	4613      	mov	r3, r2
 80043ae:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Start Mode", XMC_CCU4_CHECK_END_MODE(end_mode));
  
  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_ENDS_Msk);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f023 030c 	bic.w	r3, r3, #12
 80043bc:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_ENDS_Pos;
 80043be:	78fb      	ldrb	r3, [r7, #3]
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	605a      	str	r2, [r3, #4]
  
  /* Next, Configure the stop mode */
  tc = slice->TC;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	60bb      	str	r3, [r7, #8]
  tc &= ~((uint32_t) CCU4_CC4_TC_ENDM_Msk);
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043da:	60bb      	str	r3, [r7, #8]
  tc |= ((uint32_t) end_mode) << CCU4_CC4_TC_ENDM_Pos;
 80043dc:	78bb      	ldrb	r3, [r7, #2]
 80043de:	021b      	lsls	r3, r3, #8
 80043e0:	68ba      	ldr	r2, [r7, #8]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	60bb      	str	r3, [r7, #8]

  slice->TC = tc;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	615a      	str	r2, [r3, #20]
}
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop

080043f8 <XMC_CCU4_SLICE_LoadConfig>:

/* API to configure the Load trigger function of a slice */
void XMC_CCU4_SLICE_LoadConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	460b      	mov	r3, r1
 8004402:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the load function */
  cmc = slice->CMC;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_LDS_Msk);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004410:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_LDS_Pos;
 8004412:	78fb      	ldrb	r3, [r7, #3]
 8004414:	031b      	lsls	r3, r3, #12
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	4313      	orrs	r3, r2
 800441a:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	605a      	str	r2, [r3, #4]
}
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <XMC_CCU4_SLICE_ModulationConfig>:
/* API to configure the slice modulation function */
void XMC_CCU4_SLICE_ModulationConfig(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_EVENT_t event,
                                     const XMC_CCU4_SLICE_MODULATION_MODE_t mod_mode,
                                     const bool synch_with_pwm)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	4608      	mov	r0, r1
 8004436:	4611      	mov	r1, r2
 8004438:	461a      	mov	r2, r3
 800443a:	4603      	mov	r3, r0
 800443c:	70fb      	strb	r3, [r7, #3]
 800443e:	460b      	mov	r3, r1
 8004440:	70bb      	strb	r3, [r7, #2]
 8004442:	4613      	mov	r3, r2
 8004444:	707b      	strb	r3, [r7, #1]
  XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Modulation Mode",
             ((mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT) ||\
		          (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_ST_OUT)));
  
  tc  = slice->TC;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	60fb      	str	r3, [r7, #12]
  cmc = slice->CMC;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	60bb      	str	r3, [r7, #8]
  
  /* First, Bind the event with the modulation function */
  cmc &= ~((uint32_t) CCU4_CC4_CMC_MOS_Msk);
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8004458:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_MOS_Pos;
 800445a:	78fb      	ldrb	r3, [r7, #3]
 800445c:	049b      	lsls	r3, r3, #18
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	4313      	orrs	r3, r2
 8004462:	60bb      	str	r3, [r7, #8]
  slice->CMC = cmc;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	605a      	str	r2, [r3, #4]
  
  /* Next, Modulation mode */
  if (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT)
 800446a:	78bb      	ldrb	r3, [r7, #2]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d104      	bne.n	800447a <XMC_CCU4_SLICE_ModulationConfig+0x4e>
  {
    tc |= (uint32_t) CCU4_CC4_TC_EMT_Msk;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004476:	60fb      	str	r3, [r7, #12]
 8004478:	e003      	b.n	8004482 <XMC_CCU4_SLICE_ModulationConfig+0x56>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_EMT_Msk);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004480:	60fb      	str	r3, [r7, #12]
  }

  /* Synchronization of modulation effect with PWM cycle */
  if (synch_with_pwm == (bool) true)
 8004482:	787b      	ldrb	r3, [r7, #1]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d004      	beq.n	8004492 <XMC_CCU4_SLICE_ModulationConfig+0x66>
  {
    tc |= (uint32_t) CCU4_CC4_TC_EMS_Msk;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800448e:	60fb      	str	r3, [r7, #12]
 8004490:	e003      	b.n	800449a <XMC_CCU4_SLICE_ModulationConfig+0x6e>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_EMS_Msk);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004498:	60fb      	str	r3, [r7, #12]
  }
  
  slice->TC = tc;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	615a      	str	r2, [r3, #20]
}
 80044a0:	3714      	adds	r7, #20
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop

080044ac <XMC_CCU4_SLICE_CountConfig>:

/* API to configure the slice count function */
void XMC_CCU4_SLICE_CountConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	460b      	mov	r3, r1
 80044b6:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));

  /* Bind the event with the count function */
  cmc = slice->CMC;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CNTS_Msk);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80044c4:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CNTS_Pos;
 80044c6:	78fb      	ldrb	r3, [r7, #3]
 80044c8:	039b      	lsls	r3, r3, #14
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	605a      	str	r2, [r3, #4]
}
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <XMC_CCU4_SLICE_GateConfig>:

/* API to configure slice gate function */
void XMC_CCU4_SLICE_GateConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	460b      	mov	r3, r1
 80044ea:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the gate function */
  cmc = slice->CMC;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_GATES_Msk);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044f8:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_GATES_Pos;
 80044fa:	78fb      	ldrb	r3, [r7, #3]
 80044fc:	021b      	lsls	r3, r3, #8
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	4313      	orrs	r3, r2
 8004502:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	605a      	str	r2, [r3, #4]
}
 800450a:	3714      	adds	r7, #20
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <XMC_CCU4_SLICE_DirectionConfig>:
  slice->CMC = cmc;
}

/* API to configure direction function */
void XMC_CCU4_SLICE_DirectionConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	460b      	mov	r3, r1
 800451e:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the direction function */
  cmc = slice->CMC;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_UDS_Msk);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800452c:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_UDS_Pos;
 800452e:	78fb      	ldrb	r3, [r7, #3]
 8004530:	029b      	lsls	r3, r3, #10
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	4313      	orrs	r3, r2
 8004536:	60fb      	str	r3, [r7, #12]
  
  slice->CMC = cmc;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	605a      	str	r2, [r3, #4]
}
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <XMC_CCU4_SLICE_StatusBitOverrideConfig>:

/* API to configure slice status bit override function */
void XMC_CCU4_SLICE_StatusBitOverrideConfig(XMC_CCU4_SLICE_t *const slice)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t cmc;
  
  XMC_ASSERT("XMC_CCU4_SLICE_StatusBitOverrideConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  
  /* Bind the event with the override function */
  cmc = slice->CMC;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	60fb      	str	r3, [r7, #12]
  /* Map status bit trigger override to Event 1 & 
         status bit value override to Event 2 */
  cmc &= ~((uint32_t) CCU4_CC4_CMC_OFS_Msk);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800455c:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_OFS_Pos;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004564:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	605a      	str	r2, [r3, #4]
}
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop

08004578 <XMC_CCU4_SLICE_TrapConfig>:

/* API to configure trap function */
void XMC_CCU4_SLICE_TrapConfig(XMC_CCU4_SLICE_t *const slice,
		                           const XMC_CCU4_SLICE_TRAP_EXIT_MODE_t exit_mode,
                               const bool synch_with_pwm)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	460b      	mov	r3, r1
 8004582:	70fb      	strb	r3, [r7, #3]
 8004584:	4613      	mov	r3, r2
 8004586:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_TrapConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_TrapConfig:Invalid Exit Mode", ((exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_AUTOMATIC) ||\
		                                                         (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW)));
    
  /* First, Map trap function to Event 2 */
  cmc = slice->CMC;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	60bb      	str	r3, [r7, #8]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_TS_Msk);
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004594:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_TS_Pos;
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800459c:	60bb      	str	r3, [r7, #8]
  slice->CMC = cmc;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	605a      	str	r2, [r3, #4]
  
  /* Next, Configure synchronization option */
  tc = slice->TC;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	60fb      	str	r3, [r7, #12]

  if (synch_with_pwm == (bool) true)
 80045aa:	78bb      	ldrb	r3, [r7, #2]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d004      	beq.n	80045ba <XMC_CCU4_SLICE_TrapConfig+0x42>
  {
    tc |= (uint32_t) CCU4_CC4_TC_TRPSE_Msk;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80045b6:	60fb      	str	r3, [r7, #12]
 80045b8:	e003      	b.n	80045c2 <XMC_CCU4_SLICE_TrapConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_TRPSE_Msk);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80045c0:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure exit mode */
  if (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW)
 80045c2:	78fb      	ldrb	r3, [r7, #3]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d104      	bne.n	80045d2 <XMC_CCU4_SLICE_TrapConfig+0x5a>
  {
    tc |= (uint32_t) CCU4_CC4_TC_TRPSW_Msk;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80045ce:	60fb      	str	r3, [r7, #12]
 80045d0:	e003      	b.n	80045da <XMC_CCU4_SLICE_TrapConfig+0x62>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_TRPSW_Msk);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80045d8:	60fb      	str	r3, [r7, #12]
  }
  
  slice->TC = tc;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	615a      	str	r2, [r3, #20]
}
 80045e0:	3714      	adds	r7, #20
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop

080045ec <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent>:

/* API to configure a slice Status Bit Override event */
void XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU4_SLICE_t *const slice,
                                                    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev1_config,
                                                    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev2_config)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b087      	sub	sp, #28
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS1_EV2IS_Pos);
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS1_EV2IS_Pos;
  
  slice->INS1 = ins;
#else
  ins = slice->INS;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	617b      	str	r3, [r7, #20]

  /* Configure the edge sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS_EV1EM_Pos);
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8004604:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->edge) << CCU4_CC4_INS_EV1EM_Pos;
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	785b      	ldrb	r3, [r3, #1]
 800460a:	049b      	lsls	r3, r3, #18
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	4313      	orrs	r3, r2
 8004610:	617b      	str	r3, [r7, #20]
  
  /* Configure the edge sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS_EV2EM_Pos);
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004618:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->edge) << CCU4_CC4_INS_EV2EM_Pos;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	785b      	ldrb	r3, [r3, #1]
 800461e:	051b      	lsls	r3, r3, #20
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	4313      	orrs	r3, r2
 8004624:	617b      	str	r3, [r7, #20]
  
  /* Configure the level sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS_EV1LM_Pos);
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800462c:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->level) << CCU4_CC4_INS_EV1LM_Pos;
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	789b      	ldrb	r3, [r3, #2]
 8004632:	05db      	lsls	r3, r3, #23
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	4313      	orrs	r3, r2
 8004638:	617b      	str	r3, [r7, #20]
  
  /* Configure the level sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS_EV2LM_Pos);
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004640:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->level) << CCU4_CC4_INS_EV2LM_Pos;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	789b      	ldrb	r3, [r3, #2]
 8004646:	061b      	lsls	r3, r3, #24
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	4313      	orrs	r3, r2
 800464c:	617b      	str	r3, [r7, #20]
  
  /* Configure the debounce filter for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF1M_Pos);
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f023 53c0 	bic.w	r3, r3, #402653184	; 0x18000000
 8004654:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->duration) << CCU4_CC4_INS_LPF1M_Pos;
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	78db      	ldrb	r3, [r3, #3]
 800465a:	06db      	lsls	r3, r3, #27
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	4313      	orrs	r3, r2
 8004660:	617b      	str	r3, [r7, #20]

  /* Configure the debounce filter for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF2M_Pos);
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004668:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->duration) << CCU4_CC4_INS_LPF2M_Pos;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	78db      	ldrb	r3, [r3, #3]
 800466e:	075b      	lsls	r3, r3, #29
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	4313      	orrs	r3, r2
 8004674:	617b      	str	r3, [r7, #20]
  
  /* Next, the input for Event1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV1IS_Pos);
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800467c:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->mapped_input) << CCU4_CC4_INS_EV1IS_Pos;
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	011b      	lsls	r3, r3, #4
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	4313      	orrs	r3, r2
 8004688:	617b      	str	r3, [r7, #20]

  /* Finally, the input for Event2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV2IS_Pos);
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004690:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS_EV2IS_Pos;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	021b      	lsls	r3, r3, #8
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	4313      	orrs	r3, r2
 800469c:	617b      	str	r3, [r7, #20]
  
  slice->INS = ins;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	601a      	str	r2, [r3, #0]
#endif
}
 80046a4:	371c      	adds	r7, #28
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop

080046b0 <XMC_CCU4_SLICE_ConfigureEvent>:

/* API to configure a slice trigger event */
void XMC_CCU4_SLICE_ConfigureEvent(XMC_CCU4_SLICE_t *const slice,
		                               const XMC_CCU4_SLICE_EVENT_t event,
                                   const XMC_CCU4_SLICE_EVENT_CONFIG_t *const config)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b089      	sub	sp, #36	; 0x24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	460b      	mov	r3, r1
 80046ba:	607a      	str	r2, [r7, #4]
 80046bc:	72fb      	strb	r3, [r7, #11]
             ((config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
              (config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Debounce Period", 
             XMC_CCU4_SLICE_CHECK_EVENT_FILTER(config->duration));
  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
 80046be:	7afb      	ldrb	r3, [r7, #11]
 80046c0:	3b01      	subs	r3, #1
 80046c2:	77fb      	strb	r3, [r7, #31]
  ins |= ((uint32_t) config->mapped_input) << pos;

  slice->INS1 = ins;

#else
  ins = slice->INS;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	61bb      	str	r3, [r7, #24]
  
  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU4_CC4_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
 80046ca:	7ffb      	ldrb	r3, [r7, #31]
 80046cc:	005b      	lsls	r3, r3, #1
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	3310      	adds	r3, #16
 80046d2:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 80046d4:	7dfb      	ldrb	r3, [r7, #23]
 80046d6:	2203      	movs	r2, #3
 80046d8:	fa02 f303 	lsl.w	r3, r2, r3
 80046dc:	43db      	mvns	r3, r3
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	4013      	ands	r3, r2
 80046e2:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->edge) << pos;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	785b      	ldrb	r3, [r3, #1]
 80046e8:	461a      	mov	r2, r3
 80046ea:	7dfb      	ldrb	r3, [r7, #23]
 80046ec:	fa02 f303 	lsl.w	r3, r2, r3
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	61bb      	str	r3, [r7, #24]
  
  /* Next, the level */
  pos = ((uint8_t) CCU4_CC4_INS_EV0LM_Pos) + offset;
 80046f6:	7ffb      	ldrb	r3, [r7, #31]
 80046f8:	3316      	adds	r3, #22
 80046fa:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 80046fc:	7dfb      	ldrb	r3, [r7, #23]
 80046fe:	2201      	movs	r2, #1
 8004700:	fa02 f303 	lsl.w	r3, r2, r3
 8004704:	43db      	mvns	r3, r3
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	4013      	ands	r3, r2
 800470a:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->level) << pos;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	789b      	ldrb	r3, [r3, #2]
 8004710:	461a      	mov	r2, r3
 8004712:	7dfb      	ldrb	r3, [r7, #23]
 8004714:	fa02 f303 	lsl.w	r3, r2, r3
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	4313      	orrs	r3, r2
 800471c:	61bb      	str	r3, [r7, #24]
  
  /* Next, the debounce filter */
  pos = ((uint8_t) CCU4_CC4_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
 800471e:	7ffb      	ldrb	r3, [r7, #31]
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	b2db      	uxtb	r3, r3
 8004724:	3319      	adds	r3, #25
 8004726:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 8004728:	7dfb      	ldrb	r3, [r7, #23]
 800472a:	2203      	movs	r2, #3
 800472c:	fa02 f303 	lsl.w	r3, r2, r3
 8004730:	43db      	mvns	r3, r3
 8004732:	69ba      	ldr	r2, [r7, #24]
 8004734:	4013      	ands	r3, r2
 8004736:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->duration) << pos;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	78db      	ldrb	r3, [r3, #3]
 800473c:	461a      	mov	r2, r3
 800473e:	7dfb      	ldrb	r3, [r7, #23]
 8004740:	fa02 f303 	lsl.w	r3, r2, r3
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	4313      	orrs	r3, r2
 8004748:	61bb      	str	r3, [r7, #24]

  /* Finally the input */
  pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
 800474a:	7ffb      	ldrb	r3, [r7, #31]
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 8004750:	7dfb      	ldrb	r3, [r7, #23]
 8004752:	220f      	movs	r2, #15
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	43db      	mvns	r3, r3
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	4013      	ands	r3, r2
 800475e:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->mapped_input) << pos;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	461a      	mov	r2, r3
 8004766:	7dfb      	ldrb	r3, [r7, #23]
 8004768:	fa02 f303 	lsl.w	r3, r2, r3
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	4313      	orrs	r3, r2
 8004770:	61bb      	str	r3, [r7, #24]

  slice->INS = ins;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	601a      	str	r2, [r3, #0]
#endif
}
 8004778:	3724      	adds	r7, #36	; 0x24
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop

08004784 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8004784:	b480      	push	{r7}
 8004786:	b087      	sub	sp, #28
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	460b      	mov	r3, r1
 800478e:	70fb      	strb	r3, [r7, #3]
 8004790:	4613      	mov	r3, r2
 8004792:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800479a:	60fb      	str	r3, [r7, #12]
  
  switch(event)
 800479c:	78fb      	ldrb	r3, [r7, #3]
 800479e:	2b09      	cmp	r3, #9
 80047a0:	d82c      	bhi.n	80047fc <XMC_CCU4_SLICE_SetInterruptNode+0x78>
 80047a2:	a201      	add	r2, pc, #4	; (adr r2, 80047a8 <XMC_CCU4_SLICE_SetInterruptNode+0x24>)
 80047a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a8:	080047d1 	.word	0x080047d1
 80047ac:	080047d1 	.word	0x080047d1
 80047b0:	080047db 	.word	0x080047db
 80047b4:	080047db 	.word	0x080047db
 80047b8:	080047fd 	.word	0x080047fd
 80047bc:	080047fd 	.word	0x080047fd
 80047c0:	080047fd 	.word	0x080047fd
 80047c4:	080047fd 	.word	0x080047fd
 80047c8:	080047e5 	.word	0x080047e5
 80047cc:	080047f1 	.word	0x080047f1
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 80047d0:	2303      	movs	r3, #3
 80047d2:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 80047d4:	2300      	movs	r3, #0
 80047d6:	617b      	str	r3, [r7, #20]
      break;
 80047d8:	e016      	b.n	8004808 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 80047da:	230c      	movs	r3, #12
 80047dc:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 80047de:	2302      	movs	r3, #2
 80047e0:	617b      	str	r3, [r7, #20]
      break;
 80047e2:	e011      	b.n	8004808 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 80047e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80047e8:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 80047ea:	2308      	movs	r3, #8
 80047ec:	617b      	str	r3, [r7, #20]
      break;
 80047ee:	e00b      	b.n	8004808 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 80047f0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80047f4:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 80047f6:	230a      	movs	r3, #10
 80047f8:	617b      	str	r3, [r7, #20]
      break;
 80047fa:	e005      	b.n	8004808 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 80047fc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004800:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 8004802:	230c      	movs	r3, #12
 8004804:	617b      	str	r3, [r7, #20]
      break;
 8004806:	bf00      	nop
  }
  
  srs &= ~mask; 
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	43db      	mvns	r3, r3
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	4013      	ands	r3, r2
 8004810:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 8004812:	78ba      	ldrb	r2, [r7, #2]
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	fa02 f303 	lsl.w	r3, r2, r3
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	4313      	orrs	r3, r2
 800481e:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8004828:	371c      	adds	r7, #28
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop

08004834 <XMC_ERU_ETL_Init>:
 ********************************************************************************************************************/
/* Initializes the selected ERU_ETLx channel with the config structure.  */
void XMC_ERU_ETL_Init(XMC_ERU_t *const eru,
                      const uint8_t channel,
                      const XMC_ERU_ETL_CONFIG_t *const config)
{ 
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	460b      	mov	r3, r1
 800483e:	607a      	str	r2, [r7, #4]
 8004840:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f7fe ffdc 	bl	8003800 <XMC_ERU_Enable>

  eru->EXISEL = (eru->EXISEL & 
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681a      	ldr	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 800484c:	7afb      	ldrb	r3, [r7, #11]
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4619      	mov	r1, r3
 8004852:	230f      	movs	r3, #15
 8004854:	408b      	lsls	r3, r1
 8004856:	43db      	mvns	r3, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
 8004858:	401a      	ands	r2, r3
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	7af9      	ldrb	r1, [r7, #11]
 8004860:	0089      	lsls	r1, r1, #2
 8004862:	408b      	lsls	r3, r1
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 8004864:	431a      	orrs	r2, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	601a      	str	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
  
  eru->EXICON[channel] = config->raw;
 800486a:	7afa      	ldrb	r2, [r7, #11]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6859      	ldr	r1, [r3, #4]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	3204      	adds	r2, #4
 8004874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop

08004880 <XMC_ERU_OGU_Init>:

/* Initializes the selected ERU_OGUy channel with the config structure.  */
void XMC_ERU_OGU_Init(XMC_ERU_t *const eru,
                      const uint8_t channel,
                      const XMC_ERU_OGU_CONFIG_t *const config)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	460b      	mov	r3, r1
 800488a:	607a      	str	r2, [r7, #4]
 800488c:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_ERU_OGU_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_OGU_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f7fe ffb6 	bl	8003800 <XMC_ERU_Enable>

  eru->EXOCON[channel] = config->raw;
 8004894:	7afa      	ldrb	r2, [r7, #11]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6819      	ldr	r1, [r3, #0]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	3208      	adds	r2, #8
 800489e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	460b      	mov	r3, r1
 80048b2:	70fb      	strb	r3, [r7, #3]
 80048b4:	4613      	mov	r3, r2
 80048b6:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80048bc:	78fb      	ldrb	r3, [r7, #3]
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	4619      	mov	r1, r3
 80048c2:	2303      	movs	r3, #3
 80048c4:	408b      	lsls	r3, r1
 80048c6:	43db      	mvns	r3, r3
 80048c8:	401a      	ands	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80048d2:	78bb      	ldrb	r3, [r7, #2]
 80048d4:	78f9      	ldrb	r1, [r7, #3]
 80048d6:	0049      	lsls	r1, r1, #1
 80048d8:	408b      	lsls	r3, r1
 80048da:	431a      	orrs	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	675a      	str	r2, [r3, #116]	; 0x74
}
 80048e0:	370c      	adds	r7, #12
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop

080048ec <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80048fe:	b2db      	uxtb	r3, r3
}
 8004900:	4618      	mov	r0, r3
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	431a      	orrs	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <XMC_I2C_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/
/* Initializes the USIC channel by setting the data format, slave address, baudrate, transfer buffer */
void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  XMC_USIC_CH_Enable(channel);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f002 f842 	bl	80069c0 <XMC_USIC_CH_Enable>
  
  /* Data format configuration */
  channel->SCTR = ((uint32_t)TRANSMISSION_MODE << (uint32_t)USIC_CH_SCTR_TRM_Pos) | /* Transmision mode */
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a0e      	ldr	r2, [pc, #56]	; (8004978 <XMC_I2C_CH_Init+0x4c>)
 8004940:	635a      	str	r2, [r3, #52]	; 0x34
                  ((uint32_t)WORDLENGTH << (uint32_t)USIC_CH_SCTR_WLE_Pos) | /* 8 data bits */
                  USIC_CH_SCTR_FLE_Msk |           /* unlimited data flow */
                  USIC_CH_SCTR_SDIR_Msk |          /* MSB shifted first */
                  USIC_CH_SCTR_PDL_Msk;            /* Passive Data Level */

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	889b      	ldrh	r3, [r3, #4]
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	4619      	mov	r1, r3
 800494a:	f000 f817 	bl	800497c <XMC_I2C_CH_SetSlaveAddress>
  (void)XMC_I2C_CH_SetBaudrate(channel, config->baudrate);
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	4619      	mov	r1, r3
 8004956:	f000 f831 	bl	80049bc <XMC_I2C_CH_SetBaudrate>
    
  /* Enable transfer buffer */
  channel->TCSR = ((uint32_t)SET_TDV << (uint32_t)USIC_CH_TCSR_TDEN_Pos) | USIC_CH_TCSR_TDSSM_Msk;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8004960:	639a      	str	r2, [r3, #56]	; 0x38

  /* Clear status flags */
  channel->PSCR = 0xFFFFFFFFU;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f04f 32ff 	mov.w	r2, #4294967295
 8004968:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Disable parity generation */
  channel->CCR = 0x0U;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004970:	3708      	adds	r7, #8
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	073f0303 	.word	0x073f0303

0800497c <XMC_I2C_CH_SetSlaveAddress>:
/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	460b      	mov	r3, r1
 8004986:	807b      	strh	r3, [r7, #2]
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
 8004988:	887b      	ldrh	r3, [r7, #2]
 800498a:	f403 43f8 	and.w	r3, r3, #31744	; 0x7c00
 800498e:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 8004992:	d109      	bne.n	80049a8 <XMC_I2C_CH_SetSlaveAddress+0x2c>
  {
    channel->PCR_IICMode = (address & 0xffU) | ((address << 1) & 0xfe00U);
 8004994:	887b      	ldrh	r3, [r7, #2]
 8004996:	b2da      	uxtb	r2, r3
 8004998:	887b      	ldrh	r3, [r7, #2]
 800499a:	005b      	lsls	r3, r3, #1
 800499c:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
 80049a0:	431a      	orrs	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	63da      	str	r2, [r3, #60]	; 0x3c
 80049a6:	e003      	b.n	80049b0 <XMC_I2C_CH_SetSlaveAddress+0x34>
  }
  else
  {
    channel->PCR_IICMode = ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
 80049a8:	887b      	ldrh	r3, [r7, #2]
 80049aa:	021a      	lsls	r2, r3, #8
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	63da      	str	r2, [r3, #60]	; 0x3c
  }
}
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop

080049bc <XMC_I2C_CH_SetBaudrate>:
  
  return (uint16_t)address;
}
/* Sets the baudrate and oversampling based on standard speed or fast speed */
XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_STATUS_t status;
  
  status = XMC_I2C_CH_STATUS_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	73fb      	strb	r3, [r7, #15]
  
  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	4a17      	ldr	r2, [pc, #92]	; (8004a2c <XMC_I2C_CH_SetBaudrate+0x70>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d810      	bhi.n	80049f4 <XMC_I2C_CH_SetBaudrate+0x38>
  {
		channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	63da      	str	r2, [r3, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD) == XMC_USIC_CH_STATUS_OK)
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	6839      	ldr	r1, [r7, #0]
 80049e2:	220a      	movs	r2, #10
 80049e4:	f002 f838 	bl	8006a58 <XMC_USIC_CH_SetBaudrate>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d119      	bne.n	8004a22 <XMC_I2C_CH_SetBaudrate+0x66>
    {
      status = XMC_I2C_CH_STATUS_OK;
 80049ee:	2300      	movs	r3, #0
 80049f0:	73fb      	strb	r3, [r7, #15]
 80049f2:	e016      	b.n	8004a22 <XMC_I2C_CH_SetBaudrate+0x66>
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	4a0e      	ldr	r2, [pc, #56]	; (8004a30 <XMC_I2C_CH_SetBaudrate+0x74>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d810      	bhi.n	8004a1e <XMC_I2C_CH_SetBaudrate+0x62>
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a00:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	63da      	str	r2, [r3, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST) == XMC_USIC_CH_STATUS_OK)
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	6839      	ldr	r1, [r7, #0]
 8004a0c:	2219      	movs	r2, #25
 8004a0e:	f002 f823 	bl	8006a58 <XMC_USIC_CH_SetBaudrate>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d104      	bne.n	8004a22 <XMC_I2C_CH_SetBaudrate+0x66>
    {
      status = XMC_I2C_CH_STATUS_OK;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	73fb      	strb	r3, [r7, #15]
 8004a1c:	e001      	b.n	8004a22 <XMC_I2C_CH_SetBaudrate+0x66>
    }
  }
  else 
  {
    status = XMC_I2C_CH_STATUS_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8004a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	000186a0 	.word	0x000186a0
 8004a30:	00061a80 	.word	0x00061a80

08004a34 <XMC_I2C_CH_MasterStart>:
/* Sends master start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	807b      	strh	r3, [r7, #2]
 8004a40:	4613      	mov	r3, r2
 8004a42:	707b      	strb	r3, [r7, #1]
  uint32_t temp;
  
  temp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_START;
 8004a44:	887b      	ldrh	r3, [r7, #2]
 8004a46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 8004a4e:	787b      	ldrb	r3, [r7, #1]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d103      	bne.n	8004a5c <XMC_I2C_CH_MasterStart+0x28>
  {
    temp |= 0x1U;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f043 0301 	orr.w	r3, r3, #1
 8004a5a:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004a62:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d110      	bne.n	8004a8c <XMC_I2C_CH_MasterStart+0x58>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8004a6a:	bf00      	nop
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f7ff ff3d 	bl	80048ec <XMC_USIC_CH_GetTransmitBufferStatus>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b80      	cmp	r3, #128	; 0x80
 8004a76:	d0f9      	beq.n	8004a6c <XMC_I2C_CH_MasterStart+0x38>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004a7e:	f7ff ff45 	bl	800490c <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = temp;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004a8a:	e003      	b.n	8004a94 <XMC_I2C_CH_MasterStart+0x60>
  }
  else
  {
    channel->IN[0U] = temp;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop

08004a9c <XMC_I2C_CH_MasterRepeatedStart>:
/* Sends master repeated start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	807b      	strh	r3, [r7, #2]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	707b      	strb	r3, [r7, #1]
  uint32_t tmp;
  tmp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_RESTART;
 8004aac:	887b      	ldrh	r3, [r7, #2]
 8004aae:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 8004ab6:	787b      	ldrb	r3, [r7, #1]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d103      	bne.n	8004ac4 <XMC_I2C_CH_MasterRepeatedStart+0x28>
  {
    tmp |= 0x1U;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f043 0301 	orr.w	r3, r3, #1
 8004ac2:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004aca:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d110      	bne.n	8004af4 <XMC_I2C_CH_MasterRepeatedStart+0x58>
  {  
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8004ad2:	bf00      	nop
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f7ff ff09 	bl	80048ec <XMC_USIC_CH_GetTransmitBufferStatus>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b80      	cmp	r3, #128	; 0x80
 8004ade:	d0f9      	beq.n	8004ad4 <XMC_I2C_CH_MasterRepeatedStart+0x38>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ae6:	f7ff ff11 	bl	800490c <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = tmp;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004af2:	e003      	b.n	8004afc <XMC_I2C_CH_MasterRepeatedStart+0x60>
  }
  else
  {
    channel->IN[0U] = tmp;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop

08004b04 <XMC_I2C_CH_MasterStop>:

/* Sends master stop command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004b12:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d111      	bne.n	8004b3e <XMC_I2C_CH_MasterStop+0x3a>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8004b1a:	bf00      	nop
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f7ff fee5 	bl	80048ec <XMC_USIC_CH_GetTransmitBufferStatus>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b80      	cmp	r3, #128	; 0x80
 8004b26:	d0f9      	beq.n	8004b1c <XMC_I2C_CH_MasterStop+0x18>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004b2e:	f7ff feed 	bl	800490c <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004b38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004b3c:	e004      	b.n	8004b48 <XMC_I2C_CH_MasterStop+0x44>
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004b44:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8004b48:	3708      	adds	r7, #8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop

08004b50 <XMC_I2C_CH_MasterTransmit>:

/* Sends master send command along with data to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	460b      	mov	r3, r1
 8004b5a:	70fb      	strb	r3, [r7, #3]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004b62:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d110      	bne.n	8004b8c <XMC_I2C_CH_MasterTransmit+0x3c>
  {    
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8004b6a:	bf00      	nop
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f7ff febd 	bl	80048ec <XMC_USIC_CH_GetTransmitBufferStatus>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b80      	cmp	r3, #128	; 0x80
 8004b76:	d0f9      	beq.n	8004b6c <XMC_I2C_CH_MasterTransmit+0x1c>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004b7e:	f7ff fec5 	bl	800490c <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8004b82:	78fa      	ldrb	r2, [r7, #3]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004b8a:	e003      	b.n	8004b94 <XMC_I2C_CH_MasterTransmit+0x44>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8004b8c:	78fa      	ldrb	r2, [r7, #3]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8004b94:	3708      	adds	r7, #8
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop

08004b9c <XMC_I2C_CH_MasterReceiveAck>:
  }
}

/* Sends master receive ack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveAck(XMC_USIC_CH_t *const channel)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
/* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004baa:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d111      	bne.n	8004bd6 <XMC_I2C_CH_MasterReceiveAck+0x3a>
  {    
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8004bb2:	bf00      	nop
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f7ff fe99 	bl	80048ec <XMC_USIC_CH_GetTransmitBufferStatus>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b80      	cmp	r3, #128	; 0x80
 8004bbe:	d0f9      	beq.n	8004bb4 <XMC_I2C_CH_MasterReceiveAck+0x18>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004bc6:	f7ff fea1 	bl	800490c <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004bd4:	e004      	b.n	8004be0 <XMC_I2C_CH_MasterReceiveAck+0x44>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bdc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8004be0:	3708      	adds	r7, #8
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop

08004be8 <XMC_I2C_CH_MasterReceiveNack>:

/* Sends master receive nack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004bf6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d111      	bne.n	8004c22 <XMC_I2C_CH_MasterReceiveNack+0x3a>
  {    
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8004bfe:	bf00      	nop
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f7ff fe73 	bl	80048ec <XMC_USIC_CH_GetTransmitBufferStatus>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b80      	cmp	r3, #128	; 0x80
 8004c0a:	d0f9      	beq.n	8004c00 <XMC_I2C_CH_MasterReceiveNack+0x18>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004c12:	f7ff fe7b 	bl	800490c <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004c1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004c20:	e004      	b.n	8004c2c <XMC_I2C_CH_MasterReceiveNack+0x44>
  }
  else 
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004c28:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8004c2c:	3708      	adds	r7, #8
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop

08004c34 <XMC_I2C_CH_GetReceivedData>:

/* Reads the data from RBUF if FIFO size is 0 otherwise from OUTR. */
uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  uint8_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8004c42:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d103      	bne.n	8004c52 <XMC_I2C_CH_GetReceivedData+0x1e>
  {
    retval = (uint8_t)channel->RBUF;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c4e:	73fb      	strb	r3, [r7, #15]
 8004c50:	e003      	b.n	8004c5a <XMC_I2C_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint8_t)channel->OUTR;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8004c58:	73fb      	strb	r3, [r7, #15]
  }

  return retval;
 8004c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3714      	adds	r7, #20
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004c7a:	b2db      	uxtb	r3, r3
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	683a      	ldr	r2, [r7, #0]
 8004c96:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop

08004ca4 <XMC_UART_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 8004cae:	2310      	movs	r3, #16
 8004cb0:	60fb      	str	r3, [r7, #12]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f001 fe84 	bl	80069c0 <XMC_USIC_CH_Enable>
  
  if(config->oversampling != 0U)
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	79db      	ldrb	r3, [r3, #7]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d002      	beq.n	8004cc6 <XMC_UART_CH_Init+0x22>
  {
    oversampling = (uint32_t)config->oversampling;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	79db      	ldrb	r3, [r3, #7]
 8004cc4:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure baud rate */
  (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	4619      	mov	r1, r3
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	f001 fec2 	bl	8006a58 <XMC_USIC_CH_SetBaudrate>
   * Configure the number of stop bits
   * Pulse length is set to 0 to have standard UART signaling, 
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	799b      	ldrb	r3, [r3, #6]
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	005a      	lsls	r2, r3, #1
			             (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	085b      	lsrs	r3, r3, #1
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	021b      	lsls	r3, r3, #8
   * Configure the number of stop bits
   * Pulse length is set to 0 to have standard UART signaling, 
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	f043 0201 	orr.w	r2, r3, #1
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	791b      	ldrb	r3, [r3, #4]
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	061b      	lsls	r3, r3, #24
 8004cf6:	f443 7281 	orr.w	r2, r3, #258	; 0x102
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	635a      	str	r2, [r3, #52]	; 0x34
		              ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	795b      	ldrb	r3, [r3, #5]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d009      	beq.n	8004d1a <XMC_UART_CH_Init+0x76>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	795b      	ldrb	r3, [r3, #5]
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	041b      	lsls	r3, r3, #16
 8004d12:	431a      	orrs	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	635a      	str	r2, [r3, #52]	; 0x34
 8004d18:	e008      	b.n	8004d2c <XMC_UART_CH_Init+0x88>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	791b      	ldrb	r3, [r3, #4]
 8004d22:	3b01      	subs	r3, #1
 8004d24:	041b      	lsls	r3, r3, #16
 8004d26:	431a      	orrs	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8004d32:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f04f 32ff 	mov.w	r2, #4294967295
 8004d3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	891b      	ldrh	r3, [r3, #8]
 8004d40:	461a      	mov	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <XMC_UART_CH_Transmit>:
  } 
  return status;
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	460b      	mov	r3, r1
 8004d56:	807b      	strh	r3, [r7, #2]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004d5e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d110      	bne.n	8004d88 <XMC_UART_CH_Transmit+0x3c>
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8004d66:	bf00      	nop
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f7ff ff7d 	bl	8004c68 <XMC_USIC_CH_GetTransmitBufferStatus>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b80      	cmp	r3, #128	; 0x80
 8004d72:	d0f9      	beq.n	8004d68 <XMC_UART_CH_Transmit+0x1c>
    {
    }
  
    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004d7a:	f7ff ff85 	bl	8004c88 <XMC_UART_CH_ClearStatusFlag>
  
    /*Transmit data */
    channel->TBUF[0U] = data;
 8004d7e:	887a      	ldrh	r2, [r7, #2]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004d86:	e003      	b.n	8004d90 <XMC_UART_CH_Transmit+0x44>
  }
  else
  {
    channel->IN[0U] = data;
 8004d88:	887a      	ldrh	r2, [r7, #2]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8004d90:	3708      	adds	r7, #8
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop

08004d98 <XMC_UART_CH_GetReceivedData>:

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8004da6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d103      	bne.n	8004db6 <XMC_UART_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db2:	81fb      	strh	r3, [r7, #14]
 8004db4:	e003      	b.n	8004dbe <XMC_UART_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8004dbc:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 8004dbe:	89fb      	ldrh	r3, [r7, #14]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3714      	adds	r7, #20
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <XMC_USBD_lDeviceActive>:
 * Therefore the endpoint inInUse flag are checked and if one endpoint is in use, 1 is returned,
 * else 0 is returned.
 * @return 1 if an endpoint is active else 0
 */
uint8_t XMC_USBD_lDeviceActive(const XMC_USBD_t *const obj) 
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t result = 0U;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	73bb      	strb	r3, [r7, #14]
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8004dd8:	2300      	movs	r3, #0
 8004dda:	73fb      	strb	r3, [r7, #15]
 8004ddc:	e01e      	b.n	8004e1c <XMC_USBD_lDeviceActive+0x50>
  {
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 8004dde:	7bfb      	ldrb	r3, [r7, #15]
 8004de0:	4a14      	ldr	r2, [pc, #80]	; (8004e34 <XMC_USBD_lDeviceActive+0x68>)
 8004de2:	2134      	movs	r1, #52	; 0x34
 8004de4:	fb01 f303 	mul.w	r3, r1, r3
 8004de8:	4413      	add	r3, r2
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	08db      	lsrs	r3, r3, #3
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10c      	bne.n	8004e12 <XMC_USBD_lDeviceActive+0x46>
 8004df8:	7bfb      	ldrb	r3, [r7, #15]
 8004dfa:	4a0e      	ldr	r2, [pc, #56]	; (8004e34 <XMC_USBD_lDeviceActive+0x68>)
 8004dfc:	2134      	movs	r1, #52	; 0x34
 8004dfe:	fb01 f303 	mul.w	r3, r1, r3
 8004e02:	4413      	add	r3, r2
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	091b      	lsrs	r3, r3, #4
 8004e08:	f003 0301 	and.w	r3, r3, #1
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <XMC_USBD_lDeviceActive+0x4a>
    {
      result = 1U;
 8004e12:	2301      	movs	r3, #1
 8004e14:	73bb      	strb	r3, [r7, #14]
 */
uint8_t XMC_USBD_lDeviceActive(const XMC_USBD_t *const obj) 
{
  uint8_t i;
  uint8_t result = 0U;
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 8004e16:	7bfb      	ldrb	r3, [r7, #15]
 8004e18:	3301      	adds	r3, #1
 8004e1a:	73fb      	strb	r3, [r7, #15]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	7b1b      	ldrb	r3, [r3, #12]
 8004e20:	7bfa      	ldrb	r2, [r7, #15]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d3db      	bcc.n	8004dde <XMC_USBD_lDeviceActive+0x12>
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
    {
      result = 1U;
    }
  }
  return result;
 8004e26:	7bbb      	ldrb	r3, [r7, #14]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3714      	adds	r7, #20
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr
 8004e34:	20000650 	.word	0x20000650

08004e38 <XMC_USBD_lReadFifo>:
 *
 * @arg ep_num the endpoint to read for
 * @arg byte_count the byte count to read
 */
static void XMC_USBD_lReadFifo(const uint32_t ep_num,const uint32_t byte_count) 
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b08b      	sub	sp, #44	; 0x2c
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num];
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2234      	movs	r2, #52	; 0x34
 8004e46:	fb02 f303 	mul.w	r3, r2, r3
 8004e4a:	4a34      	ldr	r2, [pc, #208]	; (8004f1c <XMC_USBD_lReadFifo+0xe4>)
 8004e4c:	4413      	add	r3, r2
 8004e4e:	623b      	str	r3, [r7, #32]
  uint32_t word_count;
  uint32_t temp_data;
  uint32_t temp_word_count;
  volatile uint32_t *fifo = xmc_device.fifo[0U];
 8004e50:	4b32      	ldr	r3, [pc, #200]	; (8004f1c <XMC_USBD_lReadFifo+0xe4>)
 8004e52:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8004e56:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  depctl_data_t data;
  data.d32 = xmc_device.endpoint_out_register[ep_num]->doepctl;
 8004e58:	4a30      	ldr	r2, [pc, #192]	; (8004f1c <XMC_USBD_lReadFifo+0xe4>)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	3370      	adds	r3, #112	; 0x70
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	4413      	add	r3, r2
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	60fb      	str	r3, [r7, #12]
  word_count = (byte_count >> 2U );
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	089b      	lsrs	r3, r3, #2
 8004e6c:	61bb      	str	r3, [r7, #24]
  temp_word_count = (word_count << 2U);
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	617b      	str	r3, [r7, #20]
  /* Check if ep is enabled and has buffer */
  if (!data.b.usbactep)
 8004e74:	7b7b      	ldrb	r3, [r7, #13]
 8004e76:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d048      	beq.n	8004f12 <XMC_USBD_lReadFifo+0xda>
  {
    /*Do Nothing*/
  }
  else if (ep->xferBuffer == NULL)
 8004e80:	6a3b      	ldr	r3, [r7, #32]
 8004e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d044      	beq.n	8004f12 <XMC_USBD_lReadFifo+0xda>
	/*Do Nothing*/
  }
  else
  {
    /* store the data */
    for (i = 0U;i < word_count; i++)
 8004e88:	2300      	movs	r3, #0
 8004e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e8c:	e00a      	b.n	8004ea4 <XMC_USBD_lReadFifo+0x6c>
    {
      *(((uint32_t*)ep->xferBuffer)+i) = *fifo;
 8004e8e:	6a3b      	ldr	r3, [r7, #32]
 8004e90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	4413      	add	r3, r2
 8004e98:	69fa      	ldr	r2, [r7, #28]
 8004e9a:	6812      	ldr	r2, [r2, #0]
 8004e9c:	601a      	str	r2, [r3, #0]
	/*Do Nothing*/
  }
  else
  {
    /* store the data */
    for (i = 0U;i < word_count; i++)
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d3f0      	bcc.n	8004e8e <XMC_USBD_lReadFifo+0x56>
    {
      *(((uint32_t*)ep->xferBuffer)+i) = *fifo;
    }
    /* space is not devidable by 4 */
    if (byte_count!=temp_word_count)
 8004eac:	683a      	ldr	r2, [r7, #0]
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d022      	beq.n	8004efa <XMC_USBD_lReadFifo+0xc2>
    {
      temp_data = *fifo;
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	613b      	str	r3, [r7, #16]
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 8004eba:	2300      	movs	r3, #0
 8004ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8004ebe:	e016      	b.n	8004eee <XMC_USBD_lReadFifo+0xb6>
      {
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
 8004ec0:	6a3b      	ldr	r3, [r7, #32]
 8004ec2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	0099      	lsls	r1, r3, #2
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	440b      	add	r3, r1
 8004ecc:	4413      	add	r3, r2
 8004ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ed0:	00d2      	lsls	r2, r2, #3
 8004ed2:	4611      	mov	r1, r2
 8004ed4:	22ff      	movs	r2, #255	; 0xff
 8004ed6:	fa02 f101 	lsl.w	r1, r2, r1
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	400a      	ands	r2, r1
 8004ede:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ee0:	00c9      	lsls	r1, r1, #3
 8004ee2:	40ca      	lsrs	r2, r1
 8004ee4:	b2d2      	uxtb	r2, r2
 8004ee6:	701a      	strb	r2, [r3, #0]
    }
    /* space is not devidable by 4 */
    if (byte_count!=temp_word_count)
    {
      temp_data = *fifo;
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eea:	3301      	adds	r3, #1
 8004eec:	627b      	str	r3, [r7, #36]	; 0x24
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef2:	441a      	add	r2, r3
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d3e2      	bcc.n	8004ec0 <XMC_USBD_lReadFifo+0x88>
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
      }
    }

    /* save the amount of data */
    ep->xferCount += byte_count;
 8004efa:	6a3b      	ldr	r3, [r7, #32]
 8004efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	441a      	add	r2, r3
 8004f02:	6a3b      	ldr	r3, [r7, #32]
 8004f04:	62da      	str	r2, [r3, #44]	; 0x2c
    ep->xferBuffer += byte_count;
 8004f06:	6a3b      	ldr	r3, [r7, #32]
 8004f08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	441a      	add	r2, r3
 8004f0e:	6a3b      	ldr	r3, [r7, #32]
 8004f10:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004f12:	372c      	adds	r7, #44	; 0x2c
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr
 8004f1c:	20000650 	.word	0x20000650

08004f20 <XMC_USBD_lWriteFifo>:
 *
 * @arg[in] ep the endpoint to use
 * @return the number of bytes written to the fifo
 */
static uint32_t XMC_USBD_lWriteFifo(XMC_USBD_EP_t *const ep) 
{
 8004f20:	b480      	push	{r7}
 8004f22:	b089      	sub	sp, #36	; 0x24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  volatile uint32_t *fifo;
  uint32_t byte_count;
  uint32_t word_count;
  uint32_t result;
  uint32_t i;
  fifo = xmc_device.fifo[ep->address_u.address_st.number]; /* fifo */
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	4a23      	ldr	r2, [pc, #140]	; (8004fc0 <XMC_USBD_lWriteFifo+0xa0>)
 8004f34:	3378      	adds	r3, #120	; 0x78
 8004f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f3a:	60fb      	str	r3, [r7, #12]
  freeSpace.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dtxfsts;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	4a1e      	ldr	r2, [pc, #120]	; (8004fc0 <XMC_USBD_lWriteFifo+0xa0>)
 8004f48:	336a      	adds	r3, #106	; 0x6a
 8004f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	60bb      	str	r3, [r7, #8]
  /* calculate the length and the amount of dwords to copy based on the fifo status */
  byte_count = ep->xferLength - ep->xferCount;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	61fb      	str	r3, [r7, #28]
  if (!byte_count)
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d102      	bne.n	8004f6a <XMC_USBD_lWriteFifo+0x4a>
  {
    result = 0U;
 8004f64:	2300      	movs	r3, #0
 8004f66:	617b      	str	r3, [r7, #20]
 8004f68:	e023      	b.n	8004fb2 <XMC_USBD_lWriteFifo+0x92>
  }
  else
  {
    /* add the unaligned bytes to the word count to compare with the fifo space */
    word_count = ((uint32_t)byte_count + 3U) >> 2U;
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	3303      	adds	r3, #3
 8004f6e:	089b      	lsrs	r3, r3, #2
 8004f70:	61bb      	str	r3, [r7, #24]
    if (word_count > (uint32_t)freeSpace.b.txfspcavail )
 8004f72:	893b      	ldrh	r3, [r7, #8]
 8004f74:	461a      	mov	r2, r3
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d204      	bcs.n	8004f86 <XMC_USBD_lWriteFifo+0x66>
    {
      word_count = (uint32_t)freeSpace.b.txfspcavail;
 8004f7c:	893b      	ldrh	r3, [r7, #8]
 8004f7e:	61bb      	str	r3, [r7, #24]
      byte_count = (uint32_t)word_count << (uint32_t)2U;
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	61fb      	str	r3, [r7, #28]
    }

    /* copy data dword wise */
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 8004f86:	2300      	movs	r3, #0
 8004f88:	613b      	str	r3, [r7, #16]
 8004f8a:	e00c      	b.n	8004fa6 <XMC_USBD_lWriteFifo+0x86>
    {
      *fifo = *(uint32_t*)ep->xferBuffer;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	601a      	str	r2, [r3, #0]
      i++;
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	613b      	str	r3, [r7, #16]
      word_count = (uint32_t)freeSpace.b.txfspcavail;
      byte_count = (uint32_t)word_count << (uint32_t)2U;
    }

    /* copy data dword wise */
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa0:	1d1a      	adds	r2, r3, #4
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	625a      	str	r2, [r3, #36]	; 0x24
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d3ee      	bcc.n	8004f8c <XMC_USBD_lWriteFifo+0x6c>
    {
      *fifo = *(uint32_t*)ep->xferBuffer;
      i++;
    }
    result=byte_count;
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	617b      	str	r3, [r7, #20]
  }
  return result;
 8004fb2:	697b      	ldr	r3, [r7, #20]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3724      	adds	r7, #36	; 0x24
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	20000650 	.word	0x20000650

08004fc4 <XMC_USBD_lFlushTXFifo>:
 * @param[in] fifo_num Fifo number to flush
 *
 * @note Use 0x10 as parameter to flush all tx fifos.
 */
static void XMC_USBD_lFlushTXFifo(const uint8_t fifo_num) 
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	4603      	mov	r3, r0
 8004fcc:	71fb      	strb	r3, [r7, #7]
  volatile grstctl_t data;  
  uint32_t count;
  data.d32 = 0U;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	60bb      	str	r3, [r7, #8]
  /*flush fifo */
  data.b.txfflsh = 1U;
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	f043 0320 	orr.w	r3, r3, #32
 8004fd8:	60bb      	str	r3, [r7, #8]
  data.b.txfnum = fifo_num;
 8004fda:	79fb      	ldrb	r3, [r7, #7]
 8004fdc:	f003 031f 	and.w	r3, r3, #31
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	f003 031f 	and.w	r3, r3, #31
 8004fe6:	019b      	lsls	r3, r3, #6
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	f422 62f8 	bic.w	r2, r2, #1984	; 0x7c0
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	60bb      	str	r3, [r7, #8]
  xmc_device.global_register->grstctl = data.d32;
 8004ff2:	4b14      	ldr	r3, [pc, #80]	; (8005044 <XMC_USBD_lFlushTXFifo+0x80>)
 8004ff4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	611a      	str	r2, [r3, #16]
  for (count = 0U;count < 1000U; count++){}
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	60fb      	str	r3, [r7, #12]
 8005000:	e002      	b.n	8005008 <XMC_USBD_lFlushTXFifo+0x44>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	3301      	adds	r3, #1
 8005006:	60fb      	str	r3, [r7, #12]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800500e:	d3f8      	bcc.n	8005002 <XMC_USBD_lFlushTXFifo+0x3e>
  do
  {
   data.d32 = xmc_device.global_register->grstctl;
 8005010:	4b0c      	ldr	r3, [pc, #48]	; (8005044 <XMC_USBD_lFlushTXFifo+0x80>)
 8005012:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	60bb      	str	r3, [r7, #8]
  } while (data.b.txfflsh);
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	095b      	lsrs	r3, r3, #5
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1f3      	bne.n	8005010 <XMC_USBD_lFlushTXFifo+0x4c>
    count = 0U;
 8005028:	2300      	movs	r3, #0
 800502a:	60fb      	str	r3, [r7, #12]
  while (count++ < 1000U)
 800502c:	bf00      	nop
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	1c5a      	adds	r2, r3, #1
 8005032:	60fa      	str	r2, [r7, #12]
 8005034:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005038:	d3f9      	bcc.n	800502e <XMC_USBD_lFlushTXFifo+0x6a>
  {
    /* wait 3 phy clocks */
  }
}
 800503a:	3714      	adds	r7, #20
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr
 8005044:	20000650 	.word	0x20000650

08005048 <XMC_USBD_lFlushRXFifo>:

/**
 * @brief Flush the rx fifo
 */
static void XMC_USBD_lFlushRXFifo(void) 
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
  volatile grstctl_t data;  
  uint32_t count;
	
	data.d32 = 0U;
 800504e:	2300      	movs	r3, #0
 8005050:	603b      	str	r3, [r7, #0]
  data.b.rxfflsh = 1U;
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	f043 0310 	orr.w	r3, r3, #16
 8005058:	603b      	str	r3, [r7, #0]
  /* flush FIFO */
  xmc_device.global_register->grstctl = data.d32;
 800505a:	4b14      	ldr	r3, [pc, #80]	; (80050ac <XMC_USBD_lFlushRXFifo+0x64>)
 800505c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8005060:	683a      	ldr	r2, [r7, #0]
 8005062:	611a      	str	r2, [r3, #16]
  do
  {
    for (count = 0U; count < 1000U; count++){}
 8005064:	2300      	movs	r3, #0
 8005066:	607b      	str	r3, [r7, #4]
 8005068:	e002      	b.n	8005070 <XMC_USBD_lFlushRXFifo+0x28>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	3301      	adds	r3, #1
 800506e:	607b      	str	r3, [r7, #4]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005076:	d3f8      	bcc.n	800506a <XMC_USBD_lFlushRXFifo+0x22>
    data.d32 = xmc_device.global_register->grstctl;
 8005078:	4b0c      	ldr	r3, [pc, #48]	; (80050ac <XMC_USBD_lFlushRXFifo+0x64>)
 800507a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	603b      	str	r3, [r7, #0]
  } while (data.b.rxfflsh);
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	091b      	lsrs	r3, r3, #4
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1e9      	bne.n	8005064 <XMC_USBD_lFlushRXFifo+0x1c>
  count = 0U;
 8005090:	2300      	movs	r3, #0
 8005092:	607b      	str	r3, [r7, #4]
  while (count++ < 1000U)
 8005094:	bf00      	nop
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	1c5a      	adds	r2, r3, #1
 800509a:	607a      	str	r2, [r7, #4]
 800509c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050a0:	d3f9      	bcc.n	8005096 <XMC_USBD_lFlushRXFifo+0x4e>
  {
    /* wait 3 phy clocks */
  }
}
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr
 80050ac:	20000650 	.word	0x20000650

080050b0 <XMC_USBD_lAssignTXFifo>:
 * A free tx fifo will be searched and the number will be returned.
 *
 * @return Fifo number for a free fifo
 */
static uint8_t XMC_USBD_lAssignTXFifo(void) 
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
  uint16_t mask = 1U;
 80050b6:	2301      	movs	r3, #1
 80050b8:	80fb      	strh	r3, [r7, #6]
  uint8_t i = 0U;
 80050ba:	2300      	movs	r3, #0
 80050bc:	717b      	strb	r3, [r7, #5]
  uint8_t result = 0U;
 80050be:	2300      	movs	r3, #0
 80050c0:	713b      	strb	r3, [r7, #4]
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 80050c2:	e005      	b.n	80050d0 <XMC_USBD_lAssignTXFifo+0x20>
  {
    mask = (uint16_t)(mask << 1U);
 80050c4:	88fb      	ldrh	r3, [r7, #6]
 80050c6:	005b      	lsls	r3, r3, #1
 80050c8:	80fb      	strh	r3, [r7, #6]
    i++;
 80050ca:	797b      	ldrb	r3, [r7, #5]
 80050cc:	3301      	adds	r3, #1
 80050ce:	717b      	strb	r3, [r7, #5]
static uint8_t XMC_USBD_lAssignTXFifo(void) 
{
  uint16_t mask = 1U;
  uint8_t i = 0U;
  uint8_t result = 0U;
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 80050d0:	797b      	ldrb	r3, [r7, #5]
 80050d2:	2b06      	cmp	r3, #6
 80050d4:	d807      	bhi.n	80050e6 <XMC_USBD_lAssignTXFifo+0x36>
 80050d6:	4b11      	ldr	r3, [pc, #68]	; (800511c <XMC_USBD_lAssignTXFifo+0x6c>)
 80050d8:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 80050dc:	88fb      	ldrh	r3, [r7, #6]
 80050de:	4013      	ands	r3, r2
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1ee      	bne.n	80050c4 <XMC_USBD_lAssignTXFifo+0x14>
  {
    mask = (uint16_t)(mask << 1U);
    i++;
  }
  if ((xmc_device.txfifomsk & mask) == 0U)
 80050e6:	4b0d      	ldr	r3, [pc, #52]	; (800511c <XMC_USBD_lAssignTXFifo+0x6c>)
 80050e8:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 80050ec:	88fb      	ldrh	r3, [r7, #6]
 80050ee:	4013      	ands	r3, r2
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10a      	bne.n	800510c <XMC_USBD_lAssignTXFifo+0x5c>
  {
    xmc_device.txfifomsk |= mask;
 80050f6:	4b09      	ldr	r3, [pc, #36]	; (800511c <XMC_USBD_lAssignTXFifo+0x6c>)
 80050f8:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 80050fc:	88fb      	ldrh	r3, [r7, #6]
 80050fe:	4313      	orrs	r3, r2
 8005100:	b29a      	uxth	r2, r3
 8005102:	4b06      	ldr	r3, [pc, #24]	; (800511c <XMC_USBD_lAssignTXFifo+0x6c>)
 8005104:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
    result=i;
 8005108:	797b      	ldrb	r3, [r7, #5]
 800510a:	713b      	strb	r3, [r7, #4]
  }
  return result;
 800510c:	793b      	ldrb	r3, [r7, #4]
}
 800510e:	4618      	mov	r0, r3
 8005110:	370c      	adds	r7, #12
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	20000650 	.word	0x20000650

08005120 <XMC_USBD_lUnassignFifo>:
 *
 * Mark an used tx fifo as free.
 * @param[in] fifo_nr Fifo number to free
 */
static void XMC_USBD_lUnassignFifo(const uint8_t fifo_nr) 
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	4603      	mov	r3, r0
 8005128:	71fb      	strb	r3, [r7, #7]
  xmc_device.txfifomsk = (uint16_t)((uint32_t)xmc_device.txfifomsk & (uint32_t)(~((uint32_t)((uint32_t)1U << fifo_nr))));
 800512a:	4b0a      	ldr	r3, [pc, #40]	; (8005154 <XMC_USBD_lUnassignFifo+0x34>)
 800512c:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 8005130:	79fb      	ldrb	r3, [r7, #7]
 8005132:	2101      	movs	r1, #1
 8005134:	fa01 f303 	lsl.w	r3, r1, r3
 8005138:	b29b      	uxth	r3, r3
 800513a:	43db      	mvns	r3, r3
 800513c:	b29b      	uxth	r3, r3
 800513e:	4013      	ands	r3, r2
 8005140:	b29a      	uxth	r2, r3
 8005142:	4b04      	ldr	r3, [pc, #16]	; (8005154 <XMC_USBD_lUnassignFifo+0x34>)
 8005144:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
}
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	20000650 	.word	0x20000650

08005158 <XMC_USBD_lStartReadXfer>:
 * that the transfer values are reasonable (e.g. buffer size is not exceeded).
 *
 * @param[in] ep Endpoint to start the transfer
 */
static void XMC_USBD_lStartReadXfer(XMC_USBD_EP_t *const ep) 
{
 8005158:	b480      	push	{r7}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  deptsiz_data_t data;
  depctl_data_t epctl;
	
  data.d32 =  0U;
 8005160:	2300      	movs	r3, #0
 8005162:	613b      	str	r3, [r7, #16]
  if ((ep->xferTotal - ep->xferLength) > ep->maxTransferSize)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	6892      	ldr	r2, [r2, #8]
 8005172:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8005176:	4293      	cmp	r3, r2
 8005178:	d909      	bls.n	800518e <XMC_USBD_lStartReadXfer+0x36>
  {
    ep->xferLength += ep->maxTransferSize;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	6892      	ldr	r2, [r2, #8]
 8005182:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8005186:	441a      	add	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	629a      	str	r2, [r3, #40]	; 0x28
 800518c:	e003      	b.n	8005196 <XMC_USBD_lStartReadXfer+0x3e>
  }
  else
  {
    ep->xferLength = ep->xferTotal;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (ep->address_u.address_st.number == 0U)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	f003 030f 	and.w	r3, r3, #15
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d119      	bne.n	80051d8 <XMC_USBD_lStartReadXfer+0x80>
  {
	/* Setup the endpoint to receive 3 setup packages and one normal package.*/
	/* Cast the data pointer to use only one variable */
    deptsiz0_data_t *ep0_data = (deptsiz0_data_t*)&data;
 80051a4:	f107 0310 	add.w	r3, r7, #16
 80051a8:	617b      	str	r3, [r7, #20]
    ep0_data->b.pktcnt = 0x1U;
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	7893      	ldrb	r3, [r2, #2]
 80051ae:	2101      	movs	r1, #1
 80051b0:	f361 03c4 	bfi	r3, r1, #3, #2
 80051b4:	7093      	strb	r3, [r2, #2]
    ep0_data->b.supcnt = 0x3U;
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	78d3      	ldrb	r3, [r2, #3]
 80051ba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80051be:	70d3      	strb	r3, [r2, #3]
    ep0_data->b.xfersize = (uint8_t)ep->xferTotal;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051ca:	b2d9      	uxtb	r1, r3
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	7813      	ldrb	r3, [r2, #0]
 80051d0:	f361 0306 	bfi	r3, r1, #0, #7
 80051d4:	7013      	strb	r3, [r2, #0]
 80051d6:	e033      	b.n	8005240 <XMC_USBD_lStartReadXfer+0xe8>
  }
  else
  {
    /* If requested length is zero, just receive one zero length packet */
    if (ep->xferLength == 0U)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d109      	bne.n	80051f4 <XMC_USBD_lStartReadXfer+0x9c>
    {
      data.b.xfersize = 0U;
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	f36f 0312 	bfc	r3, #0, #19
 80051e6:	613b      	str	r3, [r7, #16]
      data.b.pktcnt = 1U;
 80051e8:	8a7b      	ldrh	r3, [r7, #18]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f362 03cc 	bfi	r3, r2, #3, #10
 80051f0:	827b      	strh	r3, [r7, #18]
 80051f2:	e025      	b.n	8005240 <XMC_USBD_lStartReadXfer+0xe8>
    }
    else
    {
      /* setup endpoint to recive a amount of packages by given size */
      data.b.pktcnt = (uint16_t)(((ep->xferLength - ep->xferCount) + (ep->maxPacketSize -(uint32_t)1U))/ep->maxPacketSize);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	6852      	ldr	r2, [r2, #4]
 8005202:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 8005206:	b2d2      	uxtb	r2, r2
 8005208:	4413      	add	r3, r2
 800520a:	3b01      	subs	r3, #1
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	6852      	ldr	r2, [r2, #4]
 8005210:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 8005214:	b2d2      	uxtb	r2, r2
 8005216:	fbb3 f3f2 	udiv	r3, r3, r2
 800521a:	b29b      	uxth	r3, r3
 800521c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005220:	b29a      	uxth	r2, r3
 8005222:	8a7b      	ldrh	r3, [r7, #18]
 8005224:	f362 03cc 	bfi	r3, r2, #3, #10
 8005228:	827b      	strh	r3, [r7, #18]
      data.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	f362 0312 	bfi	r3, r2, #0, #19
 800523e:	613b      	str	r3, [r7, #16]
    }
  }
  if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8005240:	4b21      	ldr	r3, [pc, #132]	; (80052c8 <XMC_USBD_lStartReadXfer+0x170>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	7b5b      	ldrb	r3, [r3, #13]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10c      	bne.n	8005264 <XMC_USBD_lStartReadXfer+0x10c>
  {
    /* Programm dma address if needed */
    xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepdma = (uint32_t)(ep->xferBuffer);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005252:	b2db      	uxtb	r3, r3
 8005254:	4a1d      	ldr	r2, [pc, #116]	; (80052cc <XMC_USBD_lStartReadXfer+0x174>)
 8005256:	3370      	adds	r3, #112	; 0x70
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4413      	add	r3, r2
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005262:	615a      	str	r2, [r3, #20]
  }
  /* setup endpoint size and enable endpoint */
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doeptsiz = data.d32;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800526c:	b2db      	uxtb	r3, r3
 800526e:	4a17      	ldr	r2, [pc, #92]	; (80052cc <XMC_USBD_lStartReadXfer+0x174>)
 8005270:	3370      	adds	r3, #112	; 0x70
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4413      	add	r3, r2
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	611a      	str	r2, [r3, #16]
 
  epctl.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005284:	b2db      	uxtb	r3, r3
 8005286:	4a11      	ldr	r2, [pc, #68]	; (80052cc <XMC_USBD_lStartReadXfer+0x174>)
 8005288:	3370      	adds	r3, #112	; 0x70
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	4413      	add	r3, r2
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	60fb      	str	r3, [r7, #12]
  epctl.b.cnak = 1U;
 8005294:	7bfb      	ldrb	r3, [r7, #15]
 8005296:	f043 0304 	orr.w	r3, r3, #4
 800529a:	73fb      	strb	r3, [r7, #15]
  epctl.b.epena = 1U;
 800529c:	7bfb      	ldrb	r3, [r7, #15]
 800529e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052a2:	73fb      	strb	r3, [r7, #15]
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = epctl.d32;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	4a07      	ldr	r2, [pc, #28]	; (80052cc <XMC_USBD_lStartReadXfer+0x174>)
 80052b0:	3370      	adds	r3, #112	; 0x70
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4413      	add	r3, r2
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	601a      	str	r2, [r3, #0]
}
 80052bc:	371c      	adds	r7, #28
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	2000064c 	.word	0x2000064c
 80052cc:	20000650 	.word	0x20000650

080052d0 <XMC_USBD_lStartWriteXfer>:
 * to start a new in transfer
 *
 * @param[in] ep Endpoint to start the transfer
 */
static void XMC_USBD_lStartWriteXfer(XMC_USBD_EP_t *const ep) 
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  deptsiz_data_t size;
  depctl_data_t ctl;
	
  size.d32 = 0U;  
 80052d8:	2300      	movs	r3, #0
 80052da:	60fb      	str	r3, [r7, #12]
  ctl.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	4a5d      	ldr	r2, [pc, #372]	; (800545c <XMC_USBD_lStartWriteXfer+0x18c>)
 80052e8:	336a      	adds	r3, #106	; 0x6a
 80052ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	60bb      	str	r3, [r7, #8]

  if ((ep->xferTotal - ep->xferLength)  < ep->maxTransferSize)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	6892      	ldr	r2, [r2, #8]
 8005300:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8005304:	4293      	cmp	r3, r2
 8005306:	d204      	bcs.n	8005312 <XMC_USBD_lStartWriteXfer+0x42>
  {
    ep->xferLength = ep->xferTotal;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	629a      	str	r2, [r3, #40]	; 0x28
 8005310:	e008      	b.n	8005324 <XMC_USBD_lStartWriteXfer+0x54>
  }
  else
  {
    ep->xferLength += ep->maxTransferSize;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	6892      	ldr	r2, [r2, #8]
 800531a:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800531e:	441a      	add	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (ep->xferLength == 0U)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005328:	2b00      	cmp	r3, #0
 800532a:	d109      	bne.n	8005340 <XMC_USBD_lStartWriteXfer+0x70>
  {
    size.b.xfersize = 0U;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f36f 0312 	bfc	r3, #0, #19
 8005332:	60fb      	str	r3, [r7, #12]
    size.b.pktcnt = 1U;
 8005334:	89fb      	ldrh	r3, [r7, #14]
 8005336:	2201      	movs	r2, #1
 8005338:	f362 03cc 	bfi	r3, r2, #3, #10
 800533c:	81fb      	strh	r3, [r7, #14]
 800533e:	e06a      	b.n	8005416 <XMC_USBD_lStartWriteXfer+0x146>
  }
  else
  {
    if (ep->address_u.address_st.number == 0U)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	f003 030f 	and.w	r3, r3, #15
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2b00      	cmp	r3, #0
 800534c:	d110      	bne.n	8005370 <XMC_USBD_lStartWriteXfer+0xa0>
    {
      size.b.pktcnt = 1U;
 800534e:	89fb      	ldrh	r3, [r7, #14]
 8005350:	2201      	movs	r2, #1
 8005352:	f362 03cc 	bfi	r3, r2, #3, #10
 8005356:	81fb      	strh	r3, [r7, #14]
      /* ep->maxXferSize equals maxPacketSize */
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f362 0312 	bfi	r3, r2, #0, #19
 800536c:	60fb      	str	r3, [r7, #12]
 800536e:	e02b      	b.n	80053c8 <XMC_USBD_lStartWriteXfer+0xf8>
    }
    else
    {
      size.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	f3c3 0212 	ubfx	r2, r3, #0, #19
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f362 0312 	bfi	r3, r2, #0, #19
 8005384:	60fb      	str	r3, [r7, #12]
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538a:	b29a      	uxth	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005390:	b29b      	uxth	r3, r3
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	b29b      	uxth	r3, r3
 8005396:	461a      	mov	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f3c3 23c6 	ubfx	r3, r3, #11, #7
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	3b01      	subs	r3, #1
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	4413      	add	r3, r2
    		 ep->maxPacketSize);
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	6852      	ldr	r2, [r2, #4]
 80053ae:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 80053b2:	b2d2      	uxtb	r2, r2
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
    }
    else
    {
      size.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 80053b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053be:	b29a      	uxth	r2, r3
 80053c0:	89fb      	ldrh	r3, [r7, #14]
 80053c2:	f362 03cc 	bfi	r3, r2, #3, #10
 80053c6:	81fb      	strh	r3, [r7, #14]
    		 ep->maxPacketSize);
    }
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80053c8:	4b25      	ldr	r3, [pc, #148]	; (8005460 <XMC_USBD_lStartWriteXfer+0x190>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	7b5b      	ldrb	r3, [r3, #13]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10b      	bne.n	80053ea <XMC_USBD_lStartWriteXfer+0x11a>
    {
      /* Program dma*/
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepdma = (uint32_t)ep->xferBuffer;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	4a1f      	ldr	r2, [pc, #124]	; (800545c <XMC_USBD_lStartWriteXfer+0x18c>)
 80053de:	336a      	adds	r3, #106	; 0x6a
 80053e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80053e8:	615a      	str	r2, [r3, #20]
    }
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 80053ea:	4b1d      	ldr	r3, [pc, #116]	; (8005460 <XMC_USBD_lStartWriteXfer+0x190>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	7b5b      	ldrb	r3, [r3, #13]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d110      	bne.n	8005416 <XMC_USBD_lStartWriteXfer+0x146>
    {
      /* enable fifo empty interrupt */
			xmc_device.device_register->dtknqr4_fifoemptymsk |= (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 80053f4:	4b19      	ldr	r3, [pc, #100]	; (800545c <XMC_USBD_lStartWriteXfer+0x18c>)
 80053f6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80053fa:	4a18      	ldr	r2, [pc, #96]	; (800545c <XMC_USBD_lStartWriteXfer+0x18c>)
 80053fc:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 8005400:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	7812      	ldrb	r2, [r2, #0]
 8005406:	f3c2 0203 	ubfx	r2, r2, #0, #4
 800540a:	b2d2      	uxtb	r2, r2
 800540c:	4610      	mov	r0, r2
 800540e:	2201      	movs	r2, #1
 8005410:	4082      	lsls	r2, r0
 8005412:	430a      	orrs	r2, r1
 8005414:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }

  /* Program size of transfer and enable endpoint */
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dieptsiz = size.d32;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800541e:	b2db      	uxtb	r3, r3
 8005420:	4a0e      	ldr	r2, [pc, #56]	; (800545c <XMC_USBD_lStartWriteXfer+0x18c>)
 8005422:	336a      	adds	r3, #106	; 0x6a
 8005424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	611a      	str	r2, [r3, #16]
  ctl.b.epena = 1U;
 800542c:	7afb      	ldrb	r3, [r7, #11]
 800542e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005432:	72fb      	strb	r3, [r7, #11]
  ctl.b.cnak = 1U;
 8005434:	7afb      	ldrb	r3, [r7, #11]
 8005436:	f043 0304 	orr.w	r3, r3, #4
 800543a:	72fb      	strb	r3, [r7, #11]
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = ctl.d32;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005444:	b2db      	uxtb	r3, r3
 8005446:	4a05      	ldr	r2, [pc, #20]	; (800545c <XMC_USBD_lStartWriteXfer+0x18c>)
 8005448:	336a      	adds	r3, #106	; 0x6a
 800544a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	601a      	str	r2, [r3, #0]
}
 8005452:	3714      	adds	r7, #20
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr
 800545c:	20000650 	.word	0x20000650
 8005460:	2000064c 	.word	0x2000064c

08005464 <XMC_USBD_lHandleUSBReset>:
 * When ever the host sets the bus into reset condition the usb otg_core generates
 * an interrupt, which is handled by this function. It resets the complete otg_core
 * into the default state.
 */
static void XMC_USBD_lHandleUSBReset(const XMC_USBD_t *const obj) 
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b088      	sub	sp, #32
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  fifosize_data_t gnptxfsiz;
  daint_data_t daint;
  dcfg_data_t dcfg;
	
  /* Clear the Remote Wakeup Signaling */
  dctl.d32 = xmc_device.device_register->dctl;
 800546c:	4b4f      	ldr	r3, [pc, #316]	; (80055ac <XMC_USBD_lHandleUSBReset+0x148>)
 800546e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	617b      	str	r3, [r7, #20]
  dctl.b.rmtwkupsig = 1U;
 8005476:	7d3b      	ldrb	r3, [r7, #20]
 8005478:	f043 0301 	orr.w	r3, r3, #1
 800547c:	753b      	strb	r3, [r7, #20]
  xmc_device.device_register->dctl = dctl.d32;
 800547e:	4b4b      	ldr	r3, [pc, #300]	; (80055ac <XMC_USBD_lHandleUSBReset+0x148>)
 8005480:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	605a      	str	r2, [r3, #4]

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
 8005488:	2300      	movs	r3, #0
 800548a:	61fb      	str	r3, [r7, #28]
 800548c:	e01a      	b.n	80054c4 <XMC_USBD_lHandleUSBReset+0x60>
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
 800548e:	4a47      	ldr	r2, [pc, #284]	; (80055ac <XMC_USBD_lHandleUSBReset+0x148>)
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	3370      	adds	r3, #112	; 0x70
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4413      	add	r3, r2
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	61bb      	str	r3, [r7, #24]
		epctl.b.snak = 1U;
 800549e:	7efb      	ldrb	r3, [r7, #27]
 80054a0:	f043 0308 	orr.w	r3, r3, #8
 80054a4:	76fb      	strb	r3, [r7, #27]
		epctl.b.stall = 0U;
 80054a6:	7ebb      	ldrb	r3, [r7, #26]
 80054a8:	f36f 1345 	bfc	r3, #5, #1
 80054ac:	76bb      	strb	r3, [r7, #26]
		xmc_device.endpoint_out_register[i]->doepctl = epctl.d32;
 80054ae:	4a3f      	ldr	r2, [pc, #252]	; (80055ac <XMC_USBD_lHandleUSBReset+0x148>)
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	3370      	adds	r3, #112	; 0x70
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	69ba      	ldr	r2, [r7, #24]
 80054bc:	601a      	str	r2, [r3, #0]
  dctl.d32 = xmc_device.device_register->dctl;
  dctl.b.rmtwkupsig = 1U;
  xmc_device.device_register->dctl = dctl.d32;

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	3301      	adds	r3, #1
 80054c2:	61fb      	str	r3, [r7, #28]
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	2b06      	cmp	r3, #6
 80054c8:	d9e1      	bls.n	800548e <XMC_USBD_lHandleUSBReset+0x2a>
		xmc_device.endpoint_out_register[i]->doepctl = epctl.d32;
  }

  /* Configure fifos */
  /* Calculate the size of the rx fifo */
  xmc_device.global_register->grxfsiz = 64U;
 80054ca:	4b38      	ldr	r3, [pc, #224]	; (80055ac <XMC_USBD_lHandleUSBReset+0x148>)
 80054cc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80054d0:	2240      	movs	r2, #64	; 0x40
 80054d2:	625a      	str	r2, [r3, #36]	; 0x24
  /* Calculate the size of the tx fifo for ep 0 */  
  gnptxfsiz.d32 = 0U;
 80054d4:	2300      	movs	r3, #0
 80054d6:	613b      	str	r3, [r7, #16]
  gnptxfsiz.b.depth = 16U;
 80054d8:	2310      	movs	r3, #16
 80054da:	827b      	strh	r3, [r7, #18]
  gnptxfsiz.b.startaddr = 64U;
 80054dc:	2340      	movs	r3, #64	; 0x40
 80054de:	823b      	strh	r3, [r7, #16]
  xmc_device.global_register->gnptxfsiz = gnptxfsiz.d32;
 80054e0:	4b32      	ldr	r3, [pc, #200]	; (80055ac <XMC_USBD_lHandleUSBReset+0x148>)
 80054e2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	629a      	str	r2, [r3, #40]	; 0x28
  /* calculate the size for the rest */
  for (i = 1U;i < (uint8_t)XMC_USBD_NUM_TX_FIFOS;i++)
 80054ea:	2301      	movs	r3, #1
 80054ec:	61fb      	str	r3, [r7, #28]
 80054ee:	e011      	b.n	8005514 <XMC_USBD_lHandleUSBReset+0xb0>
  {
    xmc_device.global_register->dtxfsiz[i- 1U] = (uint32_t)(((256U + (i*(64U)))/4U) | ((uint32_t)16U << 16U));
 80054f0:	4b2e      	ldr	r3, [pc, #184]	; (80055ac <XMC_USBD_lHandleUSBReset+0x148>)
 80054f2:	f8d3 11a0 	ldr.w	r1, [r3, #416]	; 0x1a0
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	3b01      	subs	r3, #1
 80054fa:	69fa      	ldr	r2, [r7, #28]
 80054fc:	3204      	adds	r2, #4
 80054fe:	0192      	lsls	r2, r2, #6
 8005500:	0892      	lsrs	r2, r2, #2
 8005502:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005506:	3340      	adds	r3, #64	; 0x40
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	440b      	add	r3, r1
 800550c:	605a      	str	r2, [r3, #4]
  gnptxfsiz.d32 = 0U;
  gnptxfsiz.b.depth = 16U;
  gnptxfsiz.b.startaddr = 64U;
  xmc_device.global_register->gnptxfsiz = gnptxfsiz.d32;
  /* calculate the size for the rest */
  for (i = 1U;i < (uint8_t)XMC_USBD_NUM_TX_FIFOS;i++)
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	3301      	adds	r3, #1
 8005512:	61fb      	str	r3, [r7, #28]
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	2b06      	cmp	r3, #6
 8005518:	d9ea      	bls.n	80054f0 <XMC_USBD_lHandleUSBReset+0x8c>
  {
    xmc_device.global_register->dtxfsiz[i- 1U] = (uint32_t)(((256U + (i*(64U)))/4U) | ((uint32_t)16U << 16U));
  }

  /* flush the fifos for proper operation */
  XMC_USBD_lFlushTXFifo(0x10U); /* 0x10 == all fifos, see doc */
 800551a:	2010      	movs	r0, #16
 800551c:	f7ff fd52 	bl	8004fc4 <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushTXFifo(0x0U);
 8005520:	2000      	movs	r0, #0
 8005522:	f7ff fd4f 	bl	8004fc4 <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushRXFifo();
 8005526:	f7ff fd8f 	bl	8005048 <XMC_USBD_lFlushRXFifo>
  /* Flush learning queue not needed due to fifo config */
  /* enable ep0 interrupts */  
  daint.d32 = 0U;
 800552a:	2300      	movs	r3, #0
 800552c:	60fb      	str	r3, [r7, #12]
  daint.b.inep0 = 1U;
 800552e:	7b3b      	ldrb	r3, [r7, #12]
 8005530:	f043 0301 	orr.w	r3, r3, #1
 8005534:	733b      	strb	r3, [r7, #12]
  daint.b.outep0 = 1U;
 8005536:	7bbb      	ldrb	r3, [r7, #14]
 8005538:	f043 0301 	orr.w	r3, r3, #1
 800553c:	73bb      	strb	r3, [r7, #14]
  xmc_device.device_register->daintmsk = daint.d32;
 800553e:	4b1b      	ldr	r3, [pc, #108]	; (80055ac <XMC_USBD_lHandleUSBReset+0x148>)
 8005540:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	61da      	str	r2, [r3, #28]

  /* enable endpoint interrupts */
  /* out ep interrupts */
  XMC_USBD_EnableEventOUTEP(((uint32_t)XMC_USBD_EVENT_OUT_EP_TX_COMPLET | (uint32_t)XMC_USBD_EVENT_OUT_EP_DISABLED |
 8005548:	200f      	movs	r0, #15
 800554a:	f000 fbe9 	bl	8005d20 <XMC_USBD_EnableEventOUTEP>
		  	  	  	  	  	  (uint32_t)XMC_USBD_EVENT_OUT_EP_SETUP | (uint32_t)XMC_USBD_EVENT_OUT_EP_AHB_ERROR));

  /*in ep interrupts */
  XMC_USBD_EnableEventINEP(((uint32_t)XMC_USBD_EVENT_IN_EP_TX_COMPLET | (uint32_t)XMC_USBD_EVENT_IN_EP_DISABLED |
 800554e:	200f      	movs	r0, #15
 8005550:	f000 fbfe 	bl	8005d50 <XMC_USBD_EnableEventINEP>
		  (uint32_t)XMC_USBD_EVENT_IN_EP_AHB_ERROR | (uint32_t)XMC_USBD_EVENT_IN_EP_TIMEOUT));


  /* Clear device Address */  
  dcfg.d32 = xmc_device.device_register->dcfg;
 8005554:	4b15      	ldr	r3, [pc, #84]	; (80055ac <XMC_USBD_lHandleUSBReset+0x148>)
 8005556:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	60bb      	str	r3, [r7, #8]
  dcfg.b.devaddr = 0U;
 800555e:	893b      	ldrh	r3, [r7, #8]
 8005560:	f36f 130a 	bfc	r3, #4, #7
 8005564:	813b      	strh	r3, [r7, #8]
  xmc_device.device_register->dcfg = dcfg.d32;
 8005566:	4b11      	ldr	r3, [pc, #68]	; (80055ac <XMC_USBD_lHandleUSBReset+0x148>)
 8005568:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	601a      	str	r2, [r3, #0]

  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	7b5b      	ldrb	r3, [r3, #13]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d104      	bne.n	8005582 <XMC_USBD_lHandleUSBReset+0x11e>
  {
    /* Clear Empty interrupt */
    xmc_device.device_register->dtknqr4_fifoemptymsk = 0U;
 8005578:	4b0c      	ldr	r3, [pc, #48]	; (80055ac <XMC_USBD_lHandleUSBReset+0x148>)
 800557a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800557e:	2200      	movs	r2, #0
 8005580:	635a      	str	r2, [r3, #52]	; 0x34
  }

  xmc_device.ep[0U].outInUse = 0U;
 8005582:	4b0a      	ldr	r3, [pc, #40]	; (80055ac <XMC_USBD_lHandleUSBReset+0x148>)
 8005584:	685a      	ldr	r2, [r3, #4]
 8005586:	f022 0210 	bic.w	r2, r2, #16
 800558a:	605a      	str	r2, [r3, #4]
  xmc_device.ep[0U].inInUse = 0U;
 800558c:	4b07      	ldr	r3, [pc, #28]	; (80055ac <XMC_USBD_lHandleUSBReset+0x148>)
 800558e:	685a      	ldr	r2, [r3, #4]
 8005590:	f022 0208 	bic.w	r2, r2, #8
 8005594:	605a      	str	r2, [r3, #4]

  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_RESET);
 8005596:	4b05      	ldr	r3, [pc, #20]	; (80055ac <XMC_USBD_lHandleUSBReset+0x148>)
 8005598:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800559c:	2004      	movs	r0, #4
 800559e:	4798      	blx	r3

  /* clear reset intr */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_RESET);
 80055a0:	2004      	movs	r0, #4
 80055a2:	f000 fb17 	bl	8005bd4 <XMC_USBD_ClearEvent>
}
 80055a6:	3720      	adds	r7, #32
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	20000650 	.word	0x20000650

080055b0 <XMC_USBD_lHandleOTGInt>:
* @brief Handle OTG Interrupt
*
* It detects especially connect and disconnect events.
*/
static void XMC_USBD_lHandleOTGInt(void) 
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
  gotgint_data_t data;
  data.d32 = xmc_device.global_register->gotgint;
 80055b6:	4b0f      	ldr	r3, [pc, #60]	; (80055f4 <XMC_USBD_lHandleOTGInt+0x44>)
 80055b8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	607b      	str	r3, [r7, #4]
  if (data.b.sesenddet)
 80055c0:	793b      	ldrb	r3, [r7, #4]
 80055c2:	f003 0304 	and.w	r3, r3, #4
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00b      	beq.n	80055e4 <XMC_USBD_lHandleOTGInt+0x34>
  {
		xmc_device.IsPowered = 0U;
 80055cc:	4a09      	ldr	r2, [pc, #36]	; (80055f4 <XMC_USBD_lHandleOTGInt+0x44>)
 80055ce:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 80055d2:	f36f 0382 	bfc	r3, #2, #1
 80055d6:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
		xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_OFF);
 80055da:	4b06      	ldr	r3, [pc, #24]	; (80055f4 <XMC_USBD_lHandleOTGInt+0x44>)
 80055dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80055e0:	2001      	movs	r0, #1
 80055e2:	4798      	blx	r3
  }
  XMC_USBD_lClearEventOTG(data.d32);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 fb58 	bl	8005c9c <XMC_USBD_lClearEventOTG>

}
 80055ec:	3708      	adds	r7, #8
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	20000650 	.word	0x20000650

080055f8 <XMC_USBD_lHandleEnumDone>:
 * @brief Interrupt handler for device enumeration done.
 *
 * Handles the enumeration done from dwc_otg, when the host has enumerated the device.
 */
static void XMC_USBD_lHandleEnumDone(void) 
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
  /* Normaly we need to check dctl
   * We are always fullspeed, so max it up. */
  depctl_data_t epctl;
  gusbcfg_data_t gusbcfg;
	
  epctl.d32=xmc_device.endpoint_in_register[0U]->diepctl;
 80055fe:	4b1b      	ldr	r3, [pc, #108]	; (800566c <XMC_USBD_lHandleEnumDone+0x74>)
 8005600:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	607b      	str	r3, [r7, #4]
  epctl.b.mps = 0x00U; /* 64 Byte, this is also automatically set for out ep */
 8005608:	88bb      	ldrh	r3, [r7, #4]
 800560a:	f36f 030a 	bfc	r3, #0, #11
 800560e:	80bb      	strh	r3, [r7, #4]
  xmc_device.endpoint_in_register[0U]->diepctl = epctl.d32;
 8005610:	4b16      	ldr	r3, [pc, #88]	; (800566c <XMC_USBD_lHandleEnumDone+0x74>)
 8005612:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	601a      	str	r2, [r3, #0]

  /* update device connected flag */
  xmc_device.IsConnected = 1U;
 800561a:	4a14      	ldr	r2, [pc, #80]	; (800566c <XMC_USBD_lHandleEnumDone+0x74>)
 800561c:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 8005620:	f043 0301 	orr.w	r3, r3, #1
 8005624:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
  xmc_device.IsPowered = 1U;
 8005628:	4a10      	ldr	r2, [pc, #64]	; (800566c <XMC_USBD_lHandleEnumDone+0x74>)
 800562a:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 800562e:	f043 0304 	orr.w	r3, r3, #4
 8005632:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe

  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_CONNECT);
 8005636:	4b0d      	ldr	r3, [pc, #52]	; (800566c <XMC_USBD_lHandleEnumDone+0x74>)
 8005638:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800563c:	2002      	movs	r0, #2
 800563e:	4798      	blx	r3

  /* Set Trim */  
  gusbcfg.d32 = xmc_device.global_register->gusbcfg;
 8005640:	4b0a      	ldr	r3, [pc, #40]	; (800566c <XMC_USBD_lHandleEnumDone+0x74>)
 8005642:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	603b      	str	r3, [r7, #0]
  gusbcfg.b.usbtrdtim = 9U; /* default value for LS/FS */
 800564a:	787b      	ldrb	r3, [r7, #1]
 800564c:	2209      	movs	r2, #9
 800564e:	f362 0385 	bfi	r3, r2, #2, #4
 8005652:	707b      	strb	r3, [r7, #1]
  xmc_device.global_register->gusbcfg = gusbcfg.d32;
 8005654:	4b05      	ldr	r3, [pc, #20]	; (800566c <XMC_USBD_lHandleEnumDone+0x74>)
 8005656:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800565a:	683a      	ldr	r2, [r7, #0]
 800565c:	60da      	str	r2, [r3, #12]

  /* clear interrupt */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_ENUMDONE);
 800565e:	200b      	movs	r0, #11
 8005660:	f000 fab8 	bl	8005bd4 <XMC_USBD_ClearEvent>
}
 8005664:	3708      	adds	r7, #8
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	20000650 	.word	0x20000650

08005670 <XMC_USBD_lHandleOEPInt>:
 *
 * The interrupt handler first checks, which endpoint has caused the interrupt and then
 * determines, which interrupt should be handled.
 */
static void XMC_USBD_lHandleOEPInt(const XMC_USBD_t *const obj) 
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b08c      	sub	sp, #48	; 0x30
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  uint16_t temp;
  uint16_t temp1;
  uint16_t mask;
  uint8_t ep_num;
	
  daint.d32 = xmc_device.device_register->daint;
 8005678:	4b6a      	ldr	r3, [pc, #424]	; (8005824 <XMC_USBD_lHandleOEPInt+0x1b4>)
 800567a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	61fb      	str	r3, [r7, #28]
  
  daintmsk.d32 = xmc_device.device_register->daintmsk;
 8005682:	4b68      	ldr	r3, [pc, #416]	; (8005824 <XMC_USBD_lHandleOEPInt+0x1b4>)
 8005684:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005688:	69db      	ldr	r3, [r3, #28]
 800568a:	61bb      	str	r3, [r7, #24]
  
  doepmsk.d32 = xmc_device.device_register->doepmsk;  
 800568c:	4b65      	ldr	r3, [pc, #404]	; (8005824 <XMC_USBD_lHandleOEPInt+0x1b4>)
 800568e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005692:	695b      	ldr	r3, [r3, #20]
 8005694:	617b      	str	r3, [r7, #20]
  
  mask = daint.ep.out & daintmsk.ep.out;
 8005696:	8bfa      	ldrh	r2, [r7, #30]
 8005698:	8b7b      	ldrh	r3, [r7, #26]
 800569a:	4013      	ands	r3, r2
 800569c:	85bb      	strh	r3, [r7, #44]	; 0x2c
  ep_num = 0U;
 800569e:	2300      	movs	r3, #0
 80056a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  doeptsiz.d32 = 0U;
 80056a4:	2300      	movs	r3, #0
 80056a6:	60fb      	str	r3, [r7, #12]
 
  while ((uint16_t)mask >> ep_num)
 80056a8:	e0ae      	b.n	8005808 <XMC_USBD_lHandleOEPInt+0x198>
  {
    temp1 = (mask >> (uint16_t)ep_num);
 80056aa:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80056ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80056b0:	fa42 f303 	asr.w	r3, r2, r3
 80056b4:	857b      	strh	r3, [r7, #42]	; 0x2a
    temp = temp1 & 0x1U;
 80056b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	853b      	strh	r3, [r7, #40]	; 0x28
    if (temp)
 80056be:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f000 809c 	beq.w	80057fe <XMC_USBD_lHandleOEPInt+0x18e>
    {
      /* load register data for endpoint */
      ep = &xmc_device.ep[ep_num];
 80056c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80056ca:	2234      	movs	r2, #52	; 0x34
 80056cc:	fb02 f303 	mul.w	r3, r2, r3
 80056d0:	4a54      	ldr	r2, [pc, #336]	; (8005824 <XMC_USBD_lHandleOEPInt+0x1b4>)
 80056d2:	4413      	add	r3, r2
 80056d4:	627b      	str	r3, [r7, #36]	; 0x24
      doepint.d32 = xmc_device.endpoint_out_register[ep_num]->doepint & doepmsk.d32;
 80056d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80056da:	4a52      	ldr	r2, [pc, #328]	; (8005824 <XMC_USBD_lHandleOEPInt+0x1b4>)
 80056dc:	3370      	adds	r3, #112	; 0x70
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	4413      	add	r3, r2
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	689a      	ldr	r2, [r3, #8]
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	4013      	ands	r3, r2
 80056ea:	613b      	str	r3, [r7, #16]
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	7b5b      	ldrb	r3, [r3, #13]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d108      	bne.n	8005706 <XMC_USBD_lHandleOEPInt+0x96>
      {
        doeptsiz.d32 = xmc_device.endpoint_out_register[ep_num]->doeptsiz;
 80056f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80056f8:	4a4a      	ldr	r2, [pc, #296]	; (8005824 <XMC_USBD_lHandleOEPInt+0x1b4>)
 80056fa:	3370      	adds	r3, #112	; 0x70
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4413      	add	r3, r2
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	60fb      	str	r3, [r7, #12]
      }
	  /* Setup Phase Complete */
      if (doepint.b.setup)
 8005706:	7c3b      	ldrb	r3, [r7, #16]
 8005708:	f003 0308 	and.w	r3, r3, #8
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d033      	beq.n	800577a <XMC_USBD_lHandleOEPInt+0x10a>
      {
        /* ep0 not stalled any more */
        ep->isStalled = 0U;
 8005712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005714:	7913      	ldrb	r3, [r2, #4]
 8005716:	f36f 1345 	bfc	r3, #5, #1
 800571a:	7113      	strb	r3, [r2, #4]
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	7b5b      	ldrb	r3, [r3, #13]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d10e      	bne.n	8005742 <XMC_USBD_lHandleOEPInt+0xd2>
        {
          /* calculate size for setup packet */
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
		  (uint32_t)((deptsiz0_data_t*)&doeptsiz)->b.supcnt)*(uint32_t)XMC_USBD_SETUP_SIZE);
 8005724:	f107 030c 	add.w	r3, r7, #12
 8005728:	78db      	ldrb	r3, [r3, #3]
 800572a:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800572e:	b2db      	uxtb	r3, r3
 8005730:	461a      	mov	r2, r3
        /* ep0 not stalled any more */
        ep->isStalled = 0U;
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
        {
          /* calculate size for setup packet */
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
 8005732:	4613      	mov	r3, r2
 8005734:	075b      	lsls	r3, r3, #29
 8005736:	1a9b      	subs	r3, r3, r2
 8005738:	00db      	lsls	r3, r3, #3
 800573a:	f103 0218 	add.w	r2, r3, #24
 800573e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005740:	611a      	str	r2, [r3, #16]
		  (uint32_t)((deptsiz0_data_t*)&doeptsiz)->b.supcnt)*(uint32_t)XMC_USBD_SETUP_SIZE);
        }
		if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	7b5b      	ldrb	r3, [r3, #13]
 8005746:	2b01      	cmp	r3, #1
 8005748:	d106      	bne.n	8005758 <XMC_USBD_lHandleOEPInt+0xe8>
		{
			ep->outBytesAvailable += ep->xferCount;
 800574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574c:	691a      	ldr	r2, [r3, #16]
 800574e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005752:	441a      	add	r2, r3
 8005754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005756:	611a      	str	r2, [r3, #16]
		}
		ep->outInUse = 0U;
 8005758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575a:	685a      	ldr	r2, [r3, #4]
 800575c:	f022 0210 	bic.w	r2, r2, #16
 8005760:	605a      	str	r2, [r3, #4]
		xmc_device.EndpointEvent_cb(0U,XMC_USBD_EP_EVENT_SETUP); /* signal endpoint event */
 8005762:	4b30      	ldr	r3, [pc, #192]	; (8005824 <XMC_USBD_lHandleOEPInt+0x1b4>)
 8005764:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005768:	2000      	movs	r0, #0
 800576a:	2100      	movs	r1, #0
 800576c:	4798      	blx	r3
				/* clear the interrupt */
		XMC_USBD_ClearEventOUTEP((uint32_t)XMC_USBD_EVENT_OUT_EP_SETUP,ep_num);
 800576e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005772:	2008      	movs	r0, #8
 8005774:	4619      	mov	r1, r3
 8005776:	f000 fabb 	bl	8005cf0 <XMC_USBD_ClearEventOUTEP>
      }
      if (doepint.b.xfercompl)
 800577a:	7c3b      	ldrb	r3, [r7, #16]
 800577c:	f003 0301 	and.w	r3, r3, #1
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d034      	beq.n	80057f0 <XMC_USBD_lHandleOEPInt+0x180>
      {
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	7b5b      	ldrb	r3, [r3, #13]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d115      	bne.n	80057ba <XMC_USBD_lHandleOEPInt+0x14a>
        {
          uint32_t bytes = (ep->xferLength - ep->xferCount) - doeptsiz.b.xfersize;
 800578e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005790:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800579e:	1a9b      	subs	r3, r3, r2
 80057a0:	623b      	str	r3, [r7, #32]
          ep->xferCount += bytes;
 80057a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	441a      	add	r2, r3
 80057aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ac:	62da      	str	r2, [r3, #44]	; 0x2c
          ep->xferBuffer += bytes;
 80057ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057b2:	6a3b      	ldr	r3, [r7, #32]
 80057b4:	441a      	add	r2, r3
 80057b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b8:	625a      	str	r2, [r3, #36]	; 0x24
				}
        if (ep->xferTotal == ep->xferLength)
 80057ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d111      	bne.n	80057ea <XMC_USBD_lHandleOEPInt+0x17a>
        {
          ep->outBytesAvailable = ep->xferCount;
 80057c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057cc:	611a      	str	r2, [r3, #16]
          ep->outInUse = 0U;
 80057ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d0:	685a      	ldr	r2, [r3, #4]
 80057d2:	f022 0210 	bic.w	r2, r2, #16
 80057d6:	605a      	str	r2, [r3, #4]
          xmc_device.EndpointEvent_cb(ep_num,XMC_USBD_EP_EVENT_OUT);
 80057d8:	4b12      	ldr	r3, [pc, #72]	; (8005824 <XMC_USBD_lHandleOEPInt+0x1b4>)
 80057da:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80057de:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80057e2:	4610      	mov	r0, r2
 80057e4:	2101      	movs	r1, #1
 80057e6:	4798      	blx	r3
 80057e8:	e002      	b.n	80057f0 <XMC_USBD_lHandleOEPInt+0x180>
        }
        else
        {
          XMC_USBD_lStartReadXfer(ep);
 80057ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057ec:	f7ff fcb4 	bl	8005158 <XMC_USBD_lStartReadXfer>
        }

      }

      XMC_USBD_ClearEventOUTEP(doepint.d32,ep_num);
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80057f6:	4610      	mov	r0, r2
 80057f8:	4619      	mov	r1, r3
 80057fa:	f000 fa79 	bl	8005cf0 <XMC_USBD_ClearEventOUTEP>
    }
    ep_num++;
 80057fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005802:	3301      	adds	r3, #1
 8005804:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  
  mask = daint.ep.out & daintmsk.ep.out;
  ep_num = 0U;
  doeptsiz.d32 = 0U;
 
  while ((uint16_t)mask >> ep_num)
 8005808:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800580a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800580e:	fa42 f303 	asr.w	r3, r2, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	f47f af49 	bne.w	80056aa <XMC_USBD_lHandleOEPInt+0x3a>
    }
    ep_num++;
  }

  /* clear interrupt */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_OUTEP);
 8005818:	200d      	movs	r0, #13
 800581a:	f000 f9db 	bl	8005bd4 <XMC_USBD_ClearEvent>
}
 800581e:	3730      	adds	r7, #48	; 0x30
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	20000650 	.word	0x20000650

08005828 <XMC_USBD_lHandleIEPInt>:
 *
 * The interrupt handler first checks, which endpoint has caused the interrupt and then
 * determines, which interrupt should be handled.
 */
static void XMC_USBD_lHandleIEPInt(const XMC_USBD_t *const obj) 
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b08c      	sub	sp, #48	; 0x30
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  uint16_t temp1;
  uint16_t mask;
  uint8_t ep_num;
  uint32_t inepint;
	
  daint.d32 = xmc_device.device_register->daint;
 8005830:	4b6a      	ldr	r3, [pc, #424]	; (80059dc <XMC_USBD_lHandleIEPInt+0x1b4>)
 8005832:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005836:	699b      	ldr	r3, [r3, #24]
 8005838:	617b      	str	r3, [r7, #20]
  
  diepmsk.d32 = xmc_device.device_register->diepmsk;
 800583a:	4b68      	ldr	r3, [pc, #416]	; (80059dc <XMC_USBD_lHandleIEPInt+0x1b4>)
 800583c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	613b      	str	r3, [r7, #16]
  
  dieptsiz.d32 = 0U;
 8005844:	2300      	movs	r3, #0
 8005846:	60bb      	str	r3, [r7, #8]
  mask = daint.ep.in;
 8005848:	8abb      	ldrh	r3, [r7, #20]
 800584a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  ep_num = 0U;
 800584c:	2300      	movs	r3, #0
 800584e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  
  while ((uint16_t)mask >> ep_num)
 8005852:	e0b5      	b.n	80059c0 <XMC_USBD_lHandleIEPInt+0x198>
  {
    temp1 = ((uint16_t)mask >> (uint16_t)ep_num);
 8005854:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8005856:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800585a:	fa42 f303 	asr.w	r3, r2, r3
 800585e:	857b      	strh	r3, [r7, #42]	; 0x2a
    temp = (uint16_t)temp1 & (uint16_t)0x1U;
 8005860:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	853b      	strh	r3, [r7, #40]	; 0x28
    if ((uint16_t)temp)
 8005868:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800586a:	2b00      	cmp	r3, #0
 800586c:	f000 80a3 	beq.w	80059b6 <XMC_USBD_lHandleIEPInt+0x18e>
    {
      ep = &xmc_device.ep[ep_num];
 8005870:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005874:	2234      	movs	r2, #52	; 0x34
 8005876:	fb02 f303 	mul.w	r3, r2, r3
 800587a:	4a58      	ldr	r2, [pc, #352]	; (80059dc <XMC_USBD_lHandleIEPInt+0x1b4>)
 800587c:	4413      	add	r3, r2
 800587e:	627b      	str	r3, [r7, #36]	; 0x24
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
 8005880:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005884:	4a55      	ldr	r2, [pc, #340]	; (80059dc <XMC_USBD_lHandleIEPInt+0x1b4>)
 8005886:	336a      	adds	r3, #106	; 0x6a
 8005888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	623b      	str	r3, [r7, #32]
      diepint.d32 = inepint &
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 8005890:	4b52      	ldr	r3, [pc, #328]	; (80059dc <XMC_USBD_lHandleIEPInt+0x1b4>)
 8005892:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800589a:	7812      	ldrb	r2, [r2, #0]
 800589c:	f3c2 0203 	ubfx	r2, r2, #0, #4
 80058a0:	b2d2      	uxtb	r2, r2
 80058a2:	40d3      	lsrs	r3, r2
                     0x1U) << 7U) | (uint32_t)diepmsk.d32);
 80058a4:	01db      	lsls	r3, r3, #7
 80058a6:	b2da      	uxtb	r2, r3
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	431a      	orrs	r2, r3
    temp = (uint16_t)temp1 & (uint16_t)0x1U;
    if ((uint16_t)temp)
    {
      ep = &xmc_device.ep[ep_num];
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
      diepint.d32 = inepint &
 80058ac:	6a3b      	ldr	r3, [r7, #32]
 80058ae:	4013      	ands	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
                     0x1U) << 7U) | (uint32_t)diepmsk.d32);
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	7b5b      	ldrb	r3, [r3, #13]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d107      	bne.n	80058ca <XMC_USBD_lHandleIEPInt+0xa2>
      {
        dieptsiz.d32 = xmc_device.endpoint_in_register[ep_num]->dieptsiz;
 80058ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80058be:	4a47      	ldr	r2, [pc, #284]	; (80059dc <XMC_USBD_lHandleIEPInt+0x1b4>)
 80058c0:	336a      	adds	r3, #106	; 0x6a
 80058c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	60bb      	str	r3, [r7, #8]
      }
      if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	7b5b      	ldrb	r3, [r3, #13]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d115      	bne.n	80058fe <XMC_USBD_lHandleIEPInt+0xd6>
      {
        if (diepint.b.emptyintr)
 80058d2:	7b3b      	ldrb	r3, [r7, #12]
 80058d4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00f      	beq.n	80058fe <XMC_USBD_lHandleIEPInt+0xd6>
        {
          uint32_t bytes;
          bytes = XMC_USBD_lWriteFifo(ep);
 80058de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058e0:	f7ff fb1e 	bl	8004f20 <XMC_USBD_lWriteFifo>
 80058e4:	61f8      	str	r0, [r7, #28]
          ep->xferCount += bytes;
 80058e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	441a      	add	r2, r3
 80058ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f0:	62da      	str	r2, [r3, #44]	; 0x2c
          ep->xferBuffer += bytes;
 80058f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	441a      	add	r2, r3
 80058fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fc:	625a      	str	r2, [r3, #36]	; 0x24
        }
      }
      if (diepint.b.xfercompl)
 80058fe:	7b3b      	ldrb	r3, [r7, #12]
 8005900:	f003 0301 	and.w	r3, r3, #1
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d04e      	beq.n	80059a8 <XMC_USBD_lHandleIEPInt+0x180>
      {
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	7b5b      	ldrb	r3, [r3, #13]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d11d      	bne.n	800594e <XMC_USBD_lHandleIEPInt+0x126>
        {
          /* update xfer values */
          if ((dieptsiz.b.pktcnt == 0U) && (dieptsiz.b.xfersize == 0U))
 8005912:	897a      	ldrh	r2, [r7, #10]
 8005914:	f641 73f8 	movw	r3, #8184	; 0x1ff8
 8005918:	4013      	ands	r3, r2
 800591a:	b29b      	uxth	r3, r3
 800591c:	2b00      	cmp	r3, #0
 800591e:	d116      	bne.n	800594e <XMC_USBD_lHandleIEPInt+0x126>
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005926:	2b00      	cmp	r3, #0
 8005928:	d111      	bne.n	800594e <XMC_USBD_lHandleIEPInt+0x126>
          {
            uint32_t Bytes = ep->xferLength - ep->xferCount;
 800592a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	61bb      	str	r3, [r7, #24]
            ep->xferCount += Bytes;
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	441a      	add	r2, r3
 800593e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005940:	62da      	str	r2, [r3, #44]	; 0x2c
            ep->xferBuffer += Bytes;
 8005942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005944:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	441a      	add	r2, r3
 800594a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594c:	625a      	str	r2, [r3, #36]	; 0x24
          }
        }
        if (ep->xferTotal==ep->xferLength)
 800594e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005950:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005956:	429a      	cmp	r2, r3
 8005958:	d123      	bne.n	80059a2 <XMC_USBD_lHandleIEPInt+0x17a>
        {
          ep->inInUse = 0U;
 800595a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595c:	685a      	ldr	r2, [r3, #4]
 800595e:	f022 0208 	bic.w	r2, r2, #8
 8005962:	605a      	str	r2, [r3, #4]
          if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	7b5b      	ldrb	r3, [r3, #13]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d10e      	bne.n	800598a <XMC_USBD_lHandleIEPInt+0x162>
          {
            /* mask fifo empty interrupt */
            xmc_device.device_register->dtknqr4_fifoemptymsk =
 800596c:	4b1b      	ldr	r3, [pc, #108]	; (80059dc <XMC_USBD_lHandleIEPInt+0x1b4>)
 800596e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
            (uint32_t)(xmc_device.device_register->dtknqr4_fifoemptymsk & ~(((uint32_t)1U << ep_num)));
 8005972:	4a1a      	ldr	r2, [pc, #104]	; (80059dc <XMC_USBD_lHandleIEPInt+0x1b4>)
 8005974:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 8005978:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800597a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800597e:	2001      	movs	r0, #1
 8005980:	fa00 f202 	lsl.w	r2, r0, r2
 8005984:	43d2      	mvns	r2, r2
 8005986:	400a      	ands	r2, r1
        {
          ep->inInUse = 0U;
          if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
          {
            /* mask fifo empty interrupt */
            xmc_device.device_register->dtknqr4_fifoemptymsk =
 8005988:	635a      	str	r2, [r3, #52]	; 0x34
            (uint32_t)(xmc_device.device_register->dtknqr4_fifoemptymsk & ~(((uint32_t)1U << ep_num)));
          }
          xmc_device.EndpointEvent_cb(0x80U | ep_num,XMC_USBD_EP_EVENT_IN);
 800598a:	4b14      	ldr	r3, [pc, #80]	; (80059dc <XMC_USBD_lHandleIEPInt+0x1b4>)
 800598c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005990:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005994:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005998:	b2d2      	uxtb	r2, r2
 800599a:	4610      	mov	r0, r2
 800599c:	2102      	movs	r1, #2
 800599e:	4798      	blx	r3
 80059a0:	e002      	b.n	80059a8 <XMC_USBD_lHandleIEPInt+0x180>
        }
        else
        {
          /* start next step of transfer */
          XMC_USBD_lStartWriteXfer(ep);
 80059a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80059a4:	f7ff fc94 	bl	80052d0 <XMC_USBD_lStartWriteXfer>
        }

      }

      XMC_USBD_ClearEventINEP((uint32_t)diepint.d32,ep_num);
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80059ae:	4610      	mov	r0, r2
 80059b0:	4619      	mov	r1, r3
 80059b2:	f000 f987 	bl	8005cc4 <XMC_USBD_ClearEventINEP>
    }
    ep_num++;
 80059b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80059ba:	3301      	adds	r3, #1
 80059bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  
  dieptsiz.d32 = 0U;
  mask = daint.ep.in;
  ep_num = 0U;
  
  while ((uint16_t)mask >> ep_num)
 80059c0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80059c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80059c6:	fa42 f303 	asr.w	r3, r2, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f47f af42 	bne.w	8005854 <XMC_USBD_lHandleIEPInt+0x2c>

      XMC_USBD_ClearEventINEP((uint32_t)diepint.d32,ep_num);
    }
    ep_num++;
  }
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_INEP);
 80059d0:	200e      	movs	r0, #14
 80059d2:	f000 f8ff 	bl	8005bd4 <XMC_USBD_ClearEvent>
}
 80059d6:	3730      	adds	r7, #48	; 0x30
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	20000650 	.word	0x20000650

080059e0 <XMC_USBD_lHandleRxFLvl>:
 * @brief RX Fifo interrupt handler
 *
 * This function handles the interrupt, when the rx fifo is not empty anymore.
 */
static void XMC_USBD_lHandleRxFLvl(void) 
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
  device_grxsts_data_t data;	
  data.d32 = xmc_device.global_register->grxstsp;
 80059e6:	4b1d      	ldr	r3, [pc, #116]	; (8005a5c <XMC_USBD_lHandleRxFLvl+0x7c>)
 80059e8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	607b      	str	r3, [r7, #4]

  switch (data.b.pktsts)
 80059f0:	79bb      	ldrb	r3, [r7, #6]
 80059f2:	f3c3 0343 	ubfx	r3, r3, #1, #4
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	3b01      	subs	r3, #1
 80059fa:	2b05      	cmp	r3, #5
 80059fc:	d82a      	bhi.n	8005a54 <XMC_USBD_lHandleRxFLvl+0x74>
 80059fe:	a201      	add	r2, pc, #4	; (adr r2, 8005a04 <XMC_USBD_lHandleRxFLvl+0x24>)
 8005a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a04:	08005a55 	.word	0x08005a55
 8005a08:	08005a1d 	.word	0x08005a1d
 8005a0c:	08005a55 	.word	0x08005a55
 8005a10:	08005a55 	.word	0x08005a55
 8005a14:	08005a55 	.word	0x08005a55
 8005a18:	08005a39 	.word	0x08005a39
    case XMC_USBD_GRXSTS_PKTSTS_GOUTNAK:
      break;
    case XMC_USBD_GRXSTS_PKTSTS_OUTCMPL:
      break;
    case XMC_USBD_GRXSTS_PKTSTS_OUTDATA:
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
 8005a1c:	793b      	ldrb	r3, [r7, #4]
 8005a1e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	461a      	mov	r2, r3
 8005a26:	88bb      	ldrh	r3, [r7, #4]
 8005a28:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	4610      	mov	r0, r2
 8005a30:	4619      	mov	r1, r3
 8005a32:	f7ff fa01 	bl	8004e38 <XMC_USBD_lReadFifo>
      break;
 8005a36:	e00e      	b.n	8005a56 <XMC_USBD_lHandleRxFLvl+0x76>
    case XMC_USBD_GRXSTS_PKTSTS_SETUP:
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
 8005a38:	793b      	ldrb	r3, [r7, #4]
 8005a3a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	461a      	mov	r2, r3
 8005a42:	88bb      	ldrh	r3, [r7, #4]
 8005a44:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	4610      	mov	r0, r2
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	f7ff f9f3 	bl	8004e38 <XMC_USBD_lReadFifo>
      break;
 8005a52:	e000      	b.n	8005a56 <XMC_USBD_lHandleRxFLvl+0x76>
    case XMC_USBD_GRXSTS_PKTSTS_SETUPCMPL:
      break;
    default:
      break;
 8005a54:	bf00      	nop
	}
  /* no need to clear */
}
 8005a56:	3708      	adds	r7, #8
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	20000650 	.word	0x20000650

08005a60 <XMC_USBD_IRQHandler>:
 *
 * The handler first checks, which global interrupt has caused the interrupt
 * and then dispatches interrupt to the corresponding sub-handler.
 */
void XMC_USBD_IRQHandler(const XMC_USBD_t *const obj) 
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  gintmsk_data_t gintmsk;
  gintsts_data_t data;
	
  gintmsk.d32 = xmc_device.global_register->gintmsk;
 8005a68:	4b4f      	ldr	r3, [pc, #316]	; (8005ba8 <XMC_USBD_IRQHandler+0x148>)
 8005a6a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	60fb      	str	r3, [r7, #12]
  data.d32 = xmc_device.global_register->gintsts & gintmsk.d32;
 8005a72:	4b4d      	ldr	r3, [pc, #308]	; (8005ba8 <XMC_USBD_IRQHandler+0x148>)
 8005a74:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8005a78:	695a      	ldr	r2, [r3, #20]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	60bb      	str	r3, [r7, #8]
	
  if (data.b.sofintr)
 8005a80:	7a3b      	ldrb	r3, [r7, #8]
 8005a82:	f003 0308 	and.w	r3, r3, #8
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d007      	beq.n	8005a9c <XMC_USBD_IRQHandler+0x3c>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SOF);
 8005a8c:	4b46      	ldr	r3, [pc, #280]	; (8005ba8 <XMC_USBD_IRQHandler+0x148>)
 8005a8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005a92:	2009      	movs	r0, #9
 8005a94:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_SOF);
 8005a96:	2009      	movs	r0, #9
 8005a98:	f000 f89c 	bl	8005bd4 <XMC_USBD_ClearEvent>
  }
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	7b5b      	ldrb	r3, [r3, #13]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d119      	bne.n	8005ad8 <XMC_USBD_IRQHandler+0x78>
  {
    if (data.b.rxstsqlvl)
 8005aa4:	7a3b      	ldrb	r3, [r7, #8]
 8005aa6:	f003 0310 	and.w	r3, r3, #16
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d013      	beq.n	8005ad8 <XMC_USBD_IRQHandler+0x78>
    {
      /* Masked that interrupt so its only done once */
      gintmsk.b.rxstsqlvl = 0U;
 8005ab0:	7b3b      	ldrb	r3, [r7, #12]
 8005ab2:	f36f 1304 	bfc	r3, #4, #1
 8005ab6:	733b      	strb	r3, [r7, #12]
      xmc_device.global_register->gintmsk = gintmsk.d32;
 8005ab8:	4b3b      	ldr	r3, [pc, #236]	; (8005ba8 <XMC_USBD_IRQHandler+0x148>)
 8005aba:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	619a      	str	r2, [r3, #24]
      XMC_USBD_lHandleRxFLvl(); /* handle the interrupt */
 8005ac2:	f7ff ff8d 	bl	80059e0 <XMC_USBD_lHandleRxFLvl>
      gintmsk.b.rxstsqlvl = 1U;
 8005ac6:	7b3b      	ldrb	r3, [r7, #12]
 8005ac8:	f043 0310 	orr.w	r3, r3, #16
 8005acc:	733b      	strb	r3, [r7, #12]
      xmc_device.global_register->gintmsk = gintmsk.d32;
 8005ace:	4b36      	ldr	r3, [pc, #216]	; (8005ba8 <XMC_USBD_IRQHandler+0x148>)
 8005ad0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	619a      	str	r2, [r3, #24]
    }
  }
  if (data.b.erlysuspend)
 8005ad8:	7a7b      	ldrb	r3, [r7, #9]
 8005ada:	f003 0304 	and.w	r3, r3, #4
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d002      	beq.n	8005aea <XMC_USBD_IRQHandler+0x8a>
  {
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_EARLYSUSPEND);
 8005ae4:	200a      	movs	r0, #10
 8005ae6:	f000 f875 	bl	8005bd4 <XMC_USBD_ClearEvent>
  }
  if (data.b.usbsuspend)
 8005aea:	7a7b      	ldrb	r3, [r7, #9]
 8005aec:	f003 0308 	and.w	r3, r3, #8
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d007      	beq.n	8005b06 <XMC_USBD_IRQHandler+0xa6>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SUSPEND);
 8005af6:	4b2c      	ldr	r3, [pc, #176]	; (8005ba8 <XMC_USBD_IRQHandler+0x148>)
 8005af8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005afc:	2006      	movs	r0, #6
 8005afe:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_SUSPEND);
 8005b00:	2006      	movs	r0, #6
 8005b02:	f000 f867 	bl	8005bd4 <XMC_USBD_ClearEvent>
  }
  if (data.b.wkupintr)
 8005b06:	7afb      	ldrb	r3, [r7, #11]
 8005b08:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d007      	beq.n	8005b22 <XMC_USBD_IRQHandler+0xc2>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_REMOTE_WAKEUP);
 8005b12:	4b25      	ldr	r3, [pc, #148]	; (8005ba8 <XMC_USBD_IRQHandler+0x148>)
 8005b14:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b18:	2008      	movs	r0, #8
 8005b1a:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_REMOTE_WAKEUP);
 8005b1c:	2008      	movs	r0, #8
 8005b1e:	f000 f859 	bl	8005bd4 <XMC_USBD_ClearEvent>
  }
  if (data.b.sessreqintr)
 8005b22:	7afb      	ldrb	r3, [r7, #11]
 8005b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00e      	beq.n	8005b4c <XMC_USBD_IRQHandler+0xec>
  {
    xmc_device.IsPowered = 1U;
 8005b2e:	4a1e      	ldr	r2, [pc, #120]	; (8005ba8 <XMC_USBD_IRQHandler+0x148>)
 8005b30:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 8005b34:	f043 0304 	orr.w	r3, r3, #4
 8005b38:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_ON);
 8005b3c:	4b1a      	ldr	r3, [pc, #104]	; (8005ba8 <XMC_USBD_IRQHandler+0x148>)
 8005b3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b42:	2000      	movs	r0, #0
 8005b44:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_POWER_ON);
 8005b46:	2000      	movs	r0, #0
 8005b48:	f000 f844 	bl	8005bd4 <XMC_USBD_ClearEvent>
  }
  if (data.b.usbreset)
 8005b4c:	7a7b      	ldrb	r3, [r7, #9]
 8005b4e:	f003 0310 	and.w	r3, r3, #16
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d002      	beq.n	8005b5e <XMC_USBD_IRQHandler+0xfe>
  {
    XMC_USBD_lHandleUSBReset(obj);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f7ff fc83 	bl	8005464 <XMC_USBD_lHandleUSBReset>
  }
  if (data.b.enumdone)
 8005b5e:	7a7b      	ldrb	r3, [r7, #9]
 8005b60:	f003 0320 	and.w	r3, r3, #32
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d001      	beq.n	8005b6e <XMC_USBD_IRQHandler+0x10e>
  {
    XMC_USBD_lHandleEnumDone();
 8005b6a:	f7ff fd45 	bl	80055f8 <XMC_USBD_lHandleEnumDone>
  }
  if (data.b.inepint)
 8005b6e:	7abb      	ldrb	r3, [r7, #10]
 8005b70:	f003 0304 	and.w	r3, r3, #4
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d002      	beq.n	8005b80 <XMC_USBD_IRQHandler+0x120>
  {
    XMC_USBD_lHandleIEPInt(obj);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f7ff fe54 	bl	8005828 <XMC_USBD_lHandleIEPInt>
  }
  if (data.b.outepintr)
 8005b80:	7abb      	ldrb	r3, [r7, #10]
 8005b82:	f003 0308 	and.w	r3, r3, #8
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d002      	beq.n	8005b92 <XMC_USBD_IRQHandler+0x132>
  {
		XMC_USBD_lHandleOEPInt(obj);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f7ff fd6f 	bl	8005670 <XMC_USBD_lHandleOEPInt>
  }
	if (data.b.otgintr)
 8005b92:	7a3b      	ldrb	r3, [r7, #8]
 8005b94:	f003 0304 	and.w	r3, r3, #4
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d001      	beq.n	8005ba2 <XMC_USBD_IRQHandler+0x142>
  {
	  XMC_USBD_lHandleOTGInt();
 8005b9e:	f7ff fd07 	bl	80055b0 <XMC_USBD_lHandleOTGInt>
  }

}
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	20000650 	.word	0x20000650

08005bac <XMC_USBD_Enable>:
 *******************************************************************************/
/**
 * Enables the USB0 module
 **/
void XMC_USBD_Enable(void) 
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	af00      	add	r7, sp, #0
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USB0);
#endif
  /* Reset and power up */
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 8005bb0:	4802      	ldr	r0, [pc, #8]	; (8005bbc <XMC_USBD_Enable+0x10>)
 8005bb2:	f7fd ff91 	bl	8003ad8 <XMC_SCU_RESET_DeassertPeripheralReset>
  XMC_SCU_POWER_EnableUsb();
 8005bb6:	f7fe f94f 	bl	8003e58 <XMC_SCU_POWER_EnableUsb>
}
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	20000080 	.word	0x20000080

08005bc0 <XMC_USBD_Disable>:

/**
 * Disables the USB0 module
 **/
void XMC_USBD_Disable(void) 
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	af00      	add	r7, sp, #0
  /* Clear Reset and power up */
  XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 8005bc4:	4802      	ldr	r0, [pc, #8]	; (8005bd0 <XMC_USBD_Disable+0x10>)
 8005bc6:	f7fd ff6b 	bl	8003aa0 <XMC_SCU_RESET_AssertPeripheralReset>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USB0);
#endif
  XMC_SCU_POWER_DisableUsb();
 8005bca:	f7fe f951 	bl	8003e70 <XMC_SCU_POWER_DisableUsb>
}
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	20000080 	.word	0x20000080

08005bd4 <XMC_USBD_ClearEvent>:

/**
 * Clear the USB device event
 **/
void XMC_USBD_ClearEvent(const XMC_USBD_EVENT_t event) 
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	4603      	mov	r3, r0
 8005bdc:	71fb      	strb	r3, [r7, #7]
  gintsts_data_t clear;
  clear.d32 = 0U;
 8005bde:	2300      	movs	r3, #0
 8005be0:	60fb      	str	r3, [r7, #12]
  switch(event)
 8005be2:	79fb      	ldrb	r3, [r7, #7]
 8005be4:	2b0d      	cmp	r3, #13
 8005be6:	d84c      	bhi.n	8005c82 <XMC_USBD_ClearEvent+0xae>
 8005be8:	a201      	add	r2, pc, #4	; (adr r2, 8005bf0 <XMC_USBD_ClearEvent+0x1c>)
 8005bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bee:	bf00      	nop
 8005bf0:	08005c29 	.word	0x08005c29
 8005bf4:	08005c83 	.word	0x08005c83
 8005bf8:	08005c83 	.word	0x08005c83
 8005bfc:	08005c83 	.word	0x08005c83
 8005c00:	08005c33 	.word	0x08005c33
 8005c04:	08005c83 	.word	0x08005c83
 8005c08:	08005c3d 	.word	0x08005c3d
 8005c0c:	08005c47 	.word	0x08005c47
 8005c10:	08005c51 	.word	0x08005c51
 8005c14:	08005c5b 	.word	0x08005c5b
 8005c18:	08005c65 	.word	0x08005c65
 8005c1c:	08005c6f 	.word	0x08005c6f
 8005c20:	08005c83 	.word	0x08005c83
 8005c24:	08005c79 	.word	0x08005c79
  {
    case (XMC_USBD_EVENT_POWER_ON):
	  clear.b.sessreqintr = 1U;
 8005c28:	7bfb      	ldrb	r3, [r7, #15]
 8005c2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c2e:	73fb      	strb	r3, [r7, #15]
	  break;
 8005c30:	e028      	b.n	8005c84 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_RESET):
	  clear.b.usbreset = 1U;
 8005c32:	7b7b      	ldrb	r3, [r7, #13]
 8005c34:	f043 0310 	orr.w	r3, r3, #16
 8005c38:	737b      	strb	r3, [r7, #13]
	  break;
 8005c3a:	e023      	b.n	8005c84 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_SUSPEND):
	  clear.b.usbsuspend = 1U;
 8005c3c:	7b7b      	ldrb	r3, [r7, #13]
 8005c3e:	f043 0308 	orr.w	r3, r3, #8
 8005c42:	737b      	strb	r3, [r7, #13]
	  break;
 8005c44:	e01e      	b.n	8005c84 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_RESUME):
	  clear.b.wkupintr = 1U;
 8005c46:	7bfb      	ldrb	r3, [r7, #15]
 8005c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c4c:	73fb      	strb	r3, [r7, #15]
	  break;
 8005c4e:	e019      	b.n	8005c84 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_REMOTE_WAKEUP):
	  clear.b.wkupintr = 1U;
 8005c50:	7bfb      	ldrb	r3, [r7, #15]
 8005c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c56:	73fb      	strb	r3, [r7, #15]
	  break;
 8005c58:	e014      	b.n	8005c84 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_SOF):
	  clear.b.sofintr = 1U;
 8005c5a:	7b3b      	ldrb	r3, [r7, #12]
 8005c5c:	f043 0308 	orr.w	r3, r3, #8
 8005c60:	733b      	strb	r3, [r7, #12]
	  break;
 8005c62:	e00f      	b.n	8005c84 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_EARLYSUSPEND):
	  clear.b.erlysuspend = 1U;
 8005c64:	7b7b      	ldrb	r3, [r7, #13]
 8005c66:	f043 0304 	orr.w	r3, r3, #4
 8005c6a:	737b      	strb	r3, [r7, #13]
	  break;
 8005c6c:	e00a      	b.n	8005c84 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_ENUMDONE):
	  clear.b.enumdone = 1U;
 8005c6e:	7b7b      	ldrb	r3, [r7, #13]
 8005c70:	f043 0320 	orr.w	r3, r3, #32
 8005c74:	737b      	strb	r3, [r7, #13]
	  break;
 8005c76:	e005      	b.n	8005c84 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_OUTEP):
	  clear.b.outepintr = 1U;
 8005c78:	7bbb      	ldrb	r3, [r7, #14]
 8005c7a:	f043 0308 	orr.w	r3, r3, #8
 8005c7e:	73bb      	strb	r3, [r7, #14]
	  break;
 8005c80:	e000      	b.n	8005c84 <XMC_USBD_ClearEvent+0xb0>
		default:
		break;
 8005c82:	bf00      	nop
	}
	xmc_device.global_register->gintsts = clear.d32;
 8005c84:	4b04      	ldr	r3, [pc, #16]	; (8005c98 <XMC_USBD_ClearEvent+0xc4>)
 8005c86:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	615a      	str	r2, [r3, #20]
}
 8005c8e:	3714      	adds	r7, #20
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr
 8005c98:	20000650 	.word	0x20000650

08005c9c <XMC_USBD_lClearEventOTG>:

/**
 * Clear the USB OTG events
 **/
static void XMC_USBD_lClearEventOTG(uint32_t event)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  gotgint_data_t clear = { .d32 = 0U};
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	60fb      	str	r3, [r7, #12]
  clear.d32 = event;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	60fb      	str	r3, [r7, #12]
  xmc_device.global_register->gotgint = clear.d32;
 8005cac:	4b04      	ldr	r3, [pc, #16]	; (8005cc0 <XMC_USBD_lClearEventOTG+0x24>)
 8005cae:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	605a      	str	r2, [r3, #4]
}
 8005cb6:	3714      	adds	r7, #20
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr
 8005cc0:	20000650 	.word	0x20000650

08005cc4 <XMC_USBD_ClearEventINEP>:

/**
 * Clear the USB IN EP events
 **/
void XMC_USBD_ClearEventINEP(uint32_t event,const uint8_t ep_num)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	460b      	mov	r3, r1
 8005cce:	70fb      	strb	r3, [r7, #3]
  diepint_data_t clear;
  clear.d32 = event;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	60fb      	str	r3, [r7, #12]
  xmc_device.endpoint_in_register[ep_num]->diepint = clear.d32;
 8005cd4:	78fb      	ldrb	r3, [r7, #3]
 8005cd6:	4a05      	ldr	r2, [pc, #20]	; (8005cec <XMC_USBD_ClearEventINEP+0x28>)
 8005cd8:	336a      	adds	r3, #106	; 0x6a
 8005cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	609a      	str	r2, [r3, #8]
}
 8005ce2:	3714      	adds	r7, #20
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	20000650 	.word	0x20000650

08005cf0 <XMC_USBD_ClearEventOUTEP>:

/**
 * Clear the USB OUT EP events
 **/
void XMC_USBD_ClearEventOUTEP(uint32_t event,const uint8_t ep_num)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	70fb      	strb	r3, [r7, #3]
  doepint_data_t clear;
  clear.d32 = event;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	60fb      	str	r3, [r7, #12]
  xmc_device.endpoint_out_register[ep_num]->doepint = clear.d32;
 8005d00:	78fb      	ldrb	r3, [r7, #3]
 8005d02:	4a06      	ldr	r2, [pc, #24]	; (8005d1c <XMC_USBD_ClearEventOUTEP+0x2c>)
 8005d04:	3370      	adds	r3, #112	; 0x70
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4413      	add	r3, r2
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	609a      	str	r2, [r3, #8]
}
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	20000650 	.word	0x20000650

08005d20 <XMC_USBD_EnableEventOUTEP>:

/**
 * Enable the USB OUT EP events
 **/
void XMC_USBD_EnableEventOUTEP(uint32_t event)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
	doepint_data_t doepint;
	doepint.d32 = event;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	60fb      	str	r3, [r7, #12]
	xmc_device.device_register->doepmsk |= doepint.d32;
 8005d2c:	4b07      	ldr	r3, [pc, #28]	; (8005d4c <XMC_USBD_EnableEventOUTEP+0x2c>)
 8005d2e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005d32:	4a06      	ldr	r2, [pc, #24]	; (8005d4c <XMC_USBD_EnableEventOUTEP+0x2c>)
 8005d34:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 8005d38:	6951      	ldr	r1, [r2, #20]
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	615a      	str	r2, [r3, #20]
}
 8005d40:	3714      	adds	r7, #20
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	20000650 	.word	0x20000650

08005d50 <XMC_USBD_EnableEventINEP>:

/**
 * Enable the USB IN EP events
 **/
void XMC_USBD_EnableEventINEP(uint32_t event)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
	diepint_data_t diepint;
	diepint.d32 = event;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	60fb      	str	r3, [r7, #12]
	xmc_device.device_register->diepmsk |= diepint.d32;
 8005d5c:	4b07      	ldr	r3, [pc, #28]	; (8005d7c <XMC_USBD_EnableEventINEP+0x2c>)
 8005d5e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005d62:	4a06      	ldr	r2, [pc, #24]	; (8005d7c <XMC_USBD_EnableEventINEP+0x2c>)
 8005d64:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 8005d68:	6911      	ldr	r1, [r2, #16]
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	611a      	str	r2, [r3, #16]
}
 8005d70:	3714      	adds	r7, #20
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	20000650 	.word	0x20000650

08005d80 <XMC_USBD_GetCapabilities>:

/**
 * Gets the USB device capabilities
 **/
XMC_USBD_CAPABILITIES_t XMC_USBD_GetCapabilities()
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
  XMC_USBD_CAPABILITIES_t cap={0U};
 8005d86:	2300      	movs	r3, #0
 8005d88:	607b      	str	r3, [r7, #4]
  cap.event_connect = 1U;
 8005d8a:	793b      	ldrb	r3, [r7, #4]
 8005d8c:	f043 0304 	orr.w	r3, r3, #4
 8005d90:	713b      	strb	r3, [r7, #4]
  cap.event_disconnect = 1U;
 8005d92:	793b      	ldrb	r3, [r7, #4]
 8005d94:	f043 0308 	orr.w	r3, r3, #8
 8005d98:	713b      	strb	r3, [r7, #4]
#if UC_SERIES == 45
  cap.event_power_off = 1U;
 8005d9a:	793b      	ldrb	r3, [r7, #4]
 8005d9c:	f043 0302 	orr.w	r3, r3, #2
 8005da0:	713b      	strb	r3, [r7, #4]
  cap.event_power_on = 1U;
 8005da2:	793b      	ldrb	r3, [r7, #4]
 8005da4:	f043 0301 	orr.w	r3, r3, #1
 8005da8:	713b      	strb	r3, [r7, #4]
#else
  cap.event_power_off = 0U;
  cap.event_power_on = 0U;
#endif
  cap.event_high_speed = 0U;
 8005daa:	793b      	ldrb	r3, [r7, #4]
 8005dac:	f36f 1345 	bfc	r3, #5, #1
 8005db0:	713b      	strb	r3, [r7, #4]
  cap.event_remote_wakeup = 1U;
 8005db2:	797b      	ldrb	r3, [r7, #5]
 8005db4:	f043 0301 	orr.w	r3, r3, #1
 8005db8:	717b      	strb	r3, [r7, #5]
  cap.event_reset = 1U;
 8005dba:	793b      	ldrb	r3, [r7, #4]
 8005dbc:	f043 0310 	orr.w	r3, r3, #16
 8005dc0:	713b      	strb	r3, [r7, #4]
  cap.event_resume = 1U;
 8005dc2:	793b      	ldrb	r3, [r7, #4]
 8005dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dc8:	713b      	strb	r3, [r7, #4]
  cap.event_suspend = 1U;
 8005dca:	793b      	ldrb	r3, [r7, #4]
 8005dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dd0:	713b      	strb	r3, [r7, #4]
  cap.reserved = 0U;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f36f 235f 	bfc	r3, #9, #23
 8005dd8:	607b      	str	r3, [r7, #4]
  return cap;
 8005dda:	687b      	ldr	r3, [r7, #4]
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <XMC_USBD_Init>:

/**
 * Initializes the USB device
 **/
XMC_USBD_STATUS_t XMC_USBD_Init(XMC_USBD_t *obj)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b08a      	sub	sp, #40	; 0x28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  gintmsk_data_t gintmsk;

  XMC_ASSERT("XMC_USBD_Init: obj.usbd_max_num_eps not of type XMC_USBD_MAX_NUM_EPS_t",
 		      XMC_USBD_CHECK_INPUT_MAX_NUM_EPS(obj->usbd_max_num_eps))
  
  XMC_USBD_Enable();
 8005df0:	f7ff fedc 	bl	8005bac <XMC_USBD_Enable>
  
  usbd_init = obj;
 8005df4:	4a87      	ldr	r2, [pc, #540]	; (8006014 <XMC_USBD_Init+0x22c>)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6013      	str	r3, [r2, #0]

  /* Filling out buffer size */
  for(i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8005dfe:	e00c      	b.n	8005e1a <XMC_USBD_Init+0x32>
  {
	  XMC_USBD_EP_OUT_BUFFERSIZE[i] = XMC_USBD_EP0_BUFFER_SIZE;
 8005e00:	4a85      	ldr	r2, [pc, #532]	; (8006018 <XMC_USBD_Init+0x230>)
 8005e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e04:	2140      	movs	r1, #64	; 0x40
 8005e06:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  XMC_USBD_EP_IN_BUFFERSIZE[i] 	= XMC_USBD_EP0_BUFFER_SIZE;
 8005e0a:	4a84      	ldr	r2, [pc, #528]	; (800601c <XMC_USBD_Init+0x234>)
 8005e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0e:	2140      	movs	r1, #64	; 0x40
 8005e10:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  XMC_USBD_Enable();
  
  usbd_init = obj;

  /* Filling out buffer size */
  for(i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8005e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e16:	3301      	adds	r3, #1
 8005e18:	627b      	str	r3, [r7, #36]	; 0x24
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1c:	2b06      	cmp	r3, #6
 8005e1e:	d9ef      	bls.n	8005e00 <XMC_USBD_Init+0x18>
	  XMC_USBD_EP_OUT_BUFFERSIZE[i] = XMC_USBD_EP0_BUFFER_SIZE;
	  XMC_USBD_EP_IN_BUFFERSIZE[i] 	= XMC_USBD_EP0_BUFFER_SIZE;
  }

  /* clear device status */
  memset((void*)&xmc_device,0x0U,sizeof(XMC_USBD_DEVICE_t));
 8005e20:	487f      	ldr	r0, [pc, #508]	; (8006020 <XMC_USBD_Init+0x238>)
 8005e22:	2100      	movs	r1, #0
 8005e24:	f44f 7202 	mov.w	r2, #520	; 0x208
 8005e28:	f006 f9d9 	bl	800c1de <memset>

  /* assign callbacks */
  xmc_device.DeviceEvent_cb = obj->cb_xmc_device_event;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	4a7b      	ldr	r2, [pc, #492]	; (8006020 <XMC_USBD_Init+0x238>)
 8005e32:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  xmc_device.EndpointEvent_cb = obj->cb_endpoint_event;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	4a79      	ldr	r2, [pc, #484]	; (8006020 <XMC_USBD_Init+0x238>)
 8005e3c:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
  XMC_USBD_BASE_ADDRESS = (uint8_t *)(obj->usbd);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	623b      	str	r3, [r7, #32]
  /* assign register address */
  xmc_device.global_register = (dwc_otg_core_global_regs_t*)(obj->usbd);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a75      	ldr	r2, [pc, #468]	; (8006020 <XMC_USBD_Init+0x238>)
 8005e4c:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
  xmc_device.device_register = ((dwc_otg_device_global_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_GLOBAL_REG_OFFSET));
 8005e50:	6a3b      	ldr	r3, [r7, #32]
 8005e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e56:	4a72      	ldr	r2, [pc, #456]	; (8006020 <XMC_USBD_Init+0x238>)
 8005e58:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8005e60:	e00c      	b.n	8005e7c <XMC_USBD_Init+0x94>
  {
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
 8005e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e64:	3348      	adds	r3, #72	; 0x48
 8005e66:	015b      	lsls	r3, r3, #5
 8005e68:	6a3a      	ldr	r2, [r7, #32]
 8005e6a:	441a      	add	r2, r3
 8005e6c:	496c      	ldr	r1, [pc, #432]	; (8006020 <XMC_USBD_Init+0x238>)
 8005e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e70:	336a      	adds	r3, #106	; 0x6a
 8005e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  xmc_device.EndpointEvent_cb = obj->cb_endpoint_event;
  XMC_USBD_BASE_ADDRESS = (uint8_t *)(obj->usbd);
  /* assign register address */
  xmc_device.global_register = (dwc_otg_core_global_regs_t*)(obj->usbd);
  xmc_device.device_register = ((dwc_otg_device_global_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_GLOBAL_REG_OFFSET));
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8005e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e78:	3301      	adds	r3, #1
 8005e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7e:	2b06      	cmp	r3, #6
 8005e80:	d9ef      	bls.n	8005e62 <XMC_USBD_Init+0x7a>
  {
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
    ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8005e82:	2300      	movs	r3, #0
 8005e84:	627b      	str	r3, [r7, #36]	; 0x24
 8005e86:	e00d      	b.n	8005ea4 <XMC_USBD_Init+0xbc>
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
    									  DWC_DEV_OUT_EP_REG_OFFSET +
 8005e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8a:	3358      	adds	r3, #88	; 0x58
 8005e8c:	015b      	lsls	r3, r3, #5
 8005e8e:	6a3a      	ldr	r2, [r7, #32]
 8005e90:	441a      	add	r2, r3
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
    ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
 8005e92:	4963      	ldr	r1, [pc, #396]	; (8006020 <XMC_USBD_Init+0x238>)
 8005e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e96:	3370      	adds	r3, #112	; 0x70
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	440b      	add	r3, r1
 8005e9c:	605a      	str	r2, [r3, #4]
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
  {
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
    ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea6:	2b06      	cmp	r3, #6
 8005ea8:	d9ee      	bls.n	8005e88 <XMC_USBD_Init+0xa0>
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
    									  DWC_DEV_OUT_EP_REG_OFFSET +
    									  ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
 8005eaa:	2300      	movs	r3, #0
 8005eac:	627b      	str	r3, [r7, #36]	; 0x24
 8005eae:	e00c      	b.n	8005eca <XMC_USBD_Init+0xe2>
  {
    xmc_device.fifo[i] = (uint32_t*)(XMC_USBD_BASE_ADDRESS +
    						XMC_USBD_TX_FIFO_REG_OFFSET +
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	031b      	lsls	r3, r3, #12
 8005eb6:	6a3a      	ldr	r2, [r7, #32]
 8005eb8:	441a      	add	r2, r3
    									  DWC_DEV_OUT_EP_REG_OFFSET +
    									  ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
  {
    xmc_device.fifo[i] = (uint32_t*)(XMC_USBD_BASE_ADDRESS +
 8005eba:	4959      	ldr	r1, [pc, #356]	; (8006020 <XMC_USBD_Init+0x238>)
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebe:	3378      	adds	r3, #120	; 0x78
 8005ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
    									  DWC_DEV_OUT_EP_REG_OFFSET +
    									  ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8005eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ecc:	2b06      	cmp	r3, #6
 8005ece:	d9ef      	bls.n	8005eb0 <XMC_USBD_Init+0xc8>
    						(i * XMC_USBD_TX_FIFO_OFFSET));
  }
  /* obj data structure for endpoint 0 */
  /* Done by driver core */
  /* configure ahb details */  
  gahbcfg.d32 = xmc_device.global_register->gahbcfg;
 8005ed0:	4b53      	ldr	r3, [pc, #332]	; (8006020 <XMC_USBD_Init+0x238>)
 8005ed2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	61fb      	str	r3, [r7, #28]
  gahbcfg.b.glblintrmsk = 1U; /* enable interrupts ( global mask ) */
 8005eda:	7f3b      	ldrb	r3, [r7, #28]
 8005edc:	f043 0301 	orr.w	r3, r3, #1
 8005ee0:	773b      	strb	r3, [r7, #28]
  gahbcfg.b.nptxfemplvl_txfemplvl = 1U;
 8005ee2:	7f3b      	ldrb	r3, [r7, #28]
 8005ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ee8:	773b      	strb	r3, [r7, #28]
  if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	7b5b      	ldrb	r3, [r3, #13]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d104      	bne.n	8005efc <XMC_USBD_Init+0x114>
  {
    /* Enable dma if needed */
    gahbcfg.b.dmaenable = 1U; /* enable dma if needed */
 8005ef2:	7f3b      	ldrb	r3, [r7, #28]
 8005ef4:	f043 0320 	orr.w	r3, r3, #32
 8005ef8:	773b      	strb	r3, [r7, #28]
 8005efa:	e003      	b.n	8005f04 <XMC_USBD_Init+0x11c>
  }
  else
  {
    gahbcfg.b.dmaenable = 0U;
 8005efc:	7f3b      	ldrb	r3, [r7, #28]
 8005efe:	f36f 1345 	bfc	r3, #5, #1
 8005f02:	773b      	strb	r3, [r7, #28]
  }
  xmc_device.global_register->gahbcfg = gahbcfg.d32;
 8005f04:	4b46      	ldr	r3, [pc, #280]	; (8006020 <XMC_USBD_Init+0x238>)
 8005f06:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8005f0a:	69fa      	ldr	r2, [r7, #28]
 8005f0c:	609a      	str	r2, [r3, #8]
  /* configure usb details */  
  gusbcfg.d32= xmc_device.global_register->gusbcfg;
 8005f0e:	4b44      	ldr	r3, [pc, #272]	; (8006020 <XMC_USBD_Init+0x238>)
 8005f10:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	61bb      	str	r3, [r7, #24]
  gusbcfg.b.force_dev_mode = 1U; /* force us into device mode */
 8005f18:	7efb      	ldrb	r3, [r7, #27]
 8005f1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f1e:	76fb      	strb	r3, [r7, #27]
  gusbcfg.b.srpcap = 1U; /* enable session request protocoll */
 8005f20:	7e7b      	ldrb	r3, [r7, #25]
 8005f22:	f043 0301 	orr.w	r3, r3, #1
 8005f26:	767b      	strb	r3, [r7, #25]
  xmc_device.global_register->gusbcfg = gusbcfg.d32;
 8005f28:	4b3d      	ldr	r3, [pc, #244]	; (8006020 <XMC_USBD_Init+0x238>)
 8005f2a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	60da      	str	r2, [r3, #12]

  /* Device init */
  /* configure device speed */  
  dcfg.d32 = xmc_device.device_register->dcfg;
 8005f32:	4b3b      	ldr	r3, [pc, #236]	; (8006020 <XMC_USBD_Init+0x238>)
 8005f34:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	617b      	str	r3, [r7, #20]
  dcfg.b.devspd = XMC_USBD_DCFG_DEVSPD_FS;
 8005f3c:	7d3b      	ldrb	r3, [r7, #20]
 8005f3e:	f043 0303 	orr.w	r3, r3, #3
 8005f42:	753b      	strb	r3, [r7, #20]
  dcfg.b.descdma = 0U;
 8005f44:	7dbb      	ldrb	r3, [r7, #22]
 8005f46:	f36f 13c7 	bfc	r3, #7, #1
 8005f4a:	75bb      	strb	r3, [r7, #22]
  xmc_device.device_register->dcfg = dcfg.d32;
 8005f4c:	4b34      	ldr	r3, [pc, #208]	; (8006020 <XMC_USBD_Init+0x238>)
 8005f4e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	601a      	str	r2, [r3, #0]
  /* configure device functions */  
  dctl.d32 = xmc_device.device_register->dctl;
 8005f56:	4b32      	ldr	r3, [pc, #200]	; (8006020 <XMC_USBD_Init+0x238>)
 8005f58:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	613b      	str	r3, [r7, #16]
  dctl.b.sftdiscon = 1U; /* disconnect the device until its connected by the user */
 8005f60:	7c3b      	ldrb	r3, [r7, #16]
 8005f62:	f043 0302 	orr.w	r3, r3, #2
 8005f66:	743b      	strb	r3, [r7, #16]
  /* all other config is done by default register value */
  xmc_device.device_register->dctl = dctl.d32;
 8005f68:	4b2d      	ldr	r3, [pc, #180]	; (8006020 <XMC_USBD_Init+0x238>)
 8005f6a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	605a      	str	r2, [r3, #4]
  /* flush the fifos for proper operation */
  XMC_USBD_lFlushTXFifo((uint8_t)0x10U); /* 0x10 == all fifos, see doc */
 8005f72:	2010      	movs	r0, #16
 8005f74:	f7ff f826 	bl	8004fc4 <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushRXFifo();
 8005f78:	f7ff f866 	bl	8005048 <XMC_USBD_lFlushRXFifo>
  /* Enable Global Interrupts */
  /* clear interrupt status bits prior to unmasking */
  xmc_device.global_register->gintmsk = 0U; /* disable all interrupts */
 8005f7c:	4b28      	ldr	r3, [pc, #160]	; (8006020 <XMC_USBD_Init+0x238>)
 8005f7e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8005f82:	2200      	movs	r2, #0
 8005f84:	619a      	str	r2, [r3, #24]
  xmc_device.global_register->gintsts = 0xFFFFFFFFU; /* clear all interrupts */
 8005f86:	4b26      	ldr	r3, [pc, #152]	; (8006020 <XMC_USBD_Init+0x238>)
 8005f88:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8005f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8005f90:	615a      	str	r2, [r3, #20]
 
  gintmsk.d32 = 0U;
 8005f92:	2300      	movs	r3, #0
 8005f94:	60fb      	str	r3, [r7, #12]
  /* enable common interrupts */
  gintmsk.b.modemismatch = 1U;
 8005f96:	7b3b      	ldrb	r3, [r7, #12]
 8005f98:	f043 0302 	orr.w	r3, r3, #2
 8005f9c:	733b      	strb	r3, [r7, #12]
  gintmsk.b.otgintr = 1U;
 8005f9e:	7b3b      	ldrb	r3, [r7, #12]
 8005fa0:	f043 0304 	orr.w	r3, r3, #4
 8005fa4:	733b      	strb	r3, [r7, #12]
  gintmsk.b.sessreqintr = 1U;
 8005fa6:	7bfb      	ldrb	r3, [r7, #15]
 8005fa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fac:	73fb      	strb	r3, [r7, #15]
  /* enable device interrupts */
  gintmsk.b.usbreset = 1U;
 8005fae:	7b7b      	ldrb	r3, [r7, #13]
 8005fb0:	f043 0310 	orr.w	r3, r3, #16
 8005fb4:	737b      	strb	r3, [r7, #13]
  gintmsk.b.enumdone = 1U;
 8005fb6:	7b7b      	ldrb	r3, [r7, #13]
 8005fb8:	f043 0320 	orr.w	r3, r3, #32
 8005fbc:	737b      	strb	r3, [r7, #13]
  gintmsk.b.erlysuspend = 1U;
 8005fbe:	7b7b      	ldrb	r3, [r7, #13]
 8005fc0:	f043 0304 	orr.w	r3, r3, #4
 8005fc4:	737b      	strb	r3, [r7, #13]
  gintmsk.b.usbsuspend = 1U;
 8005fc6:	7b7b      	ldrb	r3, [r7, #13]
 8005fc8:	f043 0308 	orr.w	r3, r3, #8
 8005fcc:	737b      	strb	r3, [r7, #13]
  gintmsk.b.wkupintr = 1U;
 8005fce:	7bfb      	ldrb	r3, [r7, #15]
 8005fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fd4:	73fb      	strb	r3, [r7, #15]
  gintmsk.b.sofintr = 1U;
 8005fd6:	7b3b      	ldrb	r3, [r7, #12]
 8005fd8:	f043 0308 	orr.w	r3, r3, #8
 8005fdc:	733b      	strb	r3, [r7, #12]
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	7b5b      	ldrb	r3, [r3, #13]
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d103      	bne.n	8005fee <XMC_USBD_Init+0x206>
  {
    gintmsk.b.rxstsqlvl = 1U;
 8005fe6:	7b3b      	ldrb	r3, [r7, #12]
 8005fe8:	f043 0310 	orr.w	r3, r3, #16
 8005fec:	733b      	strb	r3, [r7, #12]
  }
  gintmsk.b.outepintr = 1U;
 8005fee:	7bbb      	ldrb	r3, [r7, #14]
 8005ff0:	f043 0308 	orr.w	r3, r3, #8
 8005ff4:	73bb      	strb	r3, [r7, #14]
  gintmsk.b.inepintr = 1U;
 8005ff6:	7bbb      	ldrb	r3, [r7, #14]
 8005ff8:	f043 0304 	orr.w	r3, r3, #4
 8005ffc:	73bb      	strb	r3, [r7, #14]
  xmc_device.global_register->gintmsk = gintmsk.d32;
 8005ffe:	4b08      	ldr	r3, [pc, #32]	; (8006020 <XMC_USBD_Init+0x238>)
 8006000:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	619a      	str	r2, [r3, #24]
  return XMC_USBD_STATUS_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3728      	adds	r7, #40	; 0x28
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	2000064c 	.word	0x2000064c
 8006018:	2000049c 	.word	0x2000049c
 800601c:	200004b8 	.word	0x200004b8
 8006020:	20000650 	.word	0x20000650

08006024 <XMC_USBD_Uninitialize>:

/**
 * Uninitializes the USB device
 **/
XMC_USBD_STATUS_t XMC_USBD_Uninitialize() 
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
  /* Disconnect the device */
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 800602a:	4b0c      	ldr	r3, [pc, #48]	; (800605c <XMC_USBD_Uninitialize+0x38>)
 800602c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	607b      	str	r3, [r7, #4]
  dctl.b.sftdiscon = 1U;
 8006034:	793b      	ldrb	r3, [r7, #4]
 8006036:	f043 0302 	orr.w	r3, r3, #2
 800603a:	713b      	strb	r3, [r7, #4]
  xmc_device.device_register->dctl = dctl.d32;
 800603c:	4b07      	ldr	r3, [pc, #28]	; (800605c <XMC_USBD_Uninitialize+0x38>)
 800603e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	605a      	str	r2, [r3, #4]
  /* clean up */
  memset((void*)&xmc_device,0U,sizeof(xmc_device));
 8006046:	4805      	ldr	r0, [pc, #20]	; (800605c <XMC_USBD_Uninitialize+0x38>)
 8006048:	2100      	movs	r1, #0
 800604a:	f44f 7202 	mov.w	r2, #520	; 0x208
 800604e:	f006 f8c6 	bl	800c1de <memset>
  return XMC_USBD_STATUS_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3708      	adds	r7, #8
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	20000650 	.word	0x20000650

08006060 <XMC_USBD_DeviceConnect>:

/**
 * Connects the USB device to host
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceConnect() 
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
  /* Just disable softdisconnect */
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 8006066:	4b0a      	ldr	r3, [pc, #40]	; (8006090 <XMC_USBD_DeviceConnect+0x30>)
 8006068:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	607b      	str	r3, [r7, #4]
  dctl.b.sftdiscon = 0U;
 8006070:	793b      	ldrb	r3, [r7, #4]
 8006072:	f36f 0341 	bfc	r3, #1, #1
 8006076:	713b      	strb	r3, [r7, #4]
  xmc_device.device_register->dctl = dctl.d32;
 8006078:	4b05      	ldr	r3, [pc, #20]	; (8006090 <XMC_USBD_DeviceConnect+0x30>)
 800607a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	605a      	str	r2, [r3, #4]
  return XMC_USBD_STATUS_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr
 8006090:	20000650 	.word	0x20000650

08006094 <XMC_USBD_DeviceDisconnect>:

/**
 * Disconnects the USB device from host
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceDisconnect() 
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 800609a:	4b0a      	ldr	r3, [pc, #40]	; (80060c4 <XMC_USBD_DeviceDisconnect+0x30>)
 800609c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	607b      	str	r3, [r7, #4]
  dctl.b.sftdiscon = 1U;
 80060a4:	793b      	ldrb	r3, [r7, #4]
 80060a6:	f043 0302 	orr.w	r3, r3, #2
 80060aa:	713b      	strb	r3, [r7, #4]
  xmc_device.device_register->dctl = dctl.d32;
 80060ac:	4b05      	ldr	r3, [pc, #20]	; (80060c4 <XMC_USBD_DeviceDisconnect+0x30>)
 80060ae:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	605a      	str	r2, [r3, #4]
  return XMC_USBD_STATUS_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr
 80060c4:	20000650 	.word	0x20000650

080060c8 <XMC_USBD_DeviceGetState>:

/**
 * Gets the USB device state.
 **/
XMC_USBD_STATE_t XMC_USBD_DeviceGetState(const XMC_USBD_t *const obj) 
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  XMC_USBD_STATE_t state={0U};
 80060d0:	2300      	movs	r3, #0
 80060d2:	60fb      	str	r3, [r7, #12]
  state.speed = XMC_USBD_SPEED_FULL;
 80060d4:	7b3b      	ldrb	r3, [r7, #12]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f362 03c4 	bfi	r3, r2, #3, #2
 80060dc:	733b      	strb	r3, [r7, #12]
  state.connected = xmc_device.IsConnected;
 80060de:	4b12      	ldr	r3, [pc, #72]	; (8006128 <XMC_USBD_DeviceGetState+0x60>)
 80060e0:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80060e4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80060e8:	b2da      	uxtb	r2, r3
 80060ea:	7b3b      	ldrb	r3, [r7, #12]
 80060ec:	f362 0341 	bfi	r3, r2, #1, #1
 80060f0:	733b      	strb	r3, [r7, #12]
  state.active = XMC_USBD_lDeviceActive(obj);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f7fe fe6a 	bl	8004dcc <XMC_USBD_lDeviceActive>
 80060f8:	4603      	mov	r3, r0
 80060fa:	f003 0301 	and.w	r3, r3, #1
 80060fe:	b2da      	uxtb	r2, r3
 8006100:	7b3b      	ldrb	r3, [r7, #12]
 8006102:	f362 0382 	bfi	r3, r2, #2, #1
 8006106:	733b      	strb	r3, [r7, #12]
  state.powered = xmc_device.IsPowered;
 8006108:	4b07      	ldr	r3, [pc, #28]	; (8006128 <XMC_USBD_DeviceGetState+0x60>)
 800610a:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800610e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006112:	b2da      	uxtb	r2, r3
 8006114:	7b3b      	ldrb	r3, [r7, #12]
 8006116:	f362 0300 	bfi	r3, r2, #0, #1
 800611a:	733b      	strb	r3, [r7, #12]
  return state;
 800611c:	68fb      	ldr	r3, [r7, #12]
}
 800611e:	4618      	mov	r0, r3
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	20000650 	.word	0x20000650

0800612c <XMC_USBD_EndpointReadStart>:

/**
 * Prepares the endpoint to read next OUT packet
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointReadStart(const uint8_t ep_addr, uint32_t size) 
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	4603      	mov	r3, r0
 8006134:	6039      	str	r1, [r7, #0]
 8006136:	71fb      	strb	r3, [r7, #7]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK];
 8006138:	79fb      	ldrb	r3, [r7, #7]
 800613a:	f003 030f 	and.w	r3, r3, #15
 800613e:	2234      	movs	r2, #52	; 0x34
 8006140:	fb02 f303 	mul.w	r3, r2, r3
 8006144:	4a1b      	ldr	r2, [pc, #108]	; (80061b4 <XMC_USBD_EndpointReadStart+0x88>)
 8006146:	4413      	add	r3, r2
 8006148:	60bb      	str	r3, [r7, #8]
  XMC_USBD_STATUS_t result;
	
  if (ep->outInUse || !ep->isConfigured)
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	091b      	lsrs	r3, r3, #4
 8006150:	f003 0301 	and.w	r3, r3, #1
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	d106      	bne.n	8006168 <XMC_USBD_EndpointReadStart+0x3c>
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	791b      	ldrb	r3, [r3, #4]
 800615e:	f003 0304 	and.w	r3, r3, #4
 8006162:	b2db      	uxtb	r3, r3
 8006164:	2b00      	cmp	r3, #0
 8006166:	d102      	bne.n	800616e <XMC_USBD_EndpointReadStart+0x42>
  {
    result = XMC_USBD_STATUS_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	73fb      	strb	r3, [r7, #15]
 800616c:	e01c      	b.n	80061a8 <XMC_USBD_EndpointReadStart+0x7c>
  }
  else
  {
    /* short the length to buffer size if needed */
    if (size > ep->outBufferSize)
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	695a      	ldr	r2, [r3, #20]
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	429a      	cmp	r2, r3
 8006176:	d202      	bcs.n	800617e <XMC_USBD_EndpointReadStart+0x52>
    {
      size = ep->outBufferSize;
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	695b      	ldr	r3, [r3, #20]
 800617c:	603b      	str	r3, [r7, #0]
    }
    /* set ep values */
    ep->xferTotal = size;
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	683a      	ldr	r2, [r7, #0]
 8006182:	631a      	str	r2, [r3, #48]	; 0x30
    ep->xferCount = 0U;
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	2200      	movs	r2, #0
 8006188:	62da      	str	r2, [r3, #44]	; 0x2c
    ep->xferLength = 0U;
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	2200      	movs	r2, #0
 800618e:	629a      	str	r2, [r3, #40]	; 0x28
    ep->xferBuffer = ep->outBuffer;
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	68da      	ldr	r2, [r3, #12]
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	625a      	str	r2, [r3, #36]	; 0x24
    ep->outBytesAvailable = 0U;
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	2200      	movs	r2, #0
 800619c:	611a      	str	r2, [r3, #16]
    XMC_USBD_lStartReadXfer(ep);
 800619e:	68b8      	ldr	r0, [r7, #8]
 80061a0:	f7fe ffda 	bl	8005158 <XMC_USBD_lStartReadXfer>
    result= XMC_USBD_STATUS_OK;
 80061a4:	2300      	movs	r3, #0
 80061a6:	73fb      	strb	r3, [r7, #15]
  }
  return result;
 80061a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	20000650 	.word	0x20000650

080061b8 <XMC_USBD_EndpointRead>:

/**
 * Reads the number of bytes from the USB OUT endpoint
 **/
int32_t XMC_USBD_EndpointRead(const uint8_t ep_num,uint8_t * buffer,uint32_t length) 
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b086      	sub	sp, #24
 80061bc:	af00      	add	r7, sp, #0
 80061be:	4603      	mov	r3, r0
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
 80061c4:	73fb      	strb	r3, [r7, #15]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_num];
 80061c6:	7bfb      	ldrb	r3, [r7, #15]
 80061c8:	2234      	movs	r2, #52	; 0x34
 80061ca:	fb02 f303 	mul.w	r3, r2, r3
 80061ce:	4a17      	ldr	r2, [pc, #92]	; (800622c <XMC_USBD_EndpointRead+0x74>)
 80061d0:	4413      	add	r3, r2
 80061d2:	617b      	str	r3, [r7, #20]
  if (length > ep->outBytesAvailable)
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	691a      	ldr	r2, [r3, #16]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d202      	bcs.n	80061e4 <XMC_USBD_EndpointRead+0x2c>
  {
    length = ep->outBytesAvailable;
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	607b      	str	r3, [r7, #4]
  }
  memcpy(buffer,&ep->outBuffer[ep->outOffset],length);
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	68da      	ldr	r2, [r3, #12]
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	699b      	ldr	r3, [r3, #24]
 80061ec:	4413      	add	r3, r2
 80061ee:	68b8      	ldr	r0, [r7, #8]
 80061f0:	4619      	mov	r1, r3
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	f005 ffe8 	bl	800c1c8 <memcpy>
  ep->outBytesAvailable -= length;
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	691a      	ldr	r2, [r3, #16]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	1ad2      	subs	r2, r2, r3
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	611a      	str	r2, [r3, #16]
  if (ep->outBytesAvailable)
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d006      	beq.n	800621a <XMC_USBD_EndpointRead+0x62>
  {
    ep->outOffset += length;
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	699a      	ldr	r2, [r3, #24]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	441a      	add	r2, r3
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	619a      	str	r2, [r3, #24]
 8006218:	e002      	b.n	8006220 <XMC_USBD_EndpointRead+0x68>
  }
  else
  {
    ep->outOffset = 0U;
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	2200      	movs	r2, #0
 800621e:	619a      	str	r2, [r3, #24]
  }
  return (int32_t)length;
 8006220:	687b      	ldr	r3, [r7, #4]
}
 8006222:	4618      	mov	r0, r3
 8006224:	3718      	adds	r7, #24
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	20000650 	.word	0x20000650

08006230 <XMC_USBD_EndpointWrite>:

/**
 * Writes number of bytes in to the USB IN endpoint.
 **/
int32_t XMC_USBD_EndpointWrite(const uint8_t ep_num,const uint8_t * buffer,uint32_t length) 
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b086      	sub	sp, #24
 8006234:	af00      	add	r7, sp, #0
 8006236:	4603      	mov	r3, r0
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]
 800623c:	73fb      	strb	r3, [r7, #15]
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num & (uint8_t)XMC_USBD_EP_NUM_MASK];
 800623e:	7bfb      	ldrb	r3, [r7, #15]
 8006240:	f003 030f 	and.w	r3, r3, #15
 8006244:	2234      	movs	r2, #52	; 0x34
 8006246:	fb02 f303 	mul.w	r3, r2, r3
 800624a:	4a22      	ldr	r2, [pc, #136]	; (80062d4 <XMC_USBD_EndpointWrite+0xa4>)
 800624c:	4413      	add	r3, r2
 800624e:	613b      	str	r3, [r7, #16]
  int32_t result;
  if (!ep->isConfigured)
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	791b      	ldrb	r3, [r3, #4]
 8006254:	f003 0304 	and.w	r3, r3, #4
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	d102      	bne.n	8006264 <XMC_USBD_EndpointWrite+0x34>
  {
    result = (int32_t)XMC_USBD_STATUS_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	617b      	str	r3, [r7, #20]
 8006262:	e031      	b.n	80062c8 <XMC_USBD_EndpointWrite+0x98>
  }
  else if (ep->inInUse == 1U)
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	08db      	lsrs	r3, r3, #3
 800626a:	f003 0301 	and.w	r3, r3, #1
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b01      	cmp	r3, #1
 8006272:	d102      	bne.n	800627a <XMC_USBD_EndpointWrite+0x4a>
  {
    result=(int32_t)0;
 8006274:	2300      	movs	r3, #0
 8006276:	617b      	str	r3, [r7, #20]
 8006278:	e026      	b.n	80062c8 <XMC_USBD_EndpointWrite+0x98>
  }
  else
  {
    if (length > ep->inBufferSize)
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	6a1a      	ldr	r2, [r3, #32]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	429a      	cmp	r2, r3
 8006282:	d202      	bcs.n	800628a <XMC_USBD_EndpointWrite+0x5a>
    {
      length = ep->inBufferSize;
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	6a1b      	ldr	r3, [r3, #32]
 8006288:	607b      	str	r3, [r7, #4]
    }
    /* copy data into input buffer for DMA and FIFO mode */
		memcpy(ep->inBuffer,(const void *)buffer,length);
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	69db      	ldr	r3, [r3, #28]
 800628e:	4618      	mov	r0, r3
 8006290:	68b9      	ldr	r1, [r7, #8]
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	f005 ff98 	bl	800c1c8 <memcpy>
		ep->xferBuffer = ep->inBuffer;
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	69da      	ldr	r2, [r3, #28]
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	625a      	str	r2, [r3, #36]	; 0x24
    ep->xferTotal = length;
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	631a      	str	r2, [r3, #48]	; 0x30
    /* set transfer values */
    ep->xferLength = 0U;
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	2200      	movs	r2, #0
 80062aa:	629a      	str	r2, [r3, #40]	; 0x28
    ep->xferCount = 0U;
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	2200      	movs	r2, #0
 80062b0:	62da      	str	r2, [r3, #44]	; 0x2c
    ep->inInUse = 1U;
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	685a      	ldr	r2, [r3, #4]
 80062b6:	f042 0208 	orr.w	r2, r2, #8
 80062ba:	605a      	str	r2, [r3, #4]
    /* start the transfer */
    XMC_USBD_lStartWriteXfer(ep);
 80062bc:	6938      	ldr	r0, [r7, #16]
 80062be:	f7ff f807 	bl	80052d0 <XMC_USBD_lStartWriteXfer>
    result=(int32_t)ep->xferTotal;
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c6:	617b      	str	r3, [r7, #20]
  }
  return result;
 80062c8:	697b      	ldr	r3, [r7, #20]
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3718      	adds	r7, #24
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	20000650 	.word	0x20000650

080062d8 <XMC_USBD_DeviceSetAddress>:

/**
 * Sets the USB device address.
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceSetAddress(const uint8_t address,const XMC_USBD_SET_ADDRESS_STAGE_t stage) 
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	4603      	mov	r3, r0
 80062e0:	460a      	mov	r2, r1
 80062e2:	71fb      	strb	r3, [r7, #7]
 80062e4:	4613      	mov	r3, r2
 80062e6:	71bb      	strb	r3, [r7, #6]
  dcfg_data_t data;
  data.d32 = xmc_device.device_register->dcfg;
 80062e8:	4b0d      	ldr	r3, [pc, #52]	; (8006320 <XMC_USBD_DeviceSetAddress+0x48>)
 80062ea:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	60fb      	str	r3, [r7, #12]
  if (stage == XMC_USBD_SET_ADDRESS_STAGE_SETUP)
 80062f2:	79bb      	ldrb	r3, [r7, #6]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d10c      	bne.n	8006312 <XMC_USBD_DeviceSetAddress+0x3a>
  {
    data.b.devaddr = address;
 80062f8:	79fb      	ldrb	r3, [r7, #7]
 80062fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062fe:	b2da      	uxtb	r2, r3
 8006300:	89bb      	ldrh	r3, [r7, #12]
 8006302:	f362 130a 	bfi	r3, r2, #4, #7
 8006306:	81bb      	strh	r3, [r7, #12]
    xmc_device.device_register->dcfg = data.d32;
 8006308:	4b05      	ldr	r3, [pc, #20]	; (8006320 <XMC_USBD_DeviceSetAddress+0x48>)
 800630a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	601a      	str	r2, [r3, #0]
  }
	return XMC_USBD_STATUS_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3714      	adds	r7, #20
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr
 8006320:	20000650 	.word	0x20000650

08006324 <XMC_USBD_EndpointStall>:

/**
 * Set/clear stall on the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointStall(const uint8_t ep_addr, const bool stall) 
{
 8006324:	b480      	push	{r7}
 8006326:	b085      	sub	sp, #20
 8006328:	af00      	add	r7, sp, #0
 800632a:	4603      	mov	r3, r0
 800632c:	460a      	mov	r2, r1
 800632e:	71fb      	strb	r3, [r7, #7]
 8006330:	4613      	mov	r3, r2
 8006332:	71bb      	strb	r3, [r7, #6]
  depctl_data_t data;
  XMC_USBD_EP_t *ep = &xmc_device.ep[(ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK)];
 8006334:	79fb      	ldrb	r3, [r7, #7]
 8006336:	f003 030f 	and.w	r3, r3, #15
 800633a:	2234      	movs	r2, #52	; 0x34
 800633c:	fb02 f303 	mul.w	r3, r2, r3
 8006340:	4a4a      	ldr	r2, [pc, #296]	; (800646c <XMC_USBD_EndpointStall+0x148>)
 8006342:	4413      	add	r3, r2
 8006344:	60fb      	str	r3, [r7, #12]
  if (stall)
 8006346:	79bb      	ldrb	r3, [r7, #6]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d040      	beq.n	80063ce <XMC_USBD_EndpointStall+0xaa>
  {
    if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
 800634c:	79fb      	ldrb	r3, [r7, #7]
 800634e:	b25b      	sxtb	r3, r3
 8006350:	2b00      	cmp	r3, #0
 8006352:	da1a      	bge.n	800638a <XMC_USBD_EndpointStall+0x66>
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800635c:	b2db      	uxtb	r3, r3
 800635e:	4a43      	ldr	r2, [pc, #268]	; (800646c <XMC_USBD_EndpointStall+0x148>)
 8006360:	336a      	adds	r3, #106	; 0x6a
 8006362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	60bb      	str	r3, [r7, #8]
      data.b.stall = 1U;
 800636a:	7abb      	ldrb	r3, [r7, #10]
 800636c:	f043 0320 	orr.w	r3, r3, #32
 8006370:	72bb      	strb	r3, [r7, #10]
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800637a:	b2db      	uxtb	r3, r3
 800637c:	4a3b      	ldr	r2, [pc, #236]	; (800646c <XMC_USBD_EndpointStall+0x148>)
 800637e:	336a      	adds	r3, #106	; 0x6a
 8006380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006384:	68ba      	ldr	r2, [r7, #8]
 8006386:	601a      	str	r2, [r3, #0]
 8006388:	e01b      	b.n	80063c2 <XMC_USBD_EndpointStall+0x9e>
    }
    else
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8006392:	b2db      	uxtb	r3, r3
 8006394:	4a35      	ldr	r2, [pc, #212]	; (800646c <XMC_USBD_EndpointStall+0x148>)
 8006396:	3370      	adds	r3, #112	; 0x70
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	4413      	add	r3, r2
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	60bb      	str	r3, [r7, #8]
      data.b.stall = 1U;
 80063a2:	7abb      	ldrb	r3, [r7, #10]
 80063a4:	f043 0320 	orr.w	r3, r3, #32
 80063a8:	72bb      	strb	r3, [r7, #10]
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	4a2d      	ldr	r2, [pc, #180]	; (800646c <XMC_USBD_EndpointStall+0x148>)
 80063b6:	3370      	adds	r3, #112	; 0x70
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	4413      	add	r3, r2
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	601a      	str	r2, [r3, #0]
    }
    ep->isStalled = 1U;
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	7913      	ldrb	r3, [r2, #4]
 80063c6:	f043 0320 	orr.w	r3, r3, #32
 80063ca:	7113      	strb	r3, [r2, #4]
 80063cc:	e047      	b.n	800645e <XMC_USBD_EndpointStall+0x13a>
  }
  else
  {
    /* just clear stall bit */
		if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
 80063ce:	79fb      	ldrb	r3, [r7, #7]
 80063d0:	b25b      	sxtb	r3, r3
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	da1e      	bge.n	8006414 <XMC_USBD_EndpointStall+0xf0>
		{
			data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	4a22      	ldr	r2, [pc, #136]	; (800646c <XMC_USBD_EndpointStall+0x148>)
 80063e2:	336a      	adds	r3, #106	; 0x6a
 80063e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	60bb      	str	r3, [r7, #8]
			data.b.stall = 0U;
 80063ec:	7abb      	ldrb	r3, [r7, #10]
 80063ee:	f36f 1345 	bfc	r3, #5, #1
 80063f2:	72bb      	strb	r3, [r7, #10]
			data.b.setd0pid = 1U; /* reset pid to 0 */
 80063f4:	7afb      	ldrb	r3, [r7, #11]
 80063f6:	f043 0310 	orr.w	r3, r3, #16
 80063fa:	72fb      	strb	r3, [r7, #11]
			xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8006404:	b2db      	uxtb	r3, r3
 8006406:	4a19      	ldr	r2, [pc, #100]	; (800646c <XMC_USBD_EndpointStall+0x148>)
 8006408:	336a      	adds	r3, #106	; 0x6a
 800640a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800640e:	68ba      	ldr	r2, [r7, #8]
 8006410:	601a      	str	r2, [r3, #0]
 8006412:	e01f      	b.n	8006454 <XMC_USBD_EndpointStall+0x130>
		}
		else
		{
			data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800641c:	b2db      	uxtb	r3, r3
 800641e:	4a13      	ldr	r2, [pc, #76]	; (800646c <XMC_USBD_EndpointStall+0x148>)
 8006420:	3370      	adds	r3, #112	; 0x70
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	4413      	add	r3, r2
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	60bb      	str	r3, [r7, #8]
			data.b.stall = 0U;
 800642c:	7abb      	ldrb	r3, [r7, #10]
 800642e:	f36f 1345 	bfc	r3, #5, #1
 8006432:	72bb      	strb	r3, [r7, #10]
			data.b.setd0pid = 1U; /* reset pid to 0 */
 8006434:	7afb      	ldrb	r3, [r7, #11]
 8006436:	f043 0310 	orr.w	r3, r3, #16
 800643a:	72fb      	strb	r3, [r7, #11]
			xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8006444:	b2db      	uxtb	r3, r3
 8006446:	4a09      	ldr	r2, [pc, #36]	; (800646c <XMC_USBD_EndpointStall+0x148>)
 8006448:	3370      	adds	r3, #112	; 0x70
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	4413      	add	r3, r2
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	601a      	str	r2, [r3, #0]
		}
		ep->isStalled = 0U;
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	7913      	ldrb	r3, [r2, #4]
 8006458:	f36f 1345 	bfc	r3, #5, #1
 800645c:	7113      	strb	r3, [r2, #4]
	}
	return XMC_USBD_STATUS_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3714      	adds	r7, #20
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr
 800646c:	20000650 	.word	0x20000650

08006470 <XMC_USBD_EndpointAbort>:

/**
 * Aborts the data transfer on the selected endpoint
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointAbort(const uint8_t ep_addr) {
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	4603      	mov	r3, r0
 8006478:	71fb      	strb	r3, [r7, #7]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 800647a:	79fb      	ldrb	r3, [r7, #7]
 800647c:	f003 030f 	and.w	r3, r3, #15
 8006480:	2234      	movs	r2, #52	; 0x34
 8006482:	fb02 f303 	mul.w	r3, r2, r3
 8006486:	4a1b      	ldr	r2, [pc, #108]	; (80064f4 <XMC_USBD_EndpointAbort+0x84>)
 8006488:	4413      	add	r3, r2
 800648a:	60fb      	str	r3, [r7, #12]
  if (ep->address_u.address_st.direction)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006494:	b2db      	uxtb	r3, r3
 8006496:	2b00      	cmp	r3, #0
 8006498:	d004      	beq.n	80064a4 <XMC_USBD_EndpointAbort+0x34>
  {
    ep->inInUse = 0U;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	685a      	ldr	r2, [r3, #4]
 800649e:	f022 0208 	bic.w	r2, r2, #8
 80064a2:	605a      	str	r2, [r3, #4]
  }
  if (!ep->address_u.address_st.direction)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d104      	bne.n	80064bc <XMC_USBD_EndpointAbort+0x4c>
  {
    ep->outInUse = 0U;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	685a      	ldr	r2, [r3, #4]
 80064b6:	f022 0210 	bic.w	r2, r2, #16
 80064ba:	605a      	str	r2, [r3, #4]
  }
  ep->isStalled = 0U;
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	7913      	ldrb	r3, [r2, #4]
 80064c0:	f36f 1345 	bfc	r3, #5, #1
 80064c4:	7113      	strb	r3, [r2, #4]
  ep->outBytesAvailable = 0U;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	611a      	str	r2, [r3, #16]
  ep->outOffset = 0U;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	619a      	str	r2, [r3, #24]
  ep->xferLength = 0U;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2200      	movs	r2, #0
 80064d6:	629a      	str	r2, [r3, #40]	; 0x28
  ep->xferCount = 0U;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	62da      	str	r2, [r3, #44]	; 0x2c
  ep->xferTotal = 0U;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2200      	movs	r2, #0
 80064e2:	631a      	str	r2, [r3, #48]	; 0x30

  return XMC_USBD_STATUS_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3714      	adds	r7, #20
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	20000650 	.word	0x20000650

080064f8 <XMC_USBD_EndpointConfigure>:
 * Configures the given endpoint
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointConfigure(const uint8_t ep_addr,
		                                     const XMC_USBD_ENDPOINT_TYPE_t ep_type,
		                                     const uint16_t ep_max_packet_size) 
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b086      	sub	sp, #24
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	4603      	mov	r3, r0
 8006500:	71fb      	strb	r3, [r7, #7]
 8006502:	460b      	mov	r3, r1
 8006504:	71bb      	strb	r3, [r7, #6]
 8006506:	4613      	mov	r3, r2
 8006508:	80bb      	strh	r3, [r7, #4]
  daint_data_t daintmsk;
  XMC_USBD_EP_t *ep;
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 800650a:	4b98      	ldr	r3, [pc, #608]	; (800676c <XMC_USBD_EndpointConfigure+0x274>)
 800650c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8006510:	69db      	ldr	r3, [r3, #28]
 8006512:	613b      	str	r3, [r7, #16]
  ep =&xmc_device.ep[ep_addr & (uint32_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 8006514:	79fb      	ldrb	r3, [r7, #7]
 8006516:	f003 030f 	and.w	r3, r3, #15
 800651a:	2234      	movs	r2, #52	; 0x34
 800651c:	fb02 f303 	mul.w	r3, r2, r3
 8006520:	4a92      	ldr	r2, [pc, #584]	; (800676c <XMC_USBD_EndpointConfigure+0x274>)
 8006522:	4413      	add	r3, r2
 8006524:	617b      	str	r3, [r7, #20]
  memset((void*)ep,0x0U,sizeof(XMC_USBD_EP_t)); /* clear endpoint structure */
 8006526:	6978      	ldr	r0, [r7, #20]
 8006528:	2100      	movs	r1, #0
 800652a:	2234      	movs	r2, #52	; 0x34
 800652c:	f005 fe57 	bl	800c1de <memset>
  /* do ep configuration */
  ep->address_u.address = ep_addr;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	79fa      	ldrb	r2, [r7, #7]
 8006534:	701a      	strb	r2, [r3, #0]
  ep->isConfigured = 1U;
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	7913      	ldrb	r3, [r2, #4]
 800653a:	f043 0304 	orr.w	r3, r3, #4
 800653e:	7113      	strb	r3, [r2, #4]
  ep->maxPacketSize = (uint8_t)ep_max_packet_size;
 8006540:	88bb      	ldrh	r3, [r7, #4]
 8006542:	b2db      	uxtb	r3, r3
 8006544:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006548:	b2d9      	uxtb	r1, r3
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	6853      	ldr	r3, [r2, #4]
 800654e:	f361 23d1 	bfi	r3, r1, #11, #7
 8006552:	6053      	str	r3, [r2, #4]
  if (ep->address_u.address != 0U)
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d007      	beq.n	800656c <XMC_USBD_EndpointConfigure+0x74>
  {
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE;
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	6893      	ldr	r3, [r2, #8]
 8006560:	f64f 71c0 	movw	r1, #65472	; 0xffc0
 8006564:	f361 0312 	bfi	r3, r1, #0, #19
 8006568:	6093      	str	r3, [r2, #8]
 800656a:	e005      	b.n	8006578 <XMC_USBD_EndpointConfigure+0x80>
  }
  else
  {
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE_EP0;
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	6893      	ldr	r3, [r2, #8]
 8006570:	2140      	movs	r1, #64	; 0x40
 8006572:	f361 0312 	bfi	r3, r1, #0, #19
 8006576:	6093      	str	r3, [r2, #8]
  }
  /* transfer buffer */
  ep->inBuffer = XMC_USBD_EP_IN_BUFFER[ep->address_u.address_st.number];
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8006580:	b2db      	uxtb	r3, r3
 8006582:	021b      	lsls	r3, r3, #8
 8006584:	4a7a      	ldr	r2, [pc, #488]	; (8006770 <XMC_USBD_EndpointConfigure+0x278>)
 8006586:	441a      	add	r2, r3
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	61da      	str	r2, [r3, #28]
  ep->outBuffer = XMC_USBD_EP_OUT_BUFFER[ep->address_u.address_st.number];
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8006594:	b2db      	uxtb	r3, r3
 8006596:	021b      	lsls	r3, r3, #8
 8006598:	4a76      	ldr	r2, [pc, #472]	; (8006774 <XMC_USBD_EndpointConfigure+0x27c>)
 800659a:	441a      	add	r2, r3
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	60da      	str	r2, [r3, #12]
  /* buffer size*/
  ep->inBufferSize = XMC_USBD_EP_IN_BUFFERSIZE[ep->address_u.address_st.number];
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	461a      	mov	r2, r3
 80065ac:	4b72      	ldr	r3, [pc, #456]	; (8006778 <XMC_USBD_EndpointConfigure+0x280>)
 80065ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	621a      	str	r2, [r3, #32]
  ep->outBufferSize = XMC_USBD_EP_OUT_BUFFERSIZE[ep->address_u.address_st.number];
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	461a      	mov	r2, r3
 80065c2:	4b6e      	ldr	r3, [pc, #440]	; (800677c <XMC_USBD_EndpointConfigure+0x284>)
 80065c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	615a      	str	r2, [r3, #20]
  /* is in */
  if ((ep->address_u.address_st.direction == 1U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d102      	bne.n	80065e0 <XMC_USBD_EndpointConfigure+0xe8>
 80065da:	79bb      	ldrb	r3, [r7, #6]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d17a      	bne.n	80066d6 <XMC_USBD_EndpointConfigure+0x1de>
  {
    depctl_data_t data;
    data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	4a60      	ldr	r2, [pc, #384]	; (800676c <XMC_USBD_EndpointConfigure+0x274>)
 80065ec:	336a      	adds	r3, #106	; 0x6a
 80065ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	60fb      	str	r3, [r7, #12]
		/*enable endpoint */
		data.b.usbactep = 1U;
 80065f6:	7b7b      	ldrb	r3, [r7, #13]
 80065f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065fc:	737b      	strb	r3, [r7, #13]
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
 80065fe:	79bb      	ldrb	r3, [r7, #6]
 8006600:	f003 0303 	and.w	r3, r3, #3
 8006604:	b2da      	uxtb	r2, r3
 8006606:	7bbb      	ldrb	r3, [r7, #14]
 8006608:	f362 0383 	bfi	r3, r2, #2, #2
 800660c:	73bb      	strb	r3, [r7, #14]
		/* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 800660e:	79bb      	ldrb	r3, [r7, #6]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d124      	bne.n	800665e <XMC_USBD_EndpointConfigure+0x166>
    {
			switch(ep_max_packet_size)
 8006614:	88bb      	ldrh	r3, [r7, #4]
 8006616:	2b10      	cmp	r3, #16
 8006618:	d014      	beq.n	8006644 <XMC_USBD_EndpointConfigure+0x14c>
 800661a:	2b10      	cmp	r3, #16
 800661c:	dc02      	bgt.n	8006624 <XMC_USBD_EndpointConfigure+0x12c>
 800661e:	2b08      	cmp	r3, #8
 8006620:	d016      	beq.n	8006650 <XMC_USBD_EndpointConfigure+0x158>
				break;
				case (8U):
				data.b.mps = 0x3U;
				break;
				default:
				break;
 8006622:	e01b      	b.n	800665c <XMC_USBD_EndpointConfigure+0x164>
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
		/* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
    {
			switch(ep_max_packet_size)
 8006624:	2b20      	cmp	r3, #32
 8006626:	d007      	beq.n	8006638 <XMC_USBD_EndpointConfigure+0x140>
 8006628:	2b40      	cmp	r3, #64	; 0x40
 800662a:	d000      	beq.n	800662e <XMC_USBD_EndpointConfigure+0x136>
				break;
				case (8U):
				data.b.mps = 0x3U;
				break;
				default:
				break;
 800662c:	e016      	b.n	800665c <XMC_USBD_EndpointConfigure+0x164>
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
    {
			switch(ep_max_packet_size)
			{
				case (64U):
				data.b.mps = 0x0U;
 800662e:	89bb      	ldrh	r3, [r7, #12]
 8006630:	f36f 030a 	bfc	r3, #0, #11
 8006634:	81bb      	strh	r3, [r7, #12]
				break;
 8006636:	e011      	b.n	800665c <XMC_USBD_EndpointConfigure+0x164>
				case (32U):
				data.b.mps = 0x1U;
 8006638:	89bb      	ldrh	r3, [r7, #12]
 800663a:	2201      	movs	r2, #1
 800663c:	f362 030a 	bfi	r3, r2, #0, #11
 8006640:	81bb      	strh	r3, [r7, #12]
				break;
 8006642:	e00b      	b.n	800665c <XMC_USBD_EndpointConfigure+0x164>
				case (16U):
				data.b.mps = 0x2U;
 8006644:	89bb      	ldrh	r3, [r7, #12]
 8006646:	2202      	movs	r2, #2
 8006648:	f362 030a 	bfi	r3, r2, #0, #11
 800664c:	81bb      	strh	r3, [r7, #12]
				break;
 800664e:	e005      	b.n	800665c <XMC_USBD_EndpointConfigure+0x164>
				case (8U):
				data.b.mps = 0x3U;
 8006650:	89bb      	ldrh	r3, [r7, #12]
 8006652:	2203      	movs	r2, #3
 8006654:	f362 030a 	bfi	r3, r2, #0, #11
 8006658:	81bb      	strh	r3, [r7, #12]
				break;
 800665a:	bf00      	nop
 800665c:	e007      	b.n	800666e <XMC_USBD_EndpointConfigure+0x176>
				break;
			}
		}
		else
		{
			data.b.mps = ep_max_packet_size;
 800665e:	88bb      	ldrh	r3, [r7, #4]
 8006660:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006664:	b29a      	uxth	r2, r3
 8006666:	89bb      	ldrh	r3, [r7, #12]
 8006668:	f362 030a 	bfi	r3, r2, #0, #11
 800666c:	81bb      	strh	r3, [r7, #12]
		}
		/* set first data0 pid */
		data.b.setd0pid = 1U;
 800666e:	7bfb      	ldrb	r3, [r7, #15]
 8006670:	f043 0310 	orr.w	r3, r3, #16
 8006674:	73fb      	strb	r3, [r7, #15]
		/* clear stall */
		data.b.stall = 0U;
 8006676:	7bbb      	ldrb	r3, [r7, #14]
 8006678:	f36f 1345 	bfc	r3, #5, #1
 800667c:	73bb      	strb	r3, [r7, #14]
		/* set tx fifo */
		ep->txFifoNum = XMC_USBD_lAssignTXFifo(); /* get tx fifo */
 800667e:	f7fe fd17 	bl	80050b0 <XMC_USBD_lAssignTXFifo>
 8006682:	4603      	mov	r3, r0
 8006684:	f003 030f 	and.w	r3, r3, #15
 8006688:	b2d9      	uxtb	r1, r3
 800668a:	697a      	ldr	r2, [r7, #20]
 800668c:	8893      	ldrh	r3, [r2, #4]
 800668e:	f361 1389 	bfi	r3, r1, #6, #4
 8006692:	8093      	strh	r3, [r2, #4]
		data.b.txfnum = ep->txFifoNum;
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	889b      	ldrh	r3, [r3, #4]
 8006698:	f3c3 1383 	ubfx	r3, r3, #6, #4
 800669c:	b2da      	uxtb	r2, r3
 800669e:	89fb      	ldrh	r3, [r7, #14]
 80066a0:	f362 1389 	bfi	r3, r2, #6, #4
 80066a4:	81fb      	strh	r3, [r7, #14]
		xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32; /* configure endpoint */
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	4a2e      	ldr	r2, [pc, #184]	; (800676c <XMC_USBD_EndpointConfigure+0x274>)
 80066b2:	336a      	adds	r3, #106	; 0x6a
 80066b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066b8:	68fa      	ldr	r2, [r7, #12]
 80066ba:	601a      	str	r2, [r3, #0]
		daintmsk.ep.in |= (uint16_t)((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts for endpoint */
 80066bc:	8a3a      	ldrh	r2, [r7, #16]
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	4619      	mov	r1, r3
 80066ca:	2301      	movs	r3, #1
 80066cc:	408b      	lsls	r3, r1
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	4313      	orrs	r3, r2
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	823b      	strh	r3, [r7, #16]
  }
  if ((ep->address_u.address_st.direction == 0U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d002      	beq.n	80066ea <XMC_USBD_EndpointConfigure+0x1f2>
 80066e4:	79bb      	ldrb	r3, [r7, #6]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d173      	bne.n	80067d2 <XMC_USBD_EndpointConfigure+0x2da>
  {
    /* is out */
		depctl_data_t data;
		data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	4a1d      	ldr	r2, [pc, #116]	; (800676c <XMC_USBD_EndpointConfigure+0x274>)
 80066f6:	3370      	adds	r3, #112	; 0x70
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4413      	add	r3, r2
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	60bb      	str	r3, [r7, #8]
		/*enable endpoint */
		data.b.usbactep = 1U;
 8006702:	7a7b      	ldrb	r3, [r7, #9]
 8006704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006708:	727b      	strb	r3, [r7, #9]
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
 800670a:	79bb      	ldrb	r3, [r7, #6]
 800670c:	f003 0303 	and.w	r3, r3, #3
 8006710:	b2da      	uxtb	r2, r3
 8006712:	7abb      	ldrb	r3, [r7, #10]
 8006714:	f362 0383 	bfi	r3, r2, #2, #2
 8006718:	72bb      	strb	r3, [r7, #10]
    /* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 800671a:	79bb      	ldrb	r3, [r7, #6]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d12f      	bne.n	8006780 <XMC_USBD_EndpointConfigure+0x288>
		{
			switch(ep_max_packet_size)
 8006720:	88bb      	ldrh	r3, [r7, #4]
 8006722:	2b10      	cmp	r3, #16
 8006724:	d014      	beq.n	8006750 <XMC_USBD_EndpointConfigure+0x258>
 8006726:	2b10      	cmp	r3, #16
 8006728:	dc02      	bgt.n	8006730 <XMC_USBD_EndpointConfigure+0x238>
 800672a:	2b08      	cmp	r3, #8
 800672c:	d016      	beq.n	800675c <XMC_USBD_EndpointConfigure+0x264>
					break;
				case (8U):
					data.b.mps = 0x3U;
					break;
				default:
					break;
 800672e:	e01b      	b.n	8006768 <XMC_USBD_EndpointConfigure+0x270>
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
    /* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
		{
			switch(ep_max_packet_size)
 8006730:	2b20      	cmp	r3, #32
 8006732:	d007      	beq.n	8006744 <XMC_USBD_EndpointConfigure+0x24c>
 8006734:	2b40      	cmp	r3, #64	; 0x40
 8006736:	d000      	beq.n	800673a <XMC_USBD_EndpointConfigure+0x242>
					break;
				case (8U):
					data.b.mps = 0x3U;
					break;
				default:
					break;
 8006738:	e016      	b.n	8006768 <XMC_USBD_EndpointConfigure+0x270>
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
		{
			switch(ep_max_packet_size)
			{
				case (64U):
					data.b.mps = 0x0U;
 800673a:	893b      	ldrh	r3, [r7, #8]
 800673c:	f36f 030a 	bfc	r3, #0, #11
 8006740:	813b      	strh	r3, [r7, #8]
					break;
 8006742:	e011      	b.n	8006768 <XMC_USBD_EndpointConfigure+0x270>
				case (32U):
					data.b.mps = 0x1U;
 8006744:	893b      	ldrh	r3, [r7, #8]
 8006746:	2201      	movs	r2, #1
 8006748:	f362 030a 	bfi	r3, r2, #0, #11
 800674c:	813b      	strh	r3, [r7, #8]
					break;
 800674e:	e00b      	b.n	8006768 <XMC_USBD_EndpointConfigure+0x270>
				case (16U):
					data.b.mps = 0x2U;
 8006750:	893b      	ldrh	r3, [r7, #8]
 8006752:	2202      	movs	r2, #2
 8006754:	f362 030a 	bfi	r3, r2, #0, #11
 8006758:	813b      	strh	r3, [r7, #8]
					break;
 800675a:	e005      	b.n	8006768 <XMC_USBD_EndpointConfigure+0x270>
				case (8U):
					data.b.mps = 0x3U;
 800675c:	893b      	ldrh	r3, [r7, #8]
 800675e:	2203      	movs	r2, #3
 8006760:	f362 030a 	bfi	r3, r2, #0, #11
 8006764:	813b      	strh	r3, [r7, #8]
					break;
 8006766:	bf00      	nop
 8006768:	e012      	b.n	8006790 <XMC_USBD_EndpointConfigure+0x298>
 800676a:	bf00      	nop
 800676c:	20000650 	.word	0x20000650
 8006770:	30000700 	.word	0x30000700
 8006774:	30000000 	.word	0x30000000
 8006778:	200004b8 	.word	0x200004b8
 800677c:	2000049c 	.word	0x2000049c
					break;
			}
		}
		else
		{
			data.b.mps = ep_max_packet_size;
 8006780:	88bb      	ldrh	r3, [r7, #4]
 8006782:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006786:	b29a      	uxth	r2, r3
 8006788:	893b      	ldrh	r3, [r7, #8]
 800678a:	f362 030a 	bfi	r3, r2, #0, #11
 800678e:	813b      	strh	r3, [r7, #8]
		}
		/* set first data0 pid */
		data.b.setd0pid = 1U;
 8006790:	7afb      	ldrb	r3, [r7, #11]
 8006792:	f043 0310 	orr.w	r3, r3, #16
 8006796:	72fb      	strb	r3, [r7, #11]
		/* clear stall */
		data.b.stall =(uint8_t) 0U;
 8006798:	7abb      	ldrb	r3, [r7, #10]
 800679a:	f36f 1345 	bfc	r3, #5, #1
 800679e:	72bb      	strb	r3, [r7, #10]
		xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32; /* configure endpoint */
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	4a0f      	ldr	r2, [pc, #60]	; (80067e8 <XMC_USBD_EndpointConfigure+0x2f0>)
 80067ac:	3370      	adds	r3, #112	; 0x70
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	4413      	add	r3, r2
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	68ba      	ldr	r2, [r7, #8]
 80067b6:	601a      	str	r2, [r3, #0]
		daintmsk.ep.out |=(uint16_t) ((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts */
 80067b8:	8a7a      	ldrh	r2, [r7, #18]
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	4619      	mov	r1, r3
 80067c6:	2301      	movs	r3, #1
 80067c8:	408b      	lsls	r3, r1
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	4313      	orrs	r3, r2
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	827b      	strh	r3, [r7, #18]
  }
  xmc_device.device_register->daintmsk = daintmsk.d32;
 80067d2:	4b05      	ldr	r3, [pc, #20]	; (80067e8 <XMC_USBD_EndpointConfigure+0x2f0>)
 80067d4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80067d8:	693a      	ldr	r2, [r7, #16]
 80067da:	61da      	str	r2, [r3, #28]
  return XMC_USBD_STATUS_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3718      	adds	r7, #24
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	20000650 	.word	0x20000650

080067ec <XMC_USBD_EndpointUnconfigure>:

/**
 * Unconfigure the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointUnconfigure(const uint8_t ep_addr) 
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b088      	sub	sp, #32
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	4603      	mov	r3, r0
 80067f4:	71fb      	strb	r3, [r7, #7]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 80067f6:	79fb      	ldrb	r3, [r7, #7]
 80067f8:	f003 030f 	and.w	r3, r3, #15
 80067fc:	2234      	movs	r2, #52	; 0x34
 80067fe:	fb02 f303 	mul.w	r3, r2, r3
 8006802:	4a54      	ldr	r2, [pc, #336]	; (8006954 <XMC_USBD_EndpointUnconfigure+0x168>)
 8006804:	4413      	add	r3, r2
 8006806:	61bb      	str	r3, [r7, #24]
  depctl_data_t data;
	daint_data_t daintmsk;
	XMC_USBD_STATUS_t result;
	uint32_t number_temp;
  data.d32 = 0U;  
 8006808:	2300      	movs	r3, #0
 800680a:	613b      	str	r3, [r7, #16]
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 800680c:	4b51      	ldr	r3, [pc, #324]	; (8006954 <XMC_USBD_EndpointUnconfigure+0x168>)
 800680e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8006812:	69db      	ldr	r3, [r3, #28]
 8006814:	60fb      	str	r3, [r7, #12]
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800681e:	b2db      	uxtb	r3, r3
 8006820:	461a      	mov	r2, r3
 8006822:	2301      	movs	r3, #1
 8006824:	4093      	lsls	r3, r2
 8006826:	617b      	str	r3, [r7, #20]
  /* if not configured return an error */
  if (!ep->isConfigured)
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	791b      	ldrb	r3, [r3, #4]
 800682c:	f003 0304 	and.w	r3, r3, #4
 8006830:	b2db      	uxtb	r3, r3
 8006832:	2b00      	cmp	r3, #0
 8006834:	d102      	bne.n	800683c <XMC_USBD_EndpointUnconfigure+0x50>
  {
     result = XMC_USBD_STATUS_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	77fb      	strb	r3, [r7, #31]
 800683a:	e085      	b.n	8006948 <XMC_USBD_EndpointUnconfigure+0x15c>
  }
  else
  {
    /* disable the endpoint, deactivate it and only send naks */
    data.b.usbactep = 0U;
 800683c:	7c7b      	ldrb	r3, [r7, #17]
 800683e:	f36f 13c7 	bfc	r3, #7, #1
 8006842:	747b      	strb	r3, [r7, #17]
    data.b.epdis =  1U;
 8006844:	7cfb      	ldrb	r3, [r7, #19]
 8006846:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800684a:	74fb      	strb	r3, [r7, #19]
    data.b.snak =  1U;
 800684c:	7cfb      	ldrb	r3, [r7, #19]
 800684e:	f043 0308 	orr.w	r3, r3, #8
 8006852:	74fb      	strb	r3, [r7, #19]
    data.b.stall =  0U;
 8006854:	7cbb      	ldrb	r3, [r7, #18]
 8006856:	f36f 1345 	bfc	r3, #5, #1
 800685a:	74bb      	strb	r3, [r7, #18]
    ep->isConfigured =  0U;
 800685c:	69ba      	ldr	r2, [r7, #24]
 800685e:	7913      	ldrb	r3, [r2, #4]
 8006860:	f36f 0382 	bfc	r3, #2, #1
 8006864:	7113      	strb	r3, [r2, #4]
    ep->isStalled =  0U;
 8006866:	69ba      	ldr	r2, [r7, #24]
 8006868:	7913      	ldrb	r3, [r2, #4]
 800686a:	f36f 1345 	bfc	r3, #5, #1
 800686e:	7113      	strb	r3, [r2, #4]
    ep->outInUse =  0U;
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	685a      	ldr	r2, [r3, #4]
 8006874:	f022 0210 	bic.w	r2, r2, #16
 8006878:	605a      	str	r2, [r3, #4]
    ep->inInUse =  0U;
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	685a      	ldr	r2, [r3, #4]
 800687e:	f022 0208 	bic.w	r2, r2, #8
 8006882:	605a      	str	r2, [r3, #4]
    /* chose register based on the direction. Control Endpoint need both */
    if ((ep->address_u.address_st.direction == 1U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800688c:	b2db      	uxtb	r3, r3
 800688e:	2b00      	cmp	r3, #0
 8006890:	d106      	bne.n	80068a0 <XMC_USBD_EndpointUnconfigure+0xb4>
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	791b      	ldrb	r3, [r3, #4]
 8006896:	f003 0303 	and.w	r3, r3, #3
 800689a:	b2db      	uxtb	r3, r3
 800689c:	2b00      	cmp	r3, #0
 800689e:	d112      	bne.n	80068c6 <XMC_USBD_EndpointUnconfigure+0xda>
    {
      /* disable endpoint configuration */
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	4a2a      	ldr	r2, [pc, #168]	; (8006954 <XMC_USBD_EndpointUnconfigure+0x168>)
 80068ac:	336a      	adds	r3, #106	; 0x6a
 80068ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	601a      	str	r2, [r3, #0]
      /* disable interrupts */
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
 80068b6:	89ba      	ldrh	r2, [r7, #12]
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	43db      	mvns	r3, r3
 80068be:	b29b      	uxth	r3, r3
 80068c0:	4013      	ands	r3, r2
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	81bb      	strh	r3, [r7, #12]
    }
    if ((ep->address_u.address_st.direction == 0U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d006      	beq.n	80068e2 <XMC_USBD_EndpointUnconfigure+0xf6>
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	791b      	ldrb	r3, [r3, #4]
 80068d8:	f003 0303 	and.w	r3, r3, #3
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d123      	bne.n	800692a <XMC_USBD_EndpointUnconfigure+0x13e>
    {
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	4a19      	ldr	r2, [pc, #100]	; (8006954 <XMC_USBD_EndpointUnconfigure+0x168>)
 80068ee:	3370      	adds	r3, #112	; 0x70
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	4413      	add	r3, r2
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	693a      	ldr	r2, [r7, #16]
 80068f8:	601a      	str	r2, [r3, #0]
      daintmsk.ep.out = (uint16_t)((uint32_t)daintmsk.ep.out & (~(uint32_t)number_temp));
 80068fa:	89fa      	ldrh	r2, [r7, #14]
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	b29b      	uxth	r3, r3
 8006900:	43db      	mvns	r3, r3
 8006902:	b29b      	uxth	r3, r3
 8006904:	4013      	ands	r3, r2
 8006906:	b29b      	uxth	r3, r3
 8006908:	81fb      	strh	r3, [r7, #14]
      if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 800690a:	4b13      	ldr	r3, [pc, #76]	; (8006958 <XMC_USBD_EndpointUnconfigure+0x16c>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	7b5b      	ldrb	r3, [r3, #13]
 8006910:	2b01      	cmp	r3, #1
 8006912:	d10a      	bne.n	800692a <XMC_USBD_EndpointUnconfigure+0x13e>
      {
        xmc_device.device_register->dtknqr4_fifoemptymsk &= ~number_temp;
 8006914:	4b0f      	ldr	r3, [pc, #60]	; (8006954 <XMC_USBD_EndpointUnconfigure+0x168>)
 8006916:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800691a:	4a0e      	ldr	r2, [pc, #56]	; (8006954 <XMC_USBD_EndpointUnconfigure+0x168>)
 800691c:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 8006920:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8006922:	697a      	ldr	r2, [r7, #20]
 8006924:	43d2      	mvns	r2, r2
 8006926:	400a      	ands	r2, r1
 8006928:	635a      	str	r2, [r3, #52]	; 0x34
      }
    }
    xmc_device.device_register->daintmsk = daintmsk.d32;
 800692a:	4b0a      	ldr	r3, [pc, #40]	; (8006954 <XMC_USBD_EndpointUnconfigure+0x168>)
 800692c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	61da      	str	r2, [r3, #28]
    XMC_USBD_lUnassignFifo(ep->txFifoNum); /* free fifo */
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	889b      	ldrh	r3, [r3, #4]
 8006938:	f3c3 1383 	ubfx	r3, r3, #6, #4
 800693c:	b2db      	uxtb	r3, r3
 800693e:	4618      	mov	r0, r3
 8006940:	f7fe fbee 	bl	8005120 <XMC_USBD_lUnassignFifo>
    result = XMC_USBD_STATUS_OK;
 8006944:	2300      	movs	r3, #0
 8006946:	77fb      	strb	r3, [r7, #31]
  }
  return result;
 8006948:	7ffb      	ldrb	r3, [r7, #31]
}
 800694a:	4618      	mov	r0, r3
 800694c:	3720      	adds	r7, #32
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	20000650 	.word	0x20000650
 8006958:	2000064c 	.word	0x2000064c

0800695c <XMC_USBD_GetFrameNumber>:

/**
 * Gets the current USB frame number
 **/
uint16_t XMC_USBD_GetFrameNumber(void) 
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
  uint16_t result;
  dsts_data_t dsts;
  dsts.d32 = xmc_device.device_register->dsts;
 8006962:	4b08      	ldr	r3, [pc, #32]	; (8006984 <XMC_USBD_GetFrameNumber+0x28>)
 8006964:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	603b      	str	r3, [r7, #0]
  result = (uint16_t)dsts.b.soffn;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8006972:	b29b      	uxth	r3, r3
 8006974:	80fb      	strh	r3, [r7, #6]
  return result;
 8006976:	88fb      	ldrh	r3, [r7, #6]
}
 8006978:	4618      	mov	r0, r3
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr
 8006984:	20000650 	.word	0x20000650

08006988 <XMC_USBD_IsEnumDone>:
 * Gets the USB speed enumeration completion status.
 * This should not be used for the actual USB enumeration completion status. For the actual USB enumeration status,
 * the application layer should check for the completion of USB standard request Set configuration.
 **/
uint32_t XMC_USBD_IsEnumDone(void)
{
 8006988:	b480      	push	{r7}
 800698a:	af00      	add	r7, sp, #0
  return (uint32_t)((uint8_t)xmc_device.IsConnected && (uint8_t)xmc_device.IsPowered);
 800698c:	4b0b      	ldr	r3, [pc, #44]	; (80069bc <XMC_USBD_IsEnumDone+0x34>)
 800698e:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8006992:	f003 0301 	and.w	r3, r3, #1
 8006996:	b2db      	uxtb	r3, r3
 8006998:	2b00      	cmp	r3, #0
 800699a:	d009      	beq.n	80069b0 <XMC_USBD_IsEnumDone+0x28>
 800699c:	4b07      	ldr	r3, [pc, #28]	; (80069bc <XMC_USBD_IsEnumDone+0x34>)
 800699e:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80069a2:	f003 0304 	and.w	r3, r3, #4
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d001      	beq.n	80069b0 <XMC_USBD_IsEnumDone+0x28>
 80069ac:	2301      	movs	r3, #1
 80069ae:	e000      	b.n	80069b2 <XMC_USBD_IsEnumDone+0x2a>
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr
 80069bc:	20000650 	.word	0x20000650

080069c0 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a1a      	ldr	r2, [pc, #104]	; (8006a34 <XMC_USIC_CH_Enable+0x74>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d003      	beq.n	80069d8 <XMC_USIC_CH_Enable+0x18>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a19      	ldr	r2, [pc, #100]	; (8006a38 <XMC_USIC_CH_Enable+0x78>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d103      	bne.n	80069e0 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 80069d8:	4818      	ldr	r0, [pc, #96]	; (8006a3c <XMC_USIC_CH_Enable+0x7c>)
 80069da:	f000 f933 	bl	8006c44 <XMC_USIC_Enable>
 80069de:	e016      	b.n	8006a0e <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a17      	ldr	r2, [pc, #92]	; (8006a40 <XMC_USIC_CH_Enable+0x80>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d003      	beq.n	80069f0 <XMC_USIC_CH_Enable+0x30>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a16      	ldr	r2, [pc, #88]	; (8006a44 <XMC_USIC_CH_Enable+0x84>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d103      	bne.n	80069f8 <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 80069f0:	4815      	ldr	r0, [pc, #84]	; (8006a48 <XMC_USIC_CH_Enable+0x88>)
 80069f2:	f000 f927 	bl	8006c44 <XMC_USIC_Enable>
 80069f6:	e00a      	b.n	8006a0e <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a14      	ldr	r2, [pc, #80]	; (8006a4c <XMC_USIC_CH_Enable+0x8c>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d003      	beq.n	8006a08 <XMC_USIC_CH_Enable+0x48>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a13      	ldr	r2, [pc, #76]	; (8006a50 <XMC_USIC_CH_Enable+0x90>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d102      	bne.n	8006a0e <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 8006a08:	4812      	ldr	r0, [pc, #72]	; (8006a54 <XMC_USIC_CH_Enable+0x94>)
 8006a0a:	f000 f91b 	bl	8006c44 <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2203      	movs	r2, #3
 8006a12:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8006a14:	bf00      	nop
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	f003 0301 	and.w	r3, r3, #1
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d0f9      	beq.n	8006a16 <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a26:	f023 020f 	bic.w	r2, r3, #15
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	641a      	str	r2, [r3, #64]	; 0x40
}
 8006a2e:	3708      	adds	r7, #8
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	40030000 	.word	0x40030000
 8006a38:	40030200 	.word	0x40030200
 8006a3c:	40030008 	.word	0x40030008
 8006a40:	48020000 	.word	0x48020000
 8006a44:	48020200 	.word	0x48020200
 8006a48:	48020008 	.word	0x48020008
 8006a4c:	48024000 	.word	0x48024000
 8006a50:	48024200 	.word	0x48024200
 8006a54:	48024008 	.word	0x48024008

08006a58 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b08e      	sub	sp, #56	; 0x38
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	2b63      	cmp	r3, #99	; 0x63
 8006a68:	d958      	bls.n	8006b1c <XMC_USIC_CH_SetBaudrate+0xc4>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d055      	beq.n	8006b1c <XMC_USIC_CH_SetBaudrate+0xc4>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8006a70:	f7fd f84e 	bl	8003b10 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8006a74:	4602      	mov	r2, r0
 8006a76:	4b2e      	ldr	r3, [pc, #184]	; (8006b30 <XMC_USIC_CH_SetBaudrate+0xd8>)
 8006a78:	fba3 2302 	umull	r2, r3, r3, r2
 8006a7c:	095b      	lsrs	r3, r3, #5
 8006a7e:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	4a2b      	ldr	r2, [pc, #172]	; (8006b30 <XMC_USIC_CH_SetBaudrate+0xd8>)
 8006a84:	fba2 2303 	umull	r2, r3, r2, r3
 8006a88:	095b      	lsrs	r3, r3, #5
 8006a8a:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 8006a90:	2301      	movs	r3, #1
 8006a92:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 8006a94:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8006a98:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8006a9a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8006a9e:	633b      	str	r3, [r7, #48]	; 0x30
 8006aa0:	e022      	b.n	8006ae8 <XMC_USIC_CH_SetBaudrate+0x90>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 8006aa2:	6a3b      	ldr	r3, [r7, #32]
 8006aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aa6:	fb02 f203 	mul.w	r2, r2, r3
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	6879      	ldr	r1, [r7, #4]
 8006aae:	fb01 f303 	mul.w	r3, r1, r3
 8006ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ab6:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	0a9b      	lsrs	r3, r3, #10
 8006abc:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ac4:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006acc:	d209      	bcs.n	8006ae2 <XMC_USIC_CH_SetBaudrate+0x8a>
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d205      	bcs.n	8006ae2 <XMC_USIC_CH_SetBaudrate+0x8a>
      {
        pdiv_frac_min = pdiv_frac;
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 8006ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae0:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8006ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	633b      	str	r3, [r7, #48]	; 0x30
 8006ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1d9      	bne.n	8006aa2 <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 8006aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af0:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	695a      	ldr	r2, [r3, #20]
 8006afc:	4b0d      	ldr	r3, [pc, #52]	; (8006b34 <XMC_USIC_CH_SetBaudrate+0xdc>)
 8006afe:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	3a01      	subs	r2, #1
 8006b04:	0292      	lsls	r2, r2, #10
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8006b06:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 8006b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8006b0e:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 8006b14:	2300      	movs	r3, #0
 8006b16:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006b1a:	e002      	b.n	8006b22 <XMC_USIC_CH_SetBaudrate+0xca>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  return status;
 8006b22:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3738      	adds	r7, #56	; 0x38
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	51eb851f 	.word	0x51eb851f
 8006b34:	fc0080ef 	.word	0xfc0080ef

08006b38 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	603b      	str	r3, [r7, #0]
 8006b44:	4613      	mov	r3, r2
 8006b46:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8006b4e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8006b5e:	4b0a      	ldr	r3, [pc, #40]	; (8006b88 <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 8006b60:	4013      	ands	r3, r2
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 8006b62:	683a      	ldr	r2, [r7, #0]
 8006b64:	0211      	lsls	r1, r2, #8
 8006b66:	68ba      	ldr	r2, [r7, #8]
 8006b68:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 8006b6a:	79fa      	ldrb	r2, [r7, #7]
 8006b6c:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 8006b6e:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8006b70:	4313      	orrs	r3, r2
 8006b72:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                   (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 8006b7c:	3714      	adds	r7, #20
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr
 8006b86:	bf00      	nop
 8006b88:	efffc0c0 	.word	0xefffc0c0

08006b8c <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>:
}

void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
                                            const XMC_USIC_CH_FIFO_SIZE_t size,
                                            const uint32_t limit)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b085      	sub	sp, #20
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	460b      	mov	r3, r1
 8006b96:	607a      	str	r2, [r7, #4]
 8006b98:	72fb      	strb	r3, [r7, #11]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8006ba0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8006bb0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	021b      	lsls	r3, r3, #8
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8006bb8:	431a      	orrs	r2, r3
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
 8006bba:	7afb      	ldrb	r3, [r7, #11]
 8006bbc:	061b      	lsls	r3, r3, #24
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8006bbe:	431a      	orrs	r2, r3
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
}
 8006bc6:	3714      	adds	r7, #20
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <XMC_USIC_CH_SetInterruptNodePointer>:

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	460b      	mov	r3, r1
 8006bda:	607a      	str	r2, [r7, #4]
 8006bdc:	72fb      	strb	r3, [r7, #11]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	699a      	ldr	r2, [r3, #24]
 8006be2:	7afb      	ldrb	r3, [r7, #11]
 8006be4:	2107      	movs	r1, #7
 8006be6:	fa01 f303 	lsl.w	r3, r1, r3
 8006bea:	43db      	mvns	r3, r3
 8006bec:	401a      	ands	r2, r3
                  (service_request << (uint32_t)interrupt_node));
 8006bee:	7afb      	ldrb	r3, [r7, #11]
 8006bf0:	6879      	ldr	r1, [r7, #4]
 8006bf2:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8006bf6:	431a      	orrs	r2, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	619a      	str	r2, [r3, #24]
                  (service_request << (uint32_t)interrupt_node));
}
 8006bfc:	3714      	adds	r7, #20
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop

08006c08 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:
}

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	460b      	mov	r3, r1
 8006c12:	607a      	str	r2, [r7, #4]
 8006c14:	72fb      	strb	r3, [r7, #11]
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8006c1c:	7afb      	ldrb	r3, [r7, #11]
 8006c1e:	2107      	movs	r1, #7
 8006c20:	fa01 f303 	lsl.w	r3, r1, r3
 8006c24:	43db      	mvns	r3, r3
 8006c26:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
 8006c28:	7afb      	ldrb	r3, [r7, #11]
 8006c2a:	6879      	ldr	r1, [r7, #4]
 8006c2c:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8006c30:	431a      	orrs	r2, r3
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                   (service_request << (uint32_t)interrupt_node));
}
 8006c38:	3714      	adds	r7, #20
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop

08006c44 <XMC_USIC_Enable>:

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a0d      	ldr	r2, [pc, #52]	; (8006c84 <XMC_USIC_Enable+0x40>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d104      	bne.n	8006c5e <XMC_USIC_Enable+0x1a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8006c54:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006c58:	f7fc ff3e 	bl	8003ad8 <XMC_SCU_RESET_DeassertPeripheralReset>
 8006c5c:	e00e      	b.n	8006c7c <XMC_USIC_Enable+0x38>
#endif	
  }
#if defined(USIC1)  
  else if (usic == USIC1)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a09      	ldr	r2, [pc, #36]	; (8006c88 <XMC_USIC_Enable+0x44>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d103      	bne.n	8006c6e <XMC_USIC_Enable+0x2a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
#endif	
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 8006c66:	4809      	ldr	r0, [pc, #36]	; (8006c8c <XMC_USIC_Enable+0x48>)
 8006c68:	f7fc ff36 	bl	8003ad8 <XMC_SCU_RESET_DeassertPeripheralReset>
 8006c6c:	e006      	b.n	8006c7c <XMC_USIC_Enable+0x38>
#endif	
  }
#endif  
#if defined(USIC2)  
  else if (usic == USIC2)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4a07      	ldr	r2, [pc, #28]	; (8006c90 <XMC_USIC_Enable+0x4c>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d102      	bne.n	8006c7c <XMC_USIC_Enable+0x38>
  {
#if defined(CLOCK_GATING_SUPPORTED) 
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 8006c76:	4807      	ldr	r0, [pc, #28]	; (8006c94 <XMC_USIC_Enable+0x50>)
 8006c78:	f7fc ff2e 	bl	8003ad8 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8006c7c:	3708      	adds	r7, #8
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	40030008 	.word	0x40030008
 8006c88:	48020008 	.word	0x48020008
 8006c8c:	10000080 	.word	0x10000080
 8006c90:	48024008 	.word	0x48024008
 8006c94:	10000100 	.word	0x10000100

08006c98 <XMC_VADC_GROUP_ExternalMuxControlInit>:
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
                                                           const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 8006ca2:	783b      	ldrb	r3, [r7, #0]
 8006ca4:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	461a      	mov	r2, r3
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
 8006cac:	78bb      	ldrb	r3, [r7, #2]
 8006cae:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	041b      	lsls	r3, r3, #16
{
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	60fb      	str	r3, [r7, #12]
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 8006cc2:	78fb      	ldrb	r3, [r7, #3]
 8006cc4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	071a      	lsls	r2, r3, #28
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
 8006ccc:	78fb      	ldrb	r3, [r7, #3]
 8006cce:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	069b      	lsls	r3, r3, #26

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 8006cd6:	431a      	orrs	r2, r3
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
 8006cd8:	78fb      	ldrb	r3, [r7, #3]
 8006cda:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	075b      	lsls	r3, r3, #29

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 8006cfa:	3714      	adds	r7, #20
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d12:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8006d1c:	370c      	adds	r7, #12
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr
 8006d26:	bf00      	nop

08006d28 <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d36:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8006d40:	370c      	adds	r7, #12
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr
 8006d4a:	bf00      	nop

08006d4c <XMC_VADC_GLOBAL_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/*API to enable the VADC Module*/
void XMC_VADC_GLOBAL_EnableModule(void)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	af00      	add	r7, sp, #0
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  /* Reset the Hardware */
  XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 8006d50:	2001      	movs	r0, #1
 8006d52:	f7fc fec1 	bl	8003ad8 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
}
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <XMC_VADC_GLOBAL_Init>:
}


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  uint32_t reg;
#endif
  XMC_ASSERT("XMC_VADC_GLOBAL_Init:Wrong Module Pointer", (global_ptr == VADC))

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();
 8006d62:	f7ff fff3 	bl	8006d4c <XMC_VADC_GLOBAL_EnableModule>

  global_ptr->CLC = (uint32_t)(config->clc);
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	695a      	ldr	r2, [r3, #20]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	601a      	str	r2, [r3, #0]

  /* Clock configuration */

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	689a      	ldr	r2, [r3, #8]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	68da      	ldr	r2, [r3, #12]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	691a      	ldr	r2, [r3, #16]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280

#if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)

  /* Boundaries */
  global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* From the Errata sheet of XMC1100 V1.7*/
  XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
#endif

}
 8006da4:	3708      	adds	r7, #8
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop

08006dac <XMC_VADC_GLOBAL_InputClassInit>:

/* API to Set the Global IClass registers*/
void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b085      	sub	sp, #20
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	603b      	str	r3, [r7, #0]
 8006db8:	4613      	mov	r3, r2
 8006dba:	71fb      	strb	r3, [r7, #7]
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP_CONV_EMUX))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLASS_SET))

#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  if (conv_type == XMC_VADC_GROUP_CONV_STD )
 8006dbc:	79fb      	ldrb	r3, [r7, #7]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d109      	bne.n	8006dd6 <XMC_VADC_GLOBAL_InputClassInit+0x2a>
  {
#endif
    global_ptr->GLOBICLASS[set_num] = config.globiclass &
 8006dc2:	68ba      	ldr	r2, [r7, #8]
 8006dc4:	f240 731f 	movw	r3, #1823	; 0x71f
 8006dc8:	4013      	ands	r3, r2
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	6839      	ldr	r1, [r7, #0]
 8006dce:	3128      	adds	r1, #40	; 0x28
 8006dd0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006dd4:	e007      	b.n	8006de6 <XMC_VADC_GLOBAL_InputClassInit+0x3a>
                                      (uint32_t)(VADC_GLOBICLASS_CMS_Msk | VADC_GLOBICLASS_STCS_Msk);
#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  }
  else
  {
    global_ptr->GLOBICLASS[set_num] = config.globiclass & (uint32_t)(VADC_GLOBICLASS_CME_Msk | VADC_GLOBICLASS_STCE_Msk);
 8006dd6:	68ba      	ldr	r2, [r7, #8]
 8006dd8:	4b05      	ldr	r3, [pc, #20]	; (8006df0 <XMC_VADC_GLOBAL_InputClassInit+0x44>)
 8006dda:	4013      	ands	r3, r2
 8006ddc:	68fa      	ldr	r2, [r7, #12]
 8006dde:	6839      	ldr	r1, [r7, #0]
 8006de0:	3128      	adds	r1, #40	; 0x28
 8006de2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  }
#endif
}
 8006de6:	3714      	adds	r7, #20
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr
 8006df0:	071f0000 	.word	0x071f0000

08006df4 <XMC_VADC_GLOBAL_StartupCalibration>:

/* API to enable startup calibration feature */
void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b085      	sub	sp, #20
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  VADC_G_TypeDef *group_ptr;
#endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e02:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	73fb      	strb	r3, [r7, #15]
 8006e10:	e016      	b.n	8006e40 <XMC_VADC_GLOBAL_StartupCalibration+0x4c>
  {
    group_ptr = g_xmc_vadc_group_array[i];
 8006e12:	7bfb      	ldrb	r3, [r7, #15]
 8006e14:	4a0e      	ldr	r2, [pc, #56]	; (8006e50 <XMC_VADC_GLOBAL_StartupCalibration+0x5c>)
 8006e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e1a:	60bb      	str	r3, [r7, #8]
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d007      	beq.n	8006e3a <XMC_VADC_GLOBAL_StartupCalibration+0x46>
    {
      /* This group is active. Loop until it finishes calibration */
      while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 8006e2a:	bf00      	nop
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1f8      	bne.n	8006e2c <XMC_VADC_GLOBAL_StartupCalibration+0x38>

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8006e3a:	7bfb      	ldrb	r3, [r7, #15]
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	73fb      	strb	r3, [r7, #15]
 8006e40:	7bfb      	ldrb	r3, [r7, #15]
 8006e42:	2b03      	cmp	r3, #3
 8006e44:	d9e5      	bls.n	8006e12 <XMC_VADC_GLOBAL_StartupCalibration+0x1e>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    /* NOP */
  }
#endif
}
 8006e46:	3714      	adds	r7, #20
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr
 8006e50:	0800dc7c 	.word	0x0800dc7c

08006e54 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>:
  global_ptr->GLOBEVNP |= (uint32_t)(node << VADC_GLOBEVNP_REV0NP_Pos);
}

/* API to bind request source event with a service request line */
void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t sr)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	70fb      	strb	r3, [r7, #3]
  uint32_t node;
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:Wrong Module Pointer", (global_ptr == VADC))

  if (sr >= XMC_VADC_SR_SHARED_SR0)
 8006e60:	78fb      	ldrb	r3, [r7, #3]
 8006e62:	2b03      	cmp	r3, #3
 8006e64:	d903      	bls.n	8006e6e <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1a>
  {
    node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 8006e66:	78fb      	ldrb	r3, [r7, #3]
 8006e68:	3b04      	subs	r3, #4
 8006e6a:	60fb      	str	r3, [r7, #12]
 8006e6c:	e001      	b.n	8006e72 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1e>
  }
  else
  {
    node = (uint32_t)sr;
 8006e6e:	78fb      	ldrb	r3, [r7, #3]
 8006e70:	60fb      	str	r3, [r7, #12]
  }

  global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006e78:	f023 020f 	bic.w	r2, r3, #15
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	431a      	orrs	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 8006e92:	3714      	adds	r7, #20
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <XMC_VADC_GROUP_Init>:

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)  
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Program the input classes */
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	6859      	ldr	r1, [r3, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	2300      	movs	r3, #0
 8006eb0:	f000 f828 	bl	8006f04 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	6859      	ldr	r1, [r3, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	f000 f821 	bl	8006f04 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	6899      	ldr	r1, [r3, #8]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	2301      	movs	r3, #1
 8006ecc:	f000 f81a 	bl	8006f04 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	6899      	ldr	r1, [r3, #8]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	2301      	movs	r3, #1
 8006eda:	f000 f813 	bl	8006f04 <XMC_VADC_GROUP_InputClassInit>

  group_ptr->ARBCFG = config->g_arbcfg;
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	691a      	ldr	r2, [r3, #16]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  group_ptr->BOUND = config->g_bound;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	68da      	ldr	r2, [r3, #12]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* External mux configuration */
  XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr,config->emux_config);
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	6819      	ldr	r1, [r3, #0]
 8006ef8:	f7ff fece 	bl	8006c98 <XMC_VADC_GROUP_ExternalMuxControlInit>

}
 8006efc:	3708      	adds	r7, #8
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop

08006f04 <XMC_VADC_GROUP_InputClassInit>:

/* API to program conversion characteristics */
void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b08d      	sub	sp, #52	; 0x34
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	603b      	str	r3, [r7, #0]
 8006f10:	4613      	mov	r3, r2
 8006f12:	71fb      	strb	r3, [r7, #7]

  /* 
   * Obtain the mask and position macros of the parameters based on what is being requested - Standard channels vs
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
 8006f14:	79fb      	ldrb	r3, [r7, #7]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d113      	bne.n	8006f42 <XMC_VADC_GROUP_InputClassInit+0x3e>
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 8006f1a:	2308      	movs	r3, #8
 8006f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 8006f1e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8006f22:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
 8006f24:	2300      	movs	r3, #0
 8006f26:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 8006f28:	231f      	movs	r3, #31
 8006f2a:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sample_time_std_conv;
 8006f2c:	7a3b      	ldrb	r3, [r7, #8]
 8006f2e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 8006f36:	7a7b      	ldrb	r3, [r7, #9]
 8006f38:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	76fb      	strb	r3, [r7, #27]
 8006f40:	e013      	b.n	8006f6a <XMC_VADC_GROUP_InputClassInit+0x66>
  }
  else
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 8006f42:	2318      	movs	r3, #24
 8006f44:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 8006f46:	f04f 63e0 	mov.w	r3, #117440512	; 0x7000000
 8006f4a:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 8006f4c:	2310      	movs	r3, #16
 8006f4e:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 8006f50:	f44f 13f8 	mov.w	r3, #2031616	; 0x1f0000
 8006f54:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 8006f56:	7abb      	ldrb	r3, [r7, #10]
 8006f58:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 8006f60:	7afb      	ldrb	r3, [r7, #11]
 8006f62:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	76fb      	strb	r3, [r7, #27]
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	683a      	ldr	r2, [r7, #0]
 8006f6e:	3228      	adds	r2, #40	; 0x28
 8006f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f74:	617b      	str	r3, [r7, #20]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
 8006f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f78:	43db      	mvns	r3, r3
 8006f7a:	697a      	ldr	r2, [r7, #20]
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 8006f80:	7efa      	ldrb	r2, [r7, #27]
 8006f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f84:	fa02 f303 	lsl.w	r3, r2, r3
 8006f88:	697a      	ldr	r2, [r7, #20]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	617b      	str	r3, [r7, #20]
  conv_class &= ~(sample_time_mask);
 8006f8e:	6a3b      	ldr	r3, [r7, #32]
 8006f90:	43db      	mvns	r3, r3
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	4013      	ands	r3, r2
 8006f96:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 8006f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f9a:	69fa      	ldr	r2, [r7, #28]
 8006f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa0:	697a      	ldr	r2, [r7, #20]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	617b      	str	r3, [r7, #20]
  group_ptr->ICLASS[set_num] = conv_class;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	683a      	ldr	r2, [r7, #0]
 8006faa:	3228      	adds	r2, #40	; 0x28
 8006fac:	6979      	ldr	r1, [r7, #20]
 8006fae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8006fb2:	3734      	adds	r7, #52	; 0x34
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <XMC_VADC_GROUP_SetPowerMode>:

/* API which sets the power mode of analog converter of a VADC group */
void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_t power_mode)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	70fb      	strb	r3, [r7, #3]
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fce:	60fb      	str	r3, [r7, #12]

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f023 0303 	bic.w	r3, r3, #3
 8006fd6:	60fb      	str	r3, [r7, #12]
  arbcfg |= (uint32_t)power_mode;
 8006fd8:	78fb      	ldrb	r3, [r7, #3]
 8006fda:	68fa      	ldr	r2, [r7, #12]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	60fb      	str	r3, [r7, #12]

  group_ptr->ARBCFG = arbcfg;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8006fe8:	3714      	adds	r7, #20
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop

08006ff4 <XMC_VADC_GLOBAL_BackgroundInit>:
}
#endif /* XMC_VADC_GSCAN_AVAILABLE */

/* API to initialize background scan request source hardware */
void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_CONFIG_t *config)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b086      	sub	sp, #24
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  #endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8006ffe:	2300      	movs	r3, #0
 8007000:	75fb      	strb	r3, [r7, #23]
 8007002:	e009      	b.n	8007018 <XMC_VADC_GLOBAL_BackgroundInit+0x24>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 8007004:	7dfb      	ldrb	r3, [r7, #23]
 8007006:	4a39      	ldr	r2, [pc, #228]	; (80070ec <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8007008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800700c:	4618      	mov	r0, r3
 800700e:	f7ff fe8b 	bl	8006d28 <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>
  #endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8007012:	7dfb      	ldrb	r3, [r7, #23]
 8007014:	3301      	adds	r3, #1
 8007016:	75fb      	strb	r3, [r7, #23]
 8007018:	7dfb      	ldrb	r3, [r7, #23]
 800701a:	2b03      	cmp	r3, #3
 800701c:	d9f2      	bls.n	8007004 <XMC_VADC_GLOBAL_BackgroundInit+0x10>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
  
  conv_start_mask = (uint32_t) 0;
 800701e:	2300      	movs	r3, #0
 8007020:	613b      	str	r3, [r7, #16]
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	f003 0303 	and.w	r3, r3, #3
 800702a:	b2db      	uxtb	r3, r3
 800702c:	2b00      	cmp	r3, #0
 800702e:	d002      	beq.n	8007036 <XMC_VADC_GLOBAL_BackgroundInit+0x42>
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
 8007030:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007034:	613b      	str	r3, [r7, #16]
  }
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8007036:	2300      	movs	r3, #0
 8007038:	75fb      	strb	r3, [r7, #23]
 800703a:	e021      	b.n	8007080 <XMC_VADC_GLOBAL_BackgroundInit+0x8c>
  {
    reg = g_xmc_vadc_group_array[i]->ARBPR;
 800703c:	7dfb      	ldrb	r3, [r7, #23]
 800703e:	4a2b      	ldr	r2, [pc, #172]	; (80070ec <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8007040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007044:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007048:	60fb      	str	r3, [r7, #12]

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007050:	60fb      	str	r3, [r7, #12]

    /* Program the priority of the request source */
    reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800705a:	b2db      	uxtb	r3, r3
 800705c:	021b      	lsls	r3, r3, #8
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	4313      	orrs	r3, r2
 8007062:	60fb      	str	r3, [r7, #12]
  
    /* Program the start mode */
    reg |= conv_start_mask;
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	4313      	orrs	r3, r2
 800706a:	60fb      	str	r3, [r7, #12]

    g_xmc_vadc_group_array[i]->ARBPR = reg;
 800706c:	7dfb      	ldrb	r3, [r7, #23]
 800706e:	4a1f      	ldr	r2, [pc, #124]	; (80070ec <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8007070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
  }
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800707a:	7dfb      	ldrb	r3, [r7, #23]
 800707c:	3301      	adds	r3, #1
 800707e:	75fb      	strb	r3, [r7, #23]
 8007080:	7dfb      	ldrb	r3, [r7, #23]
 8007082:	2b03      	cmp	r3, #3
 8007084:	d9da      	bls.n	800703c <XMC_VADC_GLOBAL_BackgroundInit+0x48>
  
  }
  #endif

  /* program BRSCTRL register */
  global_ptr->BRSCTRL = (uint32_t)(config->asctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800708e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  /* program BRSMR register */
  global_ptr->BRSMR = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_BRSMR_ENGT_Pos));
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	f043 0201 	orr.w	r2, r3, #1
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	f003 0303 	and.w	r3, r3, #3
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	d107      	bne.n	80070c4 <XMC_VADC_GLOBAL_BackgroundInit+0xd0>
  {
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80070ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }
#endif
  
  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 80070c4:	2300      	movs	r3, #0
 80070c6:	75fb      	strb	r3, [r7, #23]
 80070c8:	e009      	b.n	80070de <XMC_VADC_GLOBAL_BackgroundInit+0xea>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 80070ca:	7dfb      	ldrb	r3, [r7, #23]
 80070cc:	4a07      	ldr	r2, [pc, #28]	; (80070ec <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 80070ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7ff fe16 	bl	8006d04 <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
  }
#endif
  
  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 80070d8:	7dfb      	ldrb	r3, [r7, #23]
 80070da:	3301      	adds	r3, #1
 80070dc:	75fb      	strb	r3, [r7, #23]
 80070de:	7dfb      	ldrb	r3, [r7, #23]
 80070e0:	2b03      	cmp	r3, #3
 80070e2:	d9f2      	bls.n	80070ca <XMC_VADC_GLOBAL_BackgroundInit+0xd6>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
  #endif
  
}
 80070e4:	3718      	adds	r7, #24
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	0800dc7c 	.word	0x0800dc7c

080070f0 <XMC_VADC_GROUP_ChannelInit>:

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
/* API to initialize a channel unit */
void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
                                        const XMC_VADC_CHANNEL_CONFIG_t *config)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b089      	sub	sp, #36	; 0x24
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	607a      	str	r2, [r7, #4]


  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
  
  prio  = (uint32_t)config->channel_priority;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	7a1b      	ldrb	r3, [r3, #8]
 8007100:	61bb      	str	r3, [r7, #24]

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007108:	617b      	str	r3, [r7, #20]
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	2201      	movs	r2, #1
 800710e:	fa02 f303 	lsl.w	r3, r2, r3
 8007112:	43db      	mvns	r3, r3
 8007114:	697a      	ldr	r2, [r7, #20]
 8007116:	4013      	ands	r3, r2
 8007118:	617b      	str	r3, [r7, #20]
  ch_assign |= (uint32_t)(prio << ch_num);
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	69ba      	ldr	r2, [r7, #24]
 800711e:	fa02 f303 	lsl.w	r3, r2, r3
 8007122:	697a      	ldr	r2, [r7, #20]
 8007124:	4313      	orrs	r3, r2
 8007126:	617b      	str	r3, [r7, #20]
  group_ptr->CHASS = ch_assign;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	697a      	ldr	r2, [r7, #20]
 800712c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Alias channel */
  if (config->alias_channel >= (int32_t)0)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	7a5b      	ldrb	r3, [r3, #9]
 8007134:	b25b      	sxtb	r3, r3
 8007136:	2b00      	cmp	r3, #0
 8007138:	db29      	blt.n	800718e <XMC_VADC_GROUP_ChannelInit+0x9e>
  {
    mask = (uint32_t)0;
 800713a:	2300      	movs	r3, #0
 800713c:	61fb      	str	r3, [r7, #28]
    if ((uint32_t)1 == ch_num)
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	2b01      	cmp	r3, #1
 8007142:	d10a      	bne.n	800715a <XMC_VADC_GROUP_ChannelInit+0x6a>
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
 8007144:	2308      	movs	r3, #8
 8007146:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800714e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8007158:	e00c      	b.n	8007174 <XMC_VADC_GROUP_ChannelInit+0x84>
    }
    else if ((uint32_t)0 == ch_num)
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d109      	bne.n	8007174 <XMC_VADC_GROUP_ChannelInit+0x84>
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
 8007160:	2300      	movs	r3, #0
 8007162:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800716a:	f023 021f 	bic.w	r2, r3, #31
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	7a52      	ldrb	r2, [r2, #9]
 800717e:	b251      	sxtb	r1, r2
 8007180:	69fa      	ldr	r2, [r7, #28]
 8007182:	fa01 f202 	lsl.w	r2, r1, r2
 8007186:	431a      	orrs	r2, r3
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  group_ptr->BFL |= config->bfl;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	431a      	orrs	r2, r3
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6819      	ldr	r1, [r3, #0]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	68ba      	ldr	r2, [r7, #8]
 80071a8:	3280      	adds	r2, #128	; 0x80
 80071aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 80071ae:	3724      	adds	r7, #36	; 0x24
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 80071c0:	4b14      	ldr	r3, [pc, #80]	; (8007214 <_sbrk+0x5c>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d102      	bne.n	80071ce <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 80071c8:	4b12      	ldr	r3, [pc, #72]	; (8007214 <_sbrk+0x5c>)
 80071ca:	4a13      	ldr	r2, [pc, #76]	; (8007218 <_sbrk+0x60>)
 80071cc:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 80071ce:	4b11      	ldr	r3, [pc, #68]	; (8007214 <_sbrk+0x5c>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	3303      	adds	r3, #3
 80071d8:	f023 0303 	bic.w	r3, r3, #3
 80071dc:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 80071de:	4b0d      	ldr	r3, [pc, #52]	; (8007214 <_sbrk+0x5c>)
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4413      	add	r3, r2
 80071e6:	4a0d      	ldr	r2, [pc, #52]	; (800721c <_sbrk+0x64>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d207      	bcs.n	80071fc <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 80071ec:	4b09      	ldr	r3, [pc, #36]	; (8007214 <_sbrk+0x5c>)
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4413      	add	r3, r2
 80071f4:	4a07      	ldr	r2, [pc, #28]	; (8007214 <_sbrk+0x5c>)
 80071f6:	6013      	str	r3, [r2, #0]
    return (base);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	e006      	b.n	800720a <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 80071fc:	f004 ffb0 	bl	800c160 <__errno>
 8007200:	4602      	mov	r2, r0
 8007202:	230c      	movs	r3, #12
 8007204:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 8007206:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 800720a:	4618      	mov	r0, r3
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	200004d4 	.word	0x200004d4
 8007218:	20000cb8 	.word	0x20000cb8
 800721c:	2000ffc0 	.word	0x2000ffc0

08007220 <_init>:

/* Init */
void _init(void)
{}
 8007220:	b480      	push	{r7}
 8007222:	af00      	add	r7, sp, #0
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <USBD_VCOM_Event_GetDescriptor>:
 *   host.
 */
uint16_t USBD_VCOM_Event_GetDescriptor(const uint16_t w_value,
                                    const uint16_t w_index,
                                    const void** const descriptor_address)
{
 800722c:	b480      	push	{r7}
 800722e:	b085      	sub	sp, #20
 8007230:	af00      	add	r7, sp, #0
 8007232:	4603      	mov	r3, r0
 8007234:	603a      	str	r2, [r7, #0]
 8007236:	80fb      	strh	r3, [r7, #6]
 8007238:	460b      	mov	r3, r1
 800723a:	80bb      	strh	r3, [r7, #4]
	const uint8_t  descriptor_type   = (w_value >> 8);
 800723c:	88fb      	ldrh	r3, [r7, #6]
 800723e:	0a1b      	lsrs	r3, r3, #8
 8007240:	b29b      	uxth	r3, r3
 8007242:	727b      	strb	r3, [r7, #9]
	const uint8_t  descriptor_number = (w_value & 0xFF);
 8007244:	88fb      	ldrh	r3, [r7, #6]
 8007246:	723b      	strb	r3, [r7, #8]
	const void* address = NULL;
 8007248:	2300      	movs	r3, #0
 800724a:	60fb      	str	r3, [r7, #12]
	uint16_t    size    = NO_DESCRIPTOR;
 800724c:	2300      	movs	r3, #0
 800724e:	817b      	strh	r3, [r7, #10]

	switch (descriptor_type)
 8007250:	7a7b      	ldrb	r3, [r7, #9]
 8007252:	2b02      	cmp	r3, #2
 8007254:	d008      	beq.n	8007268 <USBD_VCOM_Event_GetDescriptor+0x3c>
 8007256:	2b03      	cmp	r3, #3
 8007258:	d00b      	beq.n	8007272 <USBD_VCOM_Event_GetDescriptor+0x46>
 800725a:	2b01      	cmp	r3, #1
 800725c:	d121      	bne.n	80072a2 <USBD_VCOM_Event_GetDescriptor+0x76>
	{
		case DTYPE_Device:
			address = &device_descriptor;
 800725e:	4b16      	ldr	r3, [pc, #88]	; (80072b8 <USBD_VCOM_Event_GetDescriptor+0x8c>)
 8007260:	60fb      	str	r3, [r7, #12]
			size    = sizeof(USB_Descriptor_Device_t);
 8007262:	2312      	movs	r3, #18
 8007264:	817b      	strh	r3, [r7, #10]
			break;
 8007266:	e01c      	b.n	80072a2 <USBD_VCOM_Event_GetDescriptor+0x76>
		case DTYPE_Configuration:
			address = &configuration_descriptor;
 8007268:	4b14      	ldr	r3, [pc, #80]	; (80072bc <USBD_VCOM_Event_GetDescriptor+0x90>)
 800726a:	60fb      	str	r3, [r7, #12]
			size    = sizeof(USB_Descriptor_Configuration_t);
 800726c:	233e      	movs	r3, #62	; 0x3e
 800726e:	817b      	strh	r3, [r7, #10]
			break;
 8007270:	e017      	b.n	80072a2 <USBD_VCOM_Event_GetDescriptor+0x76>
		case DTYPE_String:
			switch (descriptor_number)
 8007272:	7a3b      	ldrb	r3, [r7, #8]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d009      	beq.n	800728c <USBD_VCOM_Event_GetDescriptor+0x60>
 8007278:	2b02      	cmp	r3, #2
 800727a:	d00c      	beq.n	8007296 <USBD_VCOM_Event_GetDescriptor+0x6a>
 800727c:	2b00      	cmp	r3, #0
 800727e:	d000      	beq.n	8007282 <USBD_VCOM_Event_GetDescriptor+0x56>
				case 0x02:
					address = &product_string;
					size    = product_string.Header.Size;
					break;
			}
			break;
 8007280:	e00e      	b.n	80072a0 <USBD_VCOM_Event_GetDescriptor+0x74>
			break;
		case DTYPE_String:
			switch (descriptor_number)
			{
				case 0x00:
					address = &language_string;
 8007282:	4b0f      	ldr	r3, [pc, #60]	; (80072c0 <USBD_VCOM_Event_GetDescriptor+0x94>)
 8007284:	60fb      	str	r3, [r7, #12]
					size    = language_string.Header.Size;
 8007286:	2304      	movs	r3, #4
 8007288:	817b      	strh	r3, [r7, #10]
					break;
 800728a:	e009      	b.n	80072a0 <USBD_VCOM_Event_GetDescriptor+0x74>
				case 0x01:
					address = &manufacturer_string;
 800728c:	4b0d      	ldr	r3, [pc, #52]	; (80072c4 <USBD_VCOM_Event_GetDescriptor+0x98>)
 800728e:	60fb      	str	r3, [r7, #12]
					size    = manufacturer_string.Header.Size;
 8007290:	2312      	movs	r3, #18
 8007292:	817b      	strh	r3, [r7, #10]
					break;
 8007294:	e004      	b.n	80072a0 <USBD_VCOM_Event_GetDescriptor+0x74>
				case 0x02:
					address = &product_string;
 8007296:	4b0c      	ldr	r3, [pc, #48]	; (80072c8 <USBD_VCOM_Event_GetDescriptor+0x9c>)
 8007298:	60fb      	str	r3, [r7, #12]
					size    = product_string.Header.Size;
 800729a:	2310      	movs	r3, #16
 800729c:	817b      	strh	r3, [r7, #10]
					break;
 800729e:	bf00      	nop
			}
			break;
 80072a0:	bf00      	nop
	}

	(void)w_index;
	*descriptor_address = address;
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	601a      	str	r2, [r3, #0]
	return size;
 80072a8:	897b      	ldrh	r3, [r7, #10]
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3714      	adds	r7, #20
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	0800dc8c 	.word	0x0800dc8c
 80072bc:	0800dca0 	.word	0x0800dca0
 80072c0:	0800dce0 	.word	0x0800dce0
 80072c4:	0800dd48 	.word	0x0800dd48
 80072c8:	0800ddb0 	.word	0x0800ddb0

080072cc <Endpoint_IsSETUPReceived>:
	 *  \return Boolean \c true if the selected endpoint has received a SETUP
	 *  packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsSETUPReceived(void);
	static inline bool Endpoint_IsSETUPReceived(void)
	{
 80072cc:	b480      	push	{r7}
 80072ce:	af00      	add	r7, sp, #0
		return device.IsSetupRecieved;
 80072d0:	4b08      	ldr	r3, [pc, #32]	; (80072f4 <Endpoint_IsSETUPReceived+0x28>)
 80072d2:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	085b      	lsrs	r3, r3, #1
 80072da:	f003 0301 	and.w	r3, r3, #1
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	bf14      	ite	ne
 80072e4:	2301      	movne	r3, #1
 80072e6:	2300      	moveq	r3, #0
 80072e8:	b2db      	uxtb	r3, r3
	}
 80072ea:	4618      	mov	r0, r3
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr
 80072f4:	20000b48 	.word	0x20000b48

080072f8 <Endpoint_ClearSETUP>:
	 *
	 *  \note This is not applicable for non CONTROL type endpoints.
	 */
	static inline void Endpoint_ClearSETUP(void);
	static inline void Endpoint_ClearSETUP(void)
	{
 80072f8:	b480      	push	{r7}
 80072fa:	af00      	add	r7, sp, #0
		device.IsSetupRecieved = 0;
 80072fc:	4b05      	ldr	r3, [pc, #20]	; (8007314 <Endpoint_ClearSETUP+0x1c>)
 80072fe:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
 8007302:	f022 0202 	bic.w	r2, r2, #2
 8007306:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
	}
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop
 8007314:	20000b48 	.word	0x20000b48

08007318 <Endpoint_ClearStatusStage>:
	/** Nothing done in this function
	 *
	 */
	static inline void Endpoint_ClearStatusStage(void);
	static inline void Endpoint_ClearStatusStage(void)
	{
 8007318:	b480      	push	{r7}
 800731a:	af00      	add	r7, sp, #0

	}
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <Endpoint_IsINReady>:
	 *  \return Boolean \c true if the current endpoint is ready for an IN
	 *  packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsINReady(void);
	static inline bool Endpoint_IsINReady(void)
	{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 800732a:	4b13      	ldr	r3, [pc, #76]	; (8007378 <Endpoint_IsINReady+0x54>)
 800732c:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8007330:	461a      	mov	r2, r3
 8007332:	232c      	movs	r3, #44	; 0x2c
 8007334:	fb03 f302 	mul.w	r3, r3, r2
 8007338:	4a0f      	ldr	r2, [pc, #60]	; (8007378 <Endpoint_IsINReady+0x54>)
 800733a:	4413      	add	r3, r2
 800733c:	3304      	adds	r3, #4
 800733e:	607b      	str	r3, [r7, #4]
		return ep->InInUse == 0 && ep->IsEnabled;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	091b      	lsrs	r3, r3, #4
 8007346:	f003 0301 	and.w	r3, r3, #1
 800734a:	b2db      	uxtb	r3, r3
 800734c:	2b00      	cmp	r3, #0
 800734e:	d109      	bne.n	8007364 <Endpoint_IsINReady+0x40>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	085b      	lsrs	r3, r3, #1
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	b2db      	uxtb	r3, r3
 800735c:	2b00      	cmp	r3, #0
 800735e:	d001      	beq.n	8007364 <Endpoint_IsINReady+0x40>
 8007360:	2301      	movs	r3, #1
 8007362:	e000      	b.n	8007366 <Endpoint_IsINReady+0x42>
 8007364:	2300      	movs	r3, #0
 8007366:	f003 0301 	and.w	r3, r3, #1
 800736a:	b2db      	uxtb	r3, r3
	}
 800736c:	4618      	mov	r0, r3
 800736e:	370c      	adds	r7, #12
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr
 8007378:	20000b48 	.word	0x20000b48

0800737c <Endpoint_IsOUTReceived>:
	 *  \return Boolean \c true if current endpoint is has received an OUT
	 *  packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsOUTReceived(void);
	static inline bool Endpoint_IsOUTReceived(void)
	{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8007382:	4b0e      	ldr	r3, [pc, #56]	; (80073bc <Endpoint_IsOUTReceived+0x40>)
 8007384:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8007388:	461a      	mov	r2, r3
 800738a:	232c      	movs	r3, #44	; 0x2c
 800738c:	fb03 f302 	mul.w	r3, r3, r2
 8007390:	4a0a      	ldr	r2, [pc, #40]	; (80073bc <Endpoint_IsOUTReceived+0x40>)
 8007392:	4413      	add	r3, r2
 8007394:	3304      	adds	r3, #4
 8007396:	607b      	str	r3, [r7, #4]
		return ep->IsOutRecieved;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	095b      	lsrs	r3, r3, #5
 800739e:	f003 0301 	and.w	r3, r3, #1
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	bf14      	ite	ne
 80073a8:	2301      	movne	r3, #1
 80073aa:	2300      	moveq	r3, #0
 80073ac:	b2db      	uxtb	r3, r3
	}
 80073ae:	4618      	mov	r0, r3
 80073b0:	370c      	adds	r7, #12
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	20000b48 	.word	0x20000b48

080073c0 <CDC_Device_ProcessControlRequest>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
void CDC_Device_ProcessControlRequest(
					USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
	if ((Endpoint_IsSETUPReceived() != 0) && (USB_ControlRequest.wIndex ==
 80073c8:	f7ff ff80 	bl	80072cc <Endpoint_IsSETUPReceived>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f000 80ae 	beq.w	8007530 <CDC_Device_ProcessControlRequest+0x170>
 80073d4:	4b58      	ldr	r3, [pc, #352]	; (8007538 <CDC_Device_ProcessControlRequest+0x178>)
 80073d6:	889b      	ldrh	r3, [r3, #4]
 80073d8:	b29a      	uxth	r2, r3
			CDCInterfaceInfo->Config.ControlInterfaceNumber))
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	7c9b      	ldrb	r3, [r3, #18]
 * API IMPLEMENTATION
 **********************************************************************************************************************/
void CDC_Device_ProcessControlRequest(
					USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((Endpoint_IsSETUPReceived() != 0) && (USB_ControlRequest.wIndex ==
 80073de:	b29b      	uxth	r3, r3
 80073e0:	429a      	cmp	r2, r3
 80073e2:	f040 80a5 	bne.w	8007530 <CDC_Device_ProcessControlRequest+0x170>
			CDCInterfaceInfo->Config.ControlInterfaceNumber))
	{

		switch (USB_ControlRequest.bRequest)
 80073e6:	4b54      	ldr	r3, [pc, #336]	; (8007538 <CDC_Device_ProcessControlRequest+0x178>)
 80073e8:	785b      	ldrb	r3, [r3, #1]
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	3b20      	subs	r3, #32
 80073ee:	2b03      	cmp	r3, #3
 80073f0:	f200 809e 	bhi.w	8007530 <CDC_Device_ProcessControlRequest+0x170>
 80073f4:	a201      	add	r2, pc, #4	; (adr r2, 80073fc <CDC_Device_ProcessControlRequest+0x3c>)
 80073f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073fa:	bf00      	nop
 80073fc:	08007461 	.word	0x08007461
 8007400:	0800740d 	.word	0x0800740d
 8007404:	080074d3 	.word	0x080074d3
 8007408:	08007503 	.word	0x08007503
		{
			case CDC_REQ_GetLineEncoding:
				if ((REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE) == USB_ControlRequest.bmRequestType)
 800740c:	4b4a      	ldr	r3, [pc, #296]	; (8007538 <CDC_Device_ProcessControlRequest+0x178>)
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	b2db      	uxtb	r3, r3
 8007412:	2ba1      	cmp	r3, #161	; 0xa1
 8007414:	d123      	bne.n	800745e <CDC_Device_ProcessControlRequest+0x9e>
				{
					Endpoint_ClearSETUP();
 8007416:	f7ff ff6f 	bl	80072f8 <Endpoint_ClearSETUP>

					while (!(Endpoint_IsINReady()));
 800741a:	bf00      	nop
 800741c:	f7ff ff82 	bl	8007324 <Endpoint_IsINReady>
 8007420:	4603      	mov	r3, r0
 8007422:	f083 0301 	eor.w	r3, r3, #1
 8007426:	b2db      	uxtb	r3, r3
 8007428:	2b00      	cmp	r3, #0
 800742a:	d1f7      	bne.n	800741c <CDC_Device_ProcessControlRequest+0x5c>

					Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	699b      	ldr	r3, [r3, #24]
 8007430:	4618      	mov	r0, r3
 8007432:	f000 fae3 	bl	80079fc <Endpoint_Write_32_LE>
					Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	7f1b      	ldrb	r3, [r3, #28]
 800743a:	4618      	mov	r0, r3
 800743c:	f000 fa72 	bl	8007924 <Endpoint_Write_8>
					Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	7f5b      	ldrb	r3, [r3, #29]
 8007444:	4618      	mov	r0, r3
 8007446:	f000 fa6d 	bl	8007924 <Endpoint_Write_8>
					Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	7f9b      	ldrb	r3, [r3, #30]
 800744e:	4618      	mov	r0, r3
 8007450:	f000 fa68 	bl	8007924 <Endpoint_Write_8>

					Endpoint_ClearIN();
 8007454:	f000 fa14 	bl	8007880 <Endpoint_ClearIN>
					Endpoint_ClearStatusStage();
 8007458:	f7ff ff5e 	bl	8007318 <Endpoint_ClearStatusStage>
				}

				break;
 800745c:	e068      	b.n	8007530 <CDC_Device_ProcessControlRequest+0x170>
 800745e:	e067      	b.n	8007530 <CDC_Device_ProcessControlRequest+0x170>
			case CDC_REQ_SetLineEncoding:
				if ((REQDIR_HOSTTODEVICE |REQTYPE_CLASS | REQREC_INTERFACE) == USB_ControlRequest.bmRequestType)
 8007460:	4b35      	ldr	r3, [pc, #212]	; (8007538 <CDC_Device_ProcessControlRequest+0x178>)
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	b2db      	uxtb	r3, r3
 8007466:	2b21      	cmp	r3, #33	; 0x21
 8007468:	d132      	bne.n	80074d0 <CDC_Device_ProcessControlRequest+0x110>
				{
					Endpoint_ClearSETUP();
 800746a:	f7ff ff45 	bl	80072f8 <Endpoint_ClearSETUP>

					while (!(Endpoint_IsOUTReceived()))
 800746e:	e005      	b.n	800747c <CDC_Device_ProcessControlRequest+0xbc>
					{
						if (USB_DeviceState == DEVICE_STATE_Unattached)
 8007470:	4b32      	ldr	r3, [pc, #200]	; (800753c <CDC_Device_ProcessControlRequest+0x17c>)
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	b2db      	uxtb	r3, r3
 8007476:	2b00      	cmp	r3, #0
 8007478:	d100      	bne.n	800747c <CDC_Device_ProcessControlRequest+0xbc>
						  return;
 800747a:	e059      	b.n	8007530 <CDC_Device_ProcessControlRequest+0x170>
			case CDC_REQ_SetLineEncoding:
				if ((REQDIR_HOSTTODEVICE |REQTYPE_CLASS | REQREC_INTERFACE) == USB_ControlRequest.bmRequestType)
				{
					Endpoint_ClearSETUP();

					while (!(Endpoint_IsOUTReceived()))
 800747c:	f7ff ff7e 	bl	800737c <Endpoint_IsOUTReceived>
 8007480:	4603      	mov	r3, r0
 8007482:	f083 0301 	eor.w	r3, r3, #1
 8007486:	b2db      	uxtb	r3, r3
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1f1      	bne.n	8007470 <CDC_Device_ProcessControlRequest+0xb0>
					{
						if (USB_DeviceState == DEVICE_STATE_Unattached)
						  return;
					}

					CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
 800748c:	f000 faea 	bl	8007a64 <Endpoint_Read_32_LE>
 8007490:	4602      	mov	r2, r0
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	619a      	str	r2, [r3, #24]
					CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
 8007496:	f000 fa79 	bl	800798c <Endpoint_Read_8>
 800749a:	4603      	mov	r3, r0
 800749c:	461a      	mov	r2, r3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	771a      	strb	r2, [r3, #28]
					CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
 80074a2:	f000 fa73 	bl	800798c <Endpoint_Read_8>
 80074a6:	4603      	mov	r3, r0
 80074a8:	461a      	mov	r2, r3
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	775a      	strb	r2, [r3, #29]
					CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
 80074ae:	f000 fa6d 	bl	800798c <Endpoint_Read_8>
 80074b2:	4603      	mov	r3, r0
 80074b4:	461a      	mov	r2, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	779a      	strb	r2, [r3, #30]

					//Endpoint_ClearOUT();
					Endpoint_ClearStatusStage();
 80074ba:	f7ff ff2d 	bl	8007318 <Endpoint_ClearStatusStage>

					if(0 != cdc_class_events.LineEncodingChanged)
 80074be:	4b20      	ldr	r3, [pc, #128]	; (8007540 <CDC_Device_ProcessControlRequest+0x180>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d004      	beq.n	80074d0 <CDC_Device_ProcessControlRequest+0x110>
					{
						cdc_class_events.LineEncodingChanged(CDCInterfaceInfo);
 80074c6:	4b1e      	ldr	r3, [pc, #120]	; (8007540 <CDC_Device_ProcessControlRequest+0x180>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	4798      	blx	r3
					}

				}

				break;
 80074ce:	e02f      	b.n	8007530 <CDC_Device_ProcessControlRequest+0x170>
 80074d0:	e02e      	b.n	8007530 <CDC_Device_ProcessControlRequest+0x170>
			case CDC_REQ_SetControlLineState:
				if ((REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE) == USB_ControlRequest.bmRequestType)
 80074d2:	4b19      	ldr	r3, [pc, #100]	; (8007538 <CDC_Device_ProcessControlRequest+0x178>)
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	2b21      	cmp	r3, #33	; 0x21
 80074da:	d111      	bne.n	8007500 <CDC_Device_ProcessControlRequest+0x140>
				{
					Endpoint_ClearSETUP();
 80074dc:	f7ff ff0c 	bl	80072f8 <Endpoint_ClearSETUP>
					Endpoint_ClearStatusStage();
 80074e0:	f7ff ff1a 	bl	8007318 <Endpoint_ClearStatusStage>

					CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 80074e4:	4b14      	ldr	r3, [pc, #80]	; (8007538 <CDC_Device_ProcessControlRequest+0x178>)
 80074e6:	885b      	ldrh	r3, [r3, #2]
 80074e8:	b29a      	uxth	r2, r3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	829a      	strh	r2, [r3, #20]

					if(0 != cdc_class_events.ControLineStateChanged)
 80074ee:	4b14      	ldr	r3, [pc, #80]	; (8007540 <CDC_Device_ProcessControlRequest+0x180>)
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d004      	beq.n	8007500 <CDC_Device_ProcessControlRequest+0x140>
					{
						cdc_class_events.ControLineStateChanged(CDCInterfaceInfo);
 80074f6:	4b12      	ldr	r3, [pc, #72]	; (8007540 <CDC_Device_ProcessControlRequest+0x180>)
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	4798      	blx	r3
					}

				}

				break;
 80074fe:	e017      	b.n	8007530 <CDC_Device_ProcessControlRequest+0x170>
 8007500:	e016      	b.n	8007530 <CDC_Device_ProcessControlRequest+0x170>
			case CDC_REQ_SendBreak:
				if ((REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE) == USB_ControlRequest.bmRequestType)
 8007502:	4b0d      	ldr	r3, [pc, #52]	; (8007538 <CDC_Device_ProcessControlRequest+0x178>)
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	b2db      	uxtb	r3, r3
 8007508:	2b21      	cmp	r3, #33	; 0x21
 800750a:	d110      	bne.n	800752e <CDC_Device_ProcessControlRequest+0x16e>
				{
					Endpoint_ClearSETUP();
 800750c:	f7ff fef4 	bl	80072f8 <Endpoint_ClearSETUP>
					Endpoint_ClearStatusStage();
 8007510:	f7ff ff02 	bl	8007318 <Endpoint_ClearStatusStage>

					if(0 != cdc_class_events.Device_BreakSent)
 8007514:	4b0a      	ldr	r3, [pc, #40]	; (8007540 <CDC_Device_ProcessControlRequest+0x180>)
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d008      	beq.n	800752e <CDC_Device_ProcessControlRequest+0x16e>
					{
						cdc_class_events.Device_BreakSent(CDCInterfaceInfo,	(uint8_t)USB_ControlRequest.wValue);
 800751c:	4b08      	ldr	r3, [pc, #32]	; (8007540 <CDC_Device_ProcessControlRequest+0x180>)
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	4a05      	ldr	r2, [pc, #20]	; (8007538 <CDC_Device_ProcessControlRequest+0x178>)
 8007522:	8852      	ldrh	r2, [r2, #2]
 8007524:	b292      	uxth	r2, r2
 8007526:	b2d2      	uxtb	r2, r2
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	4611      	mov	r1, r2
 800752c:	4798      	blx	r3
					}

				}

				break;
 800752e:	bf00      	nop
		}
	}
}
 8007530:	3708      	adds	r7, #8
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	20000940 	.word	0x20000940
 800753c:	2000093d 	.word	0x2000093d
 8007540:	20000088 	.word	0x20000088

08007544 <CDC_Device_ConfigureEndpoints>:




bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
	bool status = true;
 800754c:	2301      	movs	r3, #1
 800754e:	73fb      	strb	r3, [r7, #15]
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	3314      	adds	r3, #20
 8007554:	4618      	mov	r0, r3
 8007556:	2100      	movs	r1, #0
 8007558:	220c      	movs	r2, #12
 800755a:	f004 fe40 	bl	800c1de <memset>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2202      	movs	r2, #2
 8007562:	711a      	strb	r2, [r3, #4]
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2202      	movs	r2, #2
 8007568:	729a      	strb	r2, [r3, #10]
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2203      	movs	r2, #3
 800756e:	741a      	strb	r2, [r3, #16]

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4618      	mov	r0, r3
 8007574:	2101      	movs	r1, #1
 8007576:	f000 faad 	bl	8007ad4 <Endpoint_ConfigureEndpointTable>
 800757a:	4603      	mov	r3, r0
 800757c:	f083 0301 	eor.w	r3, r3, #1
 8007580:	b2db      	uxtb	r3, r3
 8007582:	2b00      	cmp	r3, #0
 8007584:	d001      	beq.n	800758a <CDC_Device_ConfigureEndpoints+0x46>
	{
		status = false;
 8007586:	2300      	movs	r3, #0
 8007588:	73fb      	strb	r3, [r7, #15]
	}

	if (!(Endpoint_ConfigureEndpointTable(
							&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	3306      	adds	r3, #6
	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
	{
		status = false;
	}

	if (!(Endpoint_ConfigureEndpointTable(
 800758e:	4618      	mov	r0, r3
 8007590:	2101      	movs	r1, #1
 8007592:	f000 fa9f 	bl	8007ad4 <Endpoint_ConfigureEndpointTable>
 8007596:	4603      	mov	r3, r0
 8007598:	f083 0301 	eor.w	r3, r3, #1
 800759c:	b2db      	uxtb	r3, r3
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d001      	beq.n	80075a6 <CDC_Device_ConfigureEndpoints+0x62>
							&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	{
		status = false;
 80075a2:	2300      	movs	r3, #0
 80075a4:	73fb      	strb	r3, [r7, #15]
	}

	if (!(Endpoint_ConfigureEndpointTable(
						&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	330c      	adds	r3, #12
							&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	{
		status = false;
	}

	if (!(Endpoint_ConfigureEndpointTable(
 80075aa:	4618      	mov	r0, r3
 80075ac:	2101      	movs	r1, #1
 80075ae:	f000 fa91 	bl	8007ad4 <Endpoint_ConfigureEndpointTable>
 80075b2:	4603      	mov	r3, r0
 80075b4:	f083 0301 	eor.w	r3, r3, #1
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d001      	beq.n	80075c2 <CDC_Device_ConfigureEndpoints+0x7e>
						&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
	{
		status = false;
 80075be:	2300      	movs	r3, #0
 80075c0:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80075c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <USBD_VCOM_Init>:
}


/*The function initializes the USB core layer and register USB event call backs. */
USBD_VCOM_STATUS_t USBD_VCOM_Init(USBD_VCOM_t *vcom_handle)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;
 80075d4:	2300      	movs	r3, #0
 80075d6:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("USBD_VCOM_Init: vcom_handle not valid", (vcom_handle != NULL));

  /*Initialize CDC interface*/
  USBD_VCOM_cdc_interface.Config.ControlInterfaceNumber = 0U;
 80075d8:	4b1f      	ldr	r3, [pc, #124]	; (8007658 <USBD_VCOM_Init+0x8c>)
 80075da:	2200      	movs	r2, #0
 80075dc:	749a      	strb	r2, [r3, #18]
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Address = (ENDPOINT_DIR_IN | CDC_TX_EPNUM);
 80075de:	4b1e      	ldr	r3, [pc, #120]	; (8007658 <USBD_VCOM_Init+0x8c>)
 80075e0:	2282      	movs	r2, #130	; 0x82
 80075e2:	701a      	strb	r2, [r3, #0]
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Size = CDC_TXRX_EPSIZE;
 80075e4:	4b1c      	ldr	r3, [pc, #112]	; (8007658 <USBD_VCOM_Init+0x8c>)
 80075e6:	2240      	movs	r2, #64	; 0x40
 80075e8:	805a      	strh	r2, [r3, #2]
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Type = (uint8_t)EP_TYPE_BULK;
 80075ea:	4b1b      	ldr	r3, [pc, #108]	; (8007658 <USBD_VCOM_Init+0x8c>)
 80075ec:	2202      	movs	r2, #2
 80075ee:	711a      	strb	r2, [r3, #4]
  USBD_VCOM_cdc_interface.Config.DataINEndpoint.Banks = 0U;
 80075f0:	4b19      	ldr	r3, [pc, #100]	; (8007658 <USBD_VCOM_Init+0x8c>)
 80075f2:	2200      	movs	r2, #0
 80075f4:	715a      	strb	r2, [r3, #5]
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Address = CDC_RX_EPNUM;
 80075f6:	4b18      	ldr	r3, [pc, #96]	; (8007658 <USBD_VCOM_Init+0x8c>)
 80075f8:	2203      	movs	r2, #3
 80075fa:	719a      	strb	r2, [r3, #6]
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Size = CDC_TXRX_EPSIZE;
 80075fc:	4b16      	ldr	r3, [pc, #88]	; (8007658 <USBD_VCOM_Init+0x8c>)
 80075fe:	2240      	movs	r2, #64	; 0x40
 8007600:	811a      	strh	r2, [r3, #8]
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Type = (uint8_t)EP_TYPE_BULK;
 8007602:	4b15      	ldr	r3, [pc, #84]	; (8007658 <USBD_VCOM_Init+0x8c>)
 8007604:	2202      	movs	r2, #2
 8007606:	729a      	strb	r2, [r3, #10]
  USBD_VCOM_cdc_interface.Config.DataOUTEndpoint.Banks = 0U;
 8007608:	4b13      	ldr	r3, [pc, #76]	; (8007658 <USBD_VCOM_Init+0x8c>)
 800760a:	2200      	movs	r2, #0
 800760c:	72da      	strb	r2, [r3, #11]
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Address = (ENDPOINT_DIR_IN | CDC_NOTIFICATION_EPNUM);
 800760e:	4b12      	ldr	r3, [pc, #72]	; (8007658 <USBD_VCOM_Init+0x8c>)
 8007610:	2281      	movs	r2, #129	; 0x81
 8007612:	731a      	strb	r2, [r3, #12]
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Size = CDC_NOTIFICATION_EPSIZE;
 8007614:	4b10      	ldr	r3, [pc, #64]	; (8007658 <USBD_VCOM_Init+0x8c>)
 8007616:	2208      	movs	r2, #8
 8007618:	81da      	strh	r2, [r3, #14]
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Type = (uint8_t)EP_TYPE_INTERRUPT;
 800761a:	4b0f      	ldr	r3, [pc, #60]	; (8007658 <USBD_VCOM_Init+0x8c>)
 800761c:	2203      	movs	r2, #3
 800761e:	741a      	strb	r2, [r3, #16]
  USBD_VCOM_cdc_interface.Config.NotificationEndpoint.Banks = 0U;
 8007620:	4b0d      	ldr	r3, [pc, #52]	; (8007658 <USBD_VCOM_Init+0x8c>)
 8007622:	2200      	movs	r2, #0
 8007624:	745a      	strb	r2, [r3, #17]

  /*Register the required USB events*/
  if (USBD_VCOM_STATUS_SUCCESS == USBD_VCOM_Register_USBEvent_CB(&usbd_vcom_events))
 8007626:	480d      	ldr	r0, [pc, #52]	; (800765c <USBD_VCOM_Init+0x90>)
 8007628:	f000 f81c 	bl	8007664 <USBD_VCOM_Register_USBEvent_CB>
 800762c:	4603      	mov	r3, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d10a      	bne.n	8007648 <USBD_VCOM_Init+0x7c>
  {
    if (USBD_VCOM_STATUS_SUCCESS != (USBD_VCOM_STATUS_t)USBD_Init(USBD_handle))
 8007632:	4b0b      	ldr	r3, [pc, #44]	; (8007660 <USBD_VCOM_Init+0x94>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4618      	mov	r0, r3
 8007638:	f000 fbaa 	bl	8007d90 <USBD_Init>
 800763c:	4603      	mov	r3, r0
 800763e:	2b00      	cmp	r3, #0
 8007640:	d004      	beq.n	800764c <USBD_VCOM_Init+0x80>
    {
      status = USBD_VCOM_STATUS_FAILURE;
 8007642:	2301      	movs	r3, #1
 8007644:	73fb      	strb	r3, [r7, #15]
 8007646:	e001      	b.n	800764c <USBD_VCOM_Init+0x80>
    }
  }
  else
  {
    status = USBD_VCOM_STATUS_FAILURE;
 8007648:	2301      	movs	r3, #1
 800764a:	73fb      	strb	r3, [r7, #15]
  }
  /*Remove the compilation warning*/
  (void)vcom_handle;

  return status;
 800764c:	7bfb      	ldrb	r3, [r7, #15]
}
 800764e:	4618      	mov	r0, r3
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	2000091c 	.word	0x2000091c
 800765c:	20000060 	.word	0x20000060
 8007660:	200000ac 	.word	0x200000ac

08007664 <USBD_VCOM_Register_USBEvent_CB>:
/**
 * Register the USB event call backs.
 * Call this API before calling USBD_Init
 **/
USBD_VCOM_STATUS_t USBD_VCOM_Register_USBEvent_CB(USBD_Event_CB_t *event_callback)
{
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  USBD_VCOM_STATUS_t status = USBD_VCOM_STATUS_SUCCESS;
 800766c:	2300      	movs	r3, #0
 800766e:	73fb      	strb	r3, [r7, #15]

  /*Register USB event call backs*/
  if (event_callback != NULL)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d03c      	beq.n	80076f0 <USBD_VCOM_Register_USBEvent_CB+0x8c>
  {
    /*NULL checks for the event callbacks are done in the low level APP USBD*/
    USBD_handle->event_cb->set_address = event_callback->set_address;
 8007676:	4b23      	ldr	r3, [pc, #140]	; (8007704 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	6912      	ldr	r2, [r2, #16]
 8007680:	611a      	str	r2, [r3, #16]
    USBD_handle->event_cb->config_changed = event_callback->config_changed;
 8007682:	4b20      	ldr	r3, [pc, #128]	; (8007704 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	691b      	ldr	r3, [r3, #16]
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	6892      	ldr	r2, [r2, #8]
 800768c:	609a      	str	r2, [r3, #8]
    USBD_handle->event_cb->connect = event_callback->connect;
 800768e:	4b1d      	ldr	r3, [pc, #116]	; (8007704 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	6812      	ldr	r2, [r2, #0]
 8007698:	601a      	str	r2, [r3, #0]
    USBD_handle->event_cb->control_request = event_callback->control_request;
 800769a:	4b1a      	ldr	r3, [pc, #104]	; (8007704 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	691b      	ldr	r3, [r3, #16]
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	68d2      	ldr	r2, [r2, #12]
 80076a4:	60da      	str	r2, [r3, #12]
    USBD_handle->event_cb->disconnect = event_callback->disconnect;
 80076a6:	4b17      	ldr	r3, [pc, #92]	; (8007704 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	691b      	ldr	r3, [r3, #16]
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	6852      	ldr	r2, [r2, #4]
 80076b0:	605a      	str	r2, [r3, #4]
    USBD_handle->event_cb->get_descriptor = event_callback->get_descriptor;
 80076b2:	4b14      	ldr	r3, [pc, #80]	; (8007704 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	6952      	ldr	r2, [r2, #20]
 80076bc:	615a      	str	r2, [r3, #20]
    USBD_handle->event_cb->suspend = event_callback->suspend;
 80076be:	4b11      	ldr	r3, [pc, #68]	; (8007704 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	69d2      	ldr	r2, [r2, #28]
 80076c8:	61da      	str	r2, [r3, #28]
    USBD_handle->event_cb->wakeup = event_callback->wakeup;
 80076ca:	4b0e      	ldr	r3, [pc, #56]	; (8007704 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	691b      	ldr	r3, [r3, #16]
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	6992      	ldr	r2, [r2, #24]
 80076d4:	619a      	str	r2, [r3, #24]
    USBD_handle->event_cb->start_of_frame = event_callback->start_of_frame;
 80076d6:	4b0b      	ldr	r3, [pc, #44]	; (8007704 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	691b      	ldr	r3, [r3, #16]
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	6a12      	ldr	r2, [r2, #32]
 80076e0:	621a      	str	r2, [r3, #32]
    USBD_handle->event_cb->reset = event_callback->reset;
 80076e2:	4b08      	ldr	r3, [pc, #32]	; (8007704 <USBD_VCOM_Register_USBEvent_CB+0xa0>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80076ec:	625a      	str	r2, [r3, #36]	; 0x24
 80076ee:	e001      	b.n	80076f4 <USBD_VCOM_Register_USBEvent_CB+0x90>
  }
  else
  {
    status = USBD_VCOM_STATUS_FAILURE;
 80076f0:	2301      	movs	r3, #1
 80076f2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80076f4:	7bfb      	ldrb	r3, [r7, #15]

}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3714      	adds	r7, #20
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	200000ac 	.word	0x200000ac

08007708 <USBD_VCOM_Event_ConfigurationChanged>:

/* Event handler for the USB Configuration Changed event. */
void USBD_VCOM_Event_ConfigurationChanged(void)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	af00      	add	r7, sp, #0
  USBD_SetEndpointBuffer(((uint8_t)CDC_IN_EP_MASK|(uint8_t)CDC_NOTIFICATION_EPNUM), notification_ep_buf, 
 800770c:	2081      	movs	r0, #129	; 0x81
 800770e:	490f      	ldr	r1, [pc, #60]	; (800774c <USBD_VCOM_Event_ConfigurationChanged+0x44>)
 8007710:	2240      	movs	r2, #64	; 0x40
 8007712:	f000 fbdb 	bl	8007ecc <USBD_SetEndpointBuffer>
  (uint16_t)USB_FS_MAXPKT_SIZE);
  USBD_SetEndpointBuffer(((uint8_t)CDC_IN_EP_MASK|(uint8_t)CDC_TX_EPNUM), tx_ep_buf, (uint16_t)USB_FS_MAXPKT_SIZE);
 8007716:	2082      	movs	r0, #130	; 0x82
 8007718:	490d      	ldr	r1, [pc, #52]	; (8007750 <USBD_VCOM_Event_ConfigurationChanged+0x48>)
 800771a:	2240      	movs	r2, #64	; 0x40
 800771c:	f000 fbd6 	bl	8007ecc <USBD_SetEndpointBuffer>
  USBD_SetEndpointBuffer((CDC_RX_EPNUM), rx_ep_buf, (uint16_t)USB_FS_MAXPKT_SIZE);
 8007720:	2003      	movs	r0, #3
 8007722:	490c      	ldr	r1, [pc, #48]	; (8007754 <USBD_VCOM_Event_ConfigurationChanged+0x4c>)
 8007724:	2240      	movs	r2, #64	; 0x40
 8007726:	f000 fbd1 	bl	8007ecc <USBD_SetEndpointBuffer>
  if (true == CDC_Device_ConfigureEndpoints(&USBD_VCOM_cdc_interface))
 800772a:	480b      	ldr	r0, [pc, #44]	; (8007758 <USBD_VCOM_Event_ConfigurationChanged+0x50>)
 800772c:	f7ff ff0a 	bl	8007544 <CDC_Device_ConfigureEndpoints>
 8007730:	4603      	mov	r3, r0
 8007732:	2b00      	cmp	r3, #0
 8007734:	d009      	beq.n	800774a <USBD_VCOM_Event_ConfigurationChanged+0x42>
  {
    device.IsConfigured = 1U;
 8007736:	4a09      	ldr	r2, [pc, #36]	; (800775c <USBD_VCOM_Event_ConfigurationChanged+0x54>)
 8007738:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 800773c:	f043 0301 	orr.w	r3, r3, #1
 8007740:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
    USB_DeviceState = (uint8_t)DEVICE_STATE_Configured;
 8007744:	4b06      	ldr	r3, [pc, #24]	; (8007760 <USBD_VCOM_Event_ConfigurationChanged+0x58>)
 8007746:	2204      	movs	r2, #4
 8007748:	701a      	strb	r2, [r3, #0]
  }
}
 800774a:	bd80      	pop	{r7, pc}
 800774c:	2000089c 	.word	0x2000089c
 8007750:	20000858 	.word	0x20000858
 8007754:	200008dc 	.word	0x200008dc
 8007758:	2000091c 	.word	0x2000091c
 800775c:	20000b48 	.word	0x20000b48
 8007760:	2000093d 	.word	0x2000093d

08007764 <USBD_VCOM_Event_ControlRequest>:

/* Event handler for the USB Control Request reception event. */
void USBD_VCOM_Event_ControlRequest(void)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	af00      	add	r7, sp, #0
  CDC_Device_ProcessControlRequest(&USBD_VCOM_cdc_interface);
 8007768:	4801      	ldr	r0, [pc, #4]	; (8007770 <USBD_VCOM_Event_ControlRequest+0xc>)
 800776a:	f7ff fe29 	bl	80073c0 <CDC_Device_ProcessControlRequest>
}
 800776e:	bd80      	pop	{r7, pc}
 8007770:	2000091c 	.word	0x2000091c

08007774 <USBD_VCOM_Event_Reset>:

/* Event handler for the USB reset event. */
void USBD_VCOM_Event_Reset(void)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	af00      	add	r7, sp, #0
  /*For self powered devices, reinitialize USB*/
  if (device.IsConfigured)
 8007778:	4b0c      	ldr	r3, [pc, #48]	; (80077ac <USBD_VCOM_Event_Reset+0x38>)
 800777a:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 800777e:	f003 0301 	and.w	r3, r3, #1
 8007782:	b2db      	uxtb	r3, r3
 8007784:	2b00      	cmp	r3, #0
 8007786:	d010      	beq.n	80077aa <USBD_VCOM_Event_Reset+0x36>
  {
    device.IsConfigured = 0U;
 8007788:	4a08      	ldr	r2, [pc, #32]	; (80077ac <USBD_VCOM_Event_Reset+0x38>)
 800778a:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 800778e:	f36f 0300 	bfc	r3, #0, #1
 8007792:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
    if (USBD_VCOM_STATUS_SUCCESS == USBD_VCOM_Init(USBD_VCOM_handle))
 8007796:	4b06      	ldr	r3, [pc, #24]	; (80077b0 <USBD_VCOM_Event_Reset+0x3c>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4618      	mov	r0, r3
 800779c:	f7ff ff16 	bl	80075cc <USBD_VCOM_Init>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d101      	bne.n	80077aa <USBD_VCOM_Event_Reset+0x36>
    {
      if (USBD_VCOM_STATUS_SUCCESS != USBD_VCOM_Connect())
 80077a6:	f000 f831 	bl	800780c <USBD_VCOM_Connect>
      {
      }
    }
  }
}
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	20000b48 	.word	0x20000b48
 80077b0:	20000094 	.word	0x20000094

080077b4 <USBD_VCOM_CDCClass_Event_LineEncodingChanged>:
/*CDC class driver event for a line encoding change on a CDC interface. This event fires each time the host
 * requests a line encoding change (containing the serial parity, baud and other configuration information). The new
 * line encoding settings are available in the LineEncoding structure inside the CDC interface structure passed
 * as a parameter.*/
void USBD_VCOM_CDCClass_Event_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const cdc_interface_info)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  /*set here the global volatile flag(which can be polled from the top level application) to indicate
   * the event. */
  cdc_event_flags.line_encoding_event_flag = 1U;
 80077bc:	4b03      	ldr	r3, [pc, #12]	; (80077cc <USBD_VCOM_CDCClass_Event_LineEncodingChanged+0x18>)
 80077be:	2201      	movs	r2, #1
 80077c0:	701a      	strb	r2, [r3, #0]
  (void)cdc_interface_info;

}
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr
 80077cc:	20000898 	.word	0x20000898

080077d0 <USBD_VCOM_CDCClass_Event_ControlLineStateChanged>:
/*CDC class driver event for a control line state change on a CDC interface. This event fires
 * each time the host requests a control line state change (containing the virtual serial control
 * line states, such as DTR).The new control line states are available in the ControlLineStates.HostToDevice
 * value inside the CDC interface structure passed as a parameter. */
void USBD_VCOM_CDCClass_Event_ControlLineStateChanged(USB_ClassInfo_CDC_Device_t* const cdc_interface_info)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  /*set here the global volatile flag(which can be polled from the top level application) to indicate the event */
  cdc_event_flags.control_line_state_change_event_flag = 1U;
 80077d8:	4b03      	ldr	r3, [pc, #12]	; (80077e8 <USBD_VCOM_CDCClass_Event_ControlLineStateChanged+0x18>)
 80077da:	2201      	movs	r2, #1
 80077dc:	705a      	strb	r2, [r3, #1]
  (void)cdc_interface_info;

}
 80077de:	370c      	adds	r7, #12
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr
 80077e8:	20000898 	.word	0x20000898

080077ec <USBD_VCOM_CDCClass_Event_BreakSent>:

/*CDC class driver event for a send break request sent to the device from the host.
 * This is generally used to separate data or to indicate a special condition to the receiving device.*/
void USBD_VCOM_CDCClass_Event_BreakSent(USB_ClassInfo_CDC_Device_t* const cdc_interface_info,	const uint8_t duration)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	460b      	mov	r3, r1
 80077f6:	70fb      	strb	r3, [r7, #3]
  /*set here the global volatile flag(which can be polled from the top level application) to indicate the event */
  cdc_event_flags.break_event_flag = 1U;
 80077f8:	4b03      	ldr	r3, [pc, #12]	; (8007808 <USBD_VCOM_CDCClass_Event_BreakSent+0x1c>)
 80077fa:	2201      	movs	r2, #1
 80077fc:	709a      	strb	r2, [r3, #2]
  (void)cdc_interface_info;
  (void)duration;

}
 80077fe:	370c      	adds	r7, #12
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr
 8007808:	20000898 	.word	0x20000898

0800780c <USBD_VCOM_Connect>:

/*The API to connect the VCOM device to USB host*/
USBD_VCOM_STATUS_t USBD_VCOM_Connect(void)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	af00      	add	r7, sp, #0
  return (USBD_VCOM_STATUS_t)USBD_Connect();
 8007810:	f000 fb50 	bl	8007eb4 <USBD_Connect>
 8007814:	4603      	mov	r3, r0
}
 8007816:	4618      	mov	r0, r3
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop

0800781c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	4603      	mov	r3, r0
 8007824:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8007826:	4908      	ldr	r1, [pc, #32]	; (8007848 <NVIC_EnableIRQ+0x2c>)
 8007828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800782c:	095b      	lsrs	r3, r3, #5
 800782e:	79fa      	ldrb	r2, [r7, #7]
 8007830:	f002 021f 	and.w	r2, r2, #31
 8007834:	2001      	movs	r0, #1
 8007836:	fa00 f202 	lsl.w	r2, r0, r2
 800783a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800783e:	370c      	adds	r7, #12
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr
 8007848:	e000e100 	.word	0xe000e100

0800784c <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 8007852:	4603      	mov	r3, r0
 8007854:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8007856:	4909      	ldr	r1, [pc, #36]	; (800787c <NVIC_DisableIRQ+0x30>)
 8007858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800785c:	095b      	lsrs	r3, r3, #5
 800785e:	79fa      	ldrb	r2, [r7, #7]
 8007860:	f002 021f 	and.w	r2, r2, #31
 8007864:	2001      	movs	r0, #1
 8007866:	fa00 f202 	lsl.w	r2, r0, r2
 800786a:	3320      	adds	r3, #32
 800786c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007870:	370c      	adds	r7, #12
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	e000e100 	.word	0xe000e100

08007880 <Endpoint_ClearIN>:
		device.Driver->EndpointReadStart(ep->Address,ep->OutBufferLength);
	}
}

void Endpoint_ClearIN(void)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8007886:	4b26      	ldr	r3, [pc, #152]	; (8007920 <Endpoint_ClearIN+0xa0>)
 8007888:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800788c:	461a      	mov	r2, r3
 800788e:	232c      	movs	r3, #44	; 0x2c
 8007890:	fb03 f302 	mul.w	r3, r3, r2
 8007894:	4a22      	ldr	r2, [pc, #136]	; (8007920 <Endpoint_ClearIN+0xa0>)
 8007896:	4413      	add	r3, r2
 8007898:	3304      	adds	r3, #4
 800789a:	607b      	str	r3, [r7, #4]
	int32_t data_count;
	/* don't clear if in use or not enabled */
	if (ep->InInUse == 1 || ep->IsEnabled == 0)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	091b      	lsrs	r3, r3, #4
 80078a2:	f003 0301 	and.w	r3, r3, #1
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d007      	beq.n	80078bc <Endpoint_ClearIN+0x3c>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	085b      	lsrs	r3, r3, #1
 80078b2:	f003 0301 	and.w	r3, r3, #1
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d100      	bne.n	80078be <Endpoint_ClearIN+0x3e>
		return;
 80078bc:	e02c      	b.n	8007918 <Endpoint_ClearIN+0x98>
	ep->InInUse = true;
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	8893      	ldrh	r3, [r2, #4]
 80078c2:	f043 0310 	orr.w	r3, r3, #16
 80078c6:	8093      	strh	r3, [r2, #4]
	/* store transfer information to loop over, if underlying is smaller */
	ep->InDataBuffer = ep->InBuffer;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	69da      	ldr	r2, [r3, #28]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	629a      	str	r2, [r3, #40]	; 0x28
	ep->InDataLeft = ep->InBytesAvailable;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	699a      	ldr	r2, [r3, #24]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	625a      	str	r2, [r3, #36]	; 0x24
	ep->InBytesAvailable = 0;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	619a      	str	r2, [r3, #24]
	/* make next 3 operations atomic. Do not get interrupted.*/
	NVIC_DisableIRQ(USB0_0_IRQn);
 80078de:	206b      	movs	r0, #107	; 0x6b
 80078e0:	f7ff ffb4 	bl	800784c <NVIC_DisableIRQ>
	data_count = device.Driver->EndpointWrite(ep->Address,
 80078e4:	4b0e      	ldr	r3, [pc, #56]	; (8007920 <Endpoint_ClearIN+0xa0>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	7810      	ldrb	r0, [r2, #0]
			ep->InDataBuffer,ep->InDataLeft);
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	6a91      	ldr	r1, [r2, #40]	; 0x28
	ep->InDataBuffer = ep->InBuffer;
	ep->InDataLeft = ep->InBytesAvailable;
	ep->InBytesAvailable = 0;
	/* make next 3 operations atomic. Do not get interrupted.*/
	NVIC_DisableIRQ(USB0_0_IRQn);
	data_count = device.Driver->EndpointWrite(ep->Address,
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80078f6:	4798      	blx	r3
 80078f8:	6038      	str	r0, [r7, #0]
			ep->InDataBuffer,ep->InDataLeft);
	ep->InDataBuffer += data_count;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	441a      	add	r2, r3
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	629a      	str	r2, [r3, #40]	; 0x28
	ep->InDataLeft -= data_count;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	1ad2      	subs	r2, r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	625a      	str	r2, [r3, #36]	; 0x24
	NVIC_EnableIRQ(USB0_0_IRQn);
 8007912:	206b      	movs	r0, #107	; 0x6b
 8007914:	f7ff ff82 	bl	800781c <NVIC_EnableIRQ>

}
 8007918:	3708      	adds	r7, #8
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	20000b48 	.word	0x20000b48

08007924 <Endpoint_Write_8>:
		Retval = (EndPoint->OutBytesAvailable > 0) ? true : false;
	}
	return Retval;
}

void Endpoint_Write_8(const uint8_t Data) {
 8007924:	b480      	push	{r7}
 8007926:	b085      	sub	sp, #20
 8007928:	af00      	add	r7, sp, #0
 800792a:	4603      	mov	r3, r0
 800792c:	71fb      	strb	r3, [r7, #7]
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 800792e:	4b16      	ldr	r3, [pc, #88]	; (8007988 <Endpoint_Write_8+0x64>)
 8007930:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8007934:	461a      	mov	r2, r3
 8007936:	232c      	movs	r3, #44	; 0x2c
 8007938:	fb03 f302 	mul.w	r3, r3, r2
 800793c:	4a12      	ldr	r2, [pc, #72]	; (8007988 <Endpoint_Write_8+0x64>)
 800793e:	4413      	add	r3, r2
 8007940:	3304      	adds	r3, #4
 8007942:	60bb      	str	r3, [r7, #8]
	bool Success = false;
 8007944:	2300      	movs	r3, #0
 8007946:	73fb      	strb	r3, [r7, #15]

	 do
	  {
	    if(EndPoint->InBytesAvailable < EndPoint->InBufferLength)
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	699a      	ldr	r2, [r3, #24]
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	6a1b      	ldr	r3, [r3, #32]
 8007950:	429a      	cmp	r2, r3
 8007952:	d20d      	bcs.n	8007970 <Endpoint_Write_8+0x4c>
	    {
	      EndPoint->InBuffer[EndPoint->InBytesAvailable] = Data;
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	69da      	ldr	r2, [r3, #28]
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	699b      	ldr	r3, [r3, #24]
 800795c:	4413      	add	r3, r2
 800795e:	79fa      	ldrb	r2, [r7, #7]
 8007960:	701a      	strb	r2, [r3, #0]
	      EndPoint->InBytesAvailable++;
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	699b      	ldr	r3, [r3, #24]
 8007966:	1c5a      	adds	r2, r3, #1
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	619a      	str	r2, [r3, #24]

	      Success = true;
 800796c:	2301      	movs	r3, #1
 800796e:	73fb      	strb	r3, [r7, #15]
	    }
	  }while(!Success);
 8007970:	7bfb      	ldrb	r3, [r7, #15]
 8007972:	f083 0301 	eor.w	r3, r3, #1
 8007976:	b2db      	uxtb	r3, r3
 8007978:	2b00      	cmp	r3, #0
 800797a:	d1e5      	bne.n	8007948 <Endpoint_Write_8+0x24>
}
 800797c:	3714      	adds	r7, #20
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop
 8007988:	20000b48 	.word	0x20000b48

0800798c <Endpoint_Read_8>:

uint8_t Endpoint_Read_8() {
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8007992:	4b19      	ldr	r3, [pc, #100]	; (80079f8 <Endpoint_Read_8+0x6c>)
 8007994:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8007998:	461a      	mov	r2, r3
 800799a:	232c      	movs	r3, #44	; 0x2c
 800799c:	fb03 f302 	mul.w	r3, r3, r2
 80079a0:	4a15      	ldr	r2, [pc, #84]	; (80079f8 <Endpoint_Read_8+0x6c>)
 80079a2:	4413      	add	r3, r2
 80079a4:	3304      	adds	r3, #4
 80079a6:	603b      	str	r3, [r7, #0]
	bool Success = false;
 80079a8:	2300      	movs	r3, #0
 80079aa:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80079ac:	2300      	movs	r3, #0
 80079ae:	71bb      	strb	r3, [r7, #6]

	 do
	  {
		if(EndPoint->OutBytesAvailable > 0)
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d012      	beq.n	80079de <Endpoint_Read_8+0x52>
		{
		  data = EndPoint->OutBuffer[EndPoint->OutOffset];
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	691a      	ldr	r2, [r3, #16]
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	4413      	add	r3, r2
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	71bb      	strb	r3, [r7, #6]
		  EndPoint->OutOffset++;
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	1c5a      	adds	r2, r3, #1
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	60da      	str	r2, [r3, #12]
		  EndPoint->OutBytesAvailable--;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	1e5a      	subs	r2, r3, #1
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	609a      	str	r2, [r3, #8]

		  Success = true;
 80079da:	2301      	movs	r3, #1
 80079dc:	71fb      	strb	r3, [r7, #7]
		}
	  }while(!Success);
 80079de:	79fb      	ldrb	r3, [r7, #7]
 80079e0:	f083 0301 	eor.w	r3, r3, #1
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1e2      	bne.n	80079b0 <Endpoint_Read_8+0x24>
	 return data;
 80079ea:	79bb      	ldrb	r3, [r7, #6]
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	370c      	adds	r7, #12
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr
 80079f8:	20000b48 	.word	0x20000b48

080079fc <Endpoint_Write_32_LE>:

void Endpoint_Write_32_LE(const uint32_t Data) {
 80079fc:	b480      	push	{r7}
 80079fe:	b085      	sub	sp, #20
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8007a04:	4b16      	ldr	r3, [pc, #88]	; (8007a60 <Endpoint_Write_32_LE+0x64>)
 8007a06:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	232c      	movs	r3, #44	; 0x2c
 8007a0e:	fb03 f302 	mul.w	r3, r3, r2
 8007a12:	4a13      	ldr	r2, [pc, #76]	; (8007a60 <Endpoint_Write_32_LE+0x64>)
 8007a14:	4413      	add	r3, r2
 8007a16:	3304      	adds	r3, #4
 8007a18:	60bb      	str	r3, [r7, #8]
	bool Success = false;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	73fb      	strb	r3, [r7, #15]

	do {
		if(EndPoint->InBytesAvailable < (EndPoint->InBufferLength - 3)) {
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	699a      	ldr	r2, [r3, #24]
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	6a1b      	ldr	r3, [r3, #32]
 8007a26:	3b03      	subs	r3, #3
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d20d      	bcs.n	8007a48 <Endpoint_Write_32_LE+0x4c>
			*(uint32_t*)(EndPoint->InBuffer + EndPoint->InBytesAvailable) =
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	69da      	ldr	r2, [r3, #28]
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	699b      	ldr	r3, [r3, #24]
 8007a34:	4413      	add	r3, r2
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	601a      	str	r2, [r3, #0]
																		Data;
			EndPoint->InBytesAvailable+=4;
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	699b      	ldr	r3, [r3, #24]
 8007a3e:	1d1a      	adds	r2, r3, #4
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	619a      	str	r2, [r3, #24]

			Success = true;
 8007a44:	2301      	movs	r3, #1
 8007a46:	73fb      	strb	r3, [r7, #15]
		}
	}while(!Success);
 8007a48:	7bfb      	ldrb	r3, [r7, #15]
 8007a4a:	f083 0301 	eor.w	r3, r3, #1
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d1e4      	bne.n	8007a1e <Endpoint_Write_32_LE+0x22>
}
 8007a54:	3714      	adds	r7, #20
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr
 8007a5e:	bf00      	nop
 8007a60:	20000b48 	.word	0x20000b48

08007a64 <Endpoint_Read_32_LE>:

uint32_t Endpoint_Read_32_LE() {
 8007a64:	b480      	push	{r7}
 8007a66:	b085      	sub	sp, #20
 8007a68:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8007a6a:	4b19      	ldr	r3, [pc, #100]	; (8007ad0 <Endpoint_Read_32_LE+0x6c>)
 8007a6c:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8007a70:	461a      	mov	r2, r3
 8007a72:	232c      	movs	r3, #44	; 0x2c
 8007a74:	fb03 f302 	mul.w	r3, r3, r2
 8007a78:	4a15      	ldr	r2, [pc, #84]	; (8007ad0 <Endpoint_Read_32_LE+0x6c>)
 8007a7a:	4413      	add	r3, r2
 8007a7c:	3304      	adds	r3, #4
 8007a7e:	607b      	str	r3, [r7, #4]
	bool Success = false;
 8007a80:	2300      	movs	r3, #0
 8007a82:	73fb      	strb	r3, [r7, #15]
	uint32_t data = 0;
 8007a84:	2300      	movs	r3, #0
 8007a86:	60bb      	str	r3, [r7, #8]

	do {
		if(EndPoint->OutBytesAvailable > 3) {
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	2b03      	cmp	r3, #3
 8007a8e:	d912      	bls.n	8007ab6 <Endpoint_Read_32_LE+0x52>
			data = *(uint32_t*)(EndPoint->OutBuffer + EndPoint->OutOffset);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	691a      	ldr	r2, [r3, #16]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	4413      	add	r3, r2
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	60bb      	str	r3, [r7, #8]
			EndPoint->OutOffset+=4;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	1d1a      	adds	r2, r3, #4
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	60da      	str	r2, [r3, #12]
			EndPoint->OutBytesAvailable-=4;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	1f1a      	subs	r2, r3, #4
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	609a      	str	r2, [r3, #8]

			Success = true;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	73fb      	strb	r3, [r7, #15]
		}
	} while(!Success);
 8007ab6:	7bfb      	ldrb	r3, [r7, #15]
 8007ab8:	f083 0301 	eor.w	r3, r3, #1
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d1e2      	bne.n	8007a88 <Endpoint_Read_32_LE+0x24>
	return data;
 8007ac2:	68bb      	ldr	r3, [r7, #8]
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3714      	adds	r7, #20
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr
 8007ad0:	20000b48 	.word	0x20000b48

08007ad4 <Endpoint_ConfigureEndpointTable>:

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
			                                     const uint8_t Entries) {
 8007ad4:	b590      	push	{r4, r7, lr}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	460b      	mov	r3, r1
 8007ade:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	uint8_t Number;
	for (i=0;i<Entries;i++) {
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	73fb      	strb	r3, [r7, #15]
 8007ae4:	e092      	b.n	8007c0c <Endpoint_ConfigureEndpointTable+0x138>
		Number = Table[i].Address & ENDPOINT_EPNUM_MASK;
 8007ae6:	7bfa      	ldrb	r2, [r7, #15]
 8007ae8:	4613      	mov	r3, r2
 8007aea:	005b      	lsls	r3, r3, #1
 8007aec:	4413      	add	r3, r2
 8007aee:	005b      	lsls	r3, r3, #1
 8007af0:	461a      	mov	r2, r3
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4413      	add	r3, r2
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	f003 030f 	and.w	r3, r3, #15
 8007afc:	73bb      	strb	r3, [r7, #14]
		/* Configure endpoint in device controller driver */
		if (device.Driver->EndpointConfigure(Table[i].Address,
 8007afe:	4b48      	ldr	r3, [pc, #288]	; (8007c20 <Endpoint_ConfigureEndpointTable+0x14c>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	69dc      	ldr	r4, [r3, #28]
 8007b04:	7bfa      	ldrb	r2, [r7, #15]
 8007b06:	4613      	mov	r3, r2
 8007b08:	005b      	lsls	r3, r3, #1
 8007b0a:	4413      	add	r3, r2
 8007b0c:	005b      	lsls	r3, r3, #1
 8007b0e:	461a      	mov	r2, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4413      	add	r3, r2
 8007b14:	7818      	ldrb	r0, [r3, #0]
				(XMC_USBD_ENDPOINT_TYPE_t)Table[i].Type,Table[i].Size) !=
 8007b16:	7bfa      	ldrb	r2, [r7, #15]
 8007b18:	4613      	mov	r3, r2
 8007b1a:	005b      	lsls	r3, r3, #1
 8007b1c:	4413      	add	r3, r2
 8007b1e:	005b      	lsls	r3, r3, #1
 8007b20:	461a      	mov	r2, r3
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4413      	add	r3, r2
 8007b26:	7919      	ldrb	r1, [r3, #4]
 8007b28:	7bfa      	ldrb	r2, [r7, #15]
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	005b      	lsls	r3, r3, #1
 8007b2e:	4413      	add	r3, r2
 8007b30:	005b      	lsls	r3, r3, #1
 8007b32:	461a      	mov	r2, r3
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4413      	add	r3, r2
	uint8_t i;
	uint8_t Number;
	for (i=0;i<Entries;i++) {
		Number = Table[i].Address & ENDPOINT_EPNUM_MASK;
		/* Configure endpoint in device controller driver */
		if (device.Driver->EndpointConfigure(Table[i].Address,
 8007b38:	885b      	ldrh	r3, [r3, #2]
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	47a0      	blx	r4
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d001      	beq.n	8007b48 <Endpoint_ConfigureEndpointTable+0x74>
				(XMC_USBD_ENDPOINT_TYPE_t)Table[i].Type,Table[i].Size) !=
																XMC_USBD_STATUS_OK)
			return false;
 8007b44:	2300      	movs	r3, #0
 8007b46:	e067      	b.n	8007c18 <Endpoint_ConfigureEndpointTable+0x144>
		/* Set device core values */
		device.Endpoints[Number].Address = Table[i].Address;
 8007b48:	7bb9      	ldrb	r1, [r7, #14]
 8007b4a:	7bfa      	ldrb	r2, [r7, #15]
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	005b      	lsls	r3, r3, #1
 8007b50:	4413      	add	r3, r2
 8007b52:	005b      	lsls	r3, r3, #1
 8007b54:	461a      	mov	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4413      	add	r3, r2
 8007b5a:	7818      	ldrb	r0, [r3, #0]
 8007b5c:	4a30      	ldr	r2, [pc, #192]	; (8007c20 <Endpoint_ConfigureEndpointTable+0x14c>)
 8007b5e:	232c      	movs	r3, #44	; 0x2c
 8007b60:	fb03 f301 	mul.w	r3, r3, r1
 8007b64:	4413      	add	r3, r2
 8007b66:	4602      	mov	r2, r0
 8007b68:	711a      	strb	r2, [r3, #4]
		device.Endpoints[Number].MaxPacketSize = Table[i].Size;
 8007b6a:	7bb8      	ldrb	r0, [r7, #14]
 8007b6c:	7bfa      	ldrb	r2, [r7, #15]
 8007b6e:	4613      	mov	r3, r2
 8007b70:	005b      	lsls	r3, r3, #1
 8007b72:	4413      	add	r3, r2
 8007b74:	005b      	lsls	r3, r3, #1
 8007b76:	461a      	mov	r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4413      	add	r3, r2
 8007b7c:	885b      	ldrh	r3, [r3, #2]
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b84:	b2d9      	uxtb	r1, r3
 8007b86:	4a26      	ldr	r2, [pc, #152]	; (8007c20 <Endpoint_ConfigureEndpointTable+0x14c>)
 8007b88:	232c      	movs	r3, #44	; 0x2c
 8007b8a:	fb03 f300 	mul.w	r3, r3, r0
 8007b8e:	441a      	add	r2, r3
 8007b90:	8913      	ldrh	r3, [r2, #8]
 8007b92:	f361 138c 	bfi	r3, r1, #6, #7
 8007b96:	8113      	strh	r3, [r2, #8]
		device.Endpoints[Number].IsConfigured = 1;
 8007b98:	7bbb      	ldrb	r3, [r7, #14]
 8007b9a:	4a21      	ldr	r2, [pc, #132]	; (8007c20 <Endpoint_ConfigureEndpointTable+0x14c>)
 8007b9c:	212c      	movs	r1, #44	; 0x2c
 8007b9e:	fb01 f303 	mul.w	r3, r1, r3
 8007ba2:	441a      	add	r2, r3
 8007ba4:	7a13      	ldrb	r3, [r2, #8]
 8007ba6:	f043 0301 	orr.w	r3, r3, #1
 8007baa:	7213      	strb	r3, [r2, #8]
		device.Endpoints[Number].IsEnabled = 1;
 8007bac:	7bbb      	ldrb	r3, [r7, #14]
 8007bae:	4a1c      	ldr	r2, [pc, #112]	; (8007c20 <Endpoint_ConfigureEndpointTable+0x14c>)
 8007bb0:	212c      	movs	r1, #44	; 0x2c
 8007bb2:	fb01 f303 	mul.w	r3, r1, r3
 8007bb6:	441a      	add	r2, r3
 8007bb8:	8913      	ldrh	r3, [r2, #8]
 8007bba:	f043 0302 	orr.w	r3, r3, #2
 8007bbe:	8113      	strh	r3, [r2, #8]
		/* Start read for out endpoints */
		if (!(Table[i].Address & ENDPOINT_DIR_MASK))
 8007bc0:	7bfa      	ldrb	r2, [r7, #15]
 8007bc2:	4613      	mov	r3, r2
 8007bc4:	005b      	lsls	r3, r3, #1
 8007bc6:	4413      	add	r3, r2
 8007bc8:	005b      	lsls	r3, r3, #1
 8007bca:	461a      	mov	r2, r3
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4413      	add	r3, r2
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	b25b      	sxtb	r3, r3
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	db15      	blt.n	8007c06 <Endpoint_ConfigureEndpointTable+0x132>
			device.Driver->EndpointReadStart(Table[i].Address,
 8007bda:	4b11      	ldr	r3, [pc, #68]	; (8007c20 <Endpoint_ConfigureEndpointTable+0x14c>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8007be0:	7bfa      	ldrb	r2, [r7, #15]
 8007be2:	4613      	mov	r3, r2
 8007be4:	005b      	lsls	r3, r3, #1
 8007be6:	4413      	add	r3, r2
 8007be8:	005b      	lsls	r3, r3, #1
 8007bea:	461a      	mov	r2, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4413      	add	r3, r2
 8007bf0:	7818      	ldrb	r0, [r3, #0]
 8007bf2:	7bbb      	ldrb	r3, [r7, #14]
 8007bf4:	4a0a      	ldr	r2, [pc, #40]	; (8007c20 <Endpoint_ConfigureEndpointTable+0x14c>)
 8007bf6:	212c      	movs	r1, #44	; 0x2c
 8007bf8:	fb01 f303 	mul.w	r3, r1, r3
 8007bfc:	4413      	add	r3, r2
 8007bfe:	3310      	adds	r3, #16
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	4619      	mov	r1, r3
 8007c04:	47a0      	blx	r4

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
			                                     const uint8_t Entries) {
	uint8_t i;
	uint8_t Number;
	for (i=0;i<Entries;i++) {
 8007c06:	7bfb      	ldrb	r3, [r7, #15]
 8007c08:	3301      	adds	r3, #1
 8007c0a:	73fb      	strb	r3, [r7, #15]
 8007c0c:	7bfa      	ldrb	r2, [r7, #15]
 8007c0e:	78fb      	ldrb	r3, [r7, #3]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	f4ff af68 	bcc.w	8007ae6 <Endpoint_ConfigureEndpointTable+0x12>
		/* Start read for out endpoints */
		if (!(Table[i].Address & ENDPOINT_DIR_MASK))
			device.Driver->EndpointReadStart(Table[i].Address,
					device.Endpoints[Number].OutBufferLength);
	}
	return true;
 8007c16:	2301      	movs	r3, #1
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3714      	adds	r7, #20
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd90      	pop	{r4, r7, pc}
 8007c20:	20000b48 	.word	0x20000b48

08007c24 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8007c24:	b480      	push	{r7}
 8007c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007c28:	4b04      	ldr	r3, [pc, #16]	; (8007c3c <NVIC_GetPriorityGrouping+0x18>)
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c30:	0a1b      	lsrs	r3, r3, #8
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr
 8007c3c:	e000ed00 	.word	0xe000ed00

08007c40 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	4603      	mov	r3, r0
 8007c48:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8007c4a:	4908      	ldr	r1, [pc, #32]	; (8007c6c <NVIC_EnableIRQ+0x2c>)
 8007c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c50:	095b      	lsrs	r3, r3, #5
 8007c52:	79fa      	ldrb	r2, [r7, #7]
 8007c54:	f002 021f 	and.w	r2, r2, #31
 8007c58:	2001      	movs	r0, #1
 8007c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8007c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr
 8007c6c:	e000e100 	.word	0xe000e100

08007c70 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	4603      	mov	r3, r0
 8007c78:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8007c7a:	4909      	ldr	r1, [pc, #36]	; (8007ca0 <NVIC_DisableIRQ+0x30>)
 8007c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c80:	095b      	lsrs	r3, r3, #5
 8007c82:	79fa      	ldrb	r2, [r7, #7]
 8007c84:	f002 021f 	and.w	r2, r2, #31
 8007c88:	2001      	movs	r0, #1
 8007c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8007c8e:	3320      	adds	r3, #32
 8007c90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007c94:	370c      	adds	r7, #12
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	e000e100 	.word	0xe000e100

08007ca4 <NVIC_ClearPendingIRQ>:
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	4603      	mov	r3, r0
 8007cac:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8007cae:	4909      	ldr	r1, [pc, #36]	; (8007cd4 <NVIC_ClearPendingIRQ+0x30>)
 8007cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cb4:	095b      	lsrs	r3, r3, #5
 8007cb6:	79fa      	ldrb	r2, [r7, #7]
 8007cb8:	f002 021f 	and.w	r2, r2, #31
 8007cbc:	2001      	movs	r0, #1
 8007cbe:	fa00 f202 	lsl.w	r2, r0, r2
 8007cc2:	3360      	adds	r3, #96	; 0x60
 8007cc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007cc8:	370c      	adds	r7, #12
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
 8007cd2:	bf00      	nop
 8007cd4:	e000e100 	.word	0xe000e100

08007cd8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	4603      	mov	r3, r0
 8007ce0:	6039      	str	r1, [r7, #0]
 8007ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8007ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	da0b      	bge.n	8007d04 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007cec:	490d      	ldr	r1, [pc, #52]	; (8007d24 <NVIC_SetPriority+0x4c>)
 8007cee:	79fb      	ldrb	r3, [r7, #7]
 8007cf0:	f003 030f 	and.w	r3, r3, #15
 8007cf4:	3b04      	subs	r3, #4
 8007cf6:	683a      	ldr	r2, [r7, #0]
 8007cf8:	b2d2      	uxtb	r2, r2
 8007cfa:	0092      	lsls	r2, r2, #2
 8007cfc:	b2d2      	uxtb	r2, r2
 8007cfe:	440b      	add	r3, r1
 8007d00:	761a      	strb	r2, [r3, #24]
 8007d02:	e009      	b.n	8007d18 <NVIC_SetPriority+0x40>
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d04:	4908      	ldr	r1, [pc, #32]	; (8007d28 <NVIC_SetPriority+0x50>)
 8007d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d0a:	683a      	ldr	r2, [r7, #0]
 8007d0c:	b2d2      	uxtb	r2, r2
 8007d0e:	0092      	lsls	r2, r2, #2
 8007d10:	b2d2      	uxtb	r2, r2
 8007d12:	440b      	add	r3, r1
 8007d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 8007d18:	370c      	adds	r7, #12
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr
 8007d22:	bf00      	nop
 8007d24:	e000ed00 	.word	0xe000ed00
 8007d28:	e000e100 	.word	0xe000e100

08007d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b089      	sub	sp, #36	; 0x24
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f003 0307 	and.w	r3, r3, #7
 8007d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	f1c3 0307 	rsb	r3, r3, #7
 8007d46:	2b06      	cmp	r3, #6
 8007d48:	bf28      	it	cs
 8007d4a:	2306      	movcs	r3, #6
 8007d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007d4e:	69fb      	ldr	r3, [r7, #28]
 8007d50:	3306      	adds	r3, #6
 8007d52:	2b06      	cmp	r3, #6
 8007d54:	d902      	bls.n	8007d5c <NVIC_EncodePriority+0x30>
 8007d56:	69fb      	ldr	r3, [r7, #28]
 8007d58:	3b01      	subs	r3, #1
 8007d5a:	e000      	b.n	8007d5e <NVIC_EncodePriority+0x32>
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	2201      	movs	r2, #1
 8007d64:	fa02 f303 	lsl.w	r3, r2, r3
 8007d68:	1e5a      	subs	r2, r3, #1
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	401a      	ands	r2, r3
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	2101      	movs	r1, #1
 8007d76:	fa01 f303 	lsl.w	r3, r1, r3
 8007d7a:	1e59      	subs	r1, r3, #1
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8007d80:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3724      	adds	r7, #36	; 0x24
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop

08007d90 <USBD_Init>:
 * Intializes the USB driver core data structures and sets it into default
 * state. Afterwards it initializes the USB device controller driver and prepare
 *  it for connection via USBD_Connect.
 */
USBD_STATUS_t USBD_Init(USBD_t *handle)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
	USBD_STATUS_t status = USBD_STATUS_SUCCESS;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	73fb      	strb	r3, [r7, #15]


	/* Disable USB to resolve the disconnect issue on self powered devices.
	 * Later in the XMC_USBD_Init() it enables the USB.
	 */
	XMC_USBD_Disable();
 8007d9c:	f7fd ff10 	bl	8005bc0 <XMC_USBD_Disable>

	memset(&device,0x0,sizeof(USB_Device_t));
 8007da0:	483d      	ldr	r0, [pc, #244]	; (8007e98 <USBD_Init+0x108>)
 8007da2:	2100      	movs	r1, #0
 8007da4:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8007da8:	f004 fa19 	bl	800c1de <memset>
	USB_DeviceState = (uint8_t)DEVICE_STATE_Unattached;
 8007dac:	4b3b      	ldr	r3, [pc, #236]	; (8007e9c <USBD_Init+0x10c>)
 8007dae:	2200      	movs	r2, #0
 8007db0:	701a      	strb	r2, [r3, #0]
	device.Driver = &Driver_USBD0;
 8007db2:	4b39      	ldr	r3, [pc, #228]	; (8007e98 <USBD_Init+0x108>)
 8007db4:	4a3a      	ldr	r2, [pc, #232]	; (8007ea0 <USBD_Init+0x110>)
 8007db6:	601a      	str	r2, [r3, #0]
	device.ep0_state = USBD_EP0_STATE_IDLE;
 8007db8:	4b37      	ldr	r3, [pc, #220]	; (8007e98 <USBD_Init+0x108>)
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	device.Endpoints[0].InBuffer = endpoint0_in_buffer;
 8007dc0:	4b35      	ldr	r3, [pc, #212]	; (8007e98 <USBD_Init+0x108>)
 8007dc2:	4a38      	ldr	r2, [pc, #224]	; (8007ea4 <USBD_Init+0x114>)
 8007dc4:	621a      	str	r2, [r3, #32]
	device.Endpoints[0].InBufferLength = USBD_EP0_BUF_SIZE;
 8007dc6:	4b34      	ldr	r3, [pc, #208]	; (8007e98 <USBD_Init+0x108>)
 8007dc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007dcc:	625a      	str	r2, [r3, #36]	; 0x24
	device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
 8007dce:	4b32      	ldr	r3, [pc, #200]	; (8007e98 <USBD_Init+0x108>)
 8007dd0:	4a35      	ldr	r2, [pc, #212]	; (8007ea8 <USBD_Init+0x118>)
 8007dd2:	615a      	str	r2, [r3, #20]
	device.Endpoints[0].OutBufferLength = USBD_EP0_BUF_SIZE;
 8007dd4:	4b30      	ldr	r3, [pc, #192]	; (8007e98 <USBD_Init+0x108>)
 8007dd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007dda:	619a      	str	r2, [r3, #24]
	device.Endpoints[0].Direction = (uint8_t)0;
 8007ddc:	4a2e      	ldr	r2, [pc, #184]	; (8007e98 <USBD_Init+0x108>)
 8007dde:	7913      	ldrb	r3, [r2, #4]
 8007de0:	f36f 13c7 	bfc	r3, #7, #1
 8007de4:	7113      	strb	r3, [r2, #4]
	device.Endpoints[0].IsConfigured = (uint8_t)1;
 8007de6:	4a2c      	ldr	r2, [pc, #176]	; (8007e98 <USBD_Init+0x108>)
 8007de8:	7a13      	ldrb	r3, [r2, #8]
 8007dea:	f043 0301 	orr.w	r3, r3, #1
 8007dee:	7213      	strb	r3, [r2, #8]
	device.Endpoints[0].IsEnabled = (uint8_t)1;
 8007df0:	4a29      	ldr	r2, [pc, #164]	; (8007e98 <USBD_Init+0x108>)
 8007df2:	8913      	ldrh	r3, [r2, #8]
 8007df4:	f043 0302 	orr.w	r3, r3, #2
 8007df8:	8113      	strh	r3, [r2, #8]
	device.Endpoints[0].MaxPacketSize = (uint8_t)USBD_EP0_MAX_PKT_SIZE;
 8007dfa:	4a27      	ldr	r2, [pc, #156]	; (8007e98 <USBD_Init+0x108>)
 8007dfc:	8913      	ldrh	r3, [r2, #8]
 8007dfe:	2140      	movs	r1, #64	; 0x40
 8007e00:	f361 138c 	bfi	r3, r1, #6, #7
 8007e04:	8113      	strh	r3, [r2, #8]

	if ((handle->event_cb->control_request == 0) ||
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	691b      	ldr	r3, [r3, #16]
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d009      	beq.n	8007e24 <USBD_Init+0x94>
	    (handle->event_cb->get_descriptor == 0) ||
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	691b      	ldr	r3, [r3, #16]
 8007e14:	695b      	ldr	r3, [r3, #20]
	device.Endpoints[0].Direction = (uint8_t)0;
	device.Endpoints[0].IsConfigured = (uint8_t)1;
	device.Endpoints[0].IsEnabled = (uint8_t)1;
	device.Endpoints[0].MaxPacketSize = (uint8_t)USBD_EP0_MAX_PKT_SIZE;

	if ((handle->event_cb->control_request == 0) ||
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d004      	beq.n	8007e24 <USBD_Init+0x94>
	    (handle->event_cb->get_descriptor == 0) ||
	    (handle->event_cb->config_changed == 0))
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	689b      	ldr	r3, [r3, #8]
	device.Endpoints[0].IsConfigured = (uint8_t)1;
	device.Endpoints[0].IsEnabled = (uint8_t)1;
	device.Endpoints[0].MaxPacketSize = (uint8_t)USBD_EP0_MAX_PKT_SIZE;

	if ((handle->event_cb->control_request == 0) ||
	    (handle->event_cb->get_descriptor == 0) ||
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d102      	bne.n	8007e2a <USBD_Init+0x9a>
	    (handle->event_cb->config_changed == 0))
	{
	  status = USBD_STATUS_FAILURE;
 8007e24:	2301      	movs	r3, #1
 8007e26:	73fb      	strb	r3, [r7, #15]
 8007e28:	e031      	b.n	8007e8e <USBD_Init+0xfe>
	}
	else
	{
	  device.events = handle->event_cb;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	4a1a      	ldr	r2, [pc, #104]	; (8007e98 <USBD_Init+0x108>)
 8007e30:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

	  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_USB);
 8007e34:	2001      	movs	r0, #1
 8007e36:	f7fb ff9f 	bl	8003d78 <XMC_SCU_CLOCK_EnableClock>

	  /* First initalize the device */
	  handle->usb_init.cb_xmc_device_event = USBD_SignalDeviceEventHandler;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4a1b      	ldr	r2, [pc, #108]	; (8007eac <USBD_Init+0x11c>)
 8007e3e:	605a      	str	r2, [r3, #4]
	  handle->usb_init.cb_endpoint_event = USBD_SignalEndpointEvent_Handler;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4a1b      	ldr	r2, [pc, #108]	; (8007eb0 <USBD_Init+0x120>)
 8007e44:	609a      	str	r2, [r3, #8]

	  status = (USBD_STATUS_t)device.Driver->Initialize(&handle->usb_init);
 8007e46:	4b14      	ldr	r3, [pc, #80]	; (8007e98 <USBD_Init+0x108>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	4610      	mov	r0, r2
 8007e50:	4798      	blx	r3
 8007e52:	4603      	mov	r3, r0
 8007e54:	73fb      	strb	r3, [r7, #15]
	  if (USBD_STATUS_SUCCESS == status)
 8007e56:	7bfb      	ldrb	r3, [r7, #15]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d10a      	bne.n	8007e72 <USBD_Init+0xe2>
	  {
	  /* Enable Interrupts in NVIC */
	  USB_EnableUSBInterrupt();
 8007e5c:	f000 f87c 	bl	8007f58 <USB_EnableUSBInterrupt>

	  /* then configure endpoint 0 */
	  status = (USBD_STATUS_t)device.Driver->EndpointConfigure((uint8_t)0,XMC_USBD_ENDPOINT_TYPE_CONTROL,
 8007e60:	4b0d      	ldr	r3, [pc, #52]	; (8007e98 <USBD_Init+0x108>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	69db      	ldr	r3, [r3, #28]
 8007e66:	2000      	movs	r0, #0
 8007e68:	2100      	movs	r1, #0
 8007e6a:	2240      	movs	r2, #64	; 0x40
 8007e6c:	4798      	blx	r3
 8007e6e:	4603      	mov	r3, r0
 8007e70:	73fb      	strb	r3, [r7, #15]
	       (uint16_t)XMC_USBD_MAX_PACKET_SIZE);
	  }

	  if (USBD_STATUS_SUCCESS != status)
 8007e72:	7bfb      	ldrb	r3, [r7, #15]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d00a      	beq.n	8007e8e <USBD_Init+0xfe>
	  {
	  XMC_USBD_Disable();
 8007e78:	f7fd fea2 	bl	8005bc0 <XMC_USBD_Disable>
	  if (USBD_STATUS_SUCCESS == (USBD_STATUS_t)device.Driver->Uninitialize())
 8007e7c:	4b06      	ldr	r3, [pc, #24]	; (8007e98 <USBD_Init+0x108>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	4798      	blx	r3
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d101      	bne.n	8007e8e <USBD_Init+0xfe>
	  {
	    USB_DisableUSBInterrupt();
 8007e8a:	f000 f87b 	bl	8007f84 <USB_DisableUSBInterrupt>
	  }
	  }
	}


	return status;
 8007e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3710      	adds	r7, #16
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	20000b48 	.word	0x20000b48
 8007e9c:	2000093d 	.word	0x2000093d
 8007ea0:	0800dc3c 	.word	0x0800dc3c
 8007ea4:	20000948 	.word	0x20000948
 8007ea8:	20000a48 	.word	0x20000a48
 8007eac:	080085b9 	.word	0x080085b9
 8007eb0:	08008815 	.word	0x08008815

08007eb4 <USBD_Connect>:
 *
 * Tell the USB device controller driver to connect to the bus. Successful connection will be shown
 * through update of the device status ( USB_DeviceState) and a firing of the USB device connect event.
 */
USBD_STATUS_t USBD_Connect(void)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	af00      	add	r7, sp, #0
  return (USBD_STATUS_t)device.Driver->DeviceConnect();
 8007eb8:	4b03      	ldr	r3, [pc, #12]	; (8007ec8 <USBD_Connect+0x14>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	68db      	ldr	r3, [r3, #12]
 8007ebe:	4798      	blx	r3
 8007ec0:	4603      	mov	r3, r0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	20000b48 	.word	0x20000b48

08007ecc <USBD_SetEndpointBuffer>:
 *
 * The user has to ensure that an endpoint has a valid buffer for proper data transfer.
 *
 */
void USBD_SetEndpointBuffer(uint8_t addr, uint8_t *buf, uint16_t len)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b085      	sub	sp, #20
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	6039      	str	r1, [r7, #0]
 8007ed6:	71fb      	strb	r3, [r7, #7]
 8007ed8:	4613      	mov	r3, r2
 8007eda:	80bb      	strh	r3, [r7, #4]
  uint32_t number;
  XMC_ASSERT("USBD_SetEndpointBuffer: invalid buffer", (buf != NULL));

  number = (uint32_t)addr & (uint32_t)ENDPOINT_EPNUM_MASK;
 8007edc:	79fb      	ldrb	r3, [r7, #7]
 8007ede:	f003 030f 	and.w	r3, r3, #15
 8007ee2:	60fb      	str	r3, [r7, #12]
  XMC_ASSERT("USBD_SetEndpointBuffer: invalid ep address", (number < (uint8_t)USBD_MAX_NUM_EPS));

  if (addr & (uint8_t)ENDPOINT_DIR_MASK)
 8007ee4:	79fb      	ldrb	r3, [r7, #7]
 8007ee6:	b25b      	sxtb	r3, r3
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	da12      	bge.n	8007f12 <USBD_SetEndpointBuffer+0x46>
  {
    device.Endpoints[number].InBuffer = buf;
 8007eec:	4a14      	ldr	r2, [pc, #80]	; (8007f40 <USBD_SetEndpointBuffer+0x74>)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	212c      	movs	r1, #44	; 0x2c
 8007ef2:	fb01 f303 	mul.w	r3, r1, r3
 8007ef6:	4413      	add	r3, r2
 8007ef8:	3318      	adds	r3, #24
 8007efa:	683a      	ldr	r2, [r7, #0]
 8007efc:	609a      	str	r2, [r3, #8]
    device.Endpoints[number].InBufferLength = len;
 8007efe:	88ba      	ldrh	r2, [r7, #4]
 8007f00:	490f      	ldr	r1, [pc, #60]	; (8007f40 <USBD_SetEndpointBuffer+0x74>)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	202c      	movs	r0, #44	; 0x2c
 8007f06:	fb00 f303 	mul.w	r3, r0, r3
 8007f0a:	440b      	add	r3, r1
 8007f0c:	3320      	adds	r3, #32
 8007f0e:	605a      	str	r2, [r3, #4]
 8007f10:	e011      	b.n	8007f36 <USBD_SetEndpointBuffer+0x6a>
  }
  else
  {
    device.Endpoints[number].OutBuffer = buf;
 8007f12:	4a0b      	ldr	r2, [pc, #44]	; (8007f40 <USBD_SetEndpointBuffer+0x74>)
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	212c      	movs	r1, #44	; 0x2c
 8007f18:	fb01 f303 	mul.w	r3, r1, r3
 8007f1c:	4413      	add	r3, r2
 8007f1e:	3310      	adds	r3, #16
 8007f20:	683a      	ldr	r2, [r7, #0]
 8007f22:	605a      	str	r2, [r3, #4]
    device.Endpoints[number].OutBufferLength = len;
 8007f24:	88ba      	ldrh	r2, [r7, #4]
 8007f26:	4906      	ldr	r1, [pc, #24]	; (8007f40 <USBD_SetEndpointBuffer+0x74>)
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	202c      	movs	r0, #44	; 0x2c
 8007f2c:	fb00 f303 	mul.w	r3, r0, r3
 8007f30:	440b      	add	r3, r1
 8007f32:	3310      	adds	r3, #16
 8007f34:	609a      	str	r2, [r3, #8]
  }

}
 8007f36:	3714      	adds	r7, #20
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr
 8007f40:	20000b48 	.word	0x20000b48

08007f44 <USB0_0_IRQHandler>:
 *
 * This function gets called, if a USB exception (interrupt) was thrown and
 * dispatches it to XMC_USBD_IRQHandler.
 */
void USB0_0_IRQHandler(void)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	af00      	add	r7, sp, #0
  XMC_USBD_IRQHandler(&(USBD_handle->usb_init));
 8007f48:	4b02      	ldr	r3, [pc, #8]	; (8007f54 <USB0_0_IRQHandler+0x10>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f7fd fd87 	bl	8005a60 <XMC_USBD_IRQHandler>
}
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	200000ac 	.word	0x200000ac

08007f58 <USB_EnableUSBInterrupt>:
 * Enables and sets the priority of USB Interrupt
 *
 * First the interrupt priority is set and then the interrupt is enabled in the NVIC.
 */
static void USB_EnableUSBInterrupt(void)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	af00      	add	r7, sp, #0
  NVIC_SetPriority(USB0_0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), USB_PRE_EMPTION_PRIORITY, 
 8007f5c:	f7ff fe62 	bl	8007c24 <NVIC_GetPriorityGrouping>
 8007f60:	4603      	mov	r3, r0
 8007f62:	4618      	mov	r0, r3
 8007f64:	213f      	movs	r1, #63	; 0x3f
 8007f66:	2200      	movs	r2, #0
 8007f68:	f7ff fee0 	bl	8007d2c <NVIC_EncodePriority>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	206b      	movs	r0, #107	; 0x6b
 8007f70:	4619      	mov	r1, r3
 8007f72:	f7ff feb1 	bl	8007cd8 <NVIC_SetPriority>
  USB_SUB_PRIORITY));
  NVIC_ClearPendingIRQ(USB0_0_IRQn);
 8007f76:	206b      	movs	r0, #107	; 0x6b
 8007f78:	f7ff fe94 	bl	8007ca4 <NVIC_ClearPendingIRQ>
  NVIC_EnableIRQ(USB0_0_IRQn);
 8007f7c:	206b      	movs	r0, #107	; 0x6b
 8007f7e:	f7ff fe5f 	bl	8007c40 <NVIC_EnableIRQ>
}
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <USB_DisableUSBInterrupt>:
 * Disables the USB interrupt in the NVIC.
 *
 * Before the interrupt gets disabled, it will clear the pending IRQs.
 */
static void USB_DisableUSBInterrupt(void)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	af00      	add	r7, sp, #0
  NVIC_ClearPendingIRQ(USB0_0_IRQn);
 8007f88:	206b      	movs	r0, #107	; 0x6b
 8007f8a:	f7ff fe8b 	bl	8007ca4 <NVIC_ClearPendingIRQ>
  NVIC_DisableIRQ(USB0_0_IRQn);
 8007f8e:	206b      	movs	r0, #107	; 0x6b
 8007f90:	f7ff fe6e 	bl	8007c70 <NVIC_DisableIRQ>
}
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop

08007f98 <USBD_HandleEP0_Stall>:
 *
 * Stalls EP0 and then restarts a new transfer including setting EP0 state to
 * 																\ref USBD_EP0_STATE_IDLE.
 */
static void USBD_HandleEP0_Stall(void)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	af00      	add	r7, sp, #0
  /* When we stall ep0 as protocol stall, we go back into idle state and
  * start a new read */
  if (USBD_STATUS_SUCCESS == (USBD_STATUS_t)device.Driver->EndpointStall(ENDPOINT_DIR_IN | 0U,1U))
 8007f9c:	4b09      	ldr	r3, [pc, #36]	; (8007fc4 <USBD_HandleEP0_Stall+0x2c>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa2:	2080      	movs	r0, #128	; 0x80
 8007fa4:	2101      	movs	r1, #1
 8007fa6:	4798      	blx	r3
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d109      	bne.n	8007fc2 <USBD_HandleEP0_Stall+0x2a>
  {
    device.ep0_state = USBD_EP0_STATE_IDLE;
 8007fae:	4b05      	ldr	r3, [pc, #20]	; (8007fc4 <USBD_HandleEP0_Stall+0x2c>)
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
    if ( USBD_STATUS_SUCCESS != (USBD_STATUS_t)device.Driver->EndpointReadStart(0U,USBD_EP0_3SETUP_PKT_SIZE))
 8007fb6:	4b03      	ldr	r3, [pc, #12]	; (8007fc4 <USBD_HandleEP0_Stall+0x2c>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fbc:	2000      	movs	r0, #0
 8007fbe:	2118      	movs	r1, #24
 8007fc0:	4798      	blx	r3
    {
      XMC_ASSERT("USBD_HandleEP0_Stall: EndpointReadStart failed", 0);
    }
  }
}
 8007fc2:	bd80      	pop	{r7, pc}
 8007fc4:	20000b48 	.word	0x20000b48

08007fc8 <USBD_Handle_DeviceRequest>:
 * handle some custom request or override the request handling in this function.
 * If the user has handled the request, he has to call \ref Endpoint_ClearSETUP.
 *
 */
static void USBD_Handle_DeviceRequest(void)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b088      	sub	sp, #32
 8007fcc:	af00      	add	r7, sp, #0
  uint32_t length = 0U;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	61fb      	str	r3, [r7, #28]
  uint32_t ret;
  void *buffer = NULL;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	607b      	str	r3, [r7, #4]
  uint32_t status = 0U;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	603b      	str	r3, [r7, #0]
  uint32_t value;
  uint32_t tmp_value;
  uint32_t tmp_index;
  

  value = (uint32_t)USB_ControlRequest.wValue & (uint32_t)USBD_BYTE_MASK;
 8007fda:	4b95      	ldr	r3, [pc, #596]	; (8008230 <USBD_Handle_DeviceRequest+0x268>)
 8007fdc:	885b      	ldrh	r3, [r3, #2]
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	61bb      	str	r3, [r7, #24]

  /* Handling of class/vendor requests */
  if (NULL != device.events->control_request)
 8007fe4:	4b93      	ldr	r3, [pc, #588]	; (8008234 <USBD_Handle_DeviceRequest+0x26c>)
 8007fe6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d004      	beq.n	8007ffa <USBD_Handle_DeviceRequest+0x32>
  {
    device.events->control_request();
 8007ff0:	4b90      	ldr	r3, [pc, #576]	; (8008234 <USBD_Handle_DeviceRequest+0x26c>)
 8007ff2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	4798      	blx	r3
  }

  if (1U == device.IsSetupRecieved)
 8007ffa:	4b8e      	ldr	r3, [pc, #568]	; (8008234 <USBD_Handle_DeviceRequest+0x26c>)
 8007ffc:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8008000:	b2db      	uxtb	r3, r3
 8008002:	085b      	lsrs	r3, r3, #1
 8008004:	f003 0301 	and.w	r3, r3, #1
 8008008:	b2db      	uxtb	r3, r3
 800800a:	2b01      	cmp	r3, #1
 800800c:	f040 8228 	bne.w	8008460 <USBD_Handle_DeviceRequest+0x498>
  {
    /* default request handling */
    switch (USB_ControlRequest.bRequest)
 8008010:	4b87      	ldr	r3, [pc, #540]	; (8008230 <USBD_Handle_DeviceRequest+0x268>)
 8008012:	785b      	ldrb	r3, [r3, #1]
 8008014:	b2db      	uxtb	r3, r3
 8008016:	2b0c      	cmp	r3, #12
 8008018:	f200 821f 	bhi.w	800845a <USBD_Handle_DeviceRequest+0x492>
 800801c:	a201      	add	r2, pc, #4	; (adr r2, 8008024 <USBD_Handle_DeviceRequest+0x5c>)
 800801e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008022:	bf00      	nop
 8008024:	080081bf 	.word	0x080081bf
 8008028:	08008059 	.word	0x08008059
 800802c:	0800845b 	.word	0x0800845b
 8008030:	0800838d 	.word	0x0800838d
 8008034:	0800845b 	.word	0x0800845b
 8008038:	080082b7 	.word	0x080082b7
 800803c:	08008105 	.word	0x08008105
 8008040:	08008347 	.word	0x08008347
 8008044:	080080f5 	.word	0x080080f5
 8008048:	080082fb 	.word	0x080082fb
 800804c:	08008185 	.word	0x08008185
 8008050:	0800834d 	.word	0x0800834d
 8008054:	08008455 	.word	0x08008455
    {
      case REQ_ClearFeature:
        if ((uint8_t)REQREC_ENDPOINT == (USB_ControlRequest.bmRequestType & (uint8_t)REQ_RECIPIENT_MASK))
 8008058:	4b75      	ldr	r3, [pc, #468]	; (8008230 <USBD_Handle_DeviceRequest+0x268>)
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	b2db      	uxtb	r3, r3
 800805e:	f003 0303 	and.w	r3, r3, #3
 8008062:	2b02      	cmp	r3, #2
 8008064:	d134      	bne.n	80080d0 <USBD_Handle_DeviceRequest+0x108>
        {
          index = (uint32_t)USB_ControlRequest.wIndex & (uint32_t)ENDPOINT_EPNUM_MASK;
 8008066:	4b72      	ldr	r3, [pc, #456]	; (8008230 <USBD_Handle_DeviceRequest+0x268>)
 8008068:	889b      	ldrh	r3, [r3, #4]
 800806a:	b29b      	uxth	r3, r3
 800806c:	f003 030f 	and.w	r3, r3, #15
 8008070:	617b      	str	r3, [r7, #20]
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0U == USB_ControlRequest.wIndex)) &&
 8008072:	4b71      	ldr	r3, [pc, #452]	; (8008238 <USBD_Handle_DeviceRequest+0x270>)
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	b2db      	uxtb	r3, r3
 8008078:	2b04      	cmp	r3, #4
 800807a:	d004      	beq.n	8008086 <USBD_Handle_DeviceRequest+0xbe>
 800807c:	4b6c      	ldr	r3, [pc, #432]	; (8008230 <USBD_Handle_DeviceRequest+0x268>)
 800807e:	889b      	ldrh	r3, [r3, #4]
 8008080:	b29b      	uxth	r3, r3
 8008082:	2b00      	cmp	r3, #0
 8008084:	d121      	bne.n	80080ca <USBD_Handle_DeviceRequest+0x102>
                  (1U == device.Endpoints[index].IsConfigured))
 8008086:	4a6b      	ldr	r2, [pc, #428]	; (8008234 <USBD_Handle_DeviceRequest+0x26c>)
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	212c      	movs	r1, #44	; 0x2c
 800808c:	fb01 f303 	mul.w	r3, r1, r3
 8008090:	4413      	add	r3, r2
 8008092:	7a1b      	ldrb	r3, [r3, #8]
 8008094:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008098:	b2db      	uxtb	r3, r3
    {
      case REQ_ClearFeature:
        if ((uint8_t)REQREC_ENDPOINT == (USB_ControlRequest.bmRequestType & (uint8_t)REQ_RECIPIENT_MASK))
        {
          index = (uint32_t)USB_ControlRequest.wIndex & (uint32_t)ENDPOINT_EPNUM_MASK;
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0U == USB_ControlRequest.wIndex)) &&
 800809a:	2b01      	cmp	r3, #1
 800809c:	d115      	bne.n	80080ca <USBD_Handle_DeviceRequest+0x102>
                  (1U == device.Endpoints[index].IsConfigured))
          {
            device.Endpoints[index].IsHalted = 0U;
 800809e:	4a65      	ldr	r2, [pc, #404]	; (8008234 <USBD_Handle_DeviceRequest+0x26c>)
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	212c      	movs	r1, #44	; 0x2c
 80080a4:	fb01 f303 	mul.w	r3, r1, r3
 80080a8:	441a      	add	r2, r3
 80080aa:	8913      	ldrh	r3, [r2, #8]
 80080ac:	f36f 0382 	bfc	r3, #2, #1
 80080b0:	8113      	strh	r3, [r2, #8]
            if (USBD_STATUS_SUCCESS != 
                                 (USBD_STATUS_t)device.Driver->EndpointStall((uint8_t)USB_ControlRequest.wIndex,false))
 80080b2:	4b60      	ldr	r3, [pc, #384]	; (8008234 <USBD_Handle_DeviceRequest+0x26c>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b8:	4a5d      	ldr	r2, [pc, #372]	; (8008230 <USBD_Handle_DeviceRequest+0x268>)
 80080ba:	8892      	ldrh	r2, [r2, #4]
 80080bc:	b292      	uxth	r2, r2
 80080be:	b2d2      	uxtb	r2, r2
 80080c0:	4610      	mov	r0, r2
 80080c2:	2100      	movs	r1, #0
 80080c4:	4798      	blx	r3
          index = (uint32_t)USB_ControlRequest.wIndex & (uint32_t)ENDPOINT_EPNUM_MASK;
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0U == USB_ControlRequest.wIndex)) &&
                  (1U == device.Endpoints[index].IsConfigured))
          {
            device.Endpoints[index].IsHalted = 0U;
            if (USBD_STATUS_SUCCESS != 
 80080c6:	bf00      	nop
          }
          else
          {
            USBD_HandleEP0_Stall();
          }
          break;
 80080c8:	e1ca      	b.n	8008460 <USBD_Handle_DeviceRequest+0x498>
              XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointStall failed", 0);
            }
          }
          else
          {
            USBD_HandleEP0_Stall();
 80080ca:	f7ff ff65 	bl	8007f98 <USBD_HandleEP0_Stall>
          }
          break;
 80080ce:	e1c7      	b.n	8008460 <USBD_Handle_DeviceRequest+0x498>
        }
        if (REQREC_DEVICE == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
 80080d0:	4b57      	ldr	r3, [pc, #348]	; (8008230 <USBD_Handle_DeviceRequest+0x268>)
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	f003 0303 	and.w	r3, r3, #3
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d107      	bne.n	80080ee <USBD_Handle_DeviceRequest+0x126>
        {
          device.remote_wakeup = 0U;
 80080de:	4a55      	ldr	r2, [pc, #340]	; (8008234 <USBD_Handle_DeviceRequest+0x26c>)
 80080e0:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 80080e4:	f36f 0382 	bfc	r3, #2, #1
 80080e8:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
          break;
 80080ec:	e1b8      	b.n	8008460 <USBD_Handle_DeviceRequest+0x498>
        }
        USBD_HandleEP0_Stall();
 80080ee:	f7ff ff53 	bl	8007f98 <USBD_HandleEP0_Stall>
        break;
 80080f2:	e1b5      	b.n	8008460 <USBD_Handle_DeviceRequest+0x498>

      case REQ_GetConfiguration:
        if (0U == (uint32_t)device.Driver->EndpointWrite(0U,&device.configuration,1U))
 80080f4:	4b4f      	ldr	r3, [pc, #316]	; (8008234 <USBD_Handle_DeviceRequest+0x26c>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080fa:	2000      	movs	r0, #0
 80080fc:	494f      	ldr	r1, [pc, #316]	; (800823c <USBD_Handle_DeviceRequest+0x274>)
 80080fe:	2201      	movs	r2, #1
 8008100:	4798      	blx	r3
        {
          XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on get configuration request", 0);
        }
        break;
 8008102:	e1ad      	b.n	8008460 <USBD_Handle_DeviceRequest+0x498>

      case REQ_GetDescriptor:
        if (NULL != device.events->get_descriptor)
 8008104:	4b4b      	ldr	r3, [pc, #300]	; (8008234 <USBD_Handle_DeviceRequest+0x26c>)
 8008106:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800810a:	695b      	ldr	r3, [r3, #20]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d013      	beq.n	8008138 <USBD_Handle_DeviceRequest+0x170>
        {
          tmp_value = (uint32_t)USB_ControlRequest.wValue;
 8008110:	4b47      	ldr	r3, [pc, #284]	; (8008230 <USBD_Handle_DeviceRequest+0x268>)
 8008112:	885b      	ldrh	r3, [r3, #2]
 8008114:	b29b      	uxth	r3, r3
 8008116:	613b      	str	r3, [r7, #16]
          tmp_index = (uint32_t)USB_ControlRequest.wIndex;
 8008118:	4b45      	ldr	r3, [pc, #276]	; (8008230 <USBD_Handle_DeviceRequest+0x268>)
 800811a:	889b      	ldrh	r3, [r3, #4]
 800811c:	b29b      	uxth	r3, r3
 800811e:	60fb      	str	r3, [r7, #12]
          length = (uint32_t)device.events->get_descriptor((uint16_t)tmp_value, (uint16_t)tmp_index, (void*)&buffer);
 8008120:	4b44      	ldr	r3, [pc, #272]	; (8008234 <USBD_Handle_DeviceRequest+0x26c>)
 8008122:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8008126:	695b      	ldr	r3, [r3, #20]
 8008128:	693a      	ldr	r2, [r7, #16]
 800812a:	b290      	uxth	r0, r2
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	b291      	uxth	r1, r2
 8008130:	1d3a      	adds	r2, r7, #4
 8008132:	4798      	blx	r3
 8008134:	4603      	mov	r3, r0
 8008136:	61fb      	str	r3, [r7, #28]
        }

        if (0U == length)
 8008138:	69fb      	ldr	r3, [r7, #28]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d102      	bne.n	8008144 <USBD_Handle_DeviceRequest+0x17c>
        {
          USBD_HandleEP0_Stall();
 800813e:	f7ff ff2b 	bl	8007f98 <USBD_HandleEP0_Stall>

          ret = (uint32_t)device.Driver->EndpointWrite(0U,buffer,length);
          device.Endpoints[0].InDataLeft = length - ret;
          device.Endpoints[0].InDataBuffer = (uint8_t *)buffer + ret;
        }
        break;
 8008142:	e18d      	b.n	8008460 <USBD_Handle_DeviceRequest+0x498>
        {
          USBD_HandleEP0_Stall();
        }
        else
        {
          if (length >= (uint32_t)USB_ControlRequest.wLength)
 8008144:	4b3a      	ldr	r3, [pc, #232]	; (8008230 <USBD_Handle_DeviceRequest+0x268>)
 8008146:	88db      	ldrh	r3, [r3, #6]
 8008148:	b29b      	uxth	r3, r3
 800814a:	461a      	mov	r2, r3
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	429a      	cmp	r2, r3
 8008150:	d803      	bhi.n	800815a <USBD_Handle_DeviceRequest+0x192>
          {
            length = (uint32_t)USB_ControlRequest.wLength;
 8008152:	4b37      	ldr	r3, [pc, #220]	; (8008230 <USBD_Handle_DeviceRequest+0x268>)
 8008154:	88db      	ldrh	r3, [r3, #6]
 8008156:	b29b      	uxth	r3, r3
 8008158:	61fb      	str	r3, [r7, #28]
          }

          ret = (uint32_t)device.Driver->EndpointWrite(0U,buffer,length);
 800815a:	4b36      	ldr	r3, [pc, #216]	; (8008234 <USBD_Handle_DeviceRequest+0x26c>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	2000      	movs	r0, #0
 8008164:	4611      	mov	r1, r2
 8008166:	69fa      	ldr	r2, [r7, #28]
 8008168:	4798      	blx	r3
 800816a:	4603      	mov	r3, r0
 800816c:	60bb      	str	r3, [r7, #8]
          device.Endpoints[0].InDataLeft = length - ret;
 800816e:	69fa      	ldr	r2, [r7, #28]
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	1ad3      	subs	r3, r2, r3
 8008174:	4a2f      	ldr	r2, [pc, #188]	; (8008234 <USBD_Handle_DeviceRequest+0x26c>)
 8008176:	6293      	str	r3, [r2, #40]	; 0x28
          device.Endpoints[0].InDataBuffer = (uint8_t *)buffer + ret;
 8008178:	687a      	ldr	r2, [r7, #4]
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	4413      	add	r3, r2
 800817e:	4a2d      	ldr	r2, [pc, #180]	; (8008234 <USBD_Handle_DeviceRequest+0x26c>)
 8008180:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
        break;
 8008182:	e16d      	b.n	8008460 <USBD_Handle_DeviceRequest+0x498>

      case REQ_GetInterface:
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
 8008184:	4b2c      	ldr	r3, [pc, #176]	; (8008238 <USBD_Handle_DeviceRequest+0x270>)
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	b2db      	uxtb	r3, r3
 800818a:	2b04      	cmp	r3, #4
 800818c:	d10e      	bne.n	80081ac <USBD_Handle_DeviceRequest+0x1e4>
        {          
          if (0U == (uint32_t)device.Driver->EndpointWrite(0U, 
 800818e:	4b29      	ldr	r3, [pc, #164]	; (8008234 <USBD_Handle_DeviceRequest+0x26c>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
             &device.interface_settings[USB_ControlRequest.wIndex], 1U))
 8008194:	4a26      	ldr	r2, [pc, #152]	; (8008230 <USBD_Handle_DeviceRequest+0x268>)
 8008196:	8892      	ldrh	r2, [r2, #4]
 8008198:	b292      	uxth	r2, r2
 800819a:	f502 729c 	add.w	r2, r2, #312	; 0x138
 800819e:	4925      	ldr	r1, [pc, #148]	; (8008234 <USBD_Handle_DeviceRequest+0x26c>)
 80081a0:	440a      	add	r2, r1
        break;

      case REQ_GetInterface:
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
        {          
          if (0U == (uint32_t)device.Driver->EndpointWrite(0U, 
 80081a2:	2000      	movs	r0, #0
 80081a4:	4611      	mov	r1, r2
 80081a6:	2201      	movs	r2, #1
 80081a8:	4798      	blx	r3
             &device.interface_settings[USB_ControlRequest.wIndex], 1U))
          {
            XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetInterface", 0);
          }
          break;
 80081aa:	e159      	b.n	8008460 <USBD_Handle_DeviceRequest+0x498>
        }
        if ((uint8_t)DEVICE_STATE_Addressed == USB_DeviceState)
 80081ac:	4b22      	ldr	r3, [pc, #136]	; (8008238 <USBD_Handle_DeviceRequest+0x270>)
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	2b03      	cmp	r3, #3
 80081b4:	d102      	bne.n	80081bc <USBD_Handle_DeviceRequest+0x1f4>
        {
          USBD_HandleEP0_Stall();
 80081b6:	f7ff feef 	bl	8007f98 <USBD_HandleEP0_Stall>
          break;
 80081ba:	e151      	b.n	8008460 <USBD_Handle_DeviceRequest+0x498>
        }
        break;
 80081bc:	e150      	b.n	8008460 <USBD_Handle_DeviceRequest+0x498>

      case REQ_GetStatus:
        if (REQREC_DEVICE == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
 80081be:	4b1c      	ldr	r3, [pc, #112]	; (8008230 <USBD_Handle_DeviceRequest+0x268>)
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	f003 0303 	and.w	r3, r3, #3
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d119      	bne.n	8008200 <USBD_Handle_DeviceRequest+0x238>
        {
          status = (uint32_t)((uint8_t)(device.remote_wakeup << (uint8_t)1) | device.self_powered);					
 80081cc:	4b19      	ldr	r3, [pc, #100]	; (8008234 <USBD_Handle_DeviceRequest+0x26c>)
 80081ce:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 80081d2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	005b      	lsls	r3, r3, #1
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	461a      	mov	r2, r3
 80081de:	4b15      	ldr	r3, [pc, #84]	; (8008234 <USBD_Handle_DeviceRequest+0x26c>)
 80081e0:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 80081e4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	4313      	orrs	r3, r2
 80081ec:	603b      	str	r3, [r7, #0]
          if (0U == (uint32_t)device.Driver->EndpointWrite(0U, (uint8_t*)&status, USBD_WORD_SIZE))
 80081ee:	4b11      	ldr	r3, [pc, #68]	; (8008234 <USBD_Handle_DeviceRequest+0x26c>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081f4:	463a      	mov	r2, r7
 80081f6:	2000      	movs	r0, #0
 80081f8:	4611      	mov	r1, r2
 80081fa:	2202      	movs	r2, #2
 80081fc:	4798      	blx	r3
          {
            XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetStatus", 0);
          }          
          break;
 80081fe:	e12f      	b.n	8008460 <USBD_Handle_DeviceRequest+0x498>
        }
        if ((REQREC_INTERFACE == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
 8008200:	4b0b      	ldr	r3, [pc, #44]	; (8008230 <USBD_Handle_DeviceRequest+0x268>)
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	b2db      	uxtb	r3, r3
 8008206:	f003 0303 	and.w	r3, r3, #3
 800820a:	2b01      	cmp	r3, #1
 800820c:	d118      	bne.n	8008240 <USBD_Handle_DeviceRequest+0x278>
            ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState))
 800820e:	4b0a      	ldr	r3, [pc, #40]	; (8008238 <USBD_Handle_DeviceRequest+0x270>)
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	b2db      	uxtb	r3, r3
          {
            XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetStatus", 0);
          }          
          break;
        }
        if ((REQREC_INTERFACE == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
 8008214:	2b04      	cmp	r3, #4
 8008216:	d113      	bne.n	8008240 <USBD_Handle_DeviceRequest+0x278>
            ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState))
        {
          status = 0U;
 8008218:	2300      	movs	r3, #0
 800821a:	603b      	str	r3, [r7, #0]
          if (0U == (uint32_t)device.Driver->EndpointWrite(0U, (uint8_t*)&status, USBD_WORD_SIZE))
 800821c:	4b05      	ldr	r3, [pc, #20]	; (8008234 <USBD_Handle_DeviceRequest+0x26c>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008222:	463a      	mov	r2, r7
 8008224:	2000      	movs	r0, #0
 8008226:	4611      	mov	r1, r2
 8008228:	2202      	movs	r2, #2
 800822a:	4798      	blx	r3
          {
            XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetStatus- REQREC_INTERFACE", 0);
          }          
          break;
 800822c:	e118      	b.n	8008460 <USBD_Handle_DeviceRequest+0x498>
 800822e:	bf00      	nop
 8008230:	20000940 	.word	0x20000940
 8008234:	20000b48 	.word	0x20000b48
 8008238:	2000093d 	.word	0x2000093d
 800823c:	20000c81 	.word	0x20000c81
        }

        if (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
 8008240:	4b8c      	ldr	r3, [pc, #560]	; (8008474 <USBD_Handle_DeviceRequest+0x4ac>)
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	b2db      	uxtb	r3, r3
 8008246:	f003 0303 	and.w	r3, r3, #3
 800824a:	2b02      	cmp	r3, #2
 800824c:	d130      	bne.n	80082b0 <USBD_Handle_DeviceRequest+0x2e8>
        {
          index = (uint32_t)(USB_ControlRequest.wIndex & USBD_BYTE_MASK & ENDPOINT_EPNUM_MASK);
 800824e:	4b89      	ldr	r3, [pc, #548]	; (8008474 <USBD_Handle_DeviceRequest+0x4ac>)
 8008250:	889b      	ldrh	r3, [r3, #4]
 8008252:	b29b      	uxth	r3, r3
 8008254:	f003 030f 	and.w	r3, r3, #15
 8008258:	617b      	str	r3, [r7, #20]
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0 == USB_ControlRequest.wIndex)) &&
 800825a:	4b87      	ldr	r3, [pc, #540]	; (8008478 <USBD_Handle_DeviceRequest+0x4b0>)
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	b2db      	uxtb	r3, r3
 8008260:	2b04      	cmp	r3, #4
 8008262:	d004      	beq.n	800826e <USBD_Handle_DeviceRequest+0x2a6>
 8008264:	4b83      	ldr	r3, [pc, #524]	; (8008474 <USBD_Handle_DeviceRequest+0x4ac>)
 8008266:	889b      	ldrh	r3, [r3, #4]
 8008268:	b29b      	uxth	r3, r3
 800826a:	2b00      	cmp	r3, #0
 800826c:	d120      	bne.n	80082b0 <USBD_Handle_DeviceRequest+0x2e8>
              (1U == device.Endpoints[index].IsConfigured))
 800826e:	4a83      	ldr	r2, [pc, #524]	; (800847c <USBD_Handle_DeviceRequest+0x4b4>)
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	212c      	movs	r1, #44	; 0x2c
 8008274:	fb01 f303 	mul.w	r3, r1, r3
 8008278:	4413      	add	r3, r2
 800827a:	7a1b      	ldrb	r3, [r3, #8]
 800827c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008280:	b2db      	uxtb	r3, r3
        }

        if (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK))
        {
          index = (uint32_t)(USB_ControlRequest.wIndex & USBD_BYTE_MASK & ENDPOINT_EPNUM_MASK);
          if ((((uint8_t)DEVICE_STATE_Configured == USB_DeviceState) || ((uint16_t)0 == USB_ControlRequest.wIndex)) &&
 8008282:	2b01      	cmp	r3, #1
 8008284:	d114      	bne.n	80082b0 <USBD_Handle_DeviceRequest+0x2e8>
              (1U == device.Endpoints[index].IsConfigured))
          {
            status = (uint32_t)device.Endpoints[index].IsHalted;
 8008286:	4a7d      	ldr	r2, [pc, #500]	; (800847c <USBD_Handle_DeviceRequest+0x4b4>)
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	212c      	movs	r1, #44	; 0x2c
 800828c:	fb01 f303 	mul.w	r3, r1, r3
 8008290:	4413      	add	r3, r2
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	089b      	lsrs	r3, r3, #2
 8008296:	f003 0301 	and.w	r3, r3, #1
 800829a:	b2db      	uxtb	r3, r3
 800829c:	603b      	str	r3, [r7, #0]
            if (0U == (uint32_t)device.Driver->EndpointWrite(0U, (uint8_t*)&status, USBD_WORD_SIZE))
 800829e:	4b77      	ldr	r3, [pc, #476]	; (800847c <USBD_Handle_DeviceRequest+0x4b4>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a4:	463a      	mov	r2, r7
 80082a6:	2000      	movs	r0, #0
 80082a8:	4611      	mov	r1, r2
 80082aa:	2202      	movs	r2, #2
 80082ac:	4798      	blx	r3
            {
              XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointWrite failed on REQ_GetStatus- REQREC_ENDPOINT", 0);
            }              
            break;
 80082ae:	e0d7      	b.n	8008460 <USBD_Handle_DeviceRequest+0x498>
          }
        }
        /* default stall */
        USBD_HandleEP0_Stall();
 80082b0:	f7ff fe72 	bl	8007f98 <USBD_HandleEP0_Stall>
        break;
 80082b4:	e0d4      	b.n	8008460 <USBD_Handle_DeviceRequest+0x498>

      case REQ_SetAddress:
        if (0U == value)
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d103      	bne.n	80082c4 <USBD_Handle_DeviceRequest+0x2fc>
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Default;
 80082bc:	4b6e      	ldr	r3, [pc, #440]	; (8008478 <USBD_Handle_DeviceRequest+0x4b0>)
 80082be:	2202      	movs	r2, #2
 80082c0:	701a      	strb	r2, [r3, #0]
 80082c2:	e002      	b.n	80082ca <USBD_Handle_DeviceRequest+0x302>
        }
        else
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Addressed;
 80082c4:	4b6c      	ldr	r3, [pc, #432]	; (8008478 <USBD_Handle_DeviceRequest+0x4b0>)
 80082c6:	2203      	movs	r2, #3
 80082c8:	701a      	strb	r2, [r3, #0]
        }
        if (USBD_STATUS_SUCCESS == (USBD_STATUS_t)device.Driver->DeviceSetAddress((uint8_t)value,
 80082ca:	4b6c      	ldr	r3, [pc, #432]	; (800847c <USBD_Handle_DeviceRequest+0x4b4>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	699b      	ldr	r3, [r3, #24]
 80082d0:	69ba      	ldr	r2, [r7, #24]
 80082d2:	b2d2      	uxtb	r2, r2
 80082d4:	4610      	mov	r0, r2
 80082d6:	2100      	movs	r1, #0
 80082d8:	4798      	blx	r3
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d10b      	bne.n	80082f8 <USBD_Handle_DeviceRequest+0x330>
                                   XMC_USBD_SET_ADDRESS_STAGE_SETUP))
        {
          if (NULL != device.events->set_address)
 80082e0:	4b66      	ldr	r3, [pc, #408]	; (800847c <USBD_Handle_DeviceRequest+0x4b4>)
 80082e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80082e6:	691b      	ldr	r3, [r3, #16]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d005      	beq.n	80082f8 <USBD_Handle_DeviceRequest+0x330>
          {
            device.events->set_address();
 80082ec:	4b63      	ldr	r3, [pc, #396]	; (800847c <USBD_Handle_DeviceRequest+0x4b4>)
 80082ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80082f2:	691b      	ldr	r3, [r3, #16]
 80082f4:	4798      	blx	r3
          }
        }
        break;
 80082f6:	e0b3      	b.n	8008460 <USBD_Handle_DeviceRequest+0x498>
 80082f8:	e0b2      	b.n	8008460 <USBD_Handle_DeviceRequest+0x498>

      case REQ_SetConfiguration:
        /* Regardless the state update the configuration to unconfigure
         * endpoints */
        device.configuration = (uint8_t)value;
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	b2da      	uxtb	r2, r3
 80082fe:	4b5f      	ldr	r3, [pc, #380]	; (800847c <USBD_Handle_DeviceRequest+0x4b4>)
 8008300:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
        if (NULL != device.events->config_changed)
 8008304:	4b5d      	ldr	r3, [pc, #372]	; (800847c <USBD_Handle_DeviceRequest+0x4b4>)
 8008306:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d004      	beq.n	800831a <USBD_Handle_DeviceRequest+0x352>
        {
          device.events->config_changed();
 8008310:	4b5a      	ldr	r3, [pc, #360]	; (800847c <USBD_Handle_DeviceRequest+0x4b4>)
 8008312:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	4798      	blx	r3
        }

        /* when config 0 is choosen, we are back in address state */
        if (0U == value)
 800831a:	69bb      	ldr	r3, [r7, #24]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d103      	bne.n	8008328 <USBD_Handle_DeviceRequest+0x360>
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Addressed;
 8008320:	4b55      	ldr	r3, [pc, #340]	; (8008478 <USBD_Handle_DeviceRequest+0x4b0>)
 8008322:	2203      	movs	r2, #3
 8008324:	701a      	strb	r2, [r3, #0]
          break;
 8008326:	e09b      	b.n	8008460 <USBD_Handle_DeviceRequest+0x498>
        }
        /* go ahead only with vailid config. (must be set in event) */
        if (1U == device.IsConfigured)
 8008328:	4b54      	ldr	r3, [pc, #336]	; (800847c <USBD_Handle_DeviceRequest+0x4b4>)
 800832a:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 800832e:	f003 0301 	and.w	r3, r3, #1
 8008332:	b2db      	uxtb	r3, r3
 8008334:	2b00      	cmp	r3, #0
 8008336:	d003      	beq.n	8008340 <USBD_Handle_DeviceRequest+0x378>
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Configured;
 8008338:	4b4f      	ldr	r3, [pc, #316]	; (8008478 <USBD_Handle_DeviceRequest+0x4b0>)
 800833a:	2204      	movs	r2, #4
 800833c:	701a      	strb	r2, [r3, #0]
        }
        else
        {
          USBD_HandleEP0_Stall();
        }
        break;
 800833e:	e08f      	b.n	8008460 <USBD_Handle_DeviceRequest+0x498>
        {
          USB_DeviceState = (uint8_t)DEVICE_STATE_Configured;
        }
        else
        {
          USBD_HandleEP0_Stall();
 8008340:	f7ff fe2a 	bl	8007f98 <USBD_HandleEP0_Stall>
        }
        break;
 8008344:	e08c      	b.n	8008460 <USBD_Handle_DeviceRequest+0x498>

      case REQ_SetDescriptor:
        /* Set Descriptor not supported, so stall */
        USBD_HandleEP0_Stall();
 8008346:	f7ff fe27 	bl	8007f98 <USBD_HandleEP0_Stall>
        break;
 800834a:	e089      	b.n	8008460 <USBD_Handle_DeviceRequest+0x498>

      case REQ_SetInterface:
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
 800834c:	4b4a      	ldr	r3, [pc, #296]	; (8008478 <USBD_Handle_DeviceRequest+0x4b0>)
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	b2db      	uxtb	r3, r3
 8008352:	2b04      	cmp	r3, #4
 8008354:	d111      	bne.n	800837a <USBD_Handle_DeviceRequest+0x3b2>
        {
          tmp_value = (uint32_t)USB_ControlRequest.wValue;
 8008356:	4b47      	ldr	r3, [pc, #284]	; (8008474 <USBD_Handle_DeviceRequest+0x4ac>)
 8008358:	885b      	ldrh	r3, [r3, #2]
 800835a:	b29b      	uxth	r3, r3
 800835c:	613b      	str	r3, [r7, #16]
          tmp_index = (uint32_t)USB_ControlRequest.wIndex;
 800835e:	4b45      	ldr	r3, [pc, #276]	; (8008474 <USBD_Handle_DeviceRequest+0x4ac>)
 8008360:	889b      	ldrh	r3, [r3, #4]
 8008362:	b29b      	uxth	r3, r3
 8008364:	60fb      	str	r3, [r7, #12]
          device.interface_settings[tmp_index] =	(uint8_t)tmp_value;
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	b2d9      	uxtb	r1, r3
 800836a:	4a44      	ldr	r2, [pc, #272]	; (800847c <USBD_Handle_DeviceRequest+0x4b4>)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	4413      	add	r3, r2
 8008370:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8008374:	460a      	mov	r2, r1
 8008376:	701a      	strb	r2, [r3, #0]
          break;
 8008378:	e072      	b.n	8008460 <USBD_Handle_DeviceRequest+0x498>
        }
        if ((uint8_t)DEVICE_STATE_Addressed == USB_DeviceState)
 800837a:	4b3f      	ldr	r3, [pc, #252]	; (8008478 <USBD_Handle_DeviceRequest+0x4b0>)
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	b2db      	uxtb	r3, r3
 8008380:	2b03      	cmp	r3, #3
 8008382:	d102      	bne.n	800838a <USBD_Handle_DeviceRequest+0x3c2>
        {
          USBD_HandleEP0_Stall();
 8008384:	f7ff fe08 	bl	8007f98 <USBD_HandleEP0_Stall>
          break;
 8008388:	e06a      	b.n	8008460 <USBD_Handle_DeviceRequest+0x498>
        }
        break;
 800838a:	e069      	b.n	8008460 <USBD_Handle_DeviceRequest+0x498>

      case REQ_SetFeature:
        /* we do not support test mode */
        if ((uint32_t)FEATURE_SEL_TestMode == value)
 800838c:	69bb      	ldr	r3, [r7, #24]
 800838e:	2b02      	cmp	r3, #2
 8008390:	d102      	bne.n	8008398 <USBD_Handle_DeviceRequest+0x3d0>
        {
          USBD_HandleEP0_Stall();
 8008392:	f7ff fe01 	bl	8007f98 <USBD_HandleEP0_Stall>
          break;
 8008396:	e063      	b.n	8008460 <USBD_Handle_DeviceRequest+0x498>
        }
        /* configured state */
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
 8008398:	4b37      	ldr	r3, [pc, #220]	; (8008478 <USBD_Handle_DeviceRequest+0x4b0>)
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	b2db      	uxtb	r3, r3
 800839e:	2b04      	cmp	r3, #4
 80083a0:	d138      	bne.n	8008414 <USBD_Handle_DeviceRequest+0x44c>
        {
          switch (value)
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d00a      	beq.n	80083be <USBD_Handle_DeviceRequest+0x3f6>
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d000      	beq.n	80083ae <USBD_Handle_DeviceRequest+0x3e6>
                  XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointStall failed- FEATURE_SEL_EndpointHalt", 0);
                }                
              }
              break;
            default:
              break;
 80083ac:	e031      	b.n	8008412 <USBD_Handle_DeviceRequest+0x44a>
        if ((uint8_t)DEVICE_STATE_Configured == USB_DeviceState)
        {
          switch (value)
          {
            case FEATURE_SEL_DeviceRemoteWakeup:
              device.remote_wakeup = 1U;
 80083ae:	4a33      	ldr	r2, [pc, #204]	; (800847c <USBD_Handle_DeviceRequest+0x4b4>)
 80083b0:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 80083b4:	f043 0304 	orr.w	r3, r3, #4
 80083b8:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
              break;
 80083bc:	e029      	b.n	8008412 <USBD_Handle_DeviceRequest+0x44a>
            case FEATURE_SEL_EndpointHalt:
              index = ((uint32_t)USB_ControlRequest.wIndex & (uint32_t)USBD_BYTE_MASK & 
 80083be:	4b2d      	ldr	r3, [pc, #180]	; (8008474 <USBD_Handle_DeviceRequest+0x4ac>)
 80083c0:	889b      	ldrh	r3, [r3, #4]
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	f003 030f 	and.w	r3, r3, #15
 80083c8:	617b      	str	r3, [r7, #20]
                      (uint32_t)XMC_USBD_ENDPOINT_NUMBER_MASK);
              if (0U == device.Endpoints[index].IsConfigured)
 80083ca:	4a2c      	ldr	r2, [pc, #176]	; (800847c <USBD_Handle_DeviceRequest+0x4b4>)
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	212c      	movs	r1, #44	; 0x2c
 80083d0:	fb01 f303 	mul.w	r3, r1, r3
 80083d4:	4413      	add	r3, r2
 80083d6:	7a1b      	ldrb	r3, [r3, #8]
 80083d8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d102      	bne.n	80083e8 <USBD_Handle_DeviceRequest+0x420>
              {
                USBD_HandleEP0_Stall();
 80083e2:	f7ff fdd9 	bl	8007f98 <USBD_HandleEP0_Stall>
 80083e6:	e013      	b.n	8008410 <USBD_Handle_DeviceRequest+0x448>
              }
              else
              {
                device.Endpoints[index].IsHalted = 1U;
 80083e8:	4a24      	ldr	r2, [pc, #144]	; (800847c <USBD_Handle_DeviceRequest+0x4b4>)
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	212c      	movs	r1, #44	; 0x2c
 80083ee:	fb01 f303 	mul.w	r3, r1, r3
 80083f2:	441a      	add	r2, r3
 80083f4:	8913      	ldrh	r3, [r2, #8]
 80083f6:	f043 0304 	orr.w	r3, r3, #4
 80083fa:	8113      	strh	r3, [r2, #8]
                if (USBD_STATUS_SUCCESS != 
                                  (USBD_STATUS_t)device.Driver->EndpointStall((uint8_t)USB_ControlRequest.wIndex,true))
 80083fc:	4b1f      	ldr	r3, [pc, #124]	; (800847c <USBD_Handle_DeviceRequest+0x4b4>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008402:	4a1c      	ldr	r2, [pc, #112]	; (8008474 <USBD_Handle_DeviceRequest+0x4ac>)
 8008404:	8892      	ldrh	r2, [r2, #4]
 8008406:	b292      	uxth	r2, r2
 8008408:	b2d2      	uxtb	r2, r2
 800840a:	4610      	mov	r0, r2
 800840c:	2101      	movs	r1, #1
 800840e:	4798      	blx	r3
                {
                  XMC_ASSERT("USBD_Handle_DeviceRequest: EndpointStall failed- FEATURE_SEL_EndpointHalt", 0);
                }                
              }
              break;
 8008410:	bf00      	nop
            default:
              break;
          }
          break;
 8008412:	e025      	b.n	8008460 <USBD_Handle_DeviceRequest+0x498>
        }
        /* when addressed, only ep0 can be halted */
        if ((uint8_t)DEVICE_STATE_Addressed == USB_DeviceState)
 8008414:	4b18      	ldr	r3, [pc, #96]	; (8008478 <USBD_Handle_DeviceRequest+0x4b0>)
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	b2db      	uxtb	r3, r3
 800841a:	2b03      	cmp	r3, #3
 800841c:	d117      	bne.n	800844e <USBD_Handle_DeviceRequest+0x486>
        {
          if (((uint32_t)FEATURE_SEL_EndpointHalt == value) &&
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d114      	bne.n	800844e <USBD_Handle_DeviceRequest+0x486>
              (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
 8008424:	4b13      	ldr	r3, [pc, #76]	; (8008474 <USBD_Handle_DeviceRequest+0x4ac>)
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	b2db      	uxtb	r3, r3
 800842a:	f003 0303 	and.w	r3, r3, #3
          break;
        }
        /* when addressed, only ep0 can be halted */
        if ((uint8_t)DEVICE_STATE_Addressed == USB_DeviceState)
        {
          if (((uint32_t)FEATURE_SEL_EndpointHalt == value) &&
 800842e:	2b02      	cmp	r3, #2
 8008430:	d10d      	bne.n	800844e <USBD_Handle_DeviceRequest+0x486>
              (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
              ((uint16_t)0 == ((uint16_t)USB_ControlRequest.wIndex & (uint16_t)USBD_BYTE_MASK)))
 8008432:	4b10      	ldr	r3, [pc, #64]	; (8008474 <USBD_Handle_DeviceRequest+0x4ac>)
 8008434:	889b      	ldrh	r3, [r3, #4]
 8008436:	b29b      	uxth	r3, r3
 8008438:	b2db      	uxtb	r3, r3
        }
        /* when addressed, only ep0 can be halted */
        if ((uint8_t)DEVICE_STATE_Addressed == USB_DeviceState)
        {
          if (((uint32_t)FEATURE_SEL_EndpointHalt == value) &&
              (REQREC_ENDPOINT == ((uint32_t)USB_ControlRequest.bmRequestType & REQ_RECIPIENT_MASK)) &&
 800843a:	2b00      	cmp	r3, #0
 800843c:	d107      	bne.n	800844e <USBD_Handle_DeviceRequest+0x486>
              ((uint16_t)0 == ((uint16_t)USB_ControlRequest.wIndex & (uint16_t)USBD_BYTE_MASK)))
          {
            device.Endpoints[0].IsHalted = 1U;
 800843e:	4a0f      	ldr	r2, [pc, #60]	; (800847c <USBD_Handle_DeviceRequest+0x4b4>)
 8008440:	8913      	ldrh	r3, [r2, #8]
 8008442:	f043 0304 	orr.w	r3, r3, #4
 8008446:	8113      	strh	r3, [r2, #8]
            USBD_HandleEP0_Stall();
 8008448:	f7ff fda6 	bl	8007f98 <USBD_HandleEP0_Stall>
            break;
 800844c:	e008      	b.n	8008460 <USBD_Handle_DeviceRequest+0x498>
          }
        }
        /* default behaviour is stall */
        USBD_HandleEP0_Stall();
 800844e:	f7ff fda3 	bl	8007f98 <USBD_HandleEP0_Stall>
        break;
 8008452:	e005      	b.n	8008460 <USBD_Handle_DeviceRequest+0x498>

      case REQ_SynchFrame:
        /* Not yet supported */
        USBD_HandleEP0_Stall();
 8008454:	f7ff fda0 	bl	8007f98 <USBD_HandleEP0_Stall>
        break;
 8008458:	e002      	b.n	8008460 <USBD_Handle_DeviceRequest+0x498>

      default:
        USBD_HandleEP0_Stall();
 800845a:	f7ff fd9d 	bl	8007f98 <USBD_HandleEP0_Stall>
        break;
 800845e:	bf00      	nop
    }
  }
  device.IsSetupRecieved = 0U;
 8008460:	4b06      	ldr	r3, [pc, #24]	; (800847c <USBD_Handle_DeviceRequest+0x4b4>)
 8008462:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
 8008466:	f022 0202 	bic.w	r2, r2, #2
 800846a:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
}
 800846e:	3720      	adds	r7, #32
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}
 8008474:	20000940 	.word	0x20000940
 8008478:	2000093d 	.word	0x2000093d
 800847c:	20000b48 	.word	0x20000b48

08008480 <USBD_HandleEP0_IN>:
 * state.
 * In USBD_EP0_STATE_IN_STATUS state it starts a new read of setup packets and switches
 * to USBD_EP0_STATE_IDLE.
 */
static void USBD_HandleEP0_IN()
{
 8008480:	b580      	push	{r7, lr}
 8008482:	af00      	add	r7, sp, #0
  if (USBD_EP0_STATE_IN_DATA == device.ep0_state)
 8008484:	4b10      	ldr	r3, [pc, #64]	; (80084c8 <USBD_HandleEP0_IN+0x48>)
 8008486:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 800848a:	2b02      	cmp	r3, #2
 800848c:	d10a      	bne.n	80084a4 <USBD_HandleEP0_IN+0x24>
  {
    /* Read zero length out data packet */
    device.Driver->EndpointReadStart((uint8_t)0,0U);
 800848e:	4b0e      	ldr	r3, [pc, #56]	; (80084c8 <USBD_HandleEP0_IN+0x48>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008494:	2000      	movs	r0, #0
 8008496:	2100      	movs	r1, #0
 8008498:	4798      	blx	r3
    device.ep0_state = USBD_EP0_STATE_OUT_STATUS;
 800849a:	4b0b      	ldr	r3, [pc, #44]	; (80084c8 <USBD_HandleEP0_IN+0x48>)
 800849c:	2205      	movs	r2, #5
 800849e:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
 80084a2:	e010      	b.n	80084c6 <USBD_HandleEP0_IN+0x46>
  }
  else if (USBD_EP0_STATE_IN_STATUS == device.ep0_state)
 80084a4:	4b08      	ldr	r3, [pc, #32]	; (80084c8 <USBD_HandleEP0_IN+0x48>)
 80084a6:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 80084aa:	2b03      	cmp	r3, #3
 80084ac:	d10b      	bne.n	80084c6 <USBD_HandleEP0_IN+0x46>
  {
    /* Request new setup packet */
    device.Driver->EndpointReadStart((uint8_t)device.Endpoints[0].Address,(uint32_t)USBD_EP0_3SETUP_PKT_SIZE);
 80084ae:	4b06      	ldr	r3, [pc, #24]	; (80084c8 <USBD_HandleEP0_IN+0x48>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084b4:	4a04      	ldr	r2, [pc, #16]	; (80084c8 <USBD_HandleEP0_IN+0x48>)
 80084b6:	7912      	ldrb	r2, [r2, #4]
 80084b8:	4610      	mov	r0, r2
 80084ba:	2118      	movs	r1, #24
 80084bc:	4798      	blx	r3
    device.ep0_state = USBD_EP0_STATE_IDLE;
 80084be:	4b02      	ldr	r3, [pc, #8]	; (80084c8 <USBD_HandleEP0_IN+0x48>)
 80084c0:	2201      	movs	r2, #1
 80084c2:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
  else
  {
    /*Assert*/
    XMC_ASSERT("USBD_HandleEP0_IN: invalid ep0 state", 0);
  }
}
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	20000b48 	.word	0x20000b48

080084cc <USBD_HandleEP0_OUT>:
 * for new SETUP packets, when in \ref USBD_EP0_STATE_OUT_STATUS. When endpoint 0 is in
 * USBD_EP0_STATE_OUT_DATA state, it handles the received data and starts a write
 * transaction for \ref USBD_EP0_STATE_IN_STATUS.
 */
static void USBD_HandleEP0_OUT()
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	af00      	add	r7, sp, #0
  if (USBD_EP0_STATE_OUT_DATA == device.ep0_state)
 80084d0:	4b12      	ldr	r3, [pc, #72]	; (800851c <USBD_HandleEP0_OUT+0x50>)
 80084d2:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 80084d6:	2b04      	cmp	r3, #4
 80084d8:	d10d      	bne.n	80084f6 <USBD_HandleEP0_OUT+0x2a>
  {
    /* Now we have the data for handling the request */
    USBD_Handle_DeviceRequest();
 80084da:	f7ff fd75 	bl	8007fc8 <USBD_Handle_DeviceRequest>
    /* Zero length packet for status stage */
    device.Driver->EndpointWrite((uint8_t)0,(uint8_t*)0,(uint32_t)0);
 80084de:	4b0f      	ldr	r3, [pc, #60]	; (800851c <USBD_HandleEP0_OUT+0x50>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084e4:	2000      	movs	r0, #0
 80084e6:	2100      	movs	r1, #0
 80084e8:	2200      	movs	r2, #0
 80084ea:	4798      	blx	r3
    device.ep0_state = USBD_EP0_STATE_IN_STATUS;
 80084ec:	4b0b      	ldr	r3, [pc, #44]	; (800851c <USBD_HandleEP0_OUT+0x50>)
 80084ee:	2203      	movs	r2, #3
 80084f0:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
 80084f4:	e010      	b.n	8008518 <USBD_HandleEP0_OUT+0x4c>
  }
  else if (USBD_EP0_STATE_OUT_STATUS == device.ep0_state)
 80084f6:	4b09      	ldr	r3, [pc, #36]	; (800851c <USBD_HandleEP0_OUT+0x50>)
 80084f8:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 80084fc:	2b05      	cmp	r3, #5
 80084fe:	d10b      	bne.n	8008518 <USBD_HandleEP0_OUT+0x4c>
  {
    /* Request new setup packet */
    device.Driver->EndpointReadStart((uint8_t)device.Endpoints[0].Address,(uint32_t)USBD_EP0_3SETUP_PKT_SIZE);
 8008500:	4b06      	ldr	r3, [pc, #24]	; (800851c <USBD_HandleEP0_OUT+0x50>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008506:	4a05      	ldr	r2, [pc, #20]	; (800851c <USBD_HandleEP0_OUT+0x50>)
 8008508:	7912      	ldrb	r2, [r2, #4]
 800850a:	4610      	mov	r0, r2
 800850c:	2118      	movs	r1, #24
 800850e:	4798      	blx	r3
    device.ep0_state = USBD_EP0_STATE_IDLE;
 8008510:	4b02      	ldr	r3, [pc, #8]	; (800851c <USBD_HandleEP0_OUT+0x50>)
 8008512:	2201      	movs	r2, #1
 8008514:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
  else
  {
    /*Assert*/
    XMC_ASSERT("USBD_HandleEP0_OUT: invalid ep0 state", 0);
  }
}
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	20000b48 	.word	0x20000b48

08008520 <USBD_HandleEP0_SETUP>:
 * equals zero, it starts processing the request and sends in status response including the switch to
 * USBD_EP0_STATE_IN_STATUS. When the host expects data from the device, the function processes the control
 * request and switches to USBD_EP0_STATE_IN_DATA state.
 */
static void USBD_HandleEP0_SETUP()
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af00      	add	r7, sp, #0
  /* read setup packet from ep0 */
  uint32_t ret_val;

  ret_val = (uint32_t)device.Driver->EndpointRead((uint8_t)0,(void*)&USB_ControlRequest,
 8008526:	4b22      	ldr	r3, [pc, #136]	; (80085b0 <USBD_HandleEP0_SETUP+0x90>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800852c:	2000      	movs	r0, #0
 800852e:	4921      	ldr	r1, [pc, #132]	; (80085b4 <USBD_HandleEP0_SETUP+0x94>)
 8008530:	2208      	movs	r2, #8
 8008532:	4798      	blx	r3
 8008534:	4603      	mov	r3, r0
 8008536:	607b      	str	r3, [r7, #4]
            (uint32_t)USBD_EP0_SETUP_PKT_SIZE);
  device.IsSetupRecieved = (uint8_t)true;
 8008538:	4b1d      	ldr	r3, [pc, #116]	; (80085b0 <USBD_HandleEP0_SETUP+0x90>)
 800853a:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
 800853e:	f042 0202 	orr.w	r2, r2, #2
 8008542:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e

  if ((uint32_t)USBD_EP0_SETUP_PKT_SIZE == ret_val)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2b08      	cmp	r3, #8
 800854a:	d12d      	bne.n	80085a8 <USBD_HandleEP0_SETUP+0x88>
  {
    /* if length is zero we have only a in_status phase */
    if (0U == (uint32_t)USB_ControlRequest.wLength)
 800854c:	4b19      	ldr	r3, [pc, #100]	; (80085b4 <USBD_HandleEP0_SETUP+0x94>)
 800854e:	88db      	ldrh	r3, [r3, #6]
 8008550:	b29b      	uxth	r3, r3
 8008552:	2b00      	cmp	r3, #0
 8008554:	d10d      	bne.n	8008572 <USBD_HandleEP0_SETUP+0x52>
    {
      device.ep0_state = USBD_EP0_STATE_IN_STATUS;
 8008556:	4b16      	ldr	r3, [pc, #88]	; (80085b0 <USBD_HandleEP0_SETUP+0x90>)
 8008558:	2203      	movs	r2, #3
 800855a:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
      USBD_Handle_DeviceRequest();
 800855e:	f7ff fd33 	bl	8007fc8 <USBD_Handle_DeviceRequest>
      device.Driver->EndpointWrite((uint8_t)0, (uint8_t*)0, (uint32_t)0);
 8008562:	4b13      	ldr	r3, [pc, #76]	; (80085b0 <USBD_HandleEP0_SETUP+0x90>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008568:	2000      	movs	r0, #0
 800856a:	2100      	movs	r1, #0
 800856c:	2200      	movs	r2, #0
 800856e:	4798      	blx	r3
 8008570:	e01a      	b.n	80085a8 <USBD_HandleEP0_SETUP+0x88>
    }
    else
    {
      if (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION)
 8008572:	4b10      	ldr	r3, [pc, #64]	; (80085b4 <USBD_HandleEP0_SETUP+0x94>)
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	b2db      	uxtb	r3, r3
 8008578:	b2db      	uxtb	r3, r3
 800857a:	b25b      	sxtb	r3, r3
 800857c:	2b00      	cmp	r3, #0
 800857e:	da06      	bge.n	800858e <USBD_HandleEP0_SETUP+0x6e>
      {
        device.ep0_state = USBD_EP0_STATE_IN_DATA;
 8008580:	4b0b      	ldr	r3, [pc, #44]	; (80085b0 <USBD_HandleEP0_SETUP+0x90>)
 8008582:	2202      	movs	r2, #2
 8008584:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
        USBD_Handle_DeviceRequest();
 8008588:	f7ff fd1e 	bl	8007fc8 <USBD_Handle_DeviceRequest>
 800858c:	e00c      	b.n	80085a8 <USBD_HandleEP0_SETUP+0x88>
      }
      else
      {
        device.ep0_state = USBD_EP0_STATE_OUT_DATA;
 800858e:	4b08      	ldr	r3, [pc, #32]	; (80085b0 <USBD_HandleEP0_SETUP+0x90>)
 8008590:	2204      	movs	r2, #4
 8008592:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
        /* Do not process request here, first read data */
        device.Driver->EndpointReadStart((uint8_t)0, (uint32_t)USB_ControlRequest.wLength);
 8008596:	4b06      	ldr	r3, [pc, #24]	; (80085b0 <USBD_HandleEP0_SETUP+0x90>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800859c:	4a05      	ldr	r2, [pc, #20]	; (80085b4 <USBD_HandleEP0_SETUP+0x94>)
 800859e:	88d2      	ldrh	r2, [r2, #6]
 80085a0:	b292      	uxth	r2, r2
 80085a2:	2000      	movs	r0, #0
 80085a4:	4611      	mov	r1, r2
 80085a6:	4798      	blx	r3
  else
  {
    /*Assert*/
    XMC_ASSERT("USBD_HandleEP0_SETUP: read invalid setup packet size", 0);
  }
}
 80085a8:	3708      	adds	r7, #8
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop
 80085b0:	20000b48 	.word	0x20000b48
 80085b4:	20000940 	.word	0x20000940

080085b8 <USBD_SignalDeviceEventHandler>:
 * The device can have several events, by which it notifies the application about the occurance of event.
 * Not all events are available on all chip series. (Power Events are only supported on XMC4500)
 *
 */
static void USBD_SignalDeviceEventHandler(XMC_USBD_EVENT_t event)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af00      	add	r7, sp, #0
 80085be:	4603      	mov	r3, r0
 80085c0:	71fb      	strb	r3, [r7, #7]
  uint32_t i;

  switch (event)
 80085c2:	79fb      	ldrb	r3, [r7, #7]
 80085c4:	2b09      	cmp	r3, #9
 80085c6:	f200 811c 	bhi.w	8008802 <USBD_SignalDeviceEventHandler+0x24a>
 80085ca:	a201      	add	r2, pc, #4	; (adr r2, 80085d0 <USBD_SignalDeviceEventHandler+0x18>)
 80085cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d0:	080087ab 	.word	0x080087ab
 80085d4:	0800878b 	.word	0x0800878b
 80085d8:	08008751 	.word	0x08008751
 80085dc:	0800876b 	.word	0x0800876b
 80085e0:	080085f9 	.word	0x080085f9
 80085e4:	08008803 	.word	0x08008803
 80085e8:	080087d7 	.word	0x080087d7
 80085ec:	080087b3 	.word	0x080087b3
 80085f0:	08008803 	.word	0x08008803
 80085f4:	08008737 	.word	0x08008737
  {
    case XMC_USBD_EVENT_RESET:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Default;
 80085f8:	4b84      	ldr	r3, [pc, #528]	; (800880c <USBD_SignalDeviceEventHandler+0x254>)
 80085fa:	2202      	movs	r2, #2
 80085fc:	701a      	strb	r2, [r3, #0]
      device.ep0_state = USBD_EP0_STATE_IDLE;
 80085fe:	4b84      	ldr	r3, [pc, #528]	; (8008810 <USBD_SignalDeviceEventHandler+0x258>)
 8008600:	2201      	movs	r2, #1
 8008602:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
      device.remote_wakeup = (uint8_t)0;
 8008606:	4a82      	ldr	r2, [pc, #520]	; (8008810 <USBD_SignalDeviceEventHandler+0x258>)
 8008608:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 800860c:	f36f 0382 	bfc	r3, #2, #1
 8008610:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
      /* Reset endpoints and configuration */
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
 8008614:	2307      	movs	r3, #7
 8008616:	60fb      	str	r3, [r7, #12]
 8008618:	e060      	b.n	80086dc <USBD_SignalDeviceEventHandler+0x124>
      {
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].InInUse = (uint8_t)0;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f1c3 0307 	rsb	r3, r3, #7
 8008620:	4a7b      	ldr	r2, [pc, #492]	; (8008810 <USBD_SignalDeviceEventHandler+0x258>)
 8008622:	212c      	movs	r1, #44	; 0x2c
 8008624:	fb01 f303 	mul.w	r3, r1, r3
 8008628:	441a      	add	r2, r3
 800862a:	8913      	ldrh	r3, [r2, #8]
 800862c:	f36f 1304 	bfc	r3, #4, #1
 8008630:	8113      	strh	r3, [r2, #8]
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f1c3 0307 	rsb	r3, r3, #7
 8008638:	4a75      	ldr	r2, [pc, #468]	; (8008810 <USBD_SignalDeviceEventHandler+0x258>)
 800863a:	212c      	movs	r1, #44	; 0x2c
 800863c:	fb01 f303 	mul.w	r3, r1, r3
 8008640:	441a      	add	r2, r3
 8008642:	8913      	ldrh	r3, [r2, #8]
 8008644:	f36f 03c3 	bfc	r3, #3, #1
 8008648:	8113      	strh	r3, [r2, #8]
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f1c3 0307 	rsb	r3, r3, #7
 8008650:	4a6f      	ldr	r2, [pc, #444]	; (8008810 <USBD_SignalDeviceEventHandler+0x258>)
 8008652:	212c      	movs	r1, #44	; 0x2c
 8008654:	fb01 f303 	mul.w	r3, r1, r3
 8008658:	441a      	add	r2, r3
 800865a:	8913      	ldrh	r3, [r2, #8]
 800865c:	f36f 0382 	bfc	r3, #2, #1
 8008660:	8113      	strh	r3, [r2, #8]
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2b07      	cmp	r3, #7
 8008666:	d036      	beq.n	80086d6 <USBD_SignalDeviceEventHandler+0x11e>
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f1c3 0307 	rsb	r3, r3, #7
 800866e:	4a68      	ldr	r2, [pc, #416]	; (8008810 <USBD_SignalDeviceEventHandler+0x258>)
 8008670:	212c      	movs	r1, #44	; 0x2c
 8008672:	fb01 f303 	mul.w	r3, r1, r3
 8008676:	4413      	add	r3, r2
 8008678:	7a1b      	ldrb	r3, [r3, #8]
 800867a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800867e:	b2db      	uxtb	r3, r3
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
      {
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].InInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
 8008680:	2b00      	cmp	r3, #0
 8008682:	d028      	beq.n	80086d6 <USBD_SignalDeviceEventHandler+0x11e>
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
        {
          if (USBD_STATUS_SUCCESS == 
          (USBD_STATUS_t)device.Driver->EndpointUnconfigure
 8008684:	4b62      	ldr	r3, [pc, #392]	; (8008810 <USBD_SignalDeviceEventHandler+0x258>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	6a1b      	ldr	r3, [r3, #32]
          ((uint8_t)device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].Address))
 800868a:	68fa      	ldr	r2, [r7, #12]
 800868c:	f1c2 0207 	rsb	r2, r2, #7
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
        {
          if (USBD_STATUS_SUCCESS == 
          (USBD_STATUS_t)device.Driver->EndpointUnconfigure
 8008690:	495f      	ldr	r1, [pc, #380]	; (8008810 <USBD_SignalDeviceEventHandler+0x258>)
 8008692:	202c      	movs	r0, #44	; 0x2c
 8008694:	fb00 f202 	mul.w	r2, r0, r2
 8008698:	440a      	add	r2, r1
 800869a:	7912      	ldrb	r2, [r2, #4]
 800869c:	4610      	mov	r0, r2
 800869e:	4798      	blx	r3
 80086a0:	4603      	mov	r3, r0
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].OutInUse = (uint8_t)0;
        device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsHalted = (uint8_t)0;
        if ((((uint32_t)XMC_USBD_NUM_EPS - i) != 0U) && 
           (device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured))
        {
          if (USBD_STATUS_SUCCESS == 
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d117      	bne.n	80086d6 <USBD_SignalDeviceEventHandler+0x11e>
          (USBD_STATUS_t)device.Driver->EndpointUnconfigure
          ((uint8_t)device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].Address))
          {
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured = (uint8_t)0;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f1c3 0307 	rsb	r3, r3, #7
 80086ac:	4a58      	ldr	r2, [pc, #352]	; (8008810 <USBD_SignalDeviceEventHandler+0x258>)
 80086ae:	212c      	movs	r1, #44	; 0x2c
 80086b0:	fb01 f303 	mul.w	r3, r1, r3
 80086b4:	441a      	add	r2, r3
 80086b6:	7a13      	ldrb	r3, [r2, #8]
 80086b8:	f36f 0300 	bfc	r3, #0, #1
 80086bc:	7213      	strb	r3, [r2, #8]
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsEnabled = (uint8_t)0;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f1c3 0307 	rsb	r3, r3, #7
 80086c4:	4a52      	ldr	r2, [pc, #328]	; (8008810 <USBD_SignalDeviceEventHandler+0x258>)
 80086c6:	212c      	movs	r1, #44	; 0x2c
 80086c8:	fb01 f303 	mul.w	r3, r1, r3
 80086cc:	441a      	add	r2, r3
 80086ce:	8913      	ldrh	r3, [r2, #8]
 80086d0:	f36f 0341 	bfc	r3, #1, #1
 80086d4:	8113      	strh	r3, [r2, #8]
    case XMC_USBD_EVENT_RESET:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Default;
      device.ep0_state = USBD_EP0_STATE_IDLE;
      device.remote_wakeup = (uint8_t)0;
      /* Reset endpoints and configuration */
      for (i = ((uint32_t)XMC_USBD_NUM_EPS); i > 0U; i--)
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	3b01      	subs	r3, #1
 80086da:	60fb      	str	r3, [r7, #12]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d19b      	bne.n	800861a <USBD_SignalDeviceEventHandler+0x62>
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsConfigured = (uint8_t)0;
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsEnabled = (uint8_t)0;
          }
        }
      }
      device.configuration = (uint8_t)0;
 80086e2:	4b4b      	ldr	r3, [pc, #300]	; (8008810 <USBD_SignalDeviceEventHandler+0x258>)
 80086e4:	2200      	movs	r2, #0
 80086e6:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
      for (i = ((uint32_t)NUM_INTERFACES); i > 0U; i--)
 80086ea:	2301      	movs	r3, #1
 80086ec:	60fb      	str	r3, [r7, #12]
 80086ee:	e00a      	b.n	8008706 <USBD_SignalDeviceEventHandler+0x14e>
      {
        device.interface_settings[((uint32_t)NUM_INTERFACES - i)] = (uint8_t)0;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f1c3 0301 	rsb	r3, r3, #1
 80086f6:	4a46      	ldr	r2, [pc, #280]	; (8008810 <USBD_SignalDeviceEventHandler+0x258>)
 80086f8:	4413      	add	r3, r2
 80086fa:	2200      	movs	r2, #0
 80086fc:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
            device.Endpoints[((uint32_t)XMC_USBD_NUM_EPS - i)].IsEnabled = (uint8_t)0;
          }
        }
      }
      device.configuration = (uint8_t)0;
      for (i = ((uint32_t)NUM_INTERFACES); i > 0U; i--)
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	3b01      	subs	r3, #1
 8008704:	60fb      	str	r3, [r7, #12]
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d1f1      	bne.n	80086f0 <USBD_SignalDeviceEventHandler+0x138>
      {
        device.interface_settings[((uint32_t)NUM_INTERFACES - i)] = (uint8_t)0;
      }
      device.Driver->EndpointReadStart((uint8_t)device.Endpoints[0].Address,(uint32_t)USBD_EP0_3SETUP_PKT_SIZE);
 800870c:	4b40      	ldr	r3, [pc, #256]	; (8008810 <USBD_SignalDeviceEventHandler+0x258>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008712:	4a3f      	ldr	r2, [pc, #252]	; (8008810 <USBD_SignalDeviceEventHandler+0x258>)
 8008714:	7912      	ldrb	r2, [r2, #4]
 8008716:	4610      	mov	r0, r2
 8008718:	2118      	movs	r1, #24
 800871a:	4798      	blx	r3
      if (NULL != device.events->reset)
 800871c:	4b3c      	ldr	r3, [pc, #240]	; (8008810 <USBD_SignalDeviceEventHandler+0x258>)
 800871e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8008722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008724:	2b00      	cmp	r3, #0
 8008726:	d005      	beq.n	8008734 <USBD_SignalDeviceEventHandler+0x17c>
      {
        device.events->reset();
 8008728:	4b39      	ldr	r3, [pc, #228]	; (8008810 <USBD_SignalDeviceEventHandler+0x258>)
 800872a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800872e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008730:	4798      	blx	r3
      }
      break;
 8008732:	e067      	b.n	8008804 <USBD_SignalDeviceEventHandler+0x24c>
 8008734:	e066      	b.n	8008804 <USBD_SignalDeviceEventHandler+0x24c>
    case XMC_USBD_EVENT_SOF:
      if (NULL != device.events->start_of_frame)
 8008736:	4b36      	ldr	r3, [pc, #216]	; (8008810 <USBD_SignalDeviceEventHandler+0x258>)
 8008738:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800873c:	6a1b      	ldr	r3, [r3, #32]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d005      	beq.n	800874e <USBD_SignalDeviceEventHandler+0x196>
      {
        device.events->start_of_frame();
 8008742:	4b33      	ldr	r3, [pc, #204]	; (8008810 <USBD_SignalDeviceEventHandler+0x258>)
 8008744:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8008748:	6a1b      	ldr	r3, [r3, #32]
 800874a:	4798      	blx	r3
      }
      break;
 800874c:	e05a      	b.n	8008804 <USBD_SignalDeviceEventHandler+0x24c>
 800874e:	e059      	b.n	8008804 <USBD_SignalDeviceEventHandler+0x24c>
    case XMC_USBD_EVENT_CONNECT:
      if (NULL != device.events->connect)
 8008750:	4b2f      	ldr	r3, [pc, #188]	; (8008810 <USBD_SignalDeviceEventHandler+0x258>)
 8008752:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d005      	beq.n	8008768 <USBD_SignalDeviceEventHandler+0x1b0>
      {
        device.events->connect();
 800875c:	4b2c      	ldr	r3, [pc, #176]	; (8008810 <USBD_SignalDeviceEventHandler+0x258>)
 800875e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4798      	blx	r3
      }
      break;
 8008766:	e04d      	b.n	8008804 <USBD_SignalDeviceEventHandler+0x24c>
 8008768:	e04c      	b.n	8008804 <USBD_SignalDeviceEventHandler+0x24c>
    case XMC_USBD_EVENT_DISCONNECT:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Powered;
 800876a:	4b28      	ldr	r3, [pc, #160]	; (800880c <USBD_SignalDeviceEventHandler+0x254>)
 800876c:	2201      	movs	r2, #1
 800876e:	701a      	strb	r2, [r3, #0]
      if (NULL != device.events->disconnect)
 8008770:	4b27      	ldr	r3, [pc, #156]	; (8008810 <USBD_SignalDeviceEventHandler+0x258>)
 8008772:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d005      	beq.n	8008788 <USBD_SignalDeviceEventHandler+0x1d0>
      {
        device.events->disconnect();
 800877c:	4b24      	ldr	r3, [pc, #144]	; (8008810 <USBD_SignalDeviceEventHandler+0x258>)
 800877e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	4798      	blx	r3
      }
      break;
 8008786:	e03d      	b.n	8008804 <USBD_SignalDeviceEventHandler+0x24c>
 8008788:	e03c      	b.n	8008804 <USBD_SignalDeviceEventHandler+0x24c>
    case XMC_USBD_EVENT_POWER_OFF:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Unattached;
 800878a:	4b20      	ldr	r3, [pc, #128]	; (800880c <USBD_SignalDeviceEventHandler+0x254>)
 800878c:	2200      	movs	r2, #0
 800878e:	701a      	strb	r2, [r3, #0]
      if (NULL != device.events->disconnect)
 8008790:	4b1f      	ldr	r3, [pc, #124]	; (8008810 <USBD_SignalDeviceEventHandler+0x258>)
 8008792:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d005      	beq.n	80087a8 <USBD_SignalDeviceEventHandler+0x1f0>
      {
        device.events->disconnect();
 800879c:	4b1c      	ldr	r3, [pc, #112]	; (8008810 <USBD_SignalDeviceEventHandler+0x258>)
 800879e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	4798      	blx	r3
      }
      break;
 80087a6:	e02d      	b.n	8008804 <USBD_SignalDeviceEventHandler+0x24c>
 80087a8:	e02c      	b.n	8008804 <USBD_SignalDeviceEventHandler+0x24c>
    case XMC_USBD_EVENT_POWER_ON:
      USB_DeviceState = (uint8_t)DEVICE_STATE_Powered;
 80087aa:	4b18      	ldr	r3, [pc, #96]	; (800880c <USBD_SignalDeviceEventHandler+0x254>)
 80087ac:	2201      	movs	r2, #1
 80087ae:	701a      	strb	r2, [r3, #0]
      break;
 80087b0:	e028      	b.n	8008804 <USBD_SignalDeviceEventHandler+0x24c>
    case XMC_USBD_EVENT_REMOTE_WAKEUP:
      break;
    case XMC_USBD_EVENT_RESUME:
      USB_DeviceState = (uint8_t)device.pre_suspend_device_state;
 80087b2:	4b17      	ldr	r3, [pc, #92]	; (8008810 <USBD_SignalDeviceEventHandler+0x258>)
 80087b4:	f893 213a 	ldrb.w	r2, [r3, #314]	; 0x13a
 80087b8:	4b14      	ldr	r3, [pc, #80]	; (800880c <USBD_SignalDeviceEventHandler+0x254>)
 80087ba:	701a      	strb	r2, [r3, #0]
      if (NULL != device.events->wakeup)
 80087bc:	4b14      	ldr	r3, [pc, #80]	; (8008810 <USBD_SignalDeviceEventHandler+0x258>)
 80087be:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80087c2:	699b      	ldr	r3, [r3, #24]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d005      	beq.n	80087d4 <USBD_SignalDeviceEventHandler+0x21c>
      {
        device.events->wakeup();
 80087c8:	4b11      	ldr	r3, [pc, #68]	; (8008810 <USBD_SignalDeviceEventHandler+0x258>)
 80087ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80087ce:	699b      	ldr	r3, [r3, #24]
 80087d0:	4798      	blx	r3
      }
      break;
 80087d2:	e017      	b.n	8008804 <USBD_SignalDeviceEventHandler+0x24c>
 80087d4:	e016      	b.n	8008804 <USBD_SignalDeviceEventHandler+0x24c>
    case XMC_USBD_EVENT_SUSPEND:
      device.pre_suspend_device_state = USB_DeviceState;
 80087d6:	4b0d      	ldr	r3, [pc, #52]	; (800880c <USBD_SignalDeviceEventHandler+0x254>)
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	b2da      	uxtb	r2, r3
 80087dc:	4b0c      	ldr	r3, [pc, #48]	; (8008810 <USBD_SignalDeviceEventHandler+0x258>)
 80087de:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
      USB_DeviceState = (uint8_t)DEVICE_STATE_Suspended;
 80087e2:	4b0a      	ldr	r3, [pc, #40]	; (800880c <USBD_SignalDeviceEventHandler+0x254>)
 80087e4:	2205      	movs	r2, #5
 80087e6:	701a      	strb	r2, [r3, #0]
      if (NULL != device.events->suspend)
 80087e8:	4b09      	ldr	r3, [pc, #36]	; (8008810 <USBD_SignalDeviceEventHandler+0x258>)
 80087ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80087ee:	69db      	ldr	r3, [r3, #28]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d005      	beq.n	8008800 <USBD_SignalDeviceEventHandler+0x248>
      {
        device.events->suspend();
 80087f4:	4b06      	ldr	r3, [pc, #24]	; (8008810 <USBD_SignalDeviceEventHandler+0x258>)
 80087f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80087fa:	69db      	ldr	r3, [r3, #28]
 80087fc:	4798      	blx	r3
      }
      break;
 80087fe:	e001      	b.n	8008804 <USBD_SignalDeviceEventHandler+0x24c>
 8008800:	e000      	b.n	8008804 <USBD_SignalDeviceEventHandler+0x24c>
    default:
      break;
 8008802:	bf00      	nop
  }
}
 8008804:	3710      	adds	r7, #16
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
 800880a:	bf00      	nop
 800880c:	2000093d 	.word	0x2000093d
 8008810:	20000b48 	.word	0x20000b48

08008814 <USBD_SignalEndpointEvent_Handler>:
 * If the driver detects an event (See XMC_USBD_EP_EVENT_t) for a specified endpoint it calls this function.
 * Based on the event some further action is taken, e.g. process control request or update transfer information
 * and read data from the driver into the core buffer.
 */
static void USBD_SignalEndpointEvent_Handler(uint8_t ep_addr, XMC_USBD_EP_EVENT_t ep_event)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b086      	sub	sp, #24
 8008818:	af00      	add	r7, sp, #0
 800881a:	4603      	mov	r3, r0
 800881c:	460a      	mov	r2, r1
 800881e:	71fb      	strb	r3, [r7, #7]
 8008820:	4613      	mov	r3, r2
 8008822:	71bb      	strb	r3, [r7, #6]
  USBD_Endpoint_t *ep;
  int32_t data_count;
  uint32_t temp_num;
  uint32_t temp_dir;

  ep =  &device.Endpoints[(ep_addr & ENDPOINT_EPNUM_MASK)];
 8008824:	79fb      	ldrb	r3, [r7, #7]
 8008826:	f003 030f 	and.w	r3, r3, #15
 800882a:	222c      	movs	r2, #44	; 0x2c
 800882c:	fb02 f303 	mul.w	r3, r2, r3
 8008830:	4a5e      	ldr	r2, [pc, #376]	; (80089ac <USBD_SignalEndpointEvent_Handler+0x198>)
 8008832:	4413      	add	r3, r2
 8008834:	3304      	adds	r3, #4
 8008836:	617b      	str	r3, [r7, #20]
  /* store CurrentEndpoint and direction for restore after handling */
  temp_num = (uint32_t)device.CurrentEndpoint;
 8008838:	4b5c      	ldr	r3, [pc, #368]	; (80089ac <USBD_SignalEndpointEvent_Handler+0x198>)
 800883a:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800883e:	613b      	str	r3, [r7, #16]
  temp_dir = (uint32_t)device.CurrentDirection;
 8008840:	4b5a      	ldr	r3, [pc, #360]	; (80089ac <USBD_SignalEndpointEvent_Handler+0x198>)
 8008842:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 8008846:	60fb      	str	r3, [r7, #12]
  /* select the given endpoint */
  device.CurrentEndpoint = ep_addr & ENDPOINT_EPNUM_MASK;
 8008848:	79fb      	ldrb	r3, [r7, #7]
 800884a:	f003 030f 	and.w	r3, r3, #15
 800884e:	b2da      	uxtb	r2, r3
 8008850:	4b56      	ldr	r3, [pc, #344]	; (80089ac <USBD_SignalEndpointEvent_Handler+0x198>)
 8008852:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
  device.CurrentDirection = ep_addr & (uint8_t)ENDPOINT_DIR_MASK;
 8008856:	79fb      	ldrb	r3, [r7, #7]
 8008858:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800885c:	b2da      	uxtb	r2, r3
 800885e:	4b53      	ldr	r3, [pc, #332]	; (80089ac <USBD_SignalEndpointEvent_Handler+0x198>)
 8008860:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
  /* choose what to do based on the event */
  switch (ep_event)
 8008864:	79bb      	ldrb	r3, [r7, #6]
 8008866:	2b01      	cmp	r3, #1
 8008868:	d013      	beq.n	8008892 <USBD_SignalEndpointEvent_Handler+0x7e>
 800886a:	2b02      	cmp	r3, #2
 800886c:	d03a      	beq.n	80088e4 <USBD_SignalEndpointEvent_Handler+0xd0>
 800886e:	2b00      	cmp	r3, #0
 8008870:	d000      	beq.n	8008874 <USBD_SignalEndpointEvent_Handler+0x60>
        default:
          break;
      }
      break;
    default:
      break;
 8008872:	e08e      	b.n	8008992 <USBD_SignalEndpointEvent_Handler+0x17e>
  device.CurrentDirection = ep_addr & (uint8_t)ENDPOINT_DIR_MASK;
  /* choose what to do based on the event */
  switch (ep_event)
  {
    case XMC_USBD_EP_EVENT_SETUP:
      ep->OutInUse = 0U;
 8008874:	697a      	ldr	r2, [r7, #20]
 8008876:	8893      	ldrh	r3, [r2, #4]
 8008878:	f36f 03c3 	bfc	r3, #3, #1
 800887c:	8093      	strh	r3, [r2, #4]
      switch (device.CurrentEndpoint)
 800887e:	4b4b      	ldr	r3, [pc, #300]	; (80089ac <USBD_SignalEndpointEvent_Handler+0x198>)
 8008880:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8008884:	2b00      	cmp	r3, #0
 8008886:	d000      	beq.n	800888a <USBD_SignalEndpointEvent_Handler+0x76>
      {
        case 0:
          USBD_HandleEP0_SETUP();
          break;
        default:
          break;
 8008888:	e002      	b.n	8008890 <USBD_SignalEndpointEvent_Handler+0x7c>
    case XMC_USBD_EP_EVENT_SETUP:
      ep->OutInUse = 0U;
      switch (device.CurrentEndpoint)
      {
        case 0:
          USBD_HandleEP0_SETUP();
 800888a:	f7ff fe49 	bl	8008520 <USBD_HandleEP0_SETUP>
          break;
 800888e:	bf00      	nop
        default:
          break;
      }
      break;
 8008890:	e07f      	b.n	8008992 <USBD_SignalEndpointEvent_Handler+0x17e>
    case XMC_USBD_EP_EVENT_OUT:
      ep->IsOutRecieved = 1U;
 8008892:	697a      	ldr	r2, [r7, #20]
 8008894:	8893      	ldrh	r3, [r2, #4]
 8008896:	f043 0320 	orr.w	r3, r3, #32
 800889a:	8093      	strh	r3, [r2, #4]
      if (ep->OutBytesAvailable == 0U)
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d110      	bne.n	80088c6 <USBD_SignalEndpointEvent_Handler+0xb2>
      {
        ep->OutOffset = 0U; /* clear offset, new data is there */
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	2200      	movs	r2, #0
 80088a8:	60da      	str	r2, [r3, #12]
        ep->OutBytesAvailable = (uint32_t)device.Driver->EndpointRead((uint8_t)ep->Address,
 80088aa:	4b40      	ldr	r3, [pc, #256]	; (80089ac <USBD_SignalEndpointEvent_Handler+0x198>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b0:	697a      	ldr	r2, [r7, #20]
 80088b2:	7810      	ldrb	r0, [r2, #0]
 80088b4:	697a      	ldr	r2, [r7, #20]
 80088b6:	6911      	ldr	r1, [r2, #16]
 80088b8:	697a      	ldr	r2, [r7, #20]
 80088ba:	6952      	ldr	r2, [r2, #20]
 80088bc:	4798      	blx	r3
 80088be:	4603      	mov	r3, r0
 80088c0:	461a      	mov	r2, r3
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	609a      	str	r2, [r3, #8]
                                ep->OutBuffer,ep->OutBufferLength);
      }
      ep->OutInUse = (uint8_t)0;
 80088c6:	697a      	ldr	r2, [r7, #20]
 80088c8:	8893      	ldrh	r3, [r2, #4]
 80088ca:	f36f 03c3 	bfc	r3, #3, #1
 80088ce:	8093      	strh	r3, [r2, #4]
      switch (device.CurrentEndpoint)
 80088d0:	4b36      	ldr	r3, [pc, #216]	; (80089ac <USBD_SignalEndpointEvent_Handler+0x198>)
 80088d2:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d000      	beq.n	80088dc <USBD_SignalEndpointEvent_Handler+0xc8>
      {
        case 0:
          USBD_HandleEP0_OUT();
          break;
        default:
          break;
 80088da:	e002      	b.n	80088e2 <USBD_SignalEndpointEvent_Handler+0xce>
      }
      ep->OutInUse = (uint8_t)0;
      switch (device.CurrentEndpoint)
      {
        case 0:
          USBD_HandleEP0_OUT();
 80088dc:	f7ff fdf6 	bl	80084cc <USBD_HandleEP0_OUT>
          break;
 80088e0:	bf00      	nop
        default:
          break;
      }
      break;
 80088e2:	e056      	b.n	8008992 <USBD_SignalEndpointEvent_Handler+0x17e>
    case XMC_USBD_EP_EVENT_IN:
      /* loop write transfers */
      if (ep->InDataLeft > 0U)
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d017      	beq.n	800891c <USBD_SignalEndpointEvent_Handler+0x108>
      {
        data_count = device.Driver->EndpointWrite((uint8_t)ep->Address,ep->InDataBuffer,ep->InDataLeft);
 80088ec:	4b2f      	ldr	r3, [pc, #188]	; (80089ac <USBD_SignalEndpointEvent_Handler+0x198>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f2:	697a      	ldr	r2, [r7, #20]
 80088f4:	7810      	ldrb	r0, [r2, #0]
 80088f6:	697a      	ldr	r2, [r7, #20]
 80088f8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80088fa:	697a      	ldr	r2, [r7, #20]
 80088fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80088fe:	4798      	blx	r3
 8008900:	60b8      	str	r0, [r7, #8]
        ep->InDataLeft -= (uint32_t)data_count;
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	1ad2      	subs	r2, r2, r3
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	625a      	str	r2, [r3, #36]	; 0x24
        ep->InDataBuffer += (uint32_t)data_count;
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	441a      	add	r2, r3
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 800891a:	e03a      	b.n	8008992 <USBD_SignalEndpointEvent_Handler+0x17e>
      }
      else if (((uint32_t)ep->Number == 0U) && (ep->InBytesAvailable > 0U) &&
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	f003 030f 	and.w	r3, r3, #15
 8008924:	b2db      	uxtb	r3, r3
 8008926:	2b00      	cmp	r3, #0
 8008928:	d121      	bne.n	800896e <USBD_SignalEndpointEvent_Handler+0x15a>
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	699b      	ldr	r3, [r3, #24]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d01d      	beq.n	800896e <USBD_SignalEndpointEvent_Handler+0x15a>
              (ep->InBytesAvailable != (uint32_t)USB_ControlRequest.wLength) &&
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	699b      	ldr	r3, [r3, #24]
 8008936:	4a1e      	ldr	r2, [pc, #120]	; (80089b0 <USBD_SignalEndpointEvent_Handler+0x19c>)
 8008938:	88d2      	ldrh	r2, [r2, #6]
 800893a:	b292      	uxth	r2, r2
        data_count = device.Driver->EndpointWrite((uint8_t)ep->Address,ep->InDataBuffer,ep->InDataLeft);
        ep->InDataLeft -= (uint32_t)data_count;
        ep->InDataBuffer += (uint32_t)data_count;
        break;
      }
      else if (((uint32_t)ep->Number == 0U) && (ep->InBytesAvailable > 0U) &&
 800893c:	4293      	cmp	r3, r2
 800893e:	d016      	beq.n	800896e <USBD_SignalEndpointEvent_Handler+0x15a>
              (ep->InBytesAvailable != (uint32_t)USB_ControlRequest.wLength) &&
              ((ep->InBytesAvailable % (uint32_t)ep->MaxPacketSize) == 0U))
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	699b      	ldr	r3, [r3, #24]
 8008944:	697a      	ldr	r2, [r7, #20]
 8008946:	8892      	ldrh	r2, [r2, #4]
 8008948:	f3c2 1286 	ubfx	r2, r2, #6, #7
 800894c:	b2d2      	uxtb	r2, r2
 800894e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008952:	fb02 f201 	mul.w	r2, r2, r1
 8008956:	1a9b      	subs	r3, r3, r2
        ep->InDataLeft -= (uint32_t)data_count;
        ep->InDataBuffer += (uint32_t)data_count;
        break;
      }
      else if (((uint32_t)ep->Number == 0U) && (ep->InBytesAvailable > 0U) &&
              (ep->InBytesAvailable != (uint32_t)USB_ControlRequest.wLength) &&
 8008958:	2b00      	cmp	r3, #0
 800895a:	d108      	bne.n	800896e <USBD_SignalEndpointEvent_Handler+0x15a>
              ((ep->InBytesAvailable % (uint32_t)ep->MaxPacketSize) == 0U))
      {
        /* if the amount of data for endpoint 0 is exact the requested
         * amount, then no zlp has to be send */
        device.Driver->EndpointWrite((uint8_t)ep->Address,0,0U);
 800895c:	4b13      	ldr	r3, [pc, #76]	; (80089ac <USBD_SignalEndpointEvent_Handler+0x198>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008962:	697a      	ldr	r2, [r7, #20]
 8008964:	7812      	ldrb	r2, [r2, #0]
 8008966:	4610      	mov	r0, r2
 8008968:	2100      	movs	r1, #0
 800896a:	2200      	movs	r2, #0
 800896c:	4798      	blx	r3
      }
      else
      {
      }
      ep->InBytesAvailable = 0U;
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	2200      	movs	r2, #0
 8008972:	619a      	str	r2, [r3, #24]
      ep->InInUse = (uint8_t)0;
 8008974:	697a      	ldr	r2, [r7, #20]
 8008976:	8893      	ldrh	r3, [r2, #4]
 8008978:	f36f 1304 	bfc	r3, #4, #1
 800897c:	8093      	strh	r3, [r2, #4]
      switch (device.CurrentEndpoint)
 800897e:	4b0b      	ldr	r3, [pc, #44]	; (80089ac <USBD_SignalEndpointEvent_Handler+0x198>)
 8008980:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8008984:	2b00      	cmp	r3, #0
 8008986:	d000      	beq.n	800898a <USBD_SignalEndpointEvent_Handler+0x176>
      {
        case 0:
          USBD_HandleEP0_IN();
          break;
        default:
          break;
 8008988:	e002      	b.n	8008990 <USBD_SignalEndpointEvent_Handler+0x17c>
      ep->InBytesAvailable = 0U;
      ep->InInUse = (uint8_t)0;
      switch (device.CurrentEndpoint)
      {
        case 0:
          USBD_HandleEP0_IN();
 800898a:	f7ff fd79 	bl	8008480 <USBD_HandleEP0_IN>
          break;
 800898e:	bf00      	nop
        default:
          break;
      }
      break;
 8008990:	bf00      	nop
    default:
      break;
  }
  device.CurrentEndpoint = (uint8_t)temp_num;
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	b2da      	uxtb	r2, r3
 8008996:	4b05      	ldr	r3, [pc, #20]	; (80089ac <USBD_SignalEndpointEvent_Handler+0x198>)
 8008998:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
  device.CurrentDirection = (uint8_t)temp_dir;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	b2da      	uxtb	r2, r3
 80089a0:	4b02      	ldr	r3, [pc, #8]	; (80089ac <USBD_SignalEndpointEvent_Handler+0x198>)
 80089a2:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
}
 80089a6:	3718      	adds	r7, #24
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	20000b48 	.word	0x20000b48
 80089b0:	20000940 	.word	0x20000940

080089b4 <UART_Init>:
 *          UART_SUCCESS: for successful UART initialization.<BR>
 *          UART_STATUS_FAILURE  : If UART initialization fails.<BR>
 *
 */
UART_STATUS_t UART_Init(const UART_t *const handle)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 80089bc:	2300      	movs	r3, #0
 80089be:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("UART_Init : UART APP handle invalid", (((handle != NULL)&&
      (handle->config != NULL)) &&((handle->config->fptr_uart_config != NULL)&&
      (handle->runtime != NULL))))

  /*Initialize the multiplexers required for UART configuration*/
  status = handle->config->fptr_uart_config();
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	4798      	blx	r3
 80089c8:	4603      	mov	r3, r0
 80089ca:	73fb      	strb	r3, [r7, #15]

  return status;
 80089cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3710      	adds	r7, #16
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
 80089d6:	bf00      	nop

080089d8 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 80089d8:	b480      	push	{r7}
 80089da:	b083      	sub	sp, #12
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	460b      	mov	r3, r1
 80089e2:	70fb      	strb	r3, [r7, #3]
 80089e4:	4613      	mov	r3, r2
 80089e6:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 80089e8:	78f8      	ldrb	r0, [r7, #3]
 80089ea:	78fb      	ldrb	r3, [r7, #3]
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	3306      	adds	r3, #6
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	4413      	add	r3, r2
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 80089fa:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 80089fc:	431a      	orrs	r2, r3
 80089fe:	6879      	ldr	r1, [r7, #4]
 8008a00:	1d83      	adds	r3, r0, #6
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	440b      	add	r3, r1
 8008a06:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8008a08:	370c      	adds	r7, #12
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr
 8008a12:	bf00      	nop

08008a14 <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	431a      	orrs	r2, r3
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 8008a2e:	370c      	adds	r7, #12
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a44:	f023 030f 	bic.w	r3, r3, #15
 8008a48:	f043 0202 	orr.w	r2, r3, #2
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8008a50:	370c      	adds	r7, #12
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr
 8008a5a:	bf00      	nop

08008a5c <Bluetooth_Handle_init>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
/*Channel initialization function*/
UART_STATUS_t Bluetooth_Handle_init()
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 8008a62:	2300      	movs	r3, #0
 8008a64:	71fb      	strb	r3, [r7, #7]
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, 5U, &Bluetooth_Handle_rx_pin_config);
 8008a66:	4818      	ldr	r0, [pc, #96]	; (8008ac8 <Bluetooth_Handle_init+0x6c>)
 8008a68:	2105      	movs	r1, #5
 8008a6a:	4a18      	ldr	r2, [pc, #96]	; (8008acc <Bluetooth_Handle_init+0x70>)
 8008a6c:	f7fa feda 	bl	8003824 <XMC_GPIO_Init>
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART0_CH0, &Bluetooth_Handle_channel_config);
 8008a70:	4817      	ldr	r0, [pc, #92]	; (8008ad0 <Bluetooth_Handle_init+0x74>)
 8008a72:	4918      	ldr	r1, [pc, #96]	; (8008ad4 <Bluetooth_Handle_init+0x78>)
 8008a74:	f7fc f916 	bl	8004ca4 <XMC_UART_CH_Init>
  /*Set input source path*/
  XMC_USIC_CH_SetInputSource(XMC_UART0_CH0, XMC_USIC_CH_INPUT_DX0, 0U);
 8008a78:	4815      	ldr	r0, [pc, #84]	; (8008ad0 <Bluetooth_Handle_init+0x74>)
 8008a7a:	2100      	movs	r1, #0
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f7ff ffab 	bl	80089d8 <XMC_USIC_CH_SetInputSource>
  /*Configure receive FIFO*/
  XMC_USIC_CH_RXFIFO_Configure(XMC_UART0_CH0,
 8008a82:	4813      	ldr	r0, [pc, #76]	; (8008ad0 <Bluetooth_Handle_init+0x74>)
 8008a84:	2100      	movs	r1, #0
 8008a86:	2205      	movs	r2, #5
 8008a88:	231f      	movs	r3, #31
 8008a8a:	f7fe f855 	bl	8006b38 <XMC_USIC_CH_RXFIFO_Configure>
        0U,
        XMC_USIC_CH_FIFO_SIZE_32WORDS,
        31U);
  /* Start UART */
  XMC_UART_CH_Start(XMC_UART0_CH0);
 8008a8e:	4810      	ldr	r0, [pc, #64]	; (8008ad0 <Bluetooth_Handle_init+0x74>)
 8008a90:	f7ff ffd2 	bl	8008a38 <XMC_UART_CH_Start>

  /* Initialize UART TX pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT5_BASE, 1U, &Bluetooth_Handle_tx_pin_config);
 8008a94:	4810      	ldr	r0, [pc, #64]	; (8008ad8 <Bluetooth_Handle_init+0x7c>)
 8008a96:	2101      	movs	r1, #1
 8008a98:	4a10      	ldr	r2, [pc, #64]	; (8008adc <Bluetooth_Handle_init+0x80>)
 8008a9a:	f7fa fec3 	bl	8003824 <XMC_GPIO_Init>

  /*Set service request for UART protocol events*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
 8008a9e:	480c      	ldr	r0, [pc, #48]	; (8008ad0 <Bluetooth_Handle_init+0x74>)
 8008aa0:	2110      	movs	r1, #16
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	f7fe f894 	bl	8006bd0 <XMC_USIC_CH_SetInterruptNodePointer>
     0U);
  /*Set service request for rx FIFO receive interrupt*/
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
 8008aa8:	4809      	ldr	r0, [pc, #36]	; (8008ad0 <Bluetooth_Handle_init+0x74>)
 8008aaa:	2110      	movs	r1, #16
 8008aac:	2205      	movs	r2, #5
 8008aae:	f7fe f8ab 	bl	8006c08 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
       0x5U);
  /*Enable UART receive event*/
  XMC_USIC_CH_RXFIFO_EnableEvent(XMC_UART0_CH0, XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD);
 8008ab2:	4807      	ldr	r0, [pc, #28]	; (8008ad0 <Bluetooth_Handle_init+0x74>)
 8008ab4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008ab8:	f7ff ffac 	bl	8008a14 <XMC_USIC_CH_RXFIFO_EnableEvent>
  return status;
 8008abc:	79fb      	ldrb	r3, [r7, #7]
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3708      	adds	r7, #8
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop
 8008ac8:	48028100 	.word	0x48028100
 8008acc:	0800de64 	.word	0x0800de64
 8008ad0:	40030000 	.word	0x40030000
 8008ad4:	0800de18 	.word	0x0800de18
 8008ad8:	48028500 	.word	0x48028500
 8008adc:	0800de24 	.word	0x0800de24

08008ae0 <RemoteControl_Handle_init>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
/*Channel initialization function*/
UART_STATUS_t RemoteControl_Handle_init()
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	71fb      	strb	r3, [r7, #7]
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, 4U, &RemoteControl_Handle_rx_pin_config);
 8008aea:	4818      	ldr	r0, [pc, #96]	; (8008b4c <RemoteControl_Handle_init+0x6c>)
 8008aec:	2104      	movs	r1, #4
 8008aee:	4a18      	ldr	r2, [pc, #96]	; (8008b50 <RemoteControl_Handle_init+0x70>)
 8008af0:	f7fa fe98 	bl	8003824 <XMC_GPIO_Init>
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART1_CH0, &RemoteControl_Handle_channel_config);
 8008af4:	4817      	ldr	r0, [pc, #92]	; (8008b54 <RemoteControl_Handle_init+0x74>)
 8008af6:	4918      	ldr	r1, [pc, #96]	; (8008b58 <RemoteControl_Handle_init+0x78>)
 8008af8:	f7fc f8d4 	bl	8004ca4 <XMC_UART_CH_Init>
  /*Set input source path*/
  XMC_USIC_CH_SetInputSource(XMC_UART1_CH0, XMC_USIC_CH_INPUT_DX0, 0U);
 8008afc:	4815      	ldr	r0, [pc, #84]	; (8008b54 <RemoteControl_Handle_init+0x74>)
 8008afe:	2100      	movs	r1, #0
 8008b00:	2200      	movs	r2, #0
 8008b02:	f7ff ff69 	bl	80089d8 <XMC_USIC_CH_SetInputSource>
  /*Configure receive FIFO*/
  XMC_USIC_CH_RXFIFO_Configure(XMC_UART1_CH0,
 8008b06:	4813      	ldr	r0, [pc, #76]	; (8008b54 <RemoteControl_Handle_init+0x74>)
 8008b08:	2100      	movs	r1, #0
 8008b0a:	2205      	movs	r2, #5
 8008b0c:	231f      	movs	r3, #31
 8008b0e:	f7fe f813 	bl	8006b38 <XMC_USIC_CH_RXFIFO_Configure>
        0U,
        XMC_USIC_CH_FIFO_SIZE_32WORDS,
        31U);
  /* Start UART */
  XMC_UART_CH_Start(XMC_UART1_CH0);
 8008b12:	4810      	ldr	r0, [pc, #64]	; (8008b54 <RemoteControl_Handle_init+0x74>)
 8008b14:	f7ff ff90 	bl	8008a38 <XMC_UART_CH_Start>

  /* Initialize UART TX pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, 14U, &RemoteControl_Handle_tx_pin_config);
 8008b18:	4810      	ldr	r0, [pc, #64]	; (8008b5c <RemoteControl_Handle_init+0x7c>)
 8008b1a:	210e      	movs	r1, #14
 8008b1c:	4a10      	ldr	r2, [pc, #64]	; (8008b60 <RemoteControl_Handle_init+0x80>)
 8008b1e:	f7fa fe81 	bl	8003824 <XMC_GPIO_Init>

  /*Set service request for UART protocol events*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART1_CH0, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
 8008b22:	480c      	ldr	r0, [pc, #48]	; (8008b54 <RemoteControl_Handle_init+0x74>)
 8008b24:	2110      	movs	r1, #16
 8008b26:	2201      	movs	r2, #1
 8008b28:	f7fe f852 	bl	8006bd0 <XMC_USIC_CH_SetInterruptNodePointer>
     1U);
  /*Set service request for rx FIFO receive interrupt*/
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_UART1_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
 8008b2c:	4809      	ldr	r0, [pc, #36]	; (8008b54 <RemoteControl_Handle_init+0x74>)
 8008b2e:	2110      	movs	r1, #16
 8008b30:	2200      	movs	r2, #0
 8008b32:	f7fe f869 	bl	8006c08 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
       0x0U);
  /*Enable UART receive event*/
  XMC_USIC_CH_RXFIFO_EnableEvent(XMC_UART1_CH0, XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD);
 8008b36:	4807      	ldr	r0, [pc, #28]	; (8008b54 <RemoteControl_Handle_init+0x74>)
 8008b38:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008b3c:	f7ff ff6a 	bl	8008a14 <XMC_USIC_CH_RXFIFO_EnableEvent>
  return status;
 8008b40:	79fb      	ldrb	r3, [r7, #7]
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3708      	adds	r7, #8
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	48028000 	.word	0x48028000
 8008b50:	0800debc 	.word	0x0800debc
 8008b54:	48020000 	.word	0x48020000
 8008b58:	0800de70 	.word	0x0800de70
 8008b5c:	48028200 	.word	0x48028200
 8008b60:	0800de7c 	.word	0x0800de7c

08008b64 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	68da      	ldr	r2, [r3, #12]
 8008b74:	78fb      	ldrb	r3, [r7, #3]
 8008b76:	2101      	movs	r1, #1
 8008b78:	fa01 f303 	lsl.w	r3, r1, r3
 8008b7c:	431a      	orrs	r2, r3
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	60da      	str	r2, [r3, #12]
}
 8008b82:	370c      	adds	r7, #12
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b083      	sub	sp, #12
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	60da      	str	r2, [r3, #12]
}
 8008b9a:	370c      	adds	r7, #12
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr

08008ba4 <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR |= (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	691b      	ldr	r3, [r3, #16]
 8008bb0:	f043 0202 	orr.w	r2, r3, #2
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	611a      	str	r2, [r3, #16]
}
 8008bb8:	370c      	adds	r7, #12
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc0:	4770      	bx	lr
 8008bc2:	bf00      	nop

08008bc4 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	460b      	mov	r3, r1
 8008bce:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8008bd0:	887a      	ldrh	r2, [r7, #2]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	635a      	str	r2, [r3, #52]	; 0x34
}
 8008bd6:	370c      	adds	r7, #12
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr

08008be0 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	460b      	mov	r3, r1
 8008bea:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8008bec:	887a      	ldrh	r2, [r7, #2]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008bf2:	370c      	adds	r7, #12
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	683a      	ldr	r2, [r7, #0]
 8008c0a:	611a      	str	r2, [r3, #16]
}
 8008c0c:	370c      	adds	r7, #12
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr
 8008c16:	bf00      	nop

08008c18 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	460b      	mov	r3, r1
 8008c22:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8008c2a:	78fb      	ldrb	r3, [r7, #3]
 8008c2c:	2101      	movs	r1, #1
 8008c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8008c32:	431a      	orrs	r2, r3
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8008c3a:	370c      	adds	r7, #12
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b084      	sub	sp, #16
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	73fb      	strb	r3, [r7, #15]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8008c56:	f083 0301 	eor.w	r3, r3, #1
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d009      	beq.n	8008c74 <TIMER_Init+0x30>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d104      	bne.n	8008c74 <TIMER_Init+0x30>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 f826 	bl	8008cbc <TIMER_CCU4_lInit>
 8008c70:	4603      	mov	r3, r0
 8008c72:	73fb      	strb	r3, [r7, #15]
      status = TIMER_CCU8_lInit(handle_ptr);
    }
#endif
  }

  return (status);
 8008c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3710      	adds	r7, #16
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop

08008c80 <TIMER_Start>:

/*
 * This function starts the timer to generate the events for the specified time_interval value
 */
TIMER_STATUS_t TIMER_Start(TIMER_t  *const handle_ptr)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Start:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d00c      	beq.n	8008cac <TIMER_Start+0x2c>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d104      	bne.n	8008ca6 <TIMER_Start+0x26>
    {
      /* Start the timer manually */
      XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	695b      	ldr	r3, [r3, #20]
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f7ff ff73 	bl	8008b8c <XMC_CCU4_SLICE_StartTimer>
       {
      /* Start the timer manually */
      XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	73fb      	strb	r3, [r7, #15]
 8008caa:	e001      	b.n	8008cb0 <TIMER_Start+0x30>
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 8008cac:	2301      	movs	r3, #1
 8008cae:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8008cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3710      	adds	r7, #16
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop

08008cbc <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b084      	sub	sp, #16
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	691b      	ldr	r3, [r3, #16]
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f000 ff97 	bl	8009bfc <GLOBAL_CCU4_Init>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	73fb      	strb	r3, [r7, #15]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	691b      	ldr	r3, [r3, #16]
 8008cd6:	689a      	ldr	r2, [r3, #8]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	7e1b      	ldrb	r3, [r3, #24]
 8008cdc:	4610      	mov	r0, r2
 8008cde:	4619      	mov	r1, r3
 8008ce0:	f7ff ff40 	bl	8008b64 <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	695a      	ldr	r2, [r3, #20]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	69db      	ldr	r3, [r3, #28]
 8008cec:	4610      	mov	r0, r2
 8008cee:	4619      	mov	r1, r3
 8008cf0:	f7fb faf2 	bl	80042d8 <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 f82d 	bl	8008d54 <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d00f      	beq.n	8008d24 <TIMER_CCU4_lInit+0x68>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	695a      	ldr	r2, [r3, #20]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d0e:	4610      	mov	r0, r2
 8008d10:	2100      	movs	r1, #0
 8008d12:	461a      	mov	r2, r3
 8008d14:	f7fb fd36 	bl	8004784 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	695b      	ldr	r3, [r3, #20]
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	2100      	movs	r1, #0
 8008d20:	f7ff ff7a 	bl	8008c18 <XMC_CCU4_SLICE_EnableEvent>
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	695b      	ldr	r3, [r3, #20]
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f7ff ff3b 	bl	8008ba4 <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2201      	movs	r2, #1
 8008d32:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d004      	beq.n	8008d4a <TIMER_CCU4_lInit+0x8e>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	695b      	ldr	r3, [r3, #20]
 8008d44:	4618      	mov	r0, r3
 8008d46:	f7ff ff21 	bl	8008b8c <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
 8008d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3710      	adds	r7, #16
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	695a      	ldr	r2, [r3, #20]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8008d64:	4610      	mov	r0, r2
 8008d66:	4619      	mov	r1, r3
 8008d68:	f7ff ff2c 	bl	8008bc4 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	695b      	ldr	r3, [r3, #20]
 8008d70:	4618      	mov	r0, r3
 8008d72:	2100      	movs	r1, #0
 8008d74:	f7ff ff34 	bl	8008be0 <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	691b      	ldr	r3, [r3, #16]
 8008d7c:	689a      	ldr	r2, [r3, #8]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	68db      	ldr	r3, [r3, #12]
 8008d82:	4610      	mov	r0, r2
 8008d84:	4619      	mov	r1, r3
 8008d86:	f7ff ff39 	bl	8008bfc <XMC_CCU4_EnableShadowTransfer>
}
 8008d8a:	3708      	adds	r7, #8
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8008d90:	b480      	push	{r7}
 8008d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008d94:	4b04      	ldr	r3, [pc, #16]	; (8008da8 <NVIC_GetPriorityGrouping+0x18>)
 8008d96:	68db      	ldr	r3, [r3, #12]
 8008d98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008d9c:	0a1b      	lsrs	r3, r3, #8
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr
 8008da8:	e000ed00 	.word	0xe000ed00

08008dac <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b083      	sub	sp, #12
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	4603      	mov	r3, r0
 8008db4:	6039      	str	r1, [r7, #0]
 8008db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8008db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	da0b      	bge.n	8008dd8 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008dc0:	490d      	ldr	r1, [pc, #52]	; (8008df8 <NVIC_SetPriority+0x4c>)
 8008dc2:	79fb      	ldrb	r3, [r7, #7]
 8008dc4:	f003 030f 	and.w	r3, r3, #15
 8008dc8:	3b04      	subs	r3, #4
 8008dca:	683a      	ldr	r2, [r7, #0]
 8008dcc:	b2d2      	uxtb	r2, r2
 8008dce:	0092      	lsls	r2, r2, #2
 8008dd0:	b2d2      	uxtb	r2, r2
 8008dd2:	440b      	add	r3, r1
 8008dd4:	761a      	strb	r2, [r3, #24]
 8008dd6:	e009      	b.n	8008dec <NVIC_SetPriority+0x40>
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008dd8:	4908      	ldr	r1, [pc, #32]	; (8008dfc <NVIC_SetPriority+0x50>)
 8008dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008dde:	683a      	ldr	r2, [r7, #0]
 8008de0:	b2d2      	uxtb	r2, r2
 8008de2:	0092      	lsls	r2, r2, #2
 8008de4:	b2d2      	uxtb	r2, r2
 8008de6:	440b      	add	r3, r1
 8008de8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 8008dec:	370c      	adds	r7, #12
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop
 8008df8:	e000ed00 	.word	0xe000ed00
 8008dfc:	e000e100 	.word	0xe000e100

08008e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b089      	sub	sp, #36	; 0x24
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	60f8      	str	r0, [r7, #12]
 8008e08:	60b9      	str	r1, [r7, #8]
 8008e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f003 0307 	and.w	r3, r3, #7
 8008e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008e14:	69fb      	ldr	r3, [r7, #28]
 8008e16:	f1c3 0307 	rsb	r3, r3, #7
 8008e1a:	2b06      	cmp	r3, #6
 8008e1c:	bf28      	it	cs
 8008e1e:	2306      	movcs	r3, #6
 8008e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008e22:	69fb      	ldr	r3, [r7, #28]
 8008e24:	3306      	adds	r3, #6
 8008e26:	2b06      	cmp	r3, #6
 8008e28:	d902      	bls.n	8008e30 <NVIC_EncodePriority+0x30>
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	3b01      	subs	r3, #1
 8008e2e:	e000      	b.n	8008e32 <NVIC_EncodePriority+0x32>
 8008e30:	2300      	movs	r3, #0
 8008e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008e34:	69bb      	ldr	r3, [r7, #24]
 8008e36:	2201      	movs	r2, #1
 8008e38:	fa02 f303 	lsl.w	r3, r2, r3
 8008e3c:	1e5a      	subs	r2, r3, #1
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	401a      	ands	r2, r3
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	2101      	movs	r1, #1
 8008e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8008e4e:	1e59      	subs	r1, r3, #1
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8008e54:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3724      	adds	r7, #36	; 0x24
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr
 8008e62:	bf00      	nop

08008e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	3b01      	subs	r3, #1
 8008e70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008e74:	d301      	bcc.n	8008e7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008e76:	2301      	movs	r3, #1
 8008e78:	e00f      	b.n	8008e9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008e7a:	4a0a      	ldr	r2, [pc, #40]	; (8008ea4 <SysTick_Config+0x40>)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	3b01      	subs	r3, #1
 8008e80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008e82:	f04f 30ff 	mov.w	r0, #4294967295
 8008e86:	213f      	movs	r1, #63	; 0x3f
 8008e88:	f7ff ff90 	bl	8008dac <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008e8c:	4b05      	ldr	r3, [pc, #20]	; (8008ea4 <SysTick_Config+0x40>)
 8008e8e:	2200      	movs	r2, #0
 8008e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008e92:	4b04      	ldr	r3, [pc, #16]	; (8008ea4 <SysTick_Config+0x40>)
 8008e94:	2207      	movs	r2, #7
 8008e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3708      	adds	r7, #8
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	e000e010 	.word	0xe000e010

08008ea8 <SYSTIMER_lInsertTimerList>:
**********************************************************************************************************************/
/*
 * This function is called to insert a timer into the timer list.
 */
static void SYSTIMER_lInsertTimerList(uint32_t tbl_index)
{
 8008ea8:	b490      	push	{r4, r7}
 8008eaa:	b086      	sub	sp, #24
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  int32_t delta_ticks;
  int32_t timer_count;
  bool found_flag = false;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	73fb      	strb	r3, [r7, #15]
   /* Get timer time */
  timer_count = (int32_t)g_timer_tbl[tbl_index].count;
 8008eb4:	496b      	ldr	r1, [pc, #428]	; (8009064 <SYSTIMER_lInsertTimerList+0x1bc>)
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	4613      	mov	r3, r2
 8008eba:	00db      	lsls	r3, r3, #3
 8008ebc:	4413      	add	r3, r2
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	440b      	add	r3, r1
 8008ec2:	3318      	adds	r3, #24
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	60bb      	str	r3, [r7, #8]
  /* Check if Timer list is NULL */
  if (NULL == g_timer_list)
 8008ec8:	4b67      	ldr	r3, [pc, #412]	; (8009068 <SYSTIMER_lInsertTimerList+0x1c0>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d109      	bne.n	8008ee4 <SYSTIMER_lInsertTimerList+0x3c>
  {
    /* Set this as first Timer */
    g_timer_list = &g_timer_tbl[tbl_index];
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	4613      	mov	r3, r2
 8008ed4:	00db      	lsls	r3, r3, #3
 8008ed6:	4413      	add	r3, r2
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	4a62      	ldr	r2, [pc, #392]	; (8009064 <SYSTIMER_lInsertTimerList+0x1bc>)
 8008edc:	4413      	add	r3, r2
 8008ede:	4a62      	ldr	r2, [pc, #392]	; (8009068 <SYSTIMER_lInsertTimerList+0x1c0>)
 8008ee0:	6013      	str	r3, [r2, #0]
 8008ee2:	e0bb      	b.n	800905c <SYSTIMER_lInsertTimerList+0x1b4>
  }
  /* If not, find the correct place, and insert the specified timer */
  else
  {
    object_ptr = g_timer_list;
 8008ee4:	4b60      	ldr	r3, [pc, #384]	; (8009068 <SYSTIMER_lInsertTimerList+0x1c0>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	617b      	str	r3, [r7, #20]
    /* Get timer tick */
    delta_ticks = timer_count;
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	613b      	str	r3, [r7, #16]
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 8008eee:	e0ab      	b.n	8009048 <SYSTIMER_lInsertTimerList+0x1a0>
    {
      /* Get timer Count Difference */
      delta_ticks -= (int32_t)object_ptr->count;
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	699b      	ldr	r3, [r3, #24]
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	1a9b      	subs	r3, r3, r2
 8008efa:	613b      	str	r3, [r7, #16]
      /* Check for delta ticks < 0 */
      if (delta_ticks <= 0)
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	dc7a      	bgt.n	8008ff8 <SYSTIMER_lInsertTimerList+0x150>
      {
        /* Check If head item */
        if (NULL != object_ptr->prev)
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d026      	beq.n	8008f58 <SYSTIMER_lInsertTimerList+0xb0>
        {
          /* If Insert to list */
          object_ptr->prev->next = &g_timer_tbl[tbl_index];
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	6859      	ldr	r1, [r3, #4]
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	4613      	mov	r3, r2
 8008f12:	00db      	lsls	r3, r3, #3
 8008f14:	4413      	add	r3, r2
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	4a52      	ldr	r2, [pc, #328]	; (8009064 <SYSTIMER_lInsertTimerList+0x1bc>)
 8008f1a:	4413      	add	r3, r2
 8008f1c:	600b      	str	r3, [r1, #0]
          g_timer_tbl[tbl_index].prev = object_ptr->prev;
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	6859      	ldr	r1, [r3, #4]
 8008f22:	4850      	ldr	r0, [pc, #320]	; (8009064 <SYSTIMER_lInsertTimerList+0x1bc>)
 8008f24:	687a      	ldr	r2, [r7, #4]
 8008f26:	4613      	mov	r3, r2
 8008f28:	00db      	lsls	r3, r3, #3
 8008f2a:	4413      	add	r3, r2
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	4403      	add	r3, r0
 8008f30:	6059      	str	r1, [r3, #4]
          g_timer_tbl[tbl_index].next = object_ptr;
 8008f32:	494c      	ldr	r1, [pc, #304]	; (8009064 <SYSTIMER_lInsertTimerList+0x1bc>)
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	4613      	mov	r3, r2
 8008f38:	00db      	lsls	r3, r3, #3
 8008f3a:	4413      	add	r3, r2
 8008f3c:	009b      	lsls	r3, r3, #2
 8008f3e:	440b      	add	r3, r1
 8008f40:	697a      	ldr	r2, [r7, #20]
 8008f42:	601a      	str	r2, [r3, #0]
          object_ptr->prev = &g_timer_tbl[tbl_index];
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	4613      	mov	r3, r2
 8008f48:	00db      	lsls	r3, r3, #3
 8008f4a:	4413      	add	r3, r2
 8008f4c:	009b      	lsls	r3, r3, #2
 8008f4e:	4a45      	ldr	r2, [pc, #276]	; (8009064 <SYSTIMER_lInsertTimerList+0x1bc>)
 8008f50:	441a      	add	r2, r3
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	605a      	str	r2, [r3, #4]
 8008f56:	e01c      	b.n	8008f92 <SYSTIMER_lInsertTimerList+0xea>
        }
        else
        {
          /* Set Timer as first item */
          g_timer_tbl[tbl_index].next = g_timer_list;
 8008f58:	4b43      	ldr	r3, [pc, #268]	; (8009068 <SYSTIMER_lInsertTimerList+0x1c0>)
 8008f5a:	6819      	ldr	r1, [r3, #0]
 8008f5c:	4841      	ldr	r0, [pc, #260]	; (8009064 <SYSTIMER_lInsertTimerList+0x1bc>)
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	4613      	mov	r3, r2
 8008f62:	00db      	lsls	r3, r3, #3
 8008f64:	4413      	add	r3, r2
 8008f66:	009b      	lsls	r3, r3, #2
 8008f68:	4403      	add	r3, r0
 8008f6a:	6019      	str	r1, [r3, #0]
          g_timer_list->prev = &g_timer_tbl[tbl_index];
 8008f6c:	4b3e      	ldr	r3, [pc, #248]	; (8009068 <SYSTIMER_lInsertTimerList+0x1c0>)
 8008f6e:	6819      	ldr	r1, [r3, #0]
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	4613      	mov	r3, r2
 8008f74:	00db      	lsls	r3, r3, #3
 8008f76:	4413      	add	r3, r2
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	4a3a      	ldr	r2, [pc, #232]	; (8009064 <SYSTIMER_lInsertTimerList+0x1bc>)
 8008f7c:	4413      	add	r3, r2
 8008f7e:	604b      	str	r3, [r1, #4]
          g_timer_list = &g_timer_tbl[tbl_index];
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	4613      	mov	r3, r2
 8008f84:	00db      	lsls	r3, r3, #3
 8008f86:	4413      	add	r3, r2
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	4a36      	ldr	r2, [pc, #216]	; (8009064 <SYSTIMER_lInsertTimerList+0x1bc>)
 8008f8c:	4413      	add	r3, r2
 8008f8e:	4a36      	ldr	r2, [pc, #216]	; (8009068 <SYSTIMER_lInsertTimerList+0x1c0>)
 8008f90:	6013      	str	r3, [r2, #0]
        }
        g_timer_tbl[tbl_index].count = g_timer_tbl[tbl_index].next->count + (uint32_t)delta_ticks;
 8008f92:	4934      	ldr	r1, [pc, #208]	; (8009064 <SYSTIMER_lInsertTimerList+0x1bc>)
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	4613      	mov	r3, r2
 8008f98:	00db      	lsls	r3, r3, #3
 8008f9a:	4413      	add	r3, r2
 8008f9c:	009b      	lsls	r3, r3, #2
 8008f9e:	440b      	add	r3, r1
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	699a      	ldr	r2, [r3, #24]
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	18d1      	adds	r1, r2, r3
 8008fa8:	482e      	ldr	r0, [pc, #184]	; (8009064 <SYSTIMER_lInsertTimerList+0x1bc>)
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	4613      	mov	r3, r2
 8008fae:	00db      	lsls	r3, r3, #3
 8008fb0:	4413      	add	r3, r2
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	4403      	add	r3, r0
 8008fb6:	3318      	adds	r3, #24
 8008fb8:	6019      	str	r1, [r3, #0]
        g_timer_tbl[tbl_index].next->count  -= g_timer_tbl[tbl_index].count;
 8008fba:	492a      	ldr	r1, [pc, #168]	; (8009064 <SYSTIMER_lInsertTimerList+0x1bc>)
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	4613      	mov	r3, r2
 8008fc0:	00db      	lsls	r3, r3, #3
 8008fc2:	4413      	add	r3, r2
 8008fc4:	009b      	lsls	r3, r3, #2
 8008fc6:	440b      	add	r3, r1
 8008fc8:	6819      	ldr	r1, [r3, #0]
 8008fca:	4826      	ldr	r0, [pc, #152]	; (8009064 <SYSTIMER_lInsertTimerList+0x1bc>)
 8008fcc:	687a      	ldr	r2, [r7, #4]
 8008fce:	4613      	mov	r3, r2
 8008fd0:	00db      	lsls	r3, r3, #3
 8008fd2:	4413      	add	r3, r2
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	4403      	add	r3, r0
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	6998      	ldr	r0, [r3, #24]
 8008fdc:	4c21      	ldr	r4, [pc, #132]	; (8009064 <SYSTIMER_lInsertTimerList+0x1bc>)
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	4613      	mov	r3, r2
 8008fe2:	00db      	lsls	r3, r3, #3
 8008fe4:	4413      	add	r3, r2
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	4423      	add	r3, r4
 8008fea:	3318      	adds	r3, #24
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	1ac3      	subs	r3, r0, r3
 8008ff0:	618b      	str	r3, [r1, #24]
        found_flag = true;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	73fb      	strb	r3, [r7, #15]
 8008ff6:	e024      	b.n	8009042 <SYSTIMER_lInsertTimerList+0x19a>
      }
      /* Check for last item in list */
      else
      {
        if ((delta_ticks > 0) && (NULL == object_ptr->next))
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	dd21      	ble.n	8009042 <SYSTIMER_lInsertTimerList+0x19a>
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d11d      	bne.n	8009042 <SYSTIMER_lInsertTimerList+0x19a>
        {
          /* Yes, insert into */
          g_timer_tbl[tbl_index].prev = object_ptr;
 8009006:	4917      	ldr	r1, [pc, #92]	; (8009064 <SYSTIMER_lInsertTimerList+0x1bc>)
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	4613      	mov	r3, r2
 800900c:	00db      	lsls	r3, r3, #3
 800900e:	4413      	add	r3, r2
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	440b      	add	r3, r1
 8009014:	697a      	ldr	r2, [r7, #20]
 8009016:	605a      	str	r2, [r3, #4]
          object_ptr->next = &g_timer_tbl[tbl_index];
 8009018:	687a      	ldr	r2, [r7, #4]
 800901a:	4613      	mov	r3, r2
 800901c:	00db      	lsls	r3, r3, #3
 800901e:	4413      	add	r3, r2
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	4a10      	ldr	r2, [pc, #64]	; (8009064 <SYSTIMER_lInsertTimerList+0x1bc>)
 8009024:	441a      	add	r2, r3
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	601a      	str	r2, [r3, #0]
          g_timer_tbl[tbl_index].count = (uint32_t)delta_ticks;
 800902a:	6939      	ldr	r1, [r7, #16]
 800902c:	480d      	ldr	r0, [pc, #52]	; (8009064 <SYSTIMER_lInsertTimerList+0x1bc>)
 800902e:	687a      	ldr	r2, [r7, #4]
 8009030:	4613      	mov	r3, r2
 8009032:	00db      	lsls	r3, r3, #3
 8009034:	4413      	add	r3, r2
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	4403      	add	r3, r0
 800903a:	3318      	adds	r3, #24
 800903c:	6019      	str	r1, [r3, #0]
          found_flag = true;
 800903e:	2301      	movs	r3, #1
 8009040:	73fb      	strb	r3, [r7, #15]
        }
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	617b      	str	r3, [r7, #20]
  {
    object_ptr = g_timer_list;
    /* Get timer tick */
    delta_ticks = timer_count;
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d006      	beq.n	800905c <SYSTIMER_lInsertTimerList+0x1b4>
 800904e:	7bfb      	ldrb	r3, [r7, #15]
 8009050:	f083 0301 	eor.w	r3, r3, #1
 8009054:	b2db      	uxtb	r3, r3
 8009056:	2b00      	cmp	r3, #0
 8009058:	f47f af4a 	bne.w	8008ef0 <SYSTIMER_lInsertTimerList+0x48>
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
    }
  }
}
 800905c:	3718      	adds	r7, #24
 800905e:	46bd      	mov	sp, r7
 8009060:	bc90      	pop	{r4, r7}
 8009062:	4770      	bx	lr
 8009064:	20000c8c 	.word	0x20000c8c
 8009068:	2000053c 	.word	0x2000053c

0800906c <SYSTIMER_lRemoveTimerList>:

/*
 * This function is called to remove a timer from the timer list. 
 */
static void SYSTIMER_lRemoveTimerList(uint32_t tbl_index)
{
 800906c:	b480      	push	{r7}
 800906e:	b085      	sub	sp, #20
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = &g_timer_tbl[tbl_index];
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	4613      	mov	r3, r2
 8009078:	00db      	lsls	r3, r3, #3
 800907a:	4413      	add	r3, r2
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	4a29      	ldr	r2, [pc, #164]	; (8009124 <SYSTIMER_lRemoveTimerList+0xb8>)
 8009080:	4413      	add	r3, r2
 8009082:	60fb      	str	r3, [r7, #12]
  /* Check whether only one timer available */
  if ((NULL == object_ptr->prev) && (NULL == object_ptr->next ))
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d107      	bne.n	800909c <SYSTIMER_lRemoveTimerList+0x30>
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d103      	bne.n	800909c <SYSTIMER_lRemoveTimerList+0x30>
  {
    /* set timer list as NULL */ 
    g_timer_list = NULL;                  
 8009094:	4b24      	ldr	r3, [pc, #144]	; (8009128 <SYSTIMER_lRemoveTimerList+0xbc>)
 8009096:	2200      	movs	r2, #0
 8009098:	601a      	str	r2, [r3, #0]
 800909a:	e03d      	b.n	8009118 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the first item in timer list */
  else if (NULL == object_ptr->prev)
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d114      	bne.n	80090ce <SYSTIMER_lRemoveTimerList+0x62>
  {
    /* Remove timer from list, and reset timer list */
    g_timer_list  = object_ptr->next;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a1f      	ldr	r2, [pc, #124]	; (8009128 <SYSTIMER_lRemoveTimerList+0xbc>)
 80090aa:	6013      	str	r3, [r2, #0]
    g_timer_list->prev = NULL;
 80090ac:	4b1e      	ldr	r3, [pc, #120]	; (8009128 <SYSTIMER_lRemoveTimerList+0xbc>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2200      	movs	r2, #0
 80090b2:	605a      	str	r2, [r3, #4]
    g_timer_list->count += object_ptr->count;
 80090b4:	4b1c      	ldr	r3, [pc, #112]	; (8009128 <SYSTIMER_lRemoveTimerList+0xbc>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a1b      	ldr	r2, [pc, #108]	; (8009128 <SYSTIMER_lRemoveTimerList+0xbc>)
 80090ba:	6812      	ldr	r2, [r2, #0]
 80090bc:	6991      	ldr	r1, [r2, #24]
 80090be:	68fa      	ldr	r2, [r7, #12]
 80090c0:	6992      	ldr	r2, [r2, #24]
 80090c2:	440a      	add	r2, r1
 80090c4:	619a      	str	r2, [r3, #24]
    object_ptr->next    = NULL;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2200      	movs	r2, #0
 80090ca:	601a      	str	r2, [r3, #0]
 80090cc:	e024      	b.n	8009118 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the last item in timer list */
  else if (NULL == object_ptr->next)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d107      	bne.n	80090e6 <SYSTIMER_lRemoveTimerList+0x7a>
  {
    /* Remove timer from list */
    object_ptr->prev->next = NULL;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	2200      	movs	r2, #0
 80090dc:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2200      	movs	r2, #0
 80090e2:	605a      	str	r2, [r3, #4]
 80090e4:	e018      	b.n	8009118 <SYSTIMER_lRemoveTimerList+0xac>
  }
  else                       
  {
    /* Remove timer from list */
    object_ptr->prev->next  =  object_ptr->next;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	68fa      	ldr	r2, [r7, #12]
 80090ec:	6812      	ldr	r2, [r2, #0]
 80090ee:	601a      	str	r2, [r3, #0]
    object_ptr->next->prev  =  object_ptr->prev;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	68fa      	ldr	r2, [r7, #12]
 80090f6:	6852      	ldr	r2, [r2, #4]
 80090f8:	605a      	str	r2, [r3, #4]
    object_ptr->next->count += object_ptr->count;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	68fa      	ldr	r2, [r7, #12]
 8009100:	6812      	ldr	r2, [r2, #0]
 8009102:	6991      	ldr	r1, [r2, #24]
 8009104:	68fa      	ldr	r2, [r7, #12]
 8009106:	6992      	ldr	r2, [r2, #24]
 8009108:	440a      	add	r2, r1
 800910a:	619a      	str	r2, [r3, #24]
    object_ptr->next = NULL;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2200      	movs	r2, #0
 8009110:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2200      	movs	r2, #0
 8009116:	605a      	str	r2, [r3, #4]
  }
}
 8009118:	3714      	adds	r7, #20
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr
 8009122:	bf00      	nop
 8009124:	20000c8c 	.word	0x20000c8c
 8009128:	2000053c 	.word	0x2000053c

0800912c <SYSTIMER_lTimerHandler>:

/*
 * Handler function called from SysTick event handler.
 */
static void SYSTIMER_lTimerHandler(void)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b082      	sub	sp, #8
 8009130:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
 8009132:	4b2b      	ldr	r3, [pc, #172]	; (80091e0 <SYSTIMER_lTimerHandler+0xb4>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	607b      	str	r3, [r7, #4]
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 8009138:	e048      	b.n	80091cc <SYSTIMER_lTimerHandler+0xa0>
  {
    if (true == object_ptr->delete_swtmr)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d013      	beq.n	800916c <SYSTIMER_lTimerHandler+0x40>
    {
      /* Yes, remove this timer from timer list */
      SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	695b      	ldr	r3, [r3, #20]
 8009148:	4618      	mov	r0, r3
 800914a:	f7ff ff8f 	bl	800906c <SYSTIMER_lRemoveTimerList>
      /* Set timer status as SYSTIMER_STATE_NOT_INITIALIZED */
      object_ptr->state = SYSTIMER_STATE_NOT_INITIALIZED;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	735a      	strb	r2, [r3, #13]
      /* Release resource which are hold by this timer */
      g_timer_tracker &= ~(1U << object_ptr->id);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	695b      	ldr	r3, [r3, #20]
 8009158:	461a      	mov	r2, r3
 800915a:	2301      	movs	r3, #1
 800915c:	4093      	lsls	r3, r2
 800915e:	43da      	mvns	r2, r3
 8009160:	4b20      	ldr	r3, [pc, #128]	; (80091e4 <SYSTIMER_lTimerHandler+0xb8>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4013      	ands	r3, r2
 8009166:	4a1f      	ldr	r2, [pc, #124]	; (80091e4 <SYSTIMER_lTimerHandler+0xb8>)
 8009168:	6013      	str	r3, [r2, #0]
 800916a:	e02c      	b.n	80091c6 <SYSTIMER_lTimerHandler+0x9a>
    }
    /* Check whether timer is a one shot timer */
    else if (SYSTIMER_MODE_ONE_SHOT == object_ptr->mode)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	7b1b      	ldrb	r3, [r3, #12]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d10e      	bne.n	8009192 <SYSTIMER_lTimerHandler+0x66>
    {
      /* Yes, remove this timer from timer list */
      SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	695b      	ldr	r3, [r3, #20]
 8009178:	4618      	mov	r0, r3
 800917a:	f7ff ff77 	bl	800906c <SYSTIMER_lRemoveTimerList>
      /* Set timer status as SYSTIMER_STATE_STOPPED */
      object_ptr->state = SYSTIMER_STATE_STOPPED;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2202      	movs	r2, #2
 8009182:	735a      	strb	r2, [r3, #13]
      /* Call timer callback function */
      (object_ptr->callback)(object_ptr->args);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	687a      	ldr	r2, [r7, #4]
 800918a:	6912      	ldr	r2, [r2, #16]
 800918c:	4610      	mov	r0, r2
 800918e:	4798      	blx	r3
 8009190:	e019      	b.n	80091c6 <SYSTIMER_lTimerHandler+0x9a>
    }
    /* Check whether timer is periodic timer */
    else if (SYSTIMER_MODE_PERIODIC == object_ptr->mode)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	7b1b      	ldrb	r3, [r3, #12]
 8009196:	2b01      	cmp	r3, #1
 8009198:	d114      	bne.n	80091c4 <SYSTIMER_lTimerHandler+0x98>
    {
      /* Yes, remove this timer from timer list */
      SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	695b      	ldr	r3, [r3, #20]
 800919e:	4618      	mov	r0, r3
 80091a0:	f7ff ff64 	bl	800906c <SYSTIMER_lRemoveTimerList>
      /* Reset timer tick */
      object_ptr->count = object_ptr->reload;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	69da      	ldr	r2, [r3, #28]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	619a      	str	r2, [r3, #24]
      /* Insert timer into timer list */
      SYSTIMER_lInsertTimerList((uint32_t)object_ptr->id);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	695b      	ldr	r3, [r3, #20]
 80091b0:	4618      	mov	r0, r3
 80091b2:	f7ff fe79 	bl	8008ea8 <SYSTIMER_lInsertTimerList>
      /* Call timer callback function */
      (object_ptr->callback)(object_ptr->args);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	687a      	ldr	r2, [r7, #4]
 80091bc:	6912      	ldr	r2, [r2, #16]
 80091be:	4610      	mov	r0, r2
 80091c0:	4798      	blx	r3
 80091c2:	e000      	b.n	80091c6 <SYSTIMER_lTimerHandler+0x9a>
    }
    else
    {
      break;
 80091c4:	e009      	b.n	80091da <SYSTIMER_lTimerHandler+0xae>
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
 80091c6:	4b06      	ldr	r3, [pc, #24]	; (80091e0 <SYSTIMER_lTimerHandler+0xb4>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	607b      	str	r3, [r7, #4]
static void SYSTIMER_lTimerHandler(void)
{
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d003      	beq.n	80091da <SYSTIMER_lTimerHandler+0xae>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	699b      	ldr	r3, [r3, #24]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d0af      	beq.n	800913a <SYSTIMER_lTimerHandler+0xe>
      break;
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
  }
}
 80091da:	3708      	adds	r7, #8
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	2000053c 	.word	0x2000053c
 80091e4:	20000540 	.word	0x20000540

080091e8 <SysTick_Handler>:

/*
 *  SysTick Event Handler.
 */
void SysTick_Handler(void)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = g_timer_list;
 80091ee:	4b0e      	ldr	r3, [pc, #56]	; (8009228 <SysTick_Handler+0x40>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	607b      	str	r3, [r7, #4]
  g_systick_count++;
 80091f4:	4b0d      	ldr	r3, [pc, #52]	; (800922c <SysTick_Handler+0x44>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	3301      	adds	r3, #1
 80091fa:	4a0c      	ldr	r2, [pc, #48]	; (800922c <SysTick_Handler+0x44>)
 80091fc:	6013      	str	r3, [r2, #0]

  if (NULL != object_ptr)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d00e      	beq.n	8009222 <SysTick_Handler+0x3a>
  {
    if (object_ptr->count > 1UL)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	699b      	ldr	r3, [r3, #24]
 8009208:	2b01      	cmp	r3, #1
 800920a:	d905      	bls.n	8009218 <SysTick_Handler+0x30>
    {
      object_ptr->count--;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	699b      	ldr	r3, [r3, #24]
 8009210:	1e5a      	subs	r2, r3, #1
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	619a      	str	r2, [r3, #24]
 8009216:	e004      	b.n	8009222 <SysTick_Handler+0x3a>
    }
    else
    {
      object_ptr->count = 0U;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	619a      	str	r2, [r3, #24]
      SYSTIMER_lTimerHandler();
 800921e:	f7ff ff85 	bl	800912c <SYSTIMER_lTimerHandler>
    }
  }
}
 8009222:	3708      	adds	r7, #8
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}
 8009228:	2000053c 	.word	0x2000053c
 800922c:	20000544 	.word	0x20000544

08009230 <SYSTIMER_Init>:

/*
 * Initialization function which initializes the SYSTIMER APP, configures SysTick timer and SysTick exception.
 */
SYSTIMER_STATUS_t SYSTIMER_Init(SYSTIMER_t *handle)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status = SYSTIMER_STATUS_SUCCESS;
 8009238:	2300      	movs	r3, #0
 800923a:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_Init: SYSTIMER APP handle pointer uninitialized", (handle != NULL));

  /* Check APP initialization status to ensure whether SYSTIMER_Init called or not, initialize SYSTIMER if
   * SYSTIMER_Init called first time.
   */
  if (false == handle->init_status)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	f083 0301 	eor.w	r3, r3, #1
 8009244:	b2db      	uxtb	r3, r3
 8009246:	2b00      	cmp	r3, #0
 8009248:	d020      	beq.n	800928c <SYSTIMER_Init+0x5c>
  {
    /* Initialize the header of the list */
    g_timer_list = NULL;
 800924a:	4b13      	ldr	r3, [pc, #76]	; (8009298 <SYSTIMER_Init+0x68>)
 800924c:	2200      	movs	r2, #0
 800924e:	601a      	str	r2, [r3, #0]
    /* Initialize SysTick timer */
    status = (SYSTIMER_STATUS_t)SysTick_Config((uint32_t)(SYSTIMER_SYSTICK_CLOCK * SYSTIMER_TICK_PERIOD));
 8009250:	4812      	ldr	r0, [pc, #72]	; (800929c <SYSTIMER_Init+0x6c>)
 8009252:	f7ff fe07 	bl	8008e64 <SysTick_Config>
 8009256:	4603      	mov	r3, r0
 8009258:	73fb      	strb	r3, [r7, #15]

    if (SYSTIMER_STATUS_FAILURE == status)
 800925a:	7bfb      	ldrb	r3, [r7, #15]
 800925c:	2b01      	cmp	r3, #1
 800925e:	d015      	beq.n	800928c <SYSTIMER_Init+0x5c>
    }
    else
    {
#if (UC_FAMILY == XMC4)
      /* setting of First SW Timer period is always and subpriority value for XMC4000 devices */
      NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(
 8009260:	f7ff fd96 	bl	8008d90 <NVIC_GetPriorityGrouping>
 8009264:	4603      	mov	r3, r0
 8009266:	4618      	mov	r0, r3
 8009268:	2111      	movs	r1, #17
 800926a:	2200      	movs	r2, #0
 800926c:	f7ff fdc8 	bl	8008e00 <NVIC_EncodePriority>
 8009270:	4603      	mov	r3, r0
 8009272:	f04f 30ff 	mov.w	r0, #4294967295
 8009276:	4619      	mov	r1, r3
 8009278:	f7ff fd98 	bl	8008dac <NVIC_SetPriority>
      NVIC_GetPriorityGrouping(), SYSTIMER_PRIORITY, SYSTIMER_SUBPRIORITY));
#elif (UC_FAMILY == XMC1)
      /* setting of priority value for XMC1000 devices */
      NVIC_SetPriority(SysTick_IRQn, SYSTIMER_PRIORITY);
#endif      
      g_timer_tracker = 0U;
 800927c:	4b08      	ldr	r3, [pc, #32]	; (80092a0 <SYSTIMER_Init+0x70>)
 800927e:	2200      	movs	r2, #0
 8009280:	601a      	str	r2, [r3, #0]
      /* Update the Initialization status of the SYSTIMER APP instance */
      handle->init_status = true;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2201      	movs	r2, #1
 8009286:	701a      	strb	r2, [r3, #0]
      status = SYSTIMER_STATUS_SUCCESS;
 8009288:	2300      	movs	r3, #0
 800928a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return (status);
 800928c:	7bfb      	ldrb	r3, [r7, #15]
}
 800928e:	4618      	mov	r0, r3
 8009290:	3710      	adds	r7, #16
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
 8009296:	bf00      	nop
 8009298:	2000053c 	.word	0x2000053c
 800929c:	0001d4c0 	.word	0x0001d4c0
 80092a0:	20000540 	.word	0x20000540

080092a4 <SYSTIMER_CreateTimer>:
  uint32_t period,
  SYSTIMER_MODE_t mode,
  SYSTIMER_CALLBACK_t callback,
  void  *args
)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b089      	sub	sp, #36	; 0x24
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	607a      	str	r2, [r7, #4]
 80092ae:	603b      	str	r3, [r7, #0]
 80092b0:	460b      	mov	r3, r1
 80092b2:	72fb      	strb	r3, [r7, #11]
  uint32_t id = 0U;
 80092b4:	2300      	movs	r3, #0
 80092b6:	61fb      	str	r3, [r7, #28]
  uint32_t count = 0U;
 80092b8:	2300      	movs	r3, #0
 80092ba:	61bb      	str	r3, [r7, #24]
  uint32_t period_ratio = 0U;
 80092bc:	2300      	movs	r3, #0
 80092be:	617b      	str	r3, [r7, #20]
            ((period >= SYSTIMER_TICK_PERIOD_US) && (period > 0U) && (period <= 0xFFFFFFFFU)));
  XMC_ASSERT("SYSTIMER_CreateTimer: Timer creation failure due to invalid timer mode",
            ((SYSTIMER_MODE_ONE_SHOT == mode) || (SYSTIMER_MODE_PERIODIC == mode)));
  XMC_ASSERT("SYSTIMER_CreateTimer: Can not create software without user callback", (NULL != callback));
  
  if (period < SYSTIMER_TICK_PERIOD_US)
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80092c6:	d202      	bcs.n	80092ce <SYSTIMER_CreateTimer+0x2a>
  {
    id = 0U;
 80092c8:	2300      	movs	r3, #0
 80092ca:	61fb      	str	r3, [r7, #28]
 80092cc:	e07b      	b.n	80093c6 <SYSTIMER_CreateTimer+0x122>
  }
  else
  {
    for (count = 0U; count < SYSTIMER_CFG_MAX_TMR; count++)
 80092ce:	2300      	movs	r3, #0
 80092d0:	61bb      	str	r3, [r7, #24]
 80092d2:	e075      	b.n	80093c0 <SYSTIMER_CreateTimer+0x11c>
    {
      /* Check for free timer ID */
      if (0U == (g_timer_tracker & (1U << count)))
 80092d4:	69bb      	ldr	r3, [r7, #24]
 80092d6:	2201      	movs	r2, #1
 80092d8:	409a      	lsls	r2, r3
 80092da:	4b3e      	ldr	r3, [pc, #248]	; (80093d4 <SYSTIMER_CreateTimer+0x130>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4013      	ands	r3, r2
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d16a      	bne.n	80093ba <SYSTIMER_CreateTimer+0x116>
      {
        /* If yes, assign ID to this timer */
        g_timer_tracker |= (1U << count);
 80092e4:	69bb      	ldr	r3, [r7, #24]
 80092e6:	2201      	movs	r2, #1
 80092e8:	409a      	lsls	r2, r3
 80092ea:	4b3a      	ldr	r3, [pc, #232]	; (80093d4 <SYSTIMER_CreateTimer+0x130>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4313      	orrs	r3, r2
 80092f0:	4a38      	ldr	r2, [pc, #224]	; (80093d4 <SYSTIMER_CreateTimer+0x130>)
 80092f2:	6013      	str	r3, [r2, #0]
        /* Initialize the timer as per input values */
        g_timer_tbl[count].id     = count;
 80092f4:	4938      	ldr	r1, [pc, #224]	; (80093d8 <SYSTIMER_CreateTimer+0x134>)
 80092f6:	69ba      	ldr	r2, [r7, #24]
 80092f8:	4613      	mov	r3, r2
 80092fa:	00db      	lsls	r3, r3, #3
 80092fc:	4413      	add	r3, r2
 80092fe:	009b      	lsls	r3, r3, #2
 8009300:	440b      	add	r3, r1
 8009302:	3310      	adds	r3, #16
 8009304:	69ba      	ldr	r2, [r7, #24]
 8009306:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].mode   = mode;
 8009308:	4933      	ldr	r1, [pc, #204]	; (80093d8 <SYSTIMER_CreateTimer+0x134>)
 800930a:	69ba      	ldr	r2, [r7, #24]
 800930c:	4613      	mov	r3, r2
 800930e:	00db      	lsls	r3, r3, #3
 8009310:	4413      	add	r3, r2
 8009312:	009b      	lsls	r3, r3, #2
 8009314:	440b      	add	r3, r1
 8009316:	3308      	adds	r3, #8
 8009318:	7afa      	ldrb	r2, [r7, #11]
 800931a:	711a      	strb	r2, [r3, #4]
        g_timer_tbl[count].state  = SYSTIMER_STATE_STOPPED;
 800931c:	492e      	ldr	r1, [pc, #184]	; (80093d8 <SYSTIMER_CreateTimer+0x134>)
 800931e:	69ba      	ldr	r2, [r7, #24]
 8009320:	4613      	mov	r3, r2
 8009322:	00db      	lsls	r3, r3, #3
 8009324:	4413      	add	r3, r2
 8009326:	009b      	lsls	r3, r3, #2
 8009328:	440b      	add	r3, r1
 800932a:	3308      	adds	r3, #8
 800932c:	2202      	movs	r2, #2
 800932e:	715a      	strb	r2, [r3, #5]
        period_ratio = (uint32_t)(period / SYSTIMER_TICK_PERIOD_US);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	4a2a      	ldr	r2, [pc, #168]	; (80093dc <SYSTIMER_CreateTimer+0x138>)
 8009334:	fba2 2303 	umull	r2, r3, r2, r3
 8009338:	099b      	lsrs	r3, r3, #6
 800933a:	617b      	str	r3, [r7, #20]
        g_timer_tbl[count].count  = (period_ratio + HW_TIMER_ADDITIONAL_CNT);
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	1c59      	adds	r1, r3, #1
 8009340:	4825      	ldr	r0, [pc, #148]	; (80093d8 <SYSTIMER_CreateTimer+0x134>)
 8009342:	69ba      	ldr	r2, [r7, #24]
 8009344:	4613      	mov	r3, r2
 8009346:	00db      	lsls	r3, r3, #3
 8009348:	4413      	add	r3, r2
 800934a:	009b      	lsls	r3, r3, #2
 800934c:	4403      	add	r3, r0
 800934e:	3318      	adds	r3, #24
 8009350:	6019      	str	r1, [r3, #0]
        g_timer_tbl[count].reload  = period_ratio;
 8009352:	4921      	ldr	r1, [pc, #132]	; (80093d8 <SYSTIMER_CreateTimer+0x134>)
 8009354:	69ba      	ldr	r2, [r7, #24]
 8009356:	4613      	mov	r3, r2
 8009358:	00db      	lsls	r3, r3, #3
 800935a:	4413      	add	r3, r2
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	440b      	add	r3, r1
 8009360:	3318      	adds	r3, #24
 8009362:	697a      	ldr	r2, [r7, #20]
 8009364:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].callback = callback;
 8009366:	491c      	ldr	r1, [pc, #112]	; (80093d8 <SYSTIMER_CreateTimer+0x134>)
 8009368:	69ba      	ldr	r2, [r7, #24]
 800936a:	4613      	mov	r3, r2
 800936c:	00db      	lsls	r3, r3, #3
 800936e:	4413      	add	r3, r2
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	440b      	add	r3, r1
 8009374:	3308      	adds	r3, #8
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	601a      	str	r2, [r3, #0]
        g_timer_tbl[count].args = args;
 800937a:	4917      	ldr	r1, [pc, #92]	; (80093d8 <SYSTIMER_CreateTimer+0x134>)
 800937c:	69ba      	ldr	r2, [r7, #24]
 800937e:	4613      	mov	r3, r2
 8009380:	00db      	lsls	r3, r3, #3
 8009382:	4413      	add	r3, r2
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	440b      	add	r3, r1
 8009388:	3310      	adds	r3, #16
 800938a:	683a      	ldr	r2, [r7, #0]
 800938c:	601a      	str	r2, [r3, #0]
        g_timer_tbl[count].prev   = NULL;
 800938e:	4912      	ldr	r1, [pc, #72]	; (80093d8 <SYSTIMER_CreateTimer+0x134>)
 8009390:	69ba      	ldr	r2, [r7, #24]
 8009392:	4613      	mov	r3, r2
 8009394:	00db      	lsls	r3, r3, #3
 8009396:	4413      	add	r3, r2
 8009398:	009b      	lsls	r3, r3, #2
 800939a:	440b      	add	r3, r1
 800939c:	2200      	movs	r2, #0
 800939e:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].next   = NULL;
 80093a0:	490d      	ldr	r1, [pc, #52]	; (80093d8 <SYSTIMER_CreateTimer+0x134>)
 80093a2:	69ba      	ldr	r2, [r7, #24]
 80093a4:	4613      	mov	r3, r2
 80093a6:	00db      	lsls	r3, r3, #3
 80093a8:	4413      	add	r3, r2
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	440b      	add	r3, r1
 80093ae:	2200      	movs	r2, #0
 80093b0:	601a      	str	r2, [r3, #0]
        id = count + 1U;
 80093b2:	69bb      	ldr	r3, [r7, #24]
 80093b4:	3301      	adds	r3, #1
 80093b6:	61fb      	str	r3, [r7, #28]
        break;
 80093b8:	e005      	b.n	80093c6 <SYSTIMER_CreateTimer+0x122>
  {
    id = 0U;
  }
  else
  {
    for (count = 0U; count < SYSTIMER_CFG_MAX_TMR; count++)
 80093ba:	69bb      	ldr	r3, [r7, #24]
 80093bc:	3301      	adds	r3, #1
 80093be:	61bb      	str	r3, [r7, #24]
 80093c0:	69bb      	ldr	r3, [r7, #24]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d086      	beq.n	80092d4 <SYSTIMER_CreateTimer+0x30>
      }
    }

  }
  
  return (id);
 80093c6:	69fb      	ldr	r3, [r7, #28]
}  
 80093c8:	4618      	mov	r0, r3
 80093ca:	3724      	adds	r7, #36	; 0x24
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr
 80093d4:	20000540 	.word	0x20000540
 80093d8:	20000c8c 	.word	0x20000c8c
 80093dc:	10624dd3 	.word	0x10624dd3

080093e0 <SYSTIMER_StartTimer>:

/*
 *  API to start the software timer.
 */
SYSTIMER_STATUS_t SYSTIMER_StartTimer(uint32_t id)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b084      	sub	sp, #16
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status;
  status = SYSTIMER_STATUS_FAILURE;
 80093e8:	2301      	movs	r3, #1
 80093ea:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_StartTimer: Failure in timer restart operation due to invalid timer ID",
            ((id <= SYSTIMER_CFG_MAX_TMR) && (id > 0U)));
  XMC_ASSERT("SYSTIMER_StartTimer: Error during start of software timer", (0U != (g_timer_tracker & (1U << (id - 1U)))));
  
  /* Check if timer is running */
  if (SYSTIMER_STATE_STOPPED == g_timer_tbl[id - 1U].state)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	1e5a      	subs	r2, r3, #1
 80093f0:	491a      	ldr	r1, [pc, #104]	; (800945c <SYSTIMER_StartTimer+0x7c>)
 80093f2:	4613      	mov	r3, r2
 80093f4:	00db      	lsls	r3, r3, #3
 80093f6:	4413      	add	r3, r2
 80093f8:	009b      	lsls	r3, r3, #2
 80093fa:	440b      	add	r3, r1
 80093fc:	3308      	adds	r3, #8
 80093fe:	795b      	ldrb	r3, [r3, #5]
 8009400:	2b02      	cmp	r3, #2
 8009402:	d126      	bne.n	8009452 <SYSTIMER_StartTimer+0x72>
  {
    g_timer_tbl[id - 1U].count = (g_timer_tbl[id - 1U].reload + HW_TIMER_ADDITIONAL_CNT);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	1e5a      	subs	r2, r3, #1
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	1e59      	subs	r1, r3, #1
 800940c:	4813      	ldr	r0, [pc, #76]	; (800945c <SYSTIMER_StartTimer+0x7c>)
 800940e:	460b      	mov	r3, r1
 8009410:	00db      	lsls	r3, r3, #3
 8009412:	440b      	add	r3, r1
 8009414:	009b      	lsls	r3, r3, #2
 8009416:	4403      	add	r3, r0
 8009418:	3318      	adds	r3, #24
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	1c59      	adds	r1, r3, #1
 800941e:	480f      	ldr	r0, [pc, #60]	; (800945c <SYSTIMER_StartTimer+0x7c>)
 8009420:	4613      	mov	r3, r2
 8009422:	00db      	lsls	r3, r3, #3
 8009424:	4413      	add	r3, r2
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	4403      	add	r3, r0
 800942a:	3318      	adds	r3, #24
 800942c:	6019      	str	r1, [r3, #0]
    /* set timer status as SYSTIMER_STATE_RUNNING */
    g_timer_tbl[id - 1U].state = SYSTIMER_STATE_RUNNING;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	1e5a      	subs	r2, r3, #1
 8009432:	490a      	ldr	r1, [pc, #40]	; (800945c <SYSTIMER_StartTimer+0x7c>)
 8009434:	4613      	mov	r3, r2
 8009436:	00db      	lsls	r3, r3, #3
 8009438:	4413      	add	r3, r2
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	440b      	add	r3, r1
 800943e:	3308      	adds	r3, #8
 8009440:	2201      	movs	r2, #1
 8009442:	715a      	strb	r2, [r3, #5]
    /* Insert this timer into timer list */
    SYSTIMER_lInsertTimerList((id - 1U));
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	3b01      	subs	r3, #1
 8009448:	4618      	mov	r0, r3
 800944a:	f7ff fd2d 	bl	8008ea8 <SYSTIMER_lInsertTimerList>
    status = SYSTIMER_STATUS_SUCCESS;
 800944e:	2300      	movs	r3, #0
 8009450:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8009452:	7bfb      	ldrb	r3, [r7, #15]
}
 8009454:	4618      	mov	r0, r3
 8009456:	3710      	adds	r7, #16
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}
 800945c:	20000c8c 	.word	0x20000c8c

08009460 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8009460:	b480      	push	{r7}
 8009462:	b083      	sub	sp, #12
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	460b      	mov	r3, r1
 800946a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	68da      	ldr	r2, [r3, #12]
 8009470:	78fb      	ldrb	r3, [r7, #3]
 8009472:	2101      	movs	r1, #1
 8009474:	fa01 f303 	lsl.w	r3, r1, r3
 8009478:	431a      	orrs	r2, r3
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	60da      	str	r2, [r3, #12]
}
 800947e:	370c      	adds	r7, #12
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr

08009488 <XMC_CCU4_SLICE_EnableTrap>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_TrapConfig()<BR> XMC_CCU4_SLICE_DisableTrap()<BR> XMC_CCU4_SLICE_ConfigureEvent()<BR>
 *  XMC_CCU4_SLICE_SetInput().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableTrap(XMC_CCU4_SLICE_t *const slice)
{
 8009488:	b480      	push	{r7}
 800948a:	b083      	sub	sp, #12
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableTrap:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TC |= (uint32_t) CCU4_CC4_TC_TRAPE_Msk;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	695b      	ldr	r3, [r3, #20]
 8009494:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	615a      	str	r2, [r3, #20]
}
 800949c:	370c      	adds	r7, #12
 800949e:	46bd      	mov	sp, r7
 80094a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a4:	4770      	bx	lr
 80094a6:	bf00      	nop

080094a8 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b083      	sub	sp, #12
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2201      	movs	r2, #1
 80094b4:	60da      	str	r2, [r3, #12]
}
 80094b6:	370c      	adds	r7, #12
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b083      	sub	sp, #12
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	460b      	mov	r3, r1
 80094ca:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 80094cc:	887a      	ldrh	r2, [r7, #2]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80094d2:	370c      	adds	r7, #12
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr

080094dc <XMC_CCU4_SLICE_GetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_SetTimerPeriodMatch().
 */
__STATIC_INLINE uint16_t XMC_CCU4_SLICE_GetTimerPeriodMatch(const XMC_CCU4_SLICE_t *const slice)
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  return((uint16_t)slice->PR);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094e8:	b29b      	uxth	r3, r3
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	370c      	adds	r7, #12
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr
 80094f6:	bf00      	nop

080094f8 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	460b      	mov	r3, r1
 8009502:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8009504:	887a      	ldrh	r2, [r7, #2]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800950a:	370c      	adds	r7, #12
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8009514:	b480      	push	{r7}
 8009516:	b083      	sub	sp, #12
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	683a      	ldr	r2, [r7, #0]
 8009522:	611a      	str	r2, [r3, #16]
}
 8009524:	370c      	adds	r7, #12
 8009526:	46bd      	mov	sp, r7
 8009528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952c:	4770      	bx	lr
 800952e:	bf00      	nop

08009530 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	460b      	mov	r3, r1
 800953a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8009542:	78fb      	ldrb	r3, [r7, #3]
 8009544:	2101      	movs	r1, #1
 8009546:	fa01 f303 	lsl.w	r3, r1, r3
 800954a:	431a      	orrs	r2, r3
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8009552:	370c      	adds	r7, #12
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr

0800955c <PWM_CCU4_Init>:
  return version;
}

/* This function initializes the app */
PWM_CCU4_STATUS_t PWM_CCU4_Init(PWM_CCU4_t* handle_ptr)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b086      	sub	sp, #24
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  PWM_CCU4_STATUS_t status;
  GLOBAL_CCU4_STATUS_t status_ccu4_global;
  uint32_t frequency_module;
  uint32_t prescalar;

  status = PWM_CCU4_STATUS_FAILURE;
 8009564:	2301      	movs	r3, #1
 8009566:	75fb      	strb	r3, [r7, #23]
  status_ccu4_global = GLOBAL_CCU4_STATUS_FAILURE;
 8009568:	2301      	movs	r3, #1
 800956a:	75bb      	strb	r3, [r7, #22]
  XMC_ASSERT("PWM_CCU4_Init:handle_ptr is NULL", (handle_ptr != NULL));

  if (PWM_CCU4_STATE_UNINITIALIZED == handle_ptr->state)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	7f1b      	ldrb	r3, [r3, #28]
 8009570:	2b00      	cmp	r3, #0
 8009572:	f040 808c 	bne.w	800968e <PWM_CCU4_Init+0x132>
  {
    /* Initialize consumed Apps */
    status_ccu4_global = GLOBAL_CCU4_Init(handle_ptr->config_ptr->global_ccu4_handle);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800957c:	4618      	mov	r0, r3
 800957e:	f000 fb3d 	bl	8009bfc <GLOBAL_CCU4_Init>
 8009582:	4603      	mov	r3, r0
 8009584:	75bb      	strb	r3, [r7, #22]

    /* Initialize CCU4x_CC4y slice */
    if (GLOBAL_CCU4_STATUS_SUCCESS == status_ccu4_global)
 8009586:	7dbb      	ldrb	r3, [r7, #22]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d17c      	bne.n	8009686 <PWM_CCU4_Init+0x12a>
    {
      XMC_DEBUG("PWM_CCU4_Init:Initilizing slice");

      /* Configure CCU4x_CC4y slice as timer */
      XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	689a      	ldr	r2, [r3, #8]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009596:	4610      	mov	r0, r2
 8009598:	4619      	mov	r1, r3
 800959a:	f7fa fe9d 	bl	80042d8 <XMC_CCU4_SLICE_CompareInit>
      /* Set period match value of the timer  */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->period_value);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	689a      	ldr	r2, [r3, #8]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	885b      	ldrh	r3, [r3, #2]
 80095a8:	4610      	mov	r0, r2
 80095aa:	4619      	mov	r1, r3
 80095ac:	f7ff ff88 	bl	80094c0 <XMC_CCU4_SLICE_SetTimerPeriodMatch>

      /* Set timer compare match value for channel 1 */
      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t) handle_ptr->config_ptr->compare_value);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	689a      	ldr	r2, [r3, #8]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	889b      	ldrh	r3, [r3, #4]
 80095ba:	4610      	mov	r0, r2
 80095bc:	4619      	mov	r1, r3
 80095be:	f7ff ff9b 	bl	80094f8 <XMC_CCU4_SLICE_SetTimerCompareMatch>

      if (1U == handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr->mcm_enable)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095c8:	78db      	ldrb	r3, [r3, #3]
 80095ca:	f003 0302 	and.w	r3, r3, #2
 80095ce:	b2db      	uxtb	r3, r3
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d008      	beq.n	80095e6 <PWM_CCU4_Init+0x8a>
      {
        XMC_CCU4_SetMultiChannelShadowTransferMode(handle_ptr->ccu4_module_ptr,
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	685a      	ldr	r2, [r3, #4]
                                                   (uint32_t) handle_ptr->config_ptr->mcm_shadow_txfr_mode);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      /* Set timer compare match value for channel 1 */
      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t) handle_ptr->config_ptr->compare_value);

      if (1U == handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr->mcm_enable)
      {
        XMC_CCU4_SetMultiChannelShadowTransferMode(handle_ptr->ccu4_module_ptr,
 80095de:	4610      	mov	r0, r2
 80095e0:	4619      	mov	r1, r3
 80095e2:	f7fa fe5d 	bl	80042a0 <XMC_CCU4_SetMultiChannelShadowTransferMode>
        XMC_CCU4_SLICE_EnableCascadedShadowTransfer(handle_ptr->ccu4_slice_ptr);
      }
#endif

      /* Transfer value from shadow timer registers to actual timer registers */
      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_module_ptr, handle_ptr->shadow_txfr_msk);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	685a      	ldr	r2, [r3, #4]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	691b      	ldr	r3, [r3, #16]
 80095ee:	4610      	mov	r0, r2
 80095f0:	4619      	mov	r1, r3
 80095f2:	f7ff ff8f 	bl	8009514 <XMC_CCU4_EnableShadowTransfer>
      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_module_ptr, handle_ptr->dither_shadow_txfr_msk);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	685a      	ldr	r2, [r3, #4]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	695b      	ldr	r3, [r3, #20]
 80095fe:	4610      	mov	r0, r2
 8009600:	4619      	mov	r1, r3
 8009602:	f7ff ff87 	bl	8009514 <XMC_CCU4_EnableShadowTransfer>

      /* Configure events */
      PWM_CCU4_lConfigure_Events(handle_ptr);
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 f8e2 	bl	80097d0 <PWM_CCU4_lConfigure_Events>

      /* Enable the interrupts */
      PWM_CCU4_lInit_Interrupt(handle_ptr);
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f000 f845 	bl	800969c <PWM_CCU4_lInit_Interrupt>

      /*Initializes the GPIO*/
      if ((bool) true == handle_ptr->config_ptr->gpio_ch_out_enable)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800961a:	2b00      	cmp	r3, #0
 800961c:	d00e      	beq.n	800963c <PWM_CCU4_Init+0xe0>
      {
        XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch_out_ptr, handle_ptr->config_ptr->gpio_ch_out_pin,
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
                      handle_ptr->config_ptr->gpio_ch_out_config_ptr);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
      PWM_CCU4_lInit_Interrupt(handle_ptr);

      /*Initializes the GPIO*/
      if ((bool) true == handle_ptr->config_ptr->gpio_ch_out_enable)
      {
        XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch_out_ptr, handle_ptr->config_ptr->gpio_ch_out_pin,
 8009630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009632:	4608      	mov	r0, r1
 8009634:	4611      	mov	r1, r2
 8009636:	461a      	mov	r2, r3
 8009638:	f7fa f8f4 	bl	8003824 <XMC_GPIO_Init>
                      handle_ptr->config_ptr->gpio_ch_out_config_ptr);
      }

      frequency_module = handle_ptr->config_ptr->global_ccu4_handle->module_frequency;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	613b      	str	r3, [r7, #16]
      prescalar = (uint32_t) handle_ptr->config_ptr->ccu4_cc4_slice_timer_ptr->prescaler_initval;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800964c:	791b      	ldrb	r3, [r3, #4]
 800964e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009652:	b2db      	uxtb	r3, r3
 8009654:	60fb      	str	r3, [r7, #12]
      frequency_module = frequency_module / ((uint32_t) 1 << prescalar);
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	693a      	ldr	r2, [r7, #16]
 800965a:	fa22 f303 	lsr.w	r3, r2, r3
 800965e:	613b      	str	r3, [r7, #16]
      handle_ptr->frequency_tclk = frequency_module;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	693a      	ldr	r2, [r7, #16]
 8009664:	621a      	str	r2, [r3, #32]

      handle_ptr->state = PWM_CCU4_STATE_INITIALIZED;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2201      	movs	r2, #1
 800966a:	771a      	strb	r2, [r3, #28]
      status = PWM_CCU4_STATUS_SUCCESS;
 800966c:	2300      	movs	r3, #0
 800966e:	75fb      	strb	r3, [r7, #23]

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->config_ptr->start_control)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	781b      	ldrb	r3, [r3, #0]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d00b      	beq.n	8009692 <PWM_CCU4_Init+0x136>
      {
        status = PWM_CCU4_Start(handle_ptr);
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f000 f98c 	bl	8009998 <PWM_CCU4_Start>
 8009680:	4603      	mov	r3, r0
 8009682:	75fb      	strb	r3, [r7, #23]
 8009684:	e005      	b.n	8009692 <PWM_CCU4_Init+0x136>
      }
    }
    else
    {
      handle_ptr->state = PWM_CCU4_STATE_UNINITIALIZED;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2200      	movs	r2, #0
 800968a:	771a      	strb	r2, [r3, #28]
 800968c:	e001      	b.n	8009692 <PWM_CCU4_Init+0x136>
    }

  }
  else
  {
    status = PWM_CCU4_STATUS_ALREADY_INITIALIZED;
 800968e:	2302      	movs	r3, #2
 8009690:	75fb      	strb	r3, [r7, #23]
    XMC_DEBUG("PWM_CCU4_Init:PWM_CCU4_STATUS_ALREADY_INITIALIZED");
  }

  return (status);
 8009692:	7dfb      	ldrb	r3, [r7, #23]
} /* end of PWM_CCU4_Init() api */
 8009694:	4618      	mov	r0, r3
 8009696:	3718      	adds	r7, #24
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <PWM_CCU4_lInit_Interrupt>:

static void PWM_CCU4_lInit_Interrupt(PWM_CCU4_t* handle_ptr)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b082      	sub	sp, #8
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]

  /* Enable events. Bind event to corresponding service request node.Enable Interrupts. The user may choose to 
   disable the interrupts by LLD calls. */
  if ((bool) true == handle_ptr->config_ptr->int_per_match)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	799b      	ldrb	r3, [r3, #6]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d00f      	beq.n	80096ce <PWM_CCU4_lInit_Interrupt+0x32>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt period match enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_per_match);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
  /* Enable events. Bind event to corresponding service request node.Enable Interrupts. The user may choose to 
   disable the interrupts by LLD calls. */
  if ((bool) true == handle_ptr->config_ptr->int_per_match)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt period match enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 80096b6:	7b5b      	ldrb	r3, [r3, #13]
 80096b8:	4610      	mov	r0, r2
 80096ba:	2100      	movs	r1, #0
 80096bc:	461a      	mov	r2, r3
 80096be:	f7fb f861 	bl	8004784 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_per_match);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	4618      	mov	r0, r3
 80096c8:	2100      	movs	r1, #0
 80096ca:	f7ff ff31 	bl	8009530 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp_match_up)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	79db      	ldrb	r3, [r3, #7]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d00f      	beq.n	80096f8 <PWM_CCU4_lInit_Interrupt+0x5c>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt compare match up enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_cmp_match_up);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp_match_up)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt compare match up enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
 80096e0:	7b9b      	ldrb	r3, [r3, #14]
 80096e2:	4610      	mov	r0, r2
 80096e4:	2102      	movs	r1, #2
 80096e6:	461a      	mov	r2, r3
 80096e8:	f7fb f84c 	bl	8004784 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_cmp_match_up);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	689b      	ldr	r3, [r3, #8]
 80096f0:	4618      	mov	r0, r3
 80096f2:	2102      	movs	r1, #2
 80096f4:	f7ff ff1c 	bl	8009530 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp_match_down)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	7a1b      	ldrb	r3, [r3, #8]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d00f      	beq.n	8009722 <PWM_CCU4_lInit_Interrupt+0x86>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt compare match down enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN,
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_cmp_match_down);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp_match_down)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt compare match down enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN,
 800970a:	7bdb      	ldrb	r3, [r3, #15]
 800970c:	4610      	mov	r0, r2
 800970e:	2103      	movs	r1, #3
 8009710:	461a      	mov	r2, r3
 8009712:	f7fb f837 	bl	8004784 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_cmp_match_down);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	689b      	ldr	r3, [r3, #8]
 800971a:	4618      	mov	r0, r3
 800971c:	2103      	movs	r1, #3
 800971e:	f7ff ff07 	bl	8009530 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_one_match_down)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	7a5b      	ldrb	r3, [r3, #9]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d00f      	beq.n	800974c <PWM_CCU4_lInit_Interrupt+0xb0>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt one match enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH,
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_one_match_down);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_one_match_down)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt one match enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH,
 8009734:	7c1b      	ldrb	r3, [r3, #16]
 8009736:	4610      	mov	r0, r2
 8009738:	2101      	movs	r1, #1
 800973a:	461a      	mov	r2, r3
 800973c:	f7fb f822 	bl	8004784 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_one_match_down);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	689b      	ldr	r3, [r3, #8]
 8009744:	4618      	mov	r0, r3
 8009746:	2101      	movs	r1, #1
 8009748:	f7ff fef2 	bl	8009530 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e0)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	7a9b      	ldrb	r3, [r3, #10]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d00f      	beq.n	8009776 <PWM_CCU4_lInit_Interrupt+0xda>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 0 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0,
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_e0);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_e0)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 0 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0,
 800975e:	7c5b      	ldrb	r3, [r3, #17]
 8009760:	4610      	mov	r0, r2
 8009762:	2108      	movs	r1, #8
 8009764:	461a      	mov	r2, r3
 8009766:	f7fb f80d 	bl	8004784 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_e0);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	4618      	mov	r0, r3
 8009770:	2108      	movs	r1, #8
 8009772:	f7ff fedd 	bl	8009530 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e1)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	7adb      	ldrb	r3, [r3, #11]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d00f      	beq.n	80097a0 <PWM_CCU4_lInit_Interrupt+0x104>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 1 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT1,
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_e1);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_e1)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 1 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT1,
 8009788:	7c9b      	ldrb	r3, [r3, #18]
 800978a:	4610      	mov	r0, r2
 800978c:	2109      	movs	r1, #9
 800978e:	461a      	mov	r2, r3
 8009790:	f7fa fff8 	bl	8004784 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_e1);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT1);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	689b      	ldr	r3, [r3, #8]
 8009798:	4618      	mov	r0, r3
 800979a:	2109      	movs	r1, #9
 800979c:	f7ff fec8 	bl	8009530 <XMC_CCU4_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e2)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	7b1b      	ldrb	r3, [r3, #12]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d00f      	beq.n	80097ca <PWM_CCU4_lInit_Interrupt+0x12e>
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 2 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT2,
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	689a      	ldr	r2, [r3, #8]
                                    handle_ptr->config_ptr->sr_e2);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
  }

  if ((bool) true == handle_ptr->config_ptr->int_e2)
  {
    XMC_DEBUG("PWM_CCU4_Init: Interrupt event 2 enable");
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT2,
 80097b2:	7cdb      	ldrb	r3, [r3, #19]
 80097b4:	4610      	mov	r0, r2
 80097b6:	210a      	movs	r1, #10
 80097b8:	461a      	mov	r2, r3
 80097ba:	f7fa ffe3 	bl	8004784 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->config_ptr->sr_e2);
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT2);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	689b      	ldr	r3, [r3, #8]
 80097c2:	4618      	mov	r0, r3
 80097c4:	210a      	movs	r1, #10
 80097c6:	f7ff feb3 	bl	8009530 <XMC_CCU4_SLICE_EnableEvent>
  }
}
 80097ca:	3708      	adds	r7, #8
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <PWM_CCU4_lConfigure_Events>:

static void PWM_CCU4_lConfigure_Events(PWM_CCU4_t* handle_ptr)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b082      	sub	sp, #8
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]

  /* Configure slice to a external event 0 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_0,
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event0_config_ptr);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]

static void PWM_CCU4_lConfigure_Events(PWM_CCU4_t* handle_ptr)
{

  /* Configure slice to a external event 0 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_0,
 80097e0:	695b      	ldr	r3, [r3, #20]
 80097e2:	4610      	mov	r0, r2
 80097e4:	2101      	movs	r1, #1
 80097e6:	461a      	mov	r2, r3
 80097e8:	f7fa ff62 	bl	80046b0 <XMC_CCU4_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event0_config_ptr);

  /* Configure slice to a external event 1 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_1,
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event1_config_ptr);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
  /* Configure slice to a external event 0 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_0,
                                handle_ptr->config_ptr->event0_config_ptr);

  /* Configure slice to a external event 1 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_1,
 80097f4:	699b      	ldr	r3, [r3, #24]
 80097f6:	4610      	mov	r0, r2
 80097f8:	2102      	movs	r1, #2
 80097fa:	461a      	mov	r2, r3
 80097fc:	f7fa ff58 	bl	80046b0 <XMC_CCU4_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event1_config_ptr);

  /* Configure slice to a external event 2 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_2,
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event2_config_ptr);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
  /* Configure slice to a external event 1 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_1,
                                handle_ptr->config_ptr->event1_config_ptr);

  /* Configure slice to a external event 2 */
  XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_EVENT_2,
 8009808:	69db      	ldr	r3, [r3, #28]
 800980a:	4610      	mov	r0, r2
 800980c:	2103      	movs	r1, #3
 800980e:	461a      	mov	r2, r3
 8009810:	f7fa ff4e 	bl	80046b0 <XMC_CCU4_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event2_config_ptr);

  /* External signal controls start of the timer */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_start_event)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f893 3020 	ldrb.w	r3, [r3, #32]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d00e      	beq.n	800983e <PWM_CCU4_lConfigure_Events+0x6e>
  {
    XMC_CCU4_SLICE_StartConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_start_event,
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6899      	ldr	r1, [r3, #8]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f893 2020 	ldrb.w	r2, [r3, #32]
                               handle_ptr->config_ptr->ext_start_mode);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
                                handle_ptr->config_ptr->event2_config_ptr);

  /* External signal controls start of the timer */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_start_event)
  {
    XMC_CCU4_SLICE_StartConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_start_event,
 8009830:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009834:	4608      	mov	r0, r1
 8009836:	4611      	mov	r1, r2
 8009838:	461a      	mov	r2, r3
 800983a:	f7fa fd83 	bl	8004344 <XMC_CCU4_SLICE_StartConfig>
                               handle_ptr->config_ptr->ext_start_mode);
  }

  /* External signal can stop the timer */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_stop_event)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009846:	2b00      	cmp	r3, #0
 8009848:	d00e      	beq.n	8009868 <PWM_CCU4_lConfigure_Events+0x98>
  {
    XMC_CCU4_SLICE_StopConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_stop_event,
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6899      	ldr	r1, [r3, #8]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
                              handle_ptr->config_ptr->ext_stop_mode);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
  }

  /* External signal can stop the timer */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_stop_event)
  {
    XMC_CCU4_SLICE_StopConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_stop_event,
 800985a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800985e:	4608      	mov	r0, r1
 8009860:	4611      	mov	r1, r2
 8009862:	461a      	mov	r2, r3
 8009864:	f7fa fd9c 	bl	80043a0 <XMC_CCU4_SLICE_StopConfig>
                              handle_ptr->config_ptr->ext_stop_mode);
  }

  /* External signal can change the timer counting direction */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_dir_event)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009870:	2b00      	cmp	r3, #0
 8009872:	d009      	beq.n	8009888 <PWM_CCU4_lConfigure_Events+0xb8>
  {
    XMC_CCU4_SLICE_DirectionConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_count_dir_event);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	689a      	ldr	r2, [r3, #8]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009880:	4610      	mov	r0, r2
 8009882:	4619      	mov	r1, r3
 8009884:	f7fa fe46 	bl	8004514 <XMC_CCU4_SLICE_DirectionConfig>
  }
  /* External signal can stop the timer and the timer value remains same */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_gate_event)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009890:	2b00      	cmp	r3, #0
 8009892:	d009      	beq.n	80098a8 <PWM_CCU4_lConfigure_Events+0xd8>
  {
    XMC_CCU4_SLICE_GateConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_gate_event);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	689a      	ldr	r2, [r3, #8]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80098a0:	4610      	mov	r0, r2
 80098a2:	4619      	mov	r1, r3
 80098a4:	f7fa fe1c 	bl	80044e0 <XMC_CCU4_SLICE_GateConfig>
  }
  /* Timer increments on external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_event)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d009      	beq.n	80098c8 <PWM_CCU4_lConfigure_Events+0xf8>
  {
    XMC_CCU4_SLICE_CountConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_count_event);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	689a      	ldr	r2, [r3, #8]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80098c0:	4610      	mov	r0, r2
 80098c2:	4619      	mov	r1, r3
 80098c4:	f7fa fdf2 	bl	80044ac <XMC_CCU4_SLICE_CountConfig>
  }
  /* Timer gets loaded with compare register value or period register value on external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_load_event)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d009      	beq.n	80098e8 <PWM_CCU4_lConfigure_Events+0x118>
  {
    XMC_CCU4_SLICE_LoadConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_load_event);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	689a      	ldr	r2, [r3, #8]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80098e0:	4610      	mov	r0, r2
 80098e2:	4619      	mov	r1, r3
 80098e4:	f7fa fd88 	bl	80043f8 <XMC_CCU4_SLICE_LoadConfig>
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d00f      	beq.n	8009914 <PWM_CCU4_lConfigure_Events+0x144>
  {
    XMC_CCU4_SLICE_ModulationConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6898      	ldr	r0, [r3, #8]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
                                    handle_ptr->config_ptr->ext_mod_mode, handle_ptr->config_ptr->ext_mod_sync);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
    XMC_CCU4_SLICE_LoadConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_load_event);
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
  {
    XMC_CCU4_SLICE_ModulationConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
 8009904:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
                                    handle_ptr->config_ptr->ext_mod_mode, handle_ptr->config_ptr->ext_mod_sync);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
    XMC_CCU4_SLICE_LoadConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_load_event);
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
  {
    XMC_CCU4_SLICE_ModulationConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
 800990c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8009910:	f7fa fd8c 	bl	800442c <XMC_CCU4_SLICE_ModulationConfig>
                                    handle_ptr->config_ptr->ext_mod_mode, handle_ptr->config_ptr->ext_mod_sync);
  }

  /* PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_2 == handle_ptr->config_ptr->ext_trap_event)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800991c:	2b03      	cmp	r3, #3
 800991e:	d119      	bne.n	8009954 <PWM_CCU4_lConfigure_Events+0x184>
  {
    XMC_CCU4_SLICE_TrapConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_trap_exit,
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6899      	ldr	r1, [r3, #8]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
                              handle_ptr->config_ptr->ext_trap_sync);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
  }

  /* PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU4_SLICE_EVENT_2 == handle_ptr->config_ptr->ext_trap_event)
  {
    XMC_CCU4_SLICE_TrapConfig(handle_ptr->ccu4_slice_ptr, handle_ptr->config_ptr->ext_trap_exit,
 8009930:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009934:	4608      	mov	r0, r1
 8009936:	4611      	mov	r1, r2
 8009938:	461a      	mov	r2, r3
 800993a:	f7fa fe1d 	bl	8004578 <XMC_CCU4_SLICE_TrapConfig>
                              handle_ptr->config_ptr->ext_trap_sync);

    if ((bool) true == handle_ptr->config_ptr->ext_trap_enable)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009946:	2b00      	cmp	r3, #0
 8009948:	d004      	beq.n	8009954 <PWM_CCU4_lConfigure_Events+0x184>
    {
      XMC_CCU4_SLICE_EnableTrap(handle_ptr->ccu4_slice_ptr);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	4618      	mov	r0, r3
 8009950:	f7ff fd9a 	bl	8009488 <XMC_CCU4_SLICE_EnableTrap>
    }
  }
  if ((XMC_CCU4_SLICE_EVENT_1 == handle_ptr->config_ptr->ext_override_edge_event) && (XMC_CCU4_SLICE_EVENT_2
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800995c:	2b02      	cmp	r3, #2
 800995e:	d117      	bne.n	8009990 <PWM_CCU4_lConfigure_Events+0x1c0>
      == handle_ptr->config_ptr->ext_override_level_event))
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    if ((bool) true == handle_ptr->config_ptr->ext_trap_enable)
    {
      XMC_CCU4_SLICE_EnableTrap(handle_ptr->ccu4_slice_ptr);
    }
  }
  if ((XMC_CCU4_SLICE_EVENT_1 == handle_ptr->config_ptr->ext_override_edge_event) && (XMC_CCU4_SLICE_EVENT_2
 8009968:	2b03      	cmp	r3, #3
 800996a:	d111      	bne.n	8009990 <PWM_CCU4_lConfigure_Events+0x1c0>
      == handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu4_slice_ptr,
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6899      	ldr	r1, [r3, #8]
                                                   handle_ptr->config_ptr->event1_config_ptr,
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
    }
  }
  if ((XMC_CCU4_SLICE_EVENT_1 == handle_ptr->config_ptr->ext_override_edge_event) && (XMC_CCU4_SLICE_EVENT_2
      == handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu4_slice_ptr,
 8009974:	699a      	ldr	r2, [r3, #24]
                                                   handle_ptr->config_ptr->event1_config_ptr,
                                                   handle_ptr->config_ptr->event2_config_ptr);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
    }
  }
  if ((XMC_CCU4_SLICE_EVENT_1 == handle_ptr->config_ptr->ext_override_edge_event) && (XMC_CCU4_SLICE_EVENT_2
      == handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu4_slice_ptr,
 800997a:	69db      	ldr	r3, [r3, #28]
 800997c:	4608      	mov	r0, r1
 800997e:	4611      	mov	r1, r2
 8009980:	461a      	mov	r2, r3
 8009982:	f7fa fe33 	bl	80045ec <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent>
                                                   handle_ptr->config_ptr->event1_config_ptr,
                                                   handle_ptr->config_ptr->event2_config_ptr);
    XMC_CCU4_SLICE_StatusBitOverrideConfig(handle_ptr->ccu4_slice_ptr);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	689b      	ldr	r3, [r3, #8]
 800998a:	4618      	mov	r0, r3
 800998c:	f7fa fddc 	bl	8004548 <XMC_CCU4_SLICE_StatusBitOverrideConfig>
  }

}
 8009990:	3708      	adds	r7, #8
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop

08009998 <PWM_CCU4_Start>:
/**********************************************************************************************************/
/*Starts the CCU4_CC4 slice. This needs to be called even if external start is configured.*/
PWM_CCU4_STATUS_t PWM_CCU4_Start(PWM_CCU4_t* handle_ptr)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  PWM_CCU4_STATUS_t status;

  status = PWM_CCU4_STATUS_FAILURE;
 80099a0:	2301      	movs	r3, #1
 80099a2:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("PWM_CCU4_Start:handle_ptr NULL", (handle_ptr != NULL));
  if ((PWM_CCU4_STATE_INITIALIZED == handle_ptr->state) || (PWM_CCU4_STATE_STOPPED == handle_ptr->state))
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	7f1b      	ldrb	r3, [r3, #28]
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	d003      	beq.n	80099b4 <PWM_CCU4_Start+0x1c>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	7f1b      	ldrb	r3, [r3, #28]
 80099b0:	2b03      	cmp	r3, #3
 80099b2:	d117      	bne.n	80099e4 <PWM_CCU4_Start+0x4c>
  {
    /* clear IDLE mode for the slice; Start timer */
    XMC_CCU4_EnableClock(handle_ptr->ccu4_module_ptr, handle_ptr->slice_number);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	685a      	ldr	r2, [r3, #4]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	7b5b      	ldrb	r3, [r3, #13]
 80099bc:	4610      	mov	r0, r2
 80099be:	4619      	mov	r1, r3
 80099c0:	f7ff fd4e 	bl	8009460 <XMC_CCU4_EnableClock>

    if (XMC_CCU4_SLICE_EVENT_NONE == handle_ptr->config_ptr->ext_start_event)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d104      	bne.n	80099da <PWM_CCU4_Start+0x42>
    {
      XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	689b      	ldr	r3, [r3, #8]
 80099d4:	4618      	mov	r0, r3
 80099d6:	f7ff fd67 	bl	80094a8 <XMC_CCU4_SLICE_StartTimer>
    }

    handle_ptr->state = PWM_CCU4_STATE_RUNNING;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2202      	movs	r2, #2
 80099de:	771a      	strb	r2, [r3, #28]
    status = PWM_CCU4_STATUS_SUCCESS;
 80099e0:	2300      	movs	r3, #0
 80099e2:	73fb      	strb	r3, [r7, #15]
    XMC_DEBUG("PWM_CCU4_Start:start PWM");
  }
  return (status);
 80099e4:	7bfb      	ldrb	r3, [r7, #15]
} /* end of PWM_CCU4_Start() api */
 80099e6:	4618      	mov	r0, r3
 80099e8:	3710      	adds	r7, #16
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop

080099f0 <PWM_CCU4_SetDutyCycle>:

/**********************************************************************************************************/

/*Sets the duty cycle (uint32_t) for CCU4_CC4 slice. */
PWM_CCU4_STATUS_t PWM_CCU4_SetDutyCycle(PWM_CCU4_t* handle_ptr, uint32_t duty_cycle)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b086      	sub	sp, #24
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
  PWM_CCU4_STATUS_t status;
  uint32_t period;
  uint32_t compare;

  status = PWM_CCU4_STATUS_FAILURE;
 80099fa:	2301      	movs	r3, #1
 80099fc:	75fb      	strb	r3, [r7, #23]
  XMC_ASSERT("PWM_CCU4_SetDutyCycle:handle_ptr NULL", (handle_ptr != NULL));
  if (PWM_CCU4_STATE_UNINITIALIZED != handle_ptr->state)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	7f1b      	ldrb	r3, [r3, #28]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d02d      	beq.n	8009a62 <PWM_CCU4_SetDutyCycle+0x72>
  {
    /* duty cycle has to be in between 0 and 100 */
    if ((duty_cycle > PWM_CCU4_SYM_DUTY_MAX))
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	f242 7210 	movw	r2, #10000	; 0x2710
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d828      	bhi.n	8009a62 <PWM_CCU4_SetDutyCycle+0x72>
    {
      XMC_DEBUG("PWM_CCU4_SetDutyCycle:Cannot set duty cycle > 100%");
    }
    else
    {
      period = (uint32_t) XMC_CCU4_SLICE_GetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr) + 1U;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	689b      	ldr	r3, [r3, #8]
 8009a14:	4618      	mov	r0, r3
 8009a16:	f7ff fd61 	bl	80094dc <XMC_CCU4_SLICE_GetTimerPeriodMatch>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	3301      	adds	r3, #1
 8009a1e:	613b      	str	r3, [r7, #16]

      /* Duty Cycle(symmetric) = (PR-CR1)+1 / period */
      compare = ((period * (PWM_CCU4_DUTY_FULL_SCALE - duty_cycle)) / PWM_CCU4_DUTY_FULL_SCALE);
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8009a26:	3310      	adds	r3, #16
 8009a28:	693a      	ldr	r2, [r7, #16]
 8009a2a:	fb02 f303 	mul.w	r3, r2, r3
 8009a2e:	4a0f      	ldr	r2, [pc, #60]	; (8009a6c <PWM_CCU4_SetDutyCycle+0x7c>)
 8009a30:	fba2 2303 	umull	r2, r3, r2, r3
 8009a34:	0b5b      	lsrs	r3, r3, #13
 8009a36:	60fb      	str	r3, [r7, #12]

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t) compare);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	689a      	ldr	r2, [r3, #8]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	b29b      	uxth	r3, r3
 8009a40:	4610      	mov	r0, r2
 8009a42:	4619      	mov	r1, r3
 8009a44:	f7ff fd58 	bl	80094f8 <XMC_CCU4_SLICE_SetTimerCompareMatch>
      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_module_ptr, handle_ptr->shadow_txfr_msk);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	685a      	ldr	r2, [r3, #4]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	691b      	ldr	r3, [r3, #16]
 8009a50:	4610      	mov	r0, r2
 8009a52:	4619      	mov	r1, r3
 8009a54:	f7ff fd5e 	bl	8009514 <XMC_CCU4_EnableShadowTransfer>

      handle_ptr->sym_duty = duty_cycle;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	683a      	ldr	r2, [r7, #0]
 8009a5c:	625a      	str	r2, [r3, #36]	; 0x24

      XMC_DEBUG("PWM_CCU4_SetDutyCycle:dutycycle set");
      status = PWM_CCU4_STATUS_SUCCESS;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	75fb      	strb	r3, [r7, #23]
    }
  }
  return (status);
 8009a62:	7dfb      	ldrb	r3, [r7, #23]
} /* end of PWM_CCU4_SetDutyCycle() api */
 8009a64:	4618      	mov	r0, r3
 8009a66:	3718      	adds	r7, #24
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}
 8009a6c:	d1b71759 	.word	0xd1b71759

08009a70 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8009a70:	b480      	push	{r7}
 8009a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009a74:	4b04      	ldr	r3, [pc, #16]	; (8009a88 <NVIC_GetPriorityGrouping+0x18>)
 8009a76:	68db      	ldr	r3, [r3, #12]
 8009a78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009a7c:	0a1b      	lsrs	r3, r3, #8
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr
 8009a88:	e000ed00 	.word	0xe000ed00

08009a8c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b083      	sub	sp, #12
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	4603      	mov	r3, r0
 8009a94:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8009a96:	4908      	ldr	r1, [pc, #32]	; (8009ab8 <NVIC_EnableIRQ+0x2c>)
 8009a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a9c:	095b      	lsrs	r3, r3, #5
 8009a9e:	79fa      	ldrb	r2, [r7, #7]
 8009aa0:	f002 021f 	and.w	r2, r2, #31
 8009aa4:	2001      	movs	r0, #1
 8009aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8009aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009aae:	370c      	adds	r7, #12
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr
 8009ab8:	e000e100 	.word	0xe000e100

08009abc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b083      	sub	sp, #12
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	6039      	str	r1, [r7, #0]
 8009ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8009ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	da0b      	bge.n	8009ae8 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ad0:	490d      	ldr	r1, [pc, #52]	; (8009b08 <NVIC_SetPriority+0x4c>)
 8009ad2:	79fb      	ldrb	r3, [r7, #7]
 8009ad4:	f003 030f 	and.w	r3, r3, #15
 8009ad8:	3b04      	subs	r3, #4
 8009ada:	683a      	ldr	r2, [r7, #0]
 8009adc:	b2d2      	uxtb	r2, r2
 8009ade:	0092      	lsls	r2, r2, #2
 8009ae0:	b2d2      	uxtb	r2, r2
 8009ae2:	440b      	add	r3, r1
 8009ae4:	761a      	strb	r2, [r3, #24]
 8009ae6:	e009      	b.n	8009afc <NVIC_SetPriority+0x40>
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ae8:	4908      	ldr	r1, [pc, #32]	; (8009b0c <NVIC_SetPriority+0x50>)
 8009aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009aee:	683a      	ldr	r2, [r7, #0]
 8009af0:	b2d2      	uxtb	r2, r2
 8009af2:	0092      	lsls	r2, r2, #2
 8009af4:	b2d2      	uxtb	r2, r2
 8009af6:	440b      	add	r3, r1
 8009af8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 8009afc:	370c      	adds	r7, #12
 8009afe:	46bd      	mov	sp, r7
 8009b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b04:	4770      	bx	lr
 8009b06:	bf00      	nop
 8009b08:	e000ed00 	.word	0xe000ed00
 8009b0c:	e000e100 	.word	0xe000e100

08009b10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009b10:	b480      	push	{r7}
 8009b12:	b089      	sub	sp, #36	; 0x24
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	60f8      	str	r0, [r7, #12]
 8009b18:	60b9      	str	r1, [r7, #8]
 8009b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f003 0307 	and.w	r3, r3, #7
 8009b22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009b24:	69fb      	ldr	r3, [r7, #28]
 8009b26:	f1c3 0307 	rsb	r3, r3, #7
 8009b2a:	2b06      	cmp	r3, #6
 8009b2c:	bf28      	it	cs
 8009b2e:	2306      	movcs	r3, #6
 8009b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009b32:	69fb      	ldr	r3, [r7, #28]
 8009b34:	3306      	adds	r3, #6
 8009b36:	2b06      	cmp	r3, #6
 8009b38:	d902      	bls.n	8009b40 <NVIC_EncodePriority+0x30>
 8009b3a:	69fb      	ldr	r3, [r7, #28]
 8009b3c:	3b01      	subs	r3, #1
 8009b3e:	e000      	b.n	8009b42 <NVIC_EncodePriority+0x32>
 8009b40:	2300      	movs	r3, #0
 8009b42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009b44:	69bb      	ldr	r3, [r7, #24]
 8009b46:	2201      	movs	r2, #1
 8009b48:	fa02 f303 	lsl.w	r3, r2, r3
 8009b4c:	1e5a      	subs	r2, r3, #1
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	401a      	ands	r2, r3
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	2101      	movs	r1, #1
 8009b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8009b5e:	1e59      	subs	r1, r3, #1
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8009b64:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3724      	adds	r7, #36	; 0x24
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr
 8009b72:	bf00      	nop

08009b74 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b082      	sub	sp, #8
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	781b      	ldrb	r3, [r3, #0]
 8009b80:	b25b      	sxtb	r3, r3
 8009b82:	4618      	mov	r0, r3
 8009b84:	f7ff ff82 	bl	8009a8c <NVIC_EnableIRQ>
}
 8009b88:	3708      	adds	r7, #8
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
 8009b8e:	bf00      	nop

08009b90 <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 8009b90:	b590      	push	{r4, r7, lr}
 8009b92:	b083      	sub	sp, #12
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	781c      	ldrb	r4, [r3, #0]
 8009b9c:	f7ff ff68 	bl	8009a70 <NVIC_GetPriorityGrouping>
 8009ba0:	4601      	mov	r1, r0
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	785b      	ldrb	r3, [r3, #1]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8009ba6:	461a      	mov	r2, r3
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	789b      	ldrb	r3, [r3, #2]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8009bac:	4608      	mov	r0, r1
 8009bae:	4611      	mov	r1, r2
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	f7ff ffad 	bl	8009b10 <NVIC_EncodePriority>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	b263      	sxtb	r3, r4
 8009bba:	4618      	mov	r0, r3
 8009bbc:	4611      	mov	r1, r2
 8009bbe:	f7ff ff7d 	bl	8009abc <NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	78db      	ldrb	r3, [r3, #3]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d002      	beq.n	8009bd0 <INTERRUPT_Init+0x40>
  {
    INTERRUPT_Enable(handler);
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f7ff ffd2 	bl	8009b74 <INTERRUPT_Enable>
  {
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
 8009bd0:	2300      	movs	r3, #0
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	370c      	adds	r7, #12
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd90      	pop	{r4, r7, pc}
 8009bda:	bf00      	nop

08009bdc <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b083      	sub	sp, #12
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	68db      	ldr	r3, [r3, #12]
 8009be8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	60da      	str	r2, [r3, #12]
}
 8009bf0:	370c      	adds	r7, #12
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf8:	4770      	bx	lr
 8009bfa:	bf00      	nop

08009bfc <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b082      	sub	sp, #8
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	7b5b      	ldrb	r3, [r3, #13]
 8009c08:	f083 0301 	eor.w	r3, r3, #1
 8009c0c:	b2db      	uxtb	r3, r3
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d00f      	beq.n	8009c32 <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	689a      	ldr	r2, [r3, #8]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	7b1b      	ldrb	r3, [r3, #12]
 8009c1a:	4610      	mov	r0, r2
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	f7fa fb21 	bl	8004264 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	689b      	ldr	r3, [r3, #8]
 8009c26:	4618      	mov	r0, r3
 8009c28:	f7ff ffd8 	bl	8009bdc <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2201      	movs	r2, #1
 8009c30:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 8009c32:	2300      	movs	r3, #0
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3708      	adds	r7, #8
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}

08009c3c <XMC_VADC_GLOBAL_DisablePostCalibration>:
 * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
 * None
 */

__STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uint32_t group_number)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b083      	sub	sp, #12
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_number));
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	3310      	adds	r3, #16
 8009c50:	4619      	mov	r1, r3
 8009c52:	2301      	movs	r3, #1
 8009c54:	408b      	lsls	r3, r1
 8009c56:	431a      	orrs	r2, r3
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8009c5e:	370c      	adds	r7, #12
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr

08009c68 <GLOBAL_ADC_Init>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * This function initializes all instances of the ADC Global APP and low level app.
 */
GLOBAL_ADC_STATUS_t GLOBAL_ADC_Init(GLOBAL_ADC_t *const handle_ptr)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b084      	sub	sp, #16
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL))
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  uint32_t group_index;
#endif

  if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	7e1b      	ldrb	r3, [r3, #24]
 8009c74:	2b02      	cmp	r3, #2
 8009c76:	d149      	bne.n	8009d0c <GLOBAL_ADC_Init+0xa4>
  {  
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	695a      	ldr	r2, [r3, #20]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	691b      	ldr	r3, [r3, #16]
 8009c80:	4610      	mov	r0, r2
 8009c82:	4619      	mov	r1, r3
 8009c84:	f7fd f868 	bl	8006d58 <XMC_VADC_GLOBAL_Init>

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 8009c88:	2300      	movs	r3, #0
 8009c8a:	60fb      	str	r3, [r7, #12]
 8009c8c:	e02f      	b.n	8009cee <GLOBAL_ADC_Init+0x86>
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	68fa      	ldr	r2, [r7, #12]
 8009c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c96:	6819      	ldr	r1, [r3, #0]
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	68fa      	ldr	r2, [r7, #12]
 8009c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	4608      	mov	r0, r1
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	f7fd f8f9 	bl	8006e9c <XMC_VADC_GROUP_Init>
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);

      /* Switch on the converter of the Group[group_index]*/
      XMC_VADC_GROUP_SetPowerMode(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	68fa      	ldr	r2, [r7, #12]
 8009cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	2103      	movs	r1, #3
 8009cb8:	f7fd f980 	bl	8006fbc <XMC_VADC_GROUP_SetPowerMode>
                                  XMC_VADC_GROUP_POWERMODE_NORMAL);

      /* Disable the post calibration option for the respective group*/
      if ((bool)false == handle_ptr->group_ptrs_array[group_index]->post_calibration)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	68fa      	ldr	r2, [r7, #12]
 8009cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cc4:	7a1b      	ldrb	r3, [r3, #8]
 8009cc6:	f083 0301 	eor.w	r3, r3, #1
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d005      	beq.n	8009cdc <GLOBAL_ADC_Init+0x74>
      {
        XMC_VADC_GLOBAL_DisablePostCalibration(handle_ptr->module_ptr,group_index);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	695b      	ldr	r3, [r3, #20]
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	68f9      	ldr	r1, [r7, #12]
 8009cd8:	f7ff ffb0 	bl	8009c3c <XMC_VADC_GLOBAL_DisablePostCalibration>

#if(XMC_VADC_SHS_AVAILABLE == 1U)
      XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t)group_index);
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	68fa      	ldr	r2, [r7, #12]
 8009ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	725a      	strb	r2, [r3, #9]
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	3301      	adds	r3, #1
 8009cec:	60fb      	str	r3, [r7, #12]
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2b03      	cmp	r3, #3
 8009cf2:	d9cc      	bls.n	8009c8e <GLOBAL_ADC_Init+0x26>
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
    }
#endif /* _XMC_VADC_GROUP_AVAILABLE_ */
    if((bool)true == handle_ptr->enable_startup_calibration)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	7e5b      	ldrb	r3, [r3, #25]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d004      	beq.n	8009d06 <GLOBAL_ADC_Init+0x9e>
    {
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	695b      	ldr	r3, [r3, #20]
 8009d00:	4618      	mov	r0, r3
 8009d02:	f7fd f877 	bl	8006df4 <XMC_VADC_GLOBAL_StartupCalibration>
    }
    handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	7e1b      	ldrb	r3, [r3, #24]
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3710      	adds	r7, #16
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <EVENT_GENERATOR_Init>:

/*
 * This function Initializes a EVENT_GENERATOR APP instances based on user configuration.
 */
EVENT_GENERATOR_STATUS_t EVENT_GENERATOR_Init(EVENT_GENERATOR_t *const handle)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b082      	sub	sp, #8
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  /* Checking for null handle */
  XMC_ASSERT("EVENT_GENERATOR_Init:handle NULL" , (handle != NULL));
  
  /* Checking for initialization state of the instance */
  if (false == handle->init_status)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	7b5b      	ldrb	r3, [r3, #13]
 8009d24:	f083 0301 	eor.w	r3, r3, #1
 8009d28:	b2db      	uxtb	r3, r3
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d012      	beq.n	8009d54 <EVENT_GENERATOR_Init+0x3c>
  {
    /* Hardware initialization based on UI */
    XMC_ERU_OGU_Init(handle->eru, handle->channel, handle->config);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6819      	ldr	r1, [r3, #0]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	7b1a      	ldrb	r2, [r3, #12]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	4608      	mov	r0, r1
 8009d3c:	4611      	mov	r1, r2
 8009d3e:	461a      	mov	r2, r3
 8009d40:	f7fa fd9e 	bl	8004880 <XMC_ERU_OGU_Init>
    #if (EVENT_GENERATOR_NMI_SUPPORTED == 1U)
    /* Promote the eru event as NMI, Applicable only for XMC4000 devices */
    XMC_SCU_INTERRUPT_EnableNmiRequest(handle->nmi_eru_msk);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	689b      	ldr	r3, [r3, #8]
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f7f9 fe97 	bl	8003a7c <XMC_SCU_INTERRUPT_EnableNmiRequest>
    #endif
    /* Update the init status of the instance */
    handle->init_status = true;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2201      	movs	r2, #1
 8009d52:	735a      	strb	r2, [r3, #13]
  }
  
  return EVENT_GENERATOR_STATUS_SUCCESS;
 8009d54:	2300      	movs	r3, #0
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3708      	adds	r7, #8
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
 8009d5e:	bf00      	nop

08009d60 <EVENT_DETECTOR_Init>:

/*
 * This function Initializes a EVENT_DETECTOR APP instances (ERSx+ETLx) based on user configuration.
 */
EVENT_DETECTOR_STATUS_t EVENT_DETECTOR_Init(EVENT_DETECTOR_t *const handle)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b082      	sub	sp, #8
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  /* Checking for null handle */
  XMC_ASSERT("EVENT_DETECTOR_Init:handle NULL" , (handle != NULL));

  /* Checking for initialization state of the instance */
  if (false == handle->init_status)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	7b1b      	ldrb	r3, [r3, #12]
 8009d6c:	f083 0301 	eor.w	r3, r3, #1
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d00d      	beq.n	8009d92 <EVENT_DETECTOR_Init+0x32>
  {
    /* Hardware initialization based on UI */
    XMC_ERU_ETL_Init(handle->eru, handle->channel, handle->config);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6819      	ldr	r1, [r3, #0]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	791a      	ldrb	r2, [r3, #4]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	689b      	ldr	r3, [r3, #8]
 8009d82:	4608      	mov	r0, r1
 8009d84:	4611      	mov	r1, r2
 8009d86:	461a      	mov	r2, r3
 8009d88:	f7fa fd54 	bl	8004834 <XMC_ERU_ETL_Init>
    /* Update the init status of the instance */
    handle->init_status = true;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2201      	movs	r2, #1
 8009d90:	731a      	strb	r2, [r3, #12]
  }
  
  return EVENT_DETECTOR_STATUS_SUCCESS;
 8009d92:	2300      	movs	r3, #0
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3708      	adds	r7, #8
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b082      	sub	sp, #8
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6819      	ldr	r1, [r3, #0]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	7c1a      	ldrb	r2, [r3, #16]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	3304      	adds	r3, #4
 8009db0:	4608      	mov	r0, r1
 8009db2:	4611      	mov	r1, r2
 8009db4:	461a      	mov	r2, r3
 8009db6:	f7f9 fd35 	bl	8003824 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6819      	ldr	r1, [r3, #0]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	7c1a      	ldrb	r2, [r3, #16]
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	7c5b      	ldrb	r3, [r3, #17]
 8009dc6:	4608      	mov	r0, r1
 8009dc8:	4611      	mov	r1, r2
 8009dca:	461a      	mov	r2, r3
 8009dcc:	f7fa fd6c 	bl	80048a8 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 8009dd0:	2300      	movs	r3, #0
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3708      	adds	r7, #8
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	bf00      	nop

08009ddc <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b085      	sub	sp, #20
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f003 0307 	and.w	r3, r3, #7
 8009dea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009dec:	4b0c      	ldr	r3, [pc, #48]	; (8009e20 <NVIC_SetPriorityGrouping+0x44>)
 8009dee:	68db      	ldr	r3, [r3, #12]
 8009df0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009df2:	68ba      	ldr	r2, [r7, #8]
 8009df4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009df8:	4013      	ands	r3, r2
 8009dfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8009e04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e0c:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8009e0e:	4a04      	ldr	r2, [pc, #16]	; (8009e20 <NVIC_SetPriorityGrouping+0x44>)
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	60d3      	str	r3, [r2, #12]
}
 8009e14:	3714      	adds	r7, #20
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr
 8009e1e:	bf00      	nop
 8009e20:	e000ed00 	.word	0xe000ed00

08009e24 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b082      	sub	sp, #8
 8009e28:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 8009e2a:	2001      	movs	r0, #1
 8009e2c:	f7ff ffd6 	bl	8009ddc <NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009e30:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 8009e32:	4b21      	ldr	r3, [pc, #132]	; (8009eb8 <SystemCoreSetup+0x94>)
 8009e34:	4a21      	ldr	r2, [pc, #132]	; (8009ebc <SystemCoreSetup+0x98>)
 8009e36:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009e38:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8009e3c:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8009e3e:	4a1e      	ldr	r2, [pc, #120]	; (8009eb8 <SystemCoreSetup+0x94>)
 8009e40:	4b1d      	ldr	r3, [pc, #116]	; (8009eb8 <SystemCoreSetup+0x94>)
 8009e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e46:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009e4a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8009e4e:	4b1c      	ldr	r3, [pc, #112]	; (8009ec0 <SystemCoreSetup+0x9c>)
 8009e50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e54:	3314      	adds	r3, #20
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f023 030f 	bic.w	r3, r3, #15
 8009e60:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f043 0303 	orr.w	r3, r3, #3
 8009e68:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8009e6a:	4b15      	ldr	r3, [pc, #84]	; (8009ec0 <SystemCoreSetup+0x9c>)
 8009e6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e70:	3314      	adds	r3, #20
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 8009e76:	4a10      	ldr	r2, [pc, #64]	; (8009eb8 <SystemCoreSetup+0x94>)
 8009e78:	4b0f      	ldr	r3, [pc, #60]	; (8009eb8 <SystemCoreSetup+0x94>)
 8009e7a:	695b      	ldr	r3, [r3, #20]
 8009e7c:	f023 0310 	bic.w	r3, r3, #16
 8009e80:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 8009e82:	4a0d      	ldr	r2, [pc, #52]	; (8009eb8 <SystemCoreSetup+0x94>)
 8009e84:	4b0c      	ldr	r3, [pc, #48]	; (8009eb8 <SystemCoreSetup+0x94>)
 8009e86:	695b      	ldr	r3, [r3, #20]
 8009e88:	f023 0308 	bic.w	r3, r3, #8
 8009e8c:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8009e8e:	4a0a      	ldr	r2, [pc, #40]	; (8009eb8 <SystemCoreSetup+0x94>)
 8009e90:	4b09      	ldr	r3, [pc, #36]	; (8009eb8 <SystemCoreSetup+0x94>)
 8009e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e98:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 8009e9a:	4a07      	ldr	r2, [pc, #28]	; (8009eb8 <SystemCoreSetup+0x94>)
 8009e9c:	4b06      	ldr	r3, [pc, #24]	; (8009eb8 <SystemCoreSetup+0x94>)
 8009e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009ea4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8009ea6:	4a04      	ldr	r2, [pc, #16]	; (8009eb8 <SystemCoreSetup+0x94>)
 8009ea8:	4b03      	ldr	r3, [pc, #12]	; (8009eb8 <SystemCoreSetup+0x94>)
 8009eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009eb0:	6253      	str	r3, [r2, #36]	; 0x24
}
 8009eb2:	3708      	adds	r7, #8
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}
 8009eb8:	e000ed00 	.word	0xe000ed00
 8009ebc:	08000000 	.word	0x08000000
 8009ec0:	58001000 	.word	0x58001000

08009ec4 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b085      	sub	sp, #20
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	701a      	strb	r2, [r3, #0]

  return (status);
 8009ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3714      	adds	r7, #20
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr

08009ee4 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8009ee8:	4b02      	ldr	r3, [pc, #8]	; (8009ef4 <OSCHP_GetFrequency+0x10>)
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr
 8009ef4:	00b71b00 	.word	0x00b71b00

08009ef8 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 8009ef8:	b5b0      	push	{r4, r5, r7, lr}
 8009efa:	b086      	sub	sp, #24
 8009efc:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8009efe:	4b12      	ldr	r3, [pc, #72]	; (8009f48 <SystemCoreClockSetup+0x50>)
 8009f00:	1d3c      	adds	r4, r7, #4
 8009f02:	461d      	mov	r5, r3
 8009f04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f08:	682b      	ldr	r3, [r5, #0]
 8009f0a:	6023      	str	r3, [r4, #0]
    .fccu_clkdiv = 1U,
#endif
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8009f0c:	1d3b      	adds	r3, r7, #4
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f7f9 fd56 	bl	80039c0 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8009f14:	2000      	movs	r0, #0
 8009f16:	f7f9 fe67 	bl	8003be8 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 8009f1a:	2000      	movs	r0, #0
 8009f1c:	f7f9 fe1c 	bl	8003b58 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 8009f20:	2004      	movs	r0, #4
 8009f22:	f7f9 feed 	bl	8003d00 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 8009f26:	2001      	movs	r0, #1
 8009f28:	2120      	movs	r1, #32
 8009f2a:	f7f9 ff35 	bl	8003d98 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 8009f2e:	2000      	movs	r0, #0
 8009f30:	f7f9 fe26 	bl	8003b80 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8009f34:	2001      	movs	r0, #1
 8009f36:	f7f9 ff0b 	bl	8003d50 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 8009f3a:	2001      	movs	r0, #1
 8009f3c:	f7f9 fef4 	bl	8003d28 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 8009f40:	3718      	adds	r7, #24
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bdb0      	pop	{r4, r5, r7, pc}
 8009f46:	bf00      	nop
 8009f48:	0800e150 	.word	0x0800e150

08009f4c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009f50:	4b04      	ldr	r3, [pc, #16]	; (8009f64 <NVIC_GetPriorityGrouping+0x18>)
 8009f52:	68db      	ldr	r3, [r3, #12]
 8009f54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009f58:	0a1b      	lsrs	r3, r3, #8
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f62:	4770      	bx	lr
 8009f64:	e000ed00 	.word	0xe000ed00

08009f68 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b083      	sub	sp, #12
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	4603      	mov	r3, r0
 8009f70:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8009f72:	4908      	ldr	r1, [pc, #32]	; (8009f94 <NVIC_EnableIRQ+0x2c>)
 8009f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f78:	095b      	lsrs	r3, r3, #5
 8009f7a:	79fa      	ldrb	r2, [r7, #7]
 8009f7c:	f002 021f 	and.w	r2, r2, #31
 8009f80:	2001      	movs	r0, #1
 8009f82:	fa00 f202 	lsl.w	r2, r0, r2
 8009f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009f8a:	370c      	adds	r7, #12
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr
 8009f94:	e000e100 	.word	0xe000e100

08009f98 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b083      	sub	sp, #12
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	6039      	str	r1, [r7, #0]
 8009fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8009fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	da0b      	bge.n	8009fc4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009fac:	490d      	ldr	r1, [pc, #52]	; (8009fe4 <NVIC_SetPriority+0x4c>)
 8009fae:	79fb      	ldrb	r3, [r7, #7]
 8009fb0:	f003 030f 	and.w	r3, r3, #15
 8009fb4:	3b04      	subs	r3, #4
 8009fb6:	683a      	ldr	r2, [r7, #0]
 8009fb8:	b2d2      	uxtb	r2, r2
 8009fba:	0092      	lsls	r2, r2, #2
 8009fbc:	b2d2      	uxtb	r2, r2
 8009fbe:	440b      	add	r3, r1
 8009fc0:	761a      	strb	r2, [r3, #24]
 8009fc2:	e009      	b.n	8009fd8 <NVIC_SetPriority+0x40>
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009fc4:	4908      	ldr	r1, [pc, #32]	; (8009fe8 <NVIC_SetPriority+0x50>)
 8009fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fca:	683a      	ldr	r2, [r7, #0]
 8009fcc:	b2d2      	uxtb	r2, r2
 8009fce:	0092      	lsls	r2, r2, #2
 8009fd0:	b2d2      	uxtb	r2, r2
 8009fd2:	440b      	add	r3, r1
 8009fd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 8009fd8:	370c      	adds	r7, #12
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe0:	4770      	bx	lr
 8009fe2:	bf00      	nop
 8009fe4:	e000ed00 	.word	0xe000ed00
 8009fe8:	e000e100 	.word	0xe000e100

08009fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b089      	sub	sp, #36	; 0x24
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	60f8      	str	r0, [r7, #12]
 8009ff4:	60b9      	str	r1, [r7, #8]
 8009ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f003 0307 	and.w	r3, r3, #7
 8009ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a000:	69fb      	ldr	r3, [r7, #28]
 800a002:	f1c3 0307 	rsb	r3, r3, #7
 800a006:	2b06      	cmp	r3, #6
 800a008:	bf28      	it	cs
 800a00a:	2306      	movcs	r3, #6
 800a00c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a00e:	69fb      	ldr	r3, [r7, #28]
 800a010:	3306      	adds	r3, #6
 800a012:	2b06      	cmp	r3, #6
 800a014:	d902      	bls.n	800a01c <NVIC_EncodePriority+0x30>
 800a016:	69fb      	ldr	r3, [r7, #28]
 800a018:	3b01      	subs	r3, #1
 800a01a:	e000      	b.n	800a01e <NVIC_EncodePriority+0x32>
 800a01c:	2300      	movs	r3, #0
 800a01e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a020:	69bb      	ldr	r3, [r7, #24]
 800a022:	2201      	movs	r2, #1
 800a024:	fa02 f303 	lsl.w	r3, r2, r3
 800a028:	1e5a      	subs	r2, r3, #1
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	401a      	ands	r2, r3
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	2101      	movs	r1, #1
 800a036:	fa01 f303 	lsl.w	r3, r1, r3
 800a03a:	1e59      	subs	r1, r3, #1
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 800a040:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 800a042:	4618      	mov	r0, r3
 800a044:	3724      	adds	r7, #36	; 0x24
 800a046:	46bd      	mov	sp, r7
 800a048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04c:	4770      	bx	lr
 800a04e:	bf00      	nop

0800a050 <XMC_VADC_GLOBAL_BackgroundTriggerConversion>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_ptr)
{
 800a050:	b480      	push	{r7}
 800a052:	b083      	sub	sp, #12
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VADC))
  global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a05e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 800a068:	370c      	adds	r7, #12
 800a06a:	46bd      	mov	sp, r7
 800a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a070:	4770      	bx	lr
 800a072:	bf00      	nop

0800a074 <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>:
 *  XMC_VADC_GLOBAL_BackgroundAddMultipleChannels()<BR>
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(XMC_VADC_GLOBAL_t *const global_ptr,
                                                                    const uint32_t grp_num,
                                                                    const uint32_t ch_num)
{
 800a074:	b480      	push	{r7}
 800a076:	b085      	sub	sp, #20
 800a078:	af00      	add	r7, sp, #0
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	60b9      	str	r1, [r7, #8]
 800a07e:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number",((grp_num) < XMC_VADC_MAXIMUM_NUM_GROUPS))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
             ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	68ba      	ldr	r2, [r7, #8]
 800a084:	3260      	adds	r2, #96	; 0x60
 800a086:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2101      	movs	r1, #1
 800a08e:	fa01 f303 	lsl.w	r3, r1, r3
 800a092:	ea42 0103 	orr.w	r1, r2, r3
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	68ba      	ldr	r2, [r7, #8]
 800a09a:	3260      	adds	r2, #96	; 0x60
 800a09c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800a0a0:	3714      	adds	r7, #20
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a8:	4770      	bx	lr
 800a0aa:	bf00      	nop

0800a0ac <XMC_VADC_GROUP_ResultInit>:
 * XMC_VADC_GROUP_AddResultToFifo()<BR> XMC_VADC_GROUP_EnableResultEvent()<br> XMC_VADC_GROUP_DisableResultEvent()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
                                               const uint32_t res_reg_num,
                                               const XMC_VADC_RESULT_CONFIG_t *config)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b085      	sub	sp, #20
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	60f8      	str	r0, [r7, #12]
 800a0b4:	60b9      	str	r1, [r7, #8]
 800a0b6:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->RCR[res_reg_num] = config->g_rcr;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6819      	ldr	r1, [r3, #0]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	68ba      	ldr	r2, [r7, #8]
 800a0c0:	32a0      	adds	r2, #160	; 0xa0
 800a0c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 800a0c6:	3714      	adds	r7, #20
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr

0800a0d0 <XMC_VADC_GROUP_GetResult>:
 * \par<b>Related APIs:</b><br>
 * XMC_VADC_GROUP_GetDetailedResult().
 */
__STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GROUP_GetResult(XMC_VADC_GROUP_t *const group_ptr, 
                                                                const uint32_t res_reg)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b083      	sub	sp, #12
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))

  return ((XMC_VADC_RESULT_SIZE_t)group_ptr->RES[res_reg]);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	683a      	ldr	r2, [r7, #0]
 800a0de:	32c0      	adds	r2, #192	; 0xc0
 800a0e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0e4:	b29b      	uxth	r3, r3
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	370c      	adds	r7, #12
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f0:	4770      	bx	lr
 800a0f2:	bf00      	nop

0800a0f4 <ADC_MEASUREMENT_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialization routine to call ADC LLD API's */
ADC_MEASUREMENT_STATUS_t ADC_MEASUREMENT_Init(ADC_MEASUREMENT_t *const handle_ptr)
{
 800a0f4:	b590      	push	{r4, r7, lr}
 800a0f6:	b085      	sub	sp, #20
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  uint8_t j;
  ADC_MEASUREMENT_STATUS_t status;

  XMC_ASSERT("ADC_MEASUREMENT_Init:Invalid handle_ptr", (handle_ptr != NULL))

  if (ADC_MEASUREMENT_STATUS_UNINITIALIZED == handle_ptr->init_state)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	7e1b      	ldrb	r3, [r3, #24]
 800a100:	2b02      	cmp	r3, #2
 800a102:	f040 8099 	bne.w	800a238 <ADC_MEASUREMENT_Init+0x144>
  {
    /* Call the function to initialise Clock and ADC global functional units*/
    status = (ADC_MEASUREMENT_STATUS_t) GLOBAL_ADC_Init(handle_ptr->global_handle);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	68db      	ldr	r3, [r3, #12]
 800a10a:	4618      	mov	r0, r3
 800a10c:	f7ff fdac 	bl	8009c68 <GLOBAL_ADC_Init>
 800a110:	4603      	mov	r3, r0
 800a112:	73bb      	strb	r3, [r7, #14]
  
    /*Initialize the Global Conversion class 0*/
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	68db      	ldr	r3, [r3, #12]
 800a118:	695a      	ldr	r2, [r3, #20]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	689b      	ldr	r3, [r3, #8]
 800a11e:	4610      	mov	r0, r2
 800a120:	6819      	ldr	r1, [r3, #0]
 800a122:	2200      	movs	r2, #0
 800a124:	2300      	movs	r3, #0
 800a126:	f7fc fe41 	bl	8006dac <XMC_VADC_GLOBAL_InputClassInit>
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
    		                              XMC_VADC_GROUP_CONV_STD,ADC_MEASUREMENT_ICLASS_NUM_XMC11);
#endif
  
    /* Initialize the Background Scan hardware */
    XMC_VADC_GLOBAL_BackgroundInit(handle_ptr->global_handle->module_ptr, handle_ptr->backgnd_config_handle);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	68db      	ldr	r3, [r3, #12]
 800a12e:	695a      	ldr	r2, [r3, #20]
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	4610      	mov	r0, r2
 800a136:	4619      	mov	r1, r3
 800a138:	f7fc ff5c 	bl	8006ff4 <XMC_VADC_GLOBAL_BackgroundInit>
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 800a13c:	2300      	movs	r3, #0
 800a13e:	73fb      	strb	r3, [r7, #15]
 800a140:	e02e      	b.n	800a1a0 <ADC_MEASUREMENT_Init+0xac>
    {
      indexed = handle_ptr->array->channel_array[j];
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	7bfa      	ldrb	r2, [r7, #15]
 800a148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a14c:	60bb      	str	r3, [r7, #8]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	689a      	ldr	r2, [r3, #8]
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	7b5b      	ldrb	r3, [r3, #13]
 800a156:	4619      	mov	r1, r3
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4610      	mov	r0, r2
 800a15e:	461a      	mov	r2, r3
 800a160:	f7fc ffc6 	bl	80070f0 <XMC_VADC_GROUP_ChannelInit>
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	689a      	ldr	r2, [r3, #8]
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	789b      	ldrb	r3, [r3, #2]
 800a16e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800a172:	b2db      	uxtb	r3, r3
 800a174:	4619      	mov	r1, r3
                                indexed->res_handle);
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	685b      	ldr	r3, [r3, #4]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 800a17a:	4610      	mov	r0, r2
 800a17c:	461a      	mov	r2, r3
 800a17e:	f7ff ff95 	bl	800a0ac <XMC_VADC_GROUP_ResultInit>
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	68db      	ldr	r3, [r3, #12]
 800a186:	695a      	ldr	r2, [r3, #20]
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	7b1b      	ldrb	r3, [r3, #12]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 800a18c:	4619      	mov	r1, r3
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	7b5b      	ldrb	r3, [r3, #13]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 800a192:	4610      	mov	r0, r2
 800a194:	461a      	mov	r2, r3
 800a196:	f7ff ff6d 	bl	800a074 <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 800a19a:	7bfb      	ldrb	r3, [r7, #15]
 800a19c:	3301      	adds	r3, #1
 800a19e:	73fb      	strb	r3, [r7, #15]
 800a1a0:	7bfb      	ldrb	r3, [r7, #15]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d0cd      	beq.n	800a142 <ADC_MEASUREMENT_Init+0x4e>
        status |= (ADC_MEASUREMENT_STATUS_t) ANALOG_IO_Init(indexed->analog_io_config);
      }
#endif
    }
#if(UC_SERIES != XMC11)
    if ((handle_ptr->backgnd_config_handle->req_src_interrupt) && (handle_ptr->req_src_intr_handle != NULL ))
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	7a1b      	ldrb	r3, [r3, #8]
 800a1ac:	f003 0308 	and.w	r3, r3, #8
 800a1b0:	b2db      	uxtb	r3, r3
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d02c      	beq.n	800a210 <ADC_MEASUREMENT_Init+0x11c>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	691b      	ldr	r3, [r3, #16]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d028      	beq.n	800a210 <ADC_MEASUREMENT_Init+0x11c>
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	691b      	ldr	r3, [r3, #16]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	b2dc      	uxtb	r4, r3
 800a1c6:	f7ff fec1 	bl	8009f4c <NVIC_GetPriorityGrouping>
 800a1ca:	4601      	mov	r1, r0
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	691b      	ldr	r3, [r3, #16]
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 800a1d0:	685a      	ldr	r2, [r3, #4]
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	691b      	ldr	r3, [r3, #16]
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 800a1d6:	689b      	ldr	r3, [r3, #8]
 800a1d8:	4608      	mov	r0, r1
 800a1da:	4611      	mov	r1, r2
 800a1dc:	461a      	mov	r2, r3
 800a1de:	f7ff ff05 	bl	8009fec <NVIC_EncodePriority>
 800a1e2:	4602      	mov	r2, r0
 800a1e4:	b263      	sxtb	r3, r4
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	4611      	mov	r1, r2
 800a1ea:	f7ff fed5 	bl	8009f98 <NVIC_SetPriority>
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
#endif
      /* Connect background Request Source Event to NVIC node */
      XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(handle_ptr->global_handle->module_ptr,
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	68db      	ldr	r3, [r3, #12]
 800a1f2:	695a      	ldr	r2, [r3, #20]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	7e5b      	ldrb	r3, [r3, #25]
 800a1f8:	4610      	mov	r0, r2
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	f7fc fe2a 	bl	8006e54 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>
    		                                         (XMC_VADC_SR_t) handle_ptr->srv_req_node);
    
      /* Enable Background Scan Request source IRQ */
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->req_src_intr_handle->node_id);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	691b      	ldr	r3, [r3, #16]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	b2db      	uxtb	r3, r3
 800a208:	b25b      	sxtb	r3, r3
 800a20a:	4618      	mov	r0, r3
 800a20c:	f7ff feac 	bl	8009f68 <NVIC_EnableIRQ>
    /* Enable Background Scan Request source IRQ */
    NVIC_EnableIRQ((IRQn_Type)handle_ptr->result_intr_handle->node_id);
#endif
#endif
    /* Mux Configuration is done*/
    if (handle_ptr->mux_config != NULL)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	695b      	ldr	r3, [r3, #20]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d002      	beq.n	800a21e <ADC_MEASUREMENT_Init+0x12a>
    {
    	(handle_ptr->mux_config)();
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	695b      	ldr	r3, [r3, #20]
 800a21c:	4798      	blx	r3
    }
  
    if (handle_ptr->start_conversion != (bool)false)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	7e9b      	ldrb	r3, [r3, #26]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d005      	beq.n	800a232 <ADC_MEASUREMENT_Init+0x13e>
    {
      /* Start conversion manually using load event trigger*/
      XMC_VADC_GLOBAL_BackgroundTriggerConversion(handle_ptr->global_handle->module_ptr);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	68db      	ldr	r3, [r3, #12]
 800a22a:	695b      	ldr	r3, [r3, #20]
 800a22c:	4618      	mov	r0, r3
 800a22e:	f7ff ff0f 	bl	800a050 <XMC_VADC_GLOBAL_BackgroundTriggerConversion>
    }
    handle_ptr->init_state = status;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	7bba      	ldrb	r2, [r7, #14]
 800a236:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	7e1b      	ldrb	r3, [r3, #24]
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3714      	adds	r7, #20
 800a240:	46bd      	mov	sp, r7
 800a242:	bd90      	pop	{r4, r7, pc}

0800a244 <ADC_MEASUREMENT_GetResult>:
}
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
#if(XMC_VADC_GROUP_AVAILABLE == 1U)
/* This API will get the result of a conversion for a specific channel*/
XMC_VADC_RESULT_SIZE_t ADC_MEASUREMENT_GetResult(ADC_MEASUREMENT_CHANNEL_t *const handle_ptr)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  XMC_VADC_RESULT_SIZE_t result;

  XMC_ASSERT("ADC_MEASUREMENT_GetResult:Invalid handle_ptr", (handle_ptr != NULL))

  result = XMC_VADC_GROUP_GetResult(handle_ptr->group_handle, handle_ptr->ch_handle->result_reg_number);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	689a      	ldr	r2, [r3, #8]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	789b      	ldrb	r3, [r3, #2]
 800a256:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800a25a:	b2db      	uxtb	r3, r3
 800a25c:	4610      	mov	r0, r2
 800a25e:	4619      	mov	r1, r3
 800a260:	f7ff ff36 	bl	800a0d0 <XMC_VADC_GROUP_GetResult>
 800a264:	4603      	mov	r3, r0
 800a266:	81fb      	strh	r3, [r7, #14]

  return (result);
 800a268:	89fb      	ldrh	r3, [r7, #14]
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3710      	adds	r7, #16
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
 800a272:	bf00      	nop

0800a274 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
DAVE_STATUS_t DAVE_Init(void)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b082      	sub	sp, #8
 800a278:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 800a27a:	2300      	movs	r3, #0
 800a27c:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 800a27e:	4871      	ldr	r0, [pc, #452]	; (800a444 <DAVE_Init+0x1d0>)
 800a280:	f7ff fe20 	bl	8009ec4 <CLOCK_XMC4_Init>
 800a284:	4603      	mov	r3, r0
 800a286:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 800a288:	79fb      	ldrb	r3, [r7, #7]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d104      	bne.n	800a298 <DAVE_Init+0x24>
  {
	 /**  Initialization of TIMER APP instance Util_Timer */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&Util_Timer); 
 800a28e:	486e      	ldr	r0, [pc, #440]	; (800a448 <DAVE_Init+0x1d4>)
 800a290:	f7fe fcd8 	bl	8008c44 <TIMER_Init>
 800a294:	4603      	mov	r3, r0
 800a296:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800a298:	79fb      	ldrb	r3, [r7, #7]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d104      	bne.n	800a2a8 <DAVE_Init+0x34>
  {
	 /**  Initialization of INTERRUPT APP instance Util_Timer_ISR_Handle */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&Util_Timer_ISR_Handle); 
 800a29e:	486b      	ldr	r0, [pc, #428]	; (800a44c <DAVE_Init+0x1d8>)
 800a2a0:	f7ff fc76 	bl	8009b90 <INTERRUPT_Init>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800a2a8:	79fb      	ldrb	r3, [r7, #7]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d104      	bne.n	800a2b8 <DAVE_Init+0x44>
  {
	 /**  Initialization of UART APP instance Bluetooth_Handle */
	 init_status = (DAVE_STATUS_t)UART_Init(&Bluetooth_Handle); 
 800a2ae:	4868      	ldr	r0, [pc, #416]	; (800a450 <DAVE_Init+0x1dc>)
 800a2b0:	f7fe fb80 	bl	80089b4 <UART_Init>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800a2b8:	79fb      	ldrb	r3, [r7, #7]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d104      	bne.n	800a2c8 <DAVE_Init+0x54>
  {
	 /**  Initialization of INTERRUPT APP instance Bluetooth_RX_ISR_Handle */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&Bluetooth_RX_ISR_Handle); 
 800a2be:	4865      	ldr	r0, [pc, #404]	; (800a454 <DAVE_Init+0x1e0>)
 800a2c0:	f7ff fc66 	bl	8009b90 <INTERRUPT_Init>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800a2c8:	79fb      	ldrb	r3, [r7, #7]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d104      	bne.n	800a2d8 <DAVE_Init+0x64>
  {
	 /**  Initialization of UART APP instance RemoteControl_Handle */
	 init_status = (DAVE_STATUS_t)UART_Init(&RemoteControl_Handle); 
 800a2ce:	4862      	ldr	r0, [pc, #392]	; (800a458 <DAVE_Init+0x1e4>)
 800a2d0:	f7fe fb70 	bl	80089b4 <UART_Init>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800a2d8:	79fb      	ldrb	r3, [r7, #7]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d104      	bne.n	800a2e8 <DAVE_Init+0x74>
  {
	 /**  Initialization of INTERRUPT APP instance RemoteControl_RX_ISR_Handle */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&RemoteControl_RX_ISR_Handle); 
 800a2de:	485f      	ldr	r0, [pc, #380]	; (800a45c <DAVE_Init+0x1e8>)
 800a2e0:	f7ff fc56 	bl	8009b90 <INTERRUPT_Init>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800a2e8:	79fb      	ldrb	r3, [r7, #7]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d104      	bne.n	800a2f8 <DAVE_Init+0x84>
  {
	 /**  Initialization of EVENT_DETECTOR APP instance DPS310_ERU_In */
	 init_status = (DAVE_STATUS_t)EVENT_DETECTOR_Init(&DPS310_ERU_In); 
 800a2ee:	485c      	ldr	r0, [pc, #368]	; (800a460 <DAVE_Init+0x1ec>)
 800a2f0:	f7ff fd36 	bl	8009d60 <EVENT_DETECTOR_Init>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800a2f8:	79fb      	ldrb	r3, [r7, #7]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d104      	bne.n	800a308 <DAVE_Init+0x94>
  {
	 /**  Initialization of EVENT_GENERATOR APP instance DPS310_ERU_Out */
	 init_status = (DAVE_STATUS_t)EVENT_GENERATOR_Init(&DPS310_ERU_Out); 
 800a2fe:	4859      	ldr	r0, [pc, #356]	; (800a464 <DAVE_Init+0x1f0>)
 800a300:	f7ff fd0a 	bl	8009d18 <EVENT_GENERATOR_Init>
 800a304:	4603      	mov	r3, r0
 800a306:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800a308:	79fb      	ldrb	r3, [r7, #7]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d104      	bne.n	800a318 <DAVE_Init+0xa4>
  {
	 /**  Initialization of INTERRUPT APP instance DPS310_Ext_Int_ISR_Handle */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&DPS310_Ext_Int_ISR_Handle); 
 800a30e:	4856      	ldr	r0, [pc, #344]	; (800a468 <DAVE_Init+0x1f4>)
 800a310:	f7ff fc3e 	bl	8009b90 <INTERRUPT_Init>
 800a314:	4603      	mov	r3, r0
 800a316:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800a318:	79fb      	ldrb	r3, [r7, #7]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d104      	bne.n	800a328 <DAVE_Init+0xb4>
  {
	 /**  Initialization of DIGITAL_IO APP instance DPS310_Ext_Int_Pin */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DPS310_Ext_Int_Pin); 
 800a31e:	4853      	ldr	r0, [pc, #332]	; (800a46c <DAVE_Init+0x1f8>)
 800a320:	f7ff fd3c 	bl	8009d9c <DIGITAL_IO_Init>
 800a324:	4603      	mov	r3, r0
 800a326:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800a328:	79fb      	ldrb	r3, [r7, #7]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d104      	bne.n	800a338 <DAVE_Init+0xc4>
  {
	 /**  Initialization of EVENT_DETECTOR APP instance MPU9X50_ERU_In */
	 init_status = (DAVE_STATUS_t)EVENT_DETECTOR_Init(&MPU9X50_ERU_In); 
 800a32e:	4850      	ldr	r0, [pc, #320]	; (800a470 <DAVE_Init+0x1fc>)
 800a330:	f7ff fd16 	bl	8009d60 <EVENT_DETECTOR_Init>
 800a334:	4603      	mov	r3, r0
 800a336:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800a338:	79fb      	ldrb	r3, [r7, #7]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d104      	bne.n	800a348 <DAVE_Init+0xd4>
  {
	 /**  Initialization of DIGITAL_IO APP instance MPU9X50_Ext_Int_Pin */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MPU9X50_Ext_Int_Pin); 
 800a33e:	484d      	ldr	r0, [pc, #308]	; (800a474 <DAVE_Init+0x200>)
 800a340:	f7ff fd2c 	bl	8009d9c <DIGITAL_IO_Init>
 800a344:	4603      	mov	r3, r0
 800a346:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800a348:	79fb      	ldrb	r3, [r7, #7]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d104      	bne.n	800a358 <DAVE_Init+0xe4>
  {
	 /**  Initialization of EVENT_GENERATOR APP instance MPU9X50_ERU_Out */
	 init_status = (DAVE_STATUS_t)EVENT_GENERATOR_Init(&MPU9X50_ERU_Out); 
 800a34e:	484a      	ldr	r0, [pc, #296]	; (800a478 <DAVE_Init+0x204>)
 800a350:	f7ff fce2 	bl	8009d18 <EVENT_GENERATOR_Init>
 800a354:	4603      	mov	r3, r0
 800a356:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800a358:	79fb      	ldrb	r3, [r7, #7]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d104      	bne.n	800a368 <DAVE_Init+0xf4>
  {
	 /**  Initialization of INTERRUPT APP instance MPU9X50_Ext_Int_ISR_Handle */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&MPU9X50_Ext_Int_ISR_Handle); 
 800a35e:	4847      	ldr	r0, [pc, #284]	; (800a47c <DAVE_Init+0x208>)
 800a360:	f7ff fc16 	bl	8009b90 <INTERRUPT_Init>
 800a364:	4603      	mov	r3, r0
 800a366:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800a368:	79fb      	ldrb	r3, [r7, #7]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d104      	bne.n	800a378 <DAVE_Init+0x104>
  {
	 /**  Initialization of ADC_MEASUREMENT APP instance VBat_Measurement_Handle */
	 init_status = (DAVE_STATUS_t)ADC_MEASUREMENT_Init(&VBat_Measurement_Handle); 
 800a36e:	4844      	ldr	r0, [pc, #272]	; (800a480 <DAVE_Init+0x20c>)
 800a370:	f7ff fec0 	bl	800a0f4 <ADC_MEASUREMENT_Init>
 800a374:	4603      	mov	r3, r0
 800a376:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800a378:	79fb      	ldrb	r3, [r7, #7]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d104      	bne.n	800a388 <DAVE_Init+0x114>
  {
	 /**  Initialization of TIMER APP instance Control_Timer */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&Control_Timer); 
 800a37e:	4841      	ldr	r0, [pc, #260]	; (800a484 <DAVE_Init+0x210>)
 800a380:	f7fe fc60 	bl	8008c44 <TIMER_Init>
 800a384:	4603      	mov	r3, r0
 800a386:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800a388:	79fb      	ldrb	r3, [r7, #7]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d104      	bne.n	800a398 <DAVE_Init+0x124>
  {
	 /**  Initialization of INTERRUPT APP instance Control_Timer_ISR_Handle */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&Control_Timer_ISR_Handle); 
 800a38e:	483e      	ldr	r0, [pc, #248]	; (800a488 <DAVE_Init+0x214>)
 800a390:	f7ff fbfe 	bl	8009b90 <INTERRUPT_Init>
 800a394:	4603      	mov	r3, r0
 800a396:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800a398:	79fb      	ldrb	r3, [r7, #7]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d104      	bne.n	800a3a8 <DAVE_Init+0x134>
  {
	 /**  Initialization of USBD_VCOM APP instance USBD_VCOM_0 */
	 init_status = (DAVE_STATUS_t)USBD_VCOM_Init(&USBD_VCOM_0); 
 800a39e:	483b      	ldr	r0, [pc, #236]	; (800a48c <DAVE_Init+0x218>)
 800a3a0:	f7fd f914 	bl	80075cc <USBD_VCOM_Init>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800a3a8:	79fb      	ldrb	r3, [r7, #7]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d104      	bne.n	800a3b8 <DAVE_Init+0x144>
  {
	 /**  Initialization of TIMER APP instance MagnetometerCal_Timer */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&MagnetometerCal_Timer); 
 800a3ae:	4838      	ldr	r0, [pc, #224]	; (800a490 <DAVE_Init+0x21c>)
 800a3b0:	f7fe fc48 	bl	8008c44 <TIMER_Init>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800a3b8:	79fb      	ldrb	r3, [r7, #7]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d104      	bne.n	800a3c8 <DAVE_Init+0x154>
  {
	 /**  Initialization of TIMER APP instance GeneralPurpose_Timer */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&GeneralPurpose_Timer); 
 800a3be:	4835      	ldr	r0, [pc, #212]	; (800a494 <DAVE_Init+0x220>)
 800a3c0:	f7fe fc40 	bl	8008c44 <TIMER_Init>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800a3c8:	79fb      	ldrb	r3, [r7, #7]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d104      	bne.n	800a3d8 <DAVE_Init+0x164>
  {
	 /**  Initialization of INTERRUPT APP instance MagnetometerCal_Timer_ISR_Handle */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&MagnetometerCal_Timer_ISR_Handle); 
 800a3ce:	4832      	ldr	r0, [pc, #200]	; (800a498 <DAVE_Init+0x224>)
 800a3d0:	f7ff fbde 	bl	8009b90 <INTERRUPT_Init>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800a3d8:	79fb      	ldrb	r3, [r7, #7]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d104      	bne.n	800a3e8 <DAVE_Init+0x174>
  {
	 /**  Initialization of INTERRUPT APP instance GeneralPurpose_Timer_ISR_Handle */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&GeneralPurpose_Timer_ISR_Handle); 
 800a3de:	482f      	ldr	r0, [pc, #188]	; (800a49c <DAVE_Init+0x228>)
 800a3e0:	f7ff fbd6 	bl	8009b90 <INTERRUPT_Init>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800a3e8:	79fb      	ldrb	r3, [r7, #7]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d104      	bne.n	800a3f8 <DAVE_Init+0x184>
  {
	 /**  Initialization of SYSTIMER APP instance RC_Watch_Timer */
	 init_status = (DAVE_STATUS_t)SYSTIMER_Init(&RC_Watch_Timer); 
 800a3ee:	482c      	ldr	r0, [pc, #176]	; (800a4a0 <DAVE_Init+0x22c>)
 800a3f0:	f7fe ff1e 	bl	8009230 <SYSTIMER_Init>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800a3f8:	79fb      	ldrb	r3, [r7, #7]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d104      	bne.n	800a408 <DAVE_Init+0x194>
  {
	 /**  Initialization of PWM_CCU4 APP instance PWM_OUTPUT_1 */
	 init_status = (DAVE_STATUS_t)PWM_CCU4_Init(&PWM_OUTPUT_1); 
 800a3fe:	4829      	ldr	r0, [pc, #164]	; (800a4a4 <DAVE_Init+0x230>)
 800a400:	f7ff f8ac 	bl	800955c <PWM_CCU4_Init>
 800a404:	4603      	mov	r3, r0
 800a406:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800a408:	79fb      	ldrb	r3, [r7, #7]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d104      	bne.n	800a418 <DAVE_Init+0x1a4>
  {
	 /**  Initialization of PWM_CCU4 APP instance PWM_OUTPUT_2 */
	 init_status = (DAVE_STATUS_t)PWM_CCU4_Init(&PWM_OUTPUT_2); 
 800a40e:	4826      	ldr	r0, [pc, #152]	; (800a4a8 <DAVE_Init+0x234>)
 800a410:	f7ff f8a4 	bl	800955c <PWM_CCU4_Init>
 800a414:	4603      	mov	r3, r0
 800a416:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800a418:	79fb      	ldrb	r3, [r7, #7]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d104      	bne.n	800a428 <DAVE_Init+0x1b4>
  {
	 /**  Initialization of PWM_CCU4 APP instance PWM_OUTPUT_3 */
	 init_status = (DAVE_STATUS_t)PWM_CCU4_Init(&PWM_OUTPUT_3); 
 800a41e:	4823      	ldr	r0, [pc, #140]	; (800a4ac <DAVE_Init+0x238>)
 800a420:	f7ff f89c 	bl	800955c <PWM_CCU4_Init>
 800a424:	4603      	mov	r3, r0
 800a426:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800a428:	79fb      	ldrb	r3, [r7, #7]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d104      	bne.n	800a438 <DAVE_Init+0x1c4>
  {
	 /**  Initialization of PWM_CCU4 APP instance PWM_OUTPUT_4 */
	 init_status = (DAVE_STATUS_t)PWM_CCU4_Init(&PWM_OUTPUT_4); 
 800a42e:	4820      	ldr	r0, [pc, #128]	; (800a4b0 <DAVE_Init+0x23c>)
 800a430:	f7ff f894 	bl	800955c <PWM_CCU4_Init>
 800a434:	4603      	mov	r3, r0
 800a436:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 800a438:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 800a43a:	4618      	mov	r0, r3
 800a43c:	3708      	adds	r7, #8
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}
 800a442:	bf00      	nop
 800a444:	2000054c 	.word	0x2000054c
 800a448:	200000d0 	.word	0x200000d0
 800a44c:	0800e088 	.word	0x0800e088
 800a450:	200000b0 	.word	0x200000b0
 800a454:	0800e08c 	.word	0x0800e08c
 800a458:	200000bc 	.word	0x200000bc
 800a45c:	0800e090 	.word	0x0800e090
 800a460:	200002c4 	.word	0x200002c4
 800a464:	200002a4 	.word	0x200002a4
 800a468:	0800e094 	.word	0x0800e094
 800a46c:	0800e128 	.word	0x0800e128
 800a470:	200002d4 	.word	0x200002d4
 800a474:	0800e13c 	.word	0x0800e13c
 800a478:	200002b4 	.word	0x200002b4
 800a47c:	0800e098 	.word	0x0800e098
 800a480:	20000304 	.word	0x20000304
 800a484:	20000100 	.word	0x20000100
 800a488:	0800e09c 	.word	0x0800e09c
 800a48c:	200004d8 	.word	0x200004d8
 800a490:	20000130 	.word	0x20000130
 800a494:	20000160 	.word	0x20000160
 800a498:	0800e0a0 	.word	0x0800e0a0
 800a49c:	0800e0a4 	.word	0x0800e0a4
 800a4a0:	20000548 	.word	0x20000548
 800a4a4:	20000188 	.word	0x20000188
 800a4a8:	200001b0 	.word	0x200001b0
 800a4ac:	200001d8 	.word	0x200001d8
 800a4b0:	20000200 	.word	0x20000200

0800a4b4 <main>:
 * <b>Details of function</b><br>
 * This routine is the application entry point. It is invoked by the device startup code. It is responsible for
 * invoking the APP initialization dispatcher routine - DAVE_Init() and the setup of the Quadrocopter hardware.
 */
int main(void)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	af00      	add	r7, sp, #0
	setup();
 800a4b8:	f7f8 fef6 	bl	80032a8 <setup>
	while(1U)
	{
	}
 800a4bc:	e7fe      	b.n	800a4bc <main+0x8>
 800a4be:	bf00      	nop

0800a4c0 <asinf>:
 800a4c0:	b570      	push	{r4, r5, r6, lr}
 800a4c2:	4d25      	ldr	r5, [pc, #148]	; (800a558 <asinf+0x98>)
 800a4c4:	b08a      	sub	sp, #40	; 0x28
 800a4c6:	4606      	mov	r6, r0
 800a4c8:	f000 fa3a 	bl	800a940 <__ieee754_asinf>
 800a4cc:	f995 3000 	ldrsb.w	r3, [r5]
 800a4d0:	3301      	adds	r3, #1
 800a4d2:	4604      	mov	r4, r0
 800a4d4:	d003      	beq.n	800a4de <asinf+0x1e>
 800a4d6:	4630      	mov	r0, r6
 800a4d8:	f001 f8d4 	bl	800b684 <__fpclassifyf>
 800a4dc:	b910      	cbnz	r0, 800a4e4 <asinf+0x24>
 800a4de:	4620      	mov	r0, r4
 800a4e0:	b00a      	add	sp, #40	; 0x28
 800a4e2:	bd70      	pop	{r4, r5, r6, pc}
 800a4e4:	4630      	mov	r0, r6
 800a4e6:	f001 f8c1 	bl	800b66c <fabsf>
 800a4ea:	ee07 0a10 	vmov	s14, r0
 800a4ee:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 800a4f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a4f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4fa:	ddf0      	ble.n	800a4de <asinf+0x1e>
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	4a17      	ldr	r2, [pc, #92]	; (800a55c <asinf+0x9c>)
 800a500:	9300      	str	r3, [sp, #0]
 800a502:	4630      	mov	r0, r6
 800a504:	2300      	movs	r3, #0
 800a506:	9201      	str	r2, [sp, #4]
 800a508:	9308      	str	r3, [sp, #32]
 800a50a:	f001 fac3 	bl	800ba94 <__aeabi_f2d>
 800a50e:	4602      	mov	r2, r0
 800a510:	460b      	mov	r3, r1
 800a512:	4813      	ldr	r0, [pc, #76]	; (800a560 <asinf+0xa0>)
 800a514:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a518:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a51c:	f000 ff36 	bl	800b38c <nan>
 800a520:	f995 3000 	ldrsb.w	r3, [r5]
 800a524:	2b02      	cmp	r3, #2
 800a526:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a52a:	d00b      	beq.n	800a544 <asinf+0x84>
 800a52c:	4668      	mov	r0, sp
 800a52e:	f000 ff2b 	bl	800b388 <matherr>
 800a532:	b138      	cbz	r0, 800a544 <asinf+0x84>
 800a534:	9b08      	ldr	r3, [sp, #32]
 800a536:	b953      	cbnz	r3, 800a54e <asinf+0x8e>
 800a538:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a53c:	f001 fdc0 	bl	800c0c0 <__aeabi_d2f>
 800a540:	b00a      	add	sp, #40	; 0x28
 800a542:	bd70      	pop	{r4, r5, r6, pc}
 800a544:	f001 fe0c 	bl	800c160 <__errno>
 800a548:	2321      	movs	r3, #33	; 0x21
 800a54a:	6003      	str	r3, [r0, #0]
 800a54c:	e7f2      	b.n	800a534 <asinf+0x74>
 800a54e:	f001 fe07 	bl	800c160 <__errno>
 800a552:	9b08      	ldr	r3, [sp, #32]
 800a554:	6003      	str	r3, [r0, #0]
 800a556:	e7ef      	b.n	800a538 <asinf+0x78>
 800a558:	20000320 	.word	0x20000320
 800a55c:	0800e180 	.word	0x0800e180
 800a560:	0800e18c 	.word	0x0800e18c

0800a564 <atan2f>:
 800a564:	f000 baf6 	b.w	800ab54 <__ieee754_atan2f>

0800a568 <powf>:
 800a568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a56c:	4d9f      	ldr	r5, [pc, #636]	; (800a7ec <powf+0x284>)
 800a56e:	b08a      	sub	sp, #40	; 0x28
 800a570:	4607      	mov	r7, r0
 800a572:	460e      	mov	r6, r1
 800a574:	f000 fbac 	bl	800acd0 <__ieee754_powf>
 800a578:	f995 3000 	ldrsb.w	r3, [r5]
 800a57c:	3301      	adds	r3, #1
 800a57e:	4604      	mov	r4, r0
 800a580:	d003      	beq.n	800a58a <powf+0x22>
 800a582:	4630      	mov	r0, r6
 800a584:	f001 f87e 	bl	800b684 <__fpclassifyf>
 800a588:	b918      	cbnz	r0, 800a592 <powf+0x2a>
 800a58a:	4620      	mov	r0, r4
 800a58c:	b00a      	add	sp, #40	; 0x28
 800a58e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a592:	4638      	mov	r0, r7
 800a594:	f001 f876 	bl	800b684 <__fpclassifyf>
 800a598:	4603      	mov	r3, r0
 800a59a:	2800      	cmp	r0, #0
 800a59c:	d132      	bne.n	800a604 <powf+0x9c>
 800a59e:	ee07 6a90 	vmov	s15, r6
 800a5a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a5a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5aa:	d1ee      	bne.n	800a58a <powf+0x22>
 800a5ac:	4a90      	ldr	r2, [pc, #576]	; (800a7f0 <powf+0x288>)
 800a5ae:	9308      	str	r3, [sp, #32]
 800a5b0:	4638      	mov	r0, r7
 800a5b2:	2101      	movs	r1, #1
 800a5b4:	e88d 0006 	stmia.w	sp, {r1, r2}
 800a5b8:	f001 fa6c 	bl	800ba94 <__aeabi_f2d>
 800a5bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5c0:	4630      	mov	r0, r6
 800a5c2:	f001 fa67 	bl	800ba94 <__aeabi_f2d>
 800a5c6:	f995 3000 	ldrsb.w	r3, [r5]
 800a5ca:	4f8a      	ldr	r7, [pc, #552]	; (800a7f4 <powf+0x28c>)
 800a5cc:	2600      	movs	r6, #0
 800a5ce:	1c5a      	adds	r2, r3, #1
 800a5d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5d4:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a5d8:	d00d      	beq.n	800a5f6 <powf+0x8e>
 800a5da:	2b02      	cmp	r3, #2
 800a5dc:	d00b      	beq.n	800a5f6 <powf+0x8e>
 800a5de:	4668      	mov	r0, sp
 800a5e0:	f000 fed2 	bl	800b388 <matherr>
 800a5e4:	2800      	cmp	r0, #0
 800a5e6:	f000 809e 	beq.w	800a726 <powf+0x1be>
 800a5ea:	9b08      	ldr	r3, [sp, #32]
 800a5ec:	b11b      	cbz	r3, 800a5f6 <powf+0x8e>
 800a5ee:	f001 fdb7 	bl	800c160 <__errno>
 800a5f2:	9b08      	ldr	r3, [sp, #32]
 800a5f4:	6003      	str	r3, [r0, #0]
 800a5f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a5fa:	f001 fd61 	bl	800c0c0 <__aeabi_d2f>
 800a5fe:	b00a      	add	sp, #40	; 0x28
 800a600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a604:	ee07 7a90 	vmov	s15, r7
 800a608:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a60c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a610:	d123      	bne.n	800a65a <powf+0xf2>
 800a612:	ee07 6a90 	vmov	s15, r6
 800a616:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a61a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a61e:	d156      	bne.n	800a6ce <powf+0x166>
 800a620:	2301      	movs	r3, #1
 800a622:	4a73      	ldr	r2, [pc, #460]	; (800a7f0 <powf+0x288>)
 800a624:	9300      	str	r3, [sp, #0]
 800a626:	4638      	mov	r0, r7
 800a628:	2300      	movs	r3, #0
 800a62a:	9308      	str	r3, [sp, #32]
 800a62c:	9201      	str	r2, [sp, #4]
 800a62e:	f001 fa31 	bl	800ba94 <__aeabi_f2d>
 800a632:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a636:	4630      	mov	r0, r6
 800a638:	f001 fa2c 	bl	800ba94 <__aeabi_f2d>
 800a63c:	f995 3000 	ldrsb.w	r3, [r5]
 800a640:	2600      	movs	r6, #0
 800a642:	2700      	movs	r7, #0
 800a644:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a648:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d0c6      	beq.n	800a5de <powf+0x76>
 800a650:	4b68      	ldr	r3, [pc, #416]	; (800a7f4 <powf+0x28c>)
 800a652:	2200      	movs	r2, #0
 800a654:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a658:	e7cd      	b.n	800a5f6 <powf+0x8e>
 800a65a:	4620      	mov	r0, r4
 800a65c:	f001 f80a 	bl	800b674 <finitef>
 800a660:	4680      	mov	r8, r0
 800a662:	2800      	cmp	r0, #0
 800a664:	d064      	beq.n	800a730 <powf+0x1c8>
 800a666:	ee07 4a90 	vmov	s15, r4
 800a66a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a66e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a672:	d18a      	bne.n	800a58a <powf+0x22>
 800a674:	4638      	mov	r0, r7
 800a676:	f000 fffd 	bl	800b674 <finitef>
 800a67a:	2800      	cmp	r0, #0
 800a67c:	d085      	beq.n	800a58a <powf+0x22>
 800a67e:	4630      	mov	r0, r6
 800a680:	f000 fff8 	bl	800b674 <finitef>
 800a684:	2800      	cmp	r0, #0
 800a686:	d080      	beq.n	800a58a <powf+0x22>
 800a688:	2304      	movs	r3, #4
 800a68a:	4a59      	ldr	r2, [pc, #356]	; (800a7f0 <powf+0x288>)
 800a68c:	9300      	str	r3, [sp, #0]
 800a68e:	4638      	mov	r0, r7
 800a690:	2300      	movs	r3, #0
 800a692:	9308      	str	r3, [sp, #32]
 800a694:	9201      	str	r2, [sp, #4]
 800a696:	f001 f9fd 	bl	800ba94 <__aeabi_f2d>
 800a69a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a69e:	4630      	mov	r0, r6
 800a6a0:	f001 f9f8 	bl	800ba94 <__aeabi_f2d>
 800a6a4:	f995 3000 	ldrsb.w	r3, [r5]
 800a6a8:	2600      	movs	r6, #0
 800a6aa:	2700      	movs	r7, #0
 800a6ac:	2b02      	cmp	r3, #2
 800a6ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a6b2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a6b6:	f000 8094 	beq.w	800a7e2 <powf+0x27a>
 800a6ba:	4668      	mov	r0, sp
 800a6bc:	f000 fe64 	bl	800b388 <matherr>
 800a6c0:	2800      	cmp	r0, #0
 800a6c2:	f000 808e 	beq.w	800a7e2 <powf+0x27a>
 800a6c6:	9b08      	ldr	r3, [sp, #32]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d094      	beq.n	800a5f6 <powf+0x8e>
 800a6cc:	e78f      	b.n	800a5ee <powf+0x86>
 800a6ce:	4630      	mov	r0, r6
 800a6d0:	f000 ffd0 	bl	800b674 <finitef>
 800a6d4:	2800      	cmp	r0, #0
 800a6d6:	f43f af58 	beq.w	800a58a <powf+0x22>
 800a6da:	ee07 6a90 	vmov	s15, r6
 800a6de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a6e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6e6:	f57f af50 	bpl.w	800a58a <powf+0x22>
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	4a40      	ldr	r2, [pc, #256]	; (800a7f0 <powf+0x288>)
 800a6ee:	9300      	str	r3, [sp, #0]
 800a6f0:	4638      	mov	r0, r7
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	9308      	str	r3, [sp, #32]
 800a6f6:	9201      	str	r2, [sp, #4]
 800a6f8:	f001 f9cc 	bl	800ba94 <__aeabi_f2d>
 800a6fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a700:	4630      	mov	r0, r6
 800a702:	f001 f9c7 	bl	800ba94 <__aeabi_f2d>
 800a706:	782b      	ldrb	r3, [r5, #0]
 800a708:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d03f      	beq.n	800a790 <powf+0x228>
 800a710:	4939      	ldr	r1, [pc, #228]	; (800a7f8 <powf+0x290>)
 800a712:	2000      	movs	r0, #0
 800a714:	2b02      	cmp	r3, #2
 800a716:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a71a:	d133      	bne.n	800a784 <powf+0x21c>
 800a71c:	f001 fd20 	bl	800c160 <__errno>
 800a720:	2321      	movs	r3, #33	; 0x21
 800a722:	6003      	str	r3, [r0, #0]
 800a724:	e7cf      	b.n	800a6c6 <powf+0x15e>
 800a726:	f001 fd1b 	bl	800c160 <__errno>
 800a72a:	2321      	movs	r3, #33	; 0x21
 800a72c:	6003      	str	r3, [r0, #0]
 800a72e:	e75c      	b.n	800a5ea <powf+0x82>
 800a730:	4638      	mov	r0, r7
 800a732:	f000 ff9f 	bl	800b674 <finitef>
 800a736:	2800      	cmp	r0, #0
 800a738:	d095      	beq.n	800a666 <powf+0xfe>
 800a73a:	4630      	mov	r0, r6
 800a73c:	f000 ff9a 	bl	800b674 <finitef>
 800a740:	2800      	cmp	r0, #0
 800a742:	d090      	beq.n	800a666 <powf+0xfe>
 800a744:	4620      	mov	r0, r4
 800a746:	f000 ff9d 	bl	800b684 <__fpclassifyf>
 800a74a:	4603      	mov	r3, r0
 800a74c:	bb28      	cbnz	r0, 800a79a <powf+0x232>
 800a74e:	4a28      	ldr	r2, [pc, #160]	; (800a7f0 <powf+0x288>)
 800a750:	9308      	str	r3, [sp, #32]
 800a752:	2101      	movs	r1, #1
 800a754:	4638      	mov	r0, r7
 800a756:	e88d 0006 	stmia.w	sp, {r1, r2}
 800a75a:	f001 f99b 	bl	800ba94 <__aeabi_f2d>
 800a75e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a762:	4630      	mov	r0, r6
 800a764:	f001 f996 	bl	800ba94 <__aeabi_f2d>
 800a768:	782c      	ldrb	r4, [r5, #0]
 800a76a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a76e:	b17c      	cbz	r4, 800a790 <powf+0x228>
 800a770:	2000      	movs	r0, #0
 800a772:	2100      	movs	r1, #0
 800a774:	4602      	mov	r2, r0
 800a776:	460b      	mov	r3, r1
 800a778:	f001 fb0a 	bl	800bd90 <__aeabi_ddiv>
 800a77c:	2c02      	cmp	r4, #2
 800a77e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a782:	d0cb      	beq.n	800a71c <powf+0x1b4>
 800a784:	4668      	mov	r0, sp
 800a786:	f000 fdff 	bl	800b388 <matherr>
 800a78a:	2800      	cmp	r0, #0
 800a78c:	d19b      	bne.n	800a6c6 <powf+0x15e>
 800a78e:	e7c5      	b.n	800a71c <powf+0x1b4>
 800a790:	2200      	movs	r2, #0
 800a792:	2300      	movs	r3, #0
 800a794:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a798:	e7f4      	b.n	800a784 <powf+0x21c>
 800a79a:	4b15      	ldr	r3, [pc, #84]	; (800a7f0 <powf+0x288>)
 800a79c:	f8cd 8020 	str.w	r8, [sp, #32]
 800a7a0:	2203      	movs	r2, #3
 800a7a2:	4638      	mov	r0, r7
 800a7a4:	e88d 000c 	stmia.w	sp, {r2, r3}
 800a7a8:	f001 f974 	bl	800ba94 <__aeabi_f2d>
 800a7ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7b0:	4630      	mov	r0, r6
 800a7b2:	f001 f96f 	bl	800ba94 <__aeabi_f2d>
 800a7b6:	f995 3000 	ldrsb.w	r3, [r5]
 800a7ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a7be:	b9fb      	cbnz	r3, 800a800 <powf+0x298>
 800a7c0:	ee07 7a90 	vmov	s15, r7
 800a7c4:	4b0d      	ldr	r3, [pc, #52]	; (800a7fc <powf+0x294>)
 800a7c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a7ca:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800a7ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a7d6:	d439      	bmi.n	800a84c <powf+0x2e4>
 800a7d8:	f995 3000 	ldrsb.w	r3, [r5]
 800a7dc:	2b02      	cmp	r3, #2
 800a7de:	f47f af6c 	bne.w	800a6ba <powf+0x152>
 800a7e2:	f001 fcbd 	bl	800c160 <__errno>
 800a7e6:	2322      	movs	r3, #34	; 0x22
 800a7e8:	6003      	str	r3, [r0, #0]
 800a7ea:	e76c      	b.n	800a6c6 <powf+0x15e>
 800a7ec:	20000320 	.word	0x20000320
 800a7f0:	0800e188 	.word	0x0800e188
 800a7f4:	3ff00000 	.word	0x3ff00000
 800a7f8:	fff00000 	.word	0xfff00000
 800a7fc:	47efffff 	.word	0x47efffff
 800a800:	ee07 7a90 	vmov	s15, r7
 800a804:	4b1f      	ldr	r3, [pc, #124]	; (800a884 <powf+0x31c>)
 800a806:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a80a:	2200      	movs	r2, #0
 800a80c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a810:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a814:	d5e0      	bpl.n	800a7d8 <powf+0x270>
 800a816:	ee07 6a10 	vmov	s14, r6
 800a81a:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 800a81e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a822:	ee17 0a90 	vmov	r0, s15
 800a826:	f001 f935 	bl	800ba94 <__aeabi_f2d>
 800a82a:	4606      	mov	r6, r0
 800a82c:	460f      	mov	r7, r1
 800a82e:	f000 fdb3 	bl	800b398 <rint>
 800a832:	4602      	mov	r2, r0
 800a834:	460b      	mov	r3, r1
 800a836:	4630      	mov	r0, r6
 800a838:	4639      	mov	r1, r7
 800a83a:	f001 fbe7 	bl	800c00c <__aeabi_dcmpeq>
 800a83e:	2800      	cmp	r0, #0
 800a840:	d1ca      	bne.n	800a7d8 <powf+0x270>
 800a842:	4b11      	ldr	r3, [pc, #68]	; (800a888 <powf+0x320>)
 800a844:	2200      	movs	r2, #0
 800a846:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a84a:	e7c5      	b.n	800a7d8 <powf+0x270>
 800a84c:	ee07 6a10 	vmov	s14, r6
 800a850:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 800a854:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a858:	ee17 0a90 	vmov	r0, s15
 800a85c:	f001 f91a 	bl	800ba94 <__aeabi_f2d>
 800a860:	4606      	mov	r6, r0
 800a862:	460f      	mov	r7, r1
 800a864:	f000 fd98 	bl	800b398 <rint>
 800a868:	4602      	mov	r2, r0
 800a86a:	460b      	mov	r3, r1
 800a86c:	4630      	mov	r0, r6
 800a86e:	4639      	mov	r1, r7
 800a870:	f001 fbcc 	bl	800c00c <__aeabi_dcmpeq>
 800a874:	2800      	cmp	r0, #0
 800a876:	d1af      	bne.n	800a7d8 <powf+0x270>
 800a878:	4b04      	ldr	r3, [pc, #16]	; (800a88c <powf+0x324>)
 800a87a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800a87e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a882:	e7a9      	b.n	800a7d8 <powf+0x270>
 800a884:	7ff00000 	.word	0x7ff00000
 800a888:	fff00000 	.word	0xfff00000
 800a88c:	c7efffff 	.word	0xc7efffff

0800a890 <sqrtf>:
 800a890:	b530      	push	{r4, r5, lr}
 800a892:	ed2d 8b02 	vpush	{d8}
 800a896:	4d28      	ldr	r5, [pc, #160]	; (800a938 <sqrtf+0xa8>)
 800a898:	b08b      	sub	sp, #44	; 0x2c
 800a89a:	ee08 0a10 	vmov	s16, r0
 800a89e:	f000 fd1d 	bl	800b2dc <__ieee754_sqrtf>
 800a8a2:	f995 3000 	ldrsb.w	r3, [r5]
 800a8a6:	3301      	adds	r3, #1
 800a8a8:	4604      	mov	r4, r0
 800a8aa:	d009      	beq.n	800a8c0 <sqrtf+0x30>
 800a8ac:	ee18 0a10 	vmov	r0, s16
 800a8b0:	f000 fee8 	bl	800b684 <__fpclassifyf>
 800a8b4:	b120      	cbz	r0, 800a8c0 <sqrtf+0x30>
 800a8b6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a8ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8be:	d404      	bmi.n	800a8ca <sqrtf+0x3a>
 800a8c0:	4620      	mov	r0, r4
 800a8c2:	b00b      	add	sp, #44	; 0x2c
 800a8c4:	ecbd 8b02 	vpop	{d8}
 800a8c8:	bd30      	pop	{r4, r5, pc}
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	4a1b      	ldr	r2, [pc, #108]	; (800a93c <sqrtf+0xac>)
 800a8ce:	9300      	str	r3, [sp, #0]
 800a8d0:	ee18 0a10 	vmov	r0, s16
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	9201      	str	r2, [sp, #4]
 800a8d8:	9308      	str	r3, [sp, #32]
 800a8da:	f001 f8db 	bl	800ba94 <__aeabi_f2d>
 800a8de:	782c      	ldrb	r4, [r5, #0]
 800a8e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a8e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8e8:	b98c      	cbnz	r4, 800a90e <sqrtf+0x7e>
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a8f2:	4668      	mov	r0, sp
 800a8f4:	f000 fd48 	bl	800b388 <matherr>
 800a8f8:	b198      	cbz	r0, 800a922 <sqrtf+0x92>
 800a8fa:	9b08      	ldr	r3, [sp, #32]
 800a8fc:	b9b3      	cbnz	r3, 800a92c <sqrtf+0x9c>
 800a8fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a902:	f001 fbdd 	bl	800c0c0 <__aeabi_d2f>
 800a906:	b00b      	add	sp, #44	; 0x2c
 800a908:	ecbd 8b02 	vpop	{d8}
 800a90c:	bd30      	pop	{r4, r5, pc}
 800a90e:	2000      	movs	r0, #0
 800a910:	2100      	movs	r1, #0
 800a912:	4602      	mov	r2, r0
 800a914:	460b      	mov	r3, r1
 800a916:	f001 fa3b 	bl	800bd90 <__aeabi_ddiv>
 800a91a:	2c02      	cmp	r4, #2
 800a91c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a920:	d1e7      	bne.n	800a8f2 <sqrtf+0x62>
 800a922:	f001 fc1d 	bl	800c160 <__errno>
 800a926:	2321      	movs	r3, #33	; 0x21
 800a928:	6003      	str	r3, [r0, #0]
 800a92a:	e7e6      	b.n	800a8fa <sqrtf+0x6a>
 800a92c:	f001 fc18 	bl	800c160 <__errno>
 800a930:	9b08      	ldr	r3, [sp, #32]
 800a932:	6003      	str	r3, [r0, #0]
 800a934:	e7e3      	b.n	800a8fe <sqrtf+0x6e>
 800a936:	bf00      	nop
 800a938:	20000320 	.word	0x20000320
 800a93c:	0800e190 	.word	0x0800e190

0800a940 <__ieee754_asinf>:
 800a940:	b538      	push	{r3, r4, r5, lr}
 800a942:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800a946:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800a94a:	ed2d 8b04 	vpush	{d8-d9}
 800a94e:	ee07 0a90 	vmov	s15, r0
 800a952:	4605      	mov	r5, r0
 800a954:	f000 8099 	beq.w	800aa8a <__ieee754_asinf+0x14a>
 800a958:	dc7f      	bgt.n	800aa5a <__ieee754_asinf+0x11a>
 800a95a:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800a95e:	da0e      	bge.n	800a97e <__ieee754_asinf+0x3e>
 800a960:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800a964:	f280 80a0 	bge.w	800aaa8 <__ieee754_asinf+0x168>
 800a968:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800ab14 <__ieee754_asinf+0x1d4>
 800a96c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a970:	eef7 6a00 	vmov.f32	s13, #112	; 0x70
 800a974:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800a978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a97c:	dc71      	bgt.n	800aa62 <__ieee754_asinf+0x122>
 800a97e:	ee17 0a90 	vmov	r0, s15
 800a982:	f000 fe73 	bl	800b66c <fabsf>
 800a986:	ee07 0a90 	vmov	s15, r0
 800a98a:	eef7 8a00 	vmov.f32	s17, #112	; 0x70
 800a98e:	ee38 8ae7 	vsub.f32	s16, s17, s15
 800a992:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 800a996:	ee28 8a27 	vmul.f32	s16, s16, s15
 800a99a:	ed9f 3a5f 	vldr	s6, [pc, #380]	; 800ab18 <__ieee754_asinf+0x1d8>
 800a99e:	ed9f 4a5f 	vldr	s8, [pc, #380]	; 800ab1c <__ieee754_asinf+0x1dc>
 800a9a2:	eddf 3a5f 	vldr	s7, [pc, #380]	; 800ab20 <__ieee754_asinf+0x1e0>
 800a9a6:	ed9f 5a5f 	vldr	s10, [pc, #380]	; 800ab24 <__ieee754_asinf+0x1e4>
 800a9aa:	eddf 4a5f 	vldr	s9, [pc, #380]	; 800ab28 <__ieee754_asinf+0x1e8>
 800a9ae:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 800ab2c <__ieee754_asinf+0x1ec>
 800a9b2:	eddf 5a5f 	vldr	s11, [pc, #380]	; 800ab30 <__ieee754_asinf+0x1f0>
 800a9b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ab34 <__ieee754_asinf+0x1f4>
 800a9ba:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800ab38 <__ieee754_asinf+0x1f8>
 800a9be:	eddf 7a5f 	vldr	s15, [pc, #380]	; 800ab3c <__ieee754_asinf+0x1fc>
 800a9c2:	eea8 4a03 	vfma.f32	s8, s16, s6
 800a9c6:	eee8 4a23 	vfma.f32	s9, s16, s7
 800a9ca:	eea4 5a08 	vfma.f32	s10, s8, s16
 800a9ce:	eee4 5a88 	vfma.f32	s11, s9, s16
 800a9d2:	eea5 6a08 	vfma.f32	s12, s10, s16
 800a9d6:	eea5 7a88 	vfma.f32	s14, s11, s16
 800a9da:	eee6 6a08 	vfma.f32	s13, s12, s16
 800a9de:	eee7 8a08 	vfma.f32	s17, s14, s16
 800a9e2:	eee6 7a88 	vfma.f32	s15, s13, s16
 800a9e6:	ee18 0a10 	vmov	r0, s16
 800a9ea:	eeb0 9a68 	vmov.f32	s18, s17
 800a9ee:	ee67 8a88 	vmul.f32	s17, s15, s16
 800a9f2:	f000 fc73 	bl	800b2dc <__ieee754_sqrtf>
 800a9f6:	4b52      	ldr	r3, [pc, #328]	; (800ab40 <__ieee754_asinf+0x200>)
 800a9f8:	429c      	cmp	r4, r3
 800a9fa:	ee06 0a90 	vmov	s13, r0
 800a9fe:	dc35      	bgt.n	800aa6c <__ieee754_asinf+0x12c>
 800aa00:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 800aa04:	f023 030f 	bic.w	r3, r3, #15
 800aa08:	ee07 3a90 	vmov	s15, r3
 800aa0c:	eef1 5a67 	vneg.f32	s11, s15
 800aa10:	eea5 8aa7 	vfma.f32	s16, s11, s15
 800aa14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa18:	eec8 8a89 	vdiv.f32	s17, s17, s18
 800aa1c:	ee88 8a27 	vdiv.f32	s16, s16, s15
 800aa20:	eddf 7a48 	vldr	s15, [pc, #288]	; 800ab44 <__ieee754_asinf+0x204>
 800aa24:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800ab48 <__ieee754_asinf+0x208>
 800aa28:	eeb0 6a00 	vmov.f32	s12, #0
 800aa2c:	eee8 7a46 	vfms.f32	s15, s16, s12
 800aa30:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800aa34:	eeb0 5a47 	vmov.f32	s10, s14
 800aa38:	eea5 5a86 	vfma.f32	s10, s11, s12
 800aa3c:	eed6 7aa8 	vfnms.f32	s15, s13, s17
 800aa40:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800aa44:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa48:	ecbd 8b04 	vpop	{d8-d9}
 800aa4c:	2d00      	cmp	r5, #0
 800aa4e:	bfd8      	it	le
 800aa50:	eef1 7a67 	vnegle.f32	s15, s15
 800aa54:	ee17 0a90 	vmov	r0, s15
 800aa58:	bd38      	pop	{r3, r4, r5, pc}
 800aa5a:	ee77 7ae7 	vsub.f32	s15, s15, s15
 800aa5e:	eec7 7aa7 	vdiv.f32	s15, s15, s15
 800aa62:	ecbd 8b04 	vpop	{d8-d9}
 800aa66:	ee17 0a90 	vmov	r0, s15
 800aa6a:	bd38      	pop	{r3, r4, r5, pc}
 800aa6c:	eec8 8a89 	vdiv.f32	s17, s17, s18
 800aa70:	eddf 7a36 	vldr	s15, [pc, #216]	; 800ab4c <__ieee754_asinf+0x20c>
 800aa74:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800ab50 <__ieee754_asinf+0x210>
 800aa78:	eee6 6aa8 	vfma.f32	s13, s13, s17
 800aa7c:	eeb0 6a00 	vmov.f32	s12, #0
 800aa80:	eee6 7a86 	vfma.f32	s15, s13, s12
 800aa84:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa88:	e7de      	b.n	800aa48 <__ieee754_asinf+0x108>
 800aa8a:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800ab44 <__ieee754_asinf+0x204>
 800aa8e:	eddf 6a30 	vldr	s13, [pc, #192]	; 800ab50 <__ieee754_asinf+0x210>
 800aa92:	ee27 7a87 	vmul.f32	s14, s15, s14
 800aa96:	ecbd 8b04 	vpop	{d8-d9}
 800aa9a:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800aa9e:	eef0 7a47 	vmov.f32	s15, s14
 800aaa2:	ee17 0a90 	vmov	r0, s15
 800aaa6:	bd38      	pop	{r3, r4, r5, pc}
 800aaa8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800aaac:	ed9f 2a1a 	vldr	s4, [pc, #104]	; 800ab18 <__ieee754_asinf+0x1d8>
 800aab0:	ed9f 3a1a 	vldr	s6, [pc, #104]	; 800ab1c <__ieee754_asinf+0x1dc>
 800aab4:	ed9f 4a1b 	vldr	s8, [pc, #108]	; 800ab24 <__ieee754_asinf+0x1e4>
 800aab8:	eddf 2a19 	vldr	s5, [pc, #100]	; 800ab20 <__ieee754_asinf+0x1e0>
 800aabc:	eddf 3a1a 	vldr	s7, [pc, #104]	; 800ab28 <__ieee754_asinf+0x1e8>
 800aac0:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 800ab2c <__ieee754_asinf+0x1ec>
 800aac4:	eddf 4a1a 	vldr	s9, [pc, #104]	; 800ab30 <__ieee754_asinf+0x1f0>
 800aac8:	ed9f 5a1a 	vldr	s10, [pc, #104]	; 800ab34 <__ieee754_asinf+0x1f4>
 800aacc:	eddf 5a1a 	vldr	s11, [pc, #104]	; 800ab38 <__ieee754_asinf+0x1f8>
 800aad0:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800ab3c <__ieee754_asinf+0x1fc>
 800aad4:	eea7 3a02 	vfma.f32	s6, s14, s4
 800aad8:	ecbd 8b04 	vpop	{d8-d9}
 800aadc:	eea3 4a07 	vfma.f32	s8, s6, s14
 800aae0:	eee7 3a22 	vfma.f32	s7, s14, s5
 800aae4:	eea4 6a07 	vfma.f32	s12, s8, s14
 800aae8:	eee3 4a87 	vfma.f32	s9, s7, s14
 800aaec:	eea6 5a07 	vfma.f32	s10, s12, s14
 800aaf0:	eee4 5a87 	vfma.f32	s11, s9, s14
 800aaf4:	eee5 6a07 	vfma.f32	s13, s10, s14
 800aaf8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x70
 800aafc:	eea5 6a87 	vfma.f32	s12, s11, s14
 800ab00:	ee26 7a87 	vmul.f32	s14, s13, s14
 800ab04:	ee87 7a06 	vdiv.f32	s14, s14, s12
 800ab08:	eee7 7a87 	vfma.f32	s15, s15, s14
 800ab0c:	ee17 0a90 	vmov	r0, s15
 800ab10:	bd38      	pop	{r3, r4, r5, pc}
 800ab12:	bf00      	nop
 800ab14:	7149f2ca 	.word	0x7149f2ca
 800ab18:	3811ef08 	.word	0x3811ef08
 800ab1c:	3a4f7f04 	.word	0x3a4f7f04
 800ab20:	3d9dc62e 	.word	0x3d9dc62e
 800ab24:	bd241146 	.word	0xbd241146
 800ab28:	bf303361 	.word	0xbf303361
 800ab2c:	3e4e0aa8 	.word	0x3e4e0aa8
 800ab30:	4001572d 	.word	0x4001572d
 800ab34:	bea6b090 	.word	0xbea6b090
 800ab38:	c019d139 	.word	0xc019d139
 800ab3c:	3e2aaaab 	.word	0x3e2aaaab
 800ab40:	3f799999 	.word	0x3f799999
 800ab44:	b33bbd2e 	.word	0xb33bbd2e
 800ab48:	3f490fdb 	.word	0x3f490fdb
 800ab4c:	333bbd2e 	.word	0x333bbd2e
 800ab50:	3fc90fdb 	.word	0x3fc90fdb

0800ab54 <__ieee754_atan2f>:
 800ab54:	b530      	push	{r4, r5, lr}
 800ab56:	b083      	sub	sp, #12
 800ab58:	ee07 0a90 	vmov	s15, r0
 800ab5c:	9101      	str	r1, [sp, #4]
 800ab5e:	9b01      	ldr	r3, [sp, #4]
 800ab60:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ab64:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ab68:	dc1a      	bgt.n	800aba0 <__ieee754_atan2f+0x4c>
 800ab6a:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 800ab6e:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800ab72:	4605      	mov	r5, r0
 800ab74:	dc14      	bgt.n	800aba0 <__ieee754_atan2f+0x4c>
 800ab76:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800ab7a:	d053      	beq.n	800ac24 <__ieee754_atan2f+0xd0>
 800ab7c:	179c      	asrs	r4, r3, #30
 800ab7e:	f004 0402 	and.w	r4, r4, #2
 800ab82:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800ab86:	b999      	cbnz	r1, 800abb0 <__ieee754_atan2f+0x5c>
 800ab88:	2c02      	cmp	r4, #2
 800ab8a:	d048      	beq.n	800ac1e <__ieee754_atan2f+0xca>
 800ab8c:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800aca4 <__ieee754_atan2f+0x150>
 800ab90:	2c03      	cmp	r4, #3
 800ab92:	bf08      	it	eq
 800ab94:	eef0 7a47 	vmoveq.f32	s15, s14
 800ab98:	ee17 0a90 	vmov	r0, s15
 800ab9c:	b003      	add	sp, #12
 800ab9e:	bd30      	pop	{r4, r5, pc}
 800aba0:	ed9d 7a01 	vldr	s14, [sp, #4]
 800aba4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aba8:	ee17 0a90 	vmov	r0, s15
 800abac:	b003      	add	sp, #12
 800abae:	bd30      	pop	{r4, r5, pc}
 800abb0:	b332      	cbz	r2, 800ac00 <__ieee754_atan2f+0xac>
 800abb2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800abb6:	d03a      	beq.n	800ac2e <__ieee754_atan2f+0xda>
 800abb8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800abbc:	d020      	beq.n	800ac00 <__ieee754_atan2f+0xac>
 800abbe:	1a8a      	subs	r2, r1, r2
 800abc0:	15d2      	asrs	r2, r2, #23
 800abc2:	2a3c      	cmp	r2, #60	; 0x3c
 800abc4:	dc28      	bgt.n	800ac18 <__ieee754_atan2f+0xc4>
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	db51      	blt.n	800ac6e <__ieee754_atan2f+0x11a>
 800abca:	ed9d 7a01 	vldr	s14, [sp, #4]
 800abce:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800abd2:	ee17 0a90 	vmov	r0, s15
 800abd6:	f000 fd49 	bl	800b66c <fabsf>
 800abda:	f000 fc69 	bl	800b4b0 <atanf>
 800abde:	ee07 0a90 	vmov	s15, r0
 800abe2:	2c01      	cmp	r4, #1
 800abe4:	d03c      	beq.n	800ac60 <__ieee754_atan2f+0x10c>
 800abe6:	2c02      	cmp	r4, #2
 800abe8:	d031      	beq.n	800ac4e <__ieee754_atan2f+0xfa>
 800abea:	2c00      	cmp	r4, #0
 800abec:	d0dc      	beq.n	800aba8 <__ieee754_atan2f+0x54>
 800abee:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800aca8 <__ieee754_atan2f+0x154>
 800abf2:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800acac <__ieee754_atan2f+0x158>
 800abf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abfa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800abfe:	e7d3      	b.n	800aba8 <__ieee754_atan2f+0x54>
 800ac00:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800acb0 <__ieee754_atan2f+0x15c>
 800ac04:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800acb4 <__ieee754_atan2f+0x160>
 800ac08:	2d00      	cmp	r5, #0
 800ac0a:	bfb8      	it	lt
 800ac0c:	eef0 7a47 	vmovlt.f32	s15, s14
 800ac10:	ee17 0a90 	vmov	r0, s15
 800ac14:	b003      	add	sp, #12
 800ac16:	bd30      	pop	{r4, r5, pc}
 800ac18:	eddf 7a26 	vldr	s15, [pc, #152]	; 800acb4 <__ieee754_atan2f+0x160>
 800ac1c:	e7e1      	b.n	800abe2 <__ieee754_atan2f+0x8e>
 800ac1e:	eddf 7a23 	vldr	s15, [pc, #140]	; 800acac <__ieee754_atan2f+0x158>
 800ac22:	e7c1      	b.n	800aba8 <__ieee754_atan2f+0x54>
 800ac24:	b003      	add	sp, #12
 800ac26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac2a:	f000 bc41 	b.w	800b4b0 <atanf>
 800ac2e:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800ac32:	d021      	beq.n	800ac78 <__ieee754_atan2f+0x124>
 800ac34:	2c02      	cmp	r4, #2
 800ac36:	d0f2      	beq.n	800ac1e <__ieee754_atan2f+0xca>
 800ac38:	2c03      	cmp	r4, #3
 800ac3a:	d02a      	beq.n	800ac92 <__ieee754_atan2f+0x13e>
 800ac3c:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800acb8 <__ieee754_atan2f+0x164>
 800ac40:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800acbc <__ieee754_atan2f+0x168>
 800ac44:	2c01      	cmp	r4, #1
 800ac46:	bf18      	it	ne
 800ac48:	eef0 7a47 	vmovne.f32	s15, s14
 800ac4c:	e7ac      	b.n	800aba8 <__ieee754_atan2f+0x54>
 800ac4e:	eddf 6a16 	vldr	s13, [pc, #88]	; 800aca8 <__ieee754_atan2f+0x154>
 800ac52:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800acac <__ieee754_atan2f+0x158>
 800ac56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac5e:	e7a3      	b.n	800aba8 <__ieee754_atan2f+0x54>
 800ac60:	ee17 3a90 	vmov	r3, s15
 800ac64:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ac68:	ee07 3a90 	vmov	s15, r3
 800ac6c:	e79c      	b.n	800aba8 <__ieee754_atan2f+0x54>
 800ac6e:	323c      	adds	r2, #60	; 0x3c
 800ac70:	daab      	bge.n	800abca <__ieee754_atan2f+0x76>
 800ac72:	eddf 7a12 	vldr	s15, [pc, #72]	; 800acbc <__ieee754_atan2f+0x168>
 800ac76:	e7b4      	b.n	800abe2 <__ieee754_atan2f+0x8e>
 800ac78:	2c02      	cmp	r4, #2
 800ac7a:	d010      	beq.n	800ac9e <__ieee754_atan2f+0x14a>
 800ac7c:	2c03      	cmp	r4, #3
 800ac7e:	d00b      	beq.n	800ac98 <__ieee754_atan2f+0x144>
 800ac80:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800acc0 <__ieee754_atan2f+0x16c>
 800ac84:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800acc4 <__ieee754_atan2f+0x170>
 800ac88:	2c01      	cmp	r4, #1
 800ac8a:	bf18      	it	ne
 800ac8c:	eef0 7a47 	vmovne.f32	s15, s14
 800ac90:	e78a      	b.n	800aba8 <__ieee754_atan2f+0x54>
 800ac92:	eddf 7a04 	vldr	s15, [pc, #16]	; 800aca4 <__ieee754_atan2f+0x150>
 800ac96:	e787      	b.n	800aba8 <__ieee754_atan2f+0x54>
 800ac98:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800acc8 <__ieee754_atan2f+0x174>
 800ac9c:	e784      	b.n	800aba8 <__ieee754_atan2f+0x54>
 800ac9e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800accc <__ieee754_atan2f+0x178>
 800aca2:	e781      	b.n	800aba8 <__ieee754_atan2f+0x54>
 800aca4:	c0490fdb 	.word	0xc0490fdb
 800aca8:	33bbbd2e 	.word	0x33bbbd2e
 800acac:	40490fdb 	.word	0x40490fdb
 800acb0:	bfc90fdb 	.word	0xbfc90fdb
 800acb4:	3fc90fdb 	.word	0x3fc90fdb
 800acb8:	80000000 	.word	0x80000000
 800acbc:	00000000 	.word	0x00000000
 800acc0:	bf490fdb 	.word	0xbf490fdb
 800acc4:	3f490fdb 	.word	0x3f490fdb
 800acc8:	c016cbe4 	.word	0xc016cbe4
 800accc:	4016cbe4 	.word	0x4016cbe4

0800acd0 <__ieee754_powf>:
 800acd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800acd4:	ed2d 8b02 	vpush	{d8}
 800acd8:	f031 4600 	bics.w	r6, r1, #2147483648	; 0x80000000
 800acdc:	b083      	sub	sp, #12
 800acde:	460c      	mov	r4, r1
 800ace0:	d014      	beq.n	800ad0c <__ieee754_powf+0x3c>
 800ace2:	f020 4700 	bic.w	r7, r0, #2147483648	; 0x80000000
 800ace6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800acea:	4605      	mov	r5, r0
 800acec:	4680      	mov	r8, r0
 800acee:	dd07      	ble.n	800ad00 <__ieee754_powf+0x30>
 800acf0:	4857      	ldr	r0, [pc, #348]	; (800ae50 <__ieee754_powf+0x180>)
 800acf2:	b003      	add	sp, #12
 800acf4:	ecbd 8b02 	vpop	{d8}
 800acf8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800acfc:	f000 bcdc 	b.w	800b6b8 <nanf>
 800ad00:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800ad04:	dd09      	ble.n	800ad1a <__ieee754_powf+0x4a>
 800ad06:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800ad0a:	d1f1      	bne.n	800acf0 <__ieee754_powf+0x20>
 800ad0c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ad10:	b003      	add	sp, #12
 800ad12:	ecbd 8b02 	vpop	{d8}
 800ad16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad1a:	2800      	cmp	r0, #0
 800ad1c:	db5a      	blt.n	800add4 <__ieee754_powf+0x104>
 800ad1e:	f04f 0900 	mov.w	r9, #0
 800ad22:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800ad26:	d04d      	beq.n	800adc4 <__ieee754_powf+0xf4>
 800ad28:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800ad2c:	d065      	beq.n	800adfa <__ieee754_powf+0x12a>
 800ad2e:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800ad32:	d06e      	beq.n	800ae12 <__ieee754_powf+0x142>
 800ad34:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800ad38:	d01f      	beq.n	800ad7a <__ieee754_powf+0xaa>
 800ad3a:	4628      	mov	r0, r5
 800ad3c:	9101      	str	r1, [sp, #4]
 800ad3e:	f000 fc95 	bl	800b66c <fabsf>
 800ad42:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800ad46:	ee07 0a90 	vmov	s15, r0
 800ad4a:	d031      	beq.n	800adb0 <__ieee754_powf+0xe0>
 800ad4c:	9901      	ldr	r1, [sp, #4]
 800ad4e:	b37f      	cbz	r7, 800adb0 <__ieee754_powf+0xe0>
 800ad50:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800ad54:	d02c      	beq.n	800adb0 <__ieee754_powf+0xe0>
 800ad56:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 800ad5a:	3b01      	subs	r3, #1
 800ad5c:	ea59 0203 	orrs.w	r2, r9, r3
 800ad60:	d066      	beq.n	800ae30 <__ieee754_powf+0x160>
 800ad62:	f1b6 4f9a 	cmp.w	r6, #1291845632	; 0x4d000000
 800ad66:	dd79      	ble.n	800ae5c <__ieee754_powf+0x18c>
 800ad68:	4a3a      	ldr	r2, [pc, #232]	; (800ae54 <__ieee754_powf+0x184>)
 800ad6a:	4297      	cmp	r7, r2
 800ad6c:	f300 81dc 	bgt.w	800b128 <__ieee754_powf+0x458>
 800ad70:	2c00      	cmp	r4, #0
 800ad72:	f2c0 81e0 	blt.w	800b136 <__ieee754_powf+0x466>
 800ad76:	2000      	movs	r0, #0
 800ad78:	e7ca      	b.n	800ad10 <__ieee754_powf+0x40>
 800ad7a:	f1b8 0f00 	cmp.w	r8, #0
 800ad7e:	da4f      	bge.n	800ae20 <__ieee754_powf+0x150>
 800ad80:	4628      	mov	r0, r5
 800ad82:	9101      	str	r1, [sp, #4]
 800ad84:	f000 fc72 	bl	800b66c <fabsf>
 800ad88:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800ad8c:	ee07 0a90 	vmov	s15, r0
 800ad90:	9901      	ldr	r1, [sp, #4]
 800ad92:	d001      	beq.n	800ad98 <__ieee754_powf+0xc8>
 800ad94:	2f00      	cmp	r7, #0
 800ad96:	d1db      	bne.n	800ad50 <__ieee754_powf+0x80>
 800ad98:	f1a7 577e 	sub.w	r7, r7, #1065353216	; 0x3f800000
 800ad9c:	ea59 0307 	orrs.w	r3, r9, r7
 800ada0:	d048      	beq.n	800ae34 <__ieee754_powf+0x164>
 800ada2:	f1b9 0f01 	cmp.w	r9, #1
 800ada6:	f000 81ba 	beq.w	800b11e <__ieee754_powf+0x44e>
 800adaa:	ee17 0a90 	vmov	r0, s15
 800adae:	e7af      	b.n	800ad10 <__ieee754_powf+0x40>
 800adb0:	2c00      	cmp	r4, #0
 800adb2:	bfbc      	itt	lt
 800adb4:	eeb7 7a00 	vmovlt.f32	s14, #112	; 0x70
 800adb8:	eec7 7a27 	vdivlt.f32	s15, s14, s15
 800adbc:	f1b8 0f00 	cmp.w	r8, #0
 800adc0:	daf3      	bge.n	800adaa <__ieee754_powf+0xda>
 800adc2:	e7e9      	b.n	800ad98 <__ieee754_powf+0xc8>
 800adc4:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800adc8:	d0a0      	beq.n	800ad0c <__ieee754_powf+0x3c>
 800adca:	dd1d      	ble.n	800ae08 <__ieee754_powf+0x138>
 800adcc:	2c00      	cmp	r4, #0
 800adce:	dbd2      	blt.n	800ad76 <__ieee754_powf+0xa6>
 800add0:	4608      	mov	r0, r1
 800add2:	e79d      	b.n	800ad10 <__ieee754_powf+0x40>
 800add4:	f1b6 4f97 	cmp.w	r6, #1266679808	; 0x4b800000
 800add8:	da13      	bge.n	800ae02 <__ieee754_powf+0x132>
 800adda:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800adde:	db09      	blt.n	800adf4 <__ieee754_powf+0x124>
 800ade0:	15f3      	asrs	r3, r6, #23
 800ade2:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800ade6:	fa46 f203 	asr.w	r2, r6, r3
 800adea:	fa02 f303 	lsl.w	r3, r2, r3
 800adee:	42b3      	cmp	r3, r6
 800adf0:	f000 8190 	beq.w	800b114 <__ieee754_powf+0x444>
 800adf4:	f04f 0900 	mov.w	r9, #0
 800adf8:	e796      	b.n	800ad28 <__ieee754_powf+0x58>
 800adfa:	2c00      	cmp	r4, #0
 800adfc:	db1f      	blt.n	800ae3e <__ieee754_powf+0x16e>
 800adfe:	4628      	mov	r0, r5
 800ae00:	e786      	b.n	800ad10 <__ieee754_powf+0x40>
 800ae02:	f04f 0902 	mov.w	r9, #2
 800ae06:	e78c      	b.n	800ad22 <__ieee754_powf+0x52>
 800ae08:	2c00      	cmp	r4, #0
 800ae0a:	dab4      	bge.n	800ad76 <__ieee754_powf+0xa6>
 800ae0c:	f081 4000 	eor.w	r0, r1, #2147483648	; 0x80000000
 800ae10:	e77e      	b.n	800ad10 <__ieee754_powf+0x40>
 800ae12:	ee07 5a90 	vmov	s15, r5
 800ae16:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ae1a:	ee17 0a90 	vmov	r0, s15
 800ae1e:	e777      	b.n	800ad10 <__ieee754_powf+0x40>
 800ae20:	4628      	mov	r0, r5
 800ae22:	b003      	add	sp, #12
 800ae24:	ecbd 8b02 	vpop	{d8}
 800ae28:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae2c:	f000 ba56 	b.w	800b2dc <__ieee754_sqrtf>
 800ae30:	ee07 5a90 	vmov	s15, r5
 800ae34:	ee77 7ae7 	vsub.f32	s15, s15, s15
 800ae38:	eec7 7aa7 	vdiv.f32	s15, s15, s15
 800ae3c:	e7b5      	b.n	800adaa <__ieee754_powf+0xda>
 800ae3e:	ee07 5a10 	vmov	s14, r5
 800ae42:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 800ae46:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800ae4a:	ee17 0a90 	vmov	r0, s15
 800ae4e:	e75f      	b.n	800ad10 <__ieee754_powf+0x40>
 800ae50:	0800e18c 	.word	0x0800e18c
 800ae54:	3f7ffff7 	.word	0x3f7ffff7
 800ae58:	4b800000 	.word	0x4b800000
 800ae5c:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
 800ae60:	f280 8173 	bge.w	800b14a <__ieee754_powf+0x47a>
 800ae64:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 800ae58 <__ieee754_powf+0x188>
 800ae68:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ae6c:	f06f 0017 	mvn.w	r0, #23
 800ae70:	ee17 7a90 	vmov	r7, s15
 800ae74:	4dde      	ldr	r5, [pc, #888]	; (800b1f0 <__ieee754_powf+0x520>)
 800ae76:	15fa      	asrs	r2, r7, #23
 800ae78:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800ae7c:	3a7f      	subs	r2, #127	; 0x7f
 800ae7e:	42af      	cmp	r7, r5
 800ae80:	4402      	add	r2, r0
 800ae82:	f047 507e 	orr.w	r0, r7, #1065353216	; 0x3f800000
 800ae86:	f340 815d 	ble.w	800b144 <__ieee754_powf+0x474>
 800ae8a:	4dda      	ldr	r5, [pc, #872]	; (800b1f4 <__ieee754_powf+0x524>)
 800ae8c:	42af      	cmp	r7, r5
 800ae8e:	f340 81ab 	ble.w	800b1e8 <__ieee754_powf+0x518>
 800ae92:	2600      	movs	r6, #0
 800ae94:	3201      	adds	r2, #1
 800ae96:	f5a0 0000 	sub.w	r0, r0, #8388608	; 0x800000
 800ae9a:	4635      	mov	r5, r6
 800ae9c:	f8df c3b4 	ldr.w	ip, [pc, #948]	; 800b254 <__ieee754_powf+0x584>
 800aea0:	eddf 2ad5 	vldr	s5, [pc, #852]	; 800b1f8 <__ieee754_powf+0x528>
 800aea4:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 800b1fc <__ieee754_powf+0x52c>
 800aea8:	eddf 0ad5 	vldr	s1, [pc, #852]	; 800b200 <__ieee754_powf+0x530>
 800aeac:	ed9f 1aeb 	vldr	s2, [pc, #940]	; 800b25c <__ieee754_powf+0x58c>
 800aeb0:	eddf 1ad4 	vldr	s3, [pc, #848]	; 800b204 <__ieee754_powf+0x534>
 800aeb4:	ed9f 2ad4 	vldr	s4, [pc, #848]	; 800b208 <__ieee754_powf+0x538>
 800aeb8:	eddf 7ad4 	vldr	s15, [pc, #848]	; 800b20c <__ieee754_powf+0x53c>
 800aebc:	ed9f 3ad4 	vldr	s6, [pc, #848]	; 800b210 <__ieee754_powf+0x540>
 800aec0:	4fd4      	ldr	r7, [pc, #848]	; (800b214 <__ieee754_powf+0x544>)
 800aec2:	ed9f 4ad5 	vldr	s8, [pc, #852]	; 800b218 <__ieee754_powf+0x548>
 800aec6:	f8df e390 	ldr.w	lr, [pc, #912]	; 800b258 <__ieee754_powf+0x588>
 800aeca:	00ad      	lsls	r5, r5, #2
 800aecc:	44ac      	add	ip, r5
 800aece:	ee07 0a10 	vmov	s14, r0
 800aed2:	ed9c 6a00 	vldr	s12, [ip]
 800aed6:	ee77 5a06 	vadd.f32	s11, s14, s12
 800aeda:	eef7 6a00 	vmov.f32	s13, #112	; 0x70
 800aede:	eec6 5aa5 	vdiv.f32	s11, s13, s11
 800aee2:	1040      	asrs	r0, r0, #1
 800aee4:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 800aee8:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
 800aeec:	4430      	add	r0, r6
 800aeee:	ee04 0a90 	vmov	s9, r0
 800aef2:	ee77 6a46 	vsub.f32	s13, s14, s12
 800aef6:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800aefa:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800aefe:	ee37 7a46 	vsub.f32	s14, s14, s12
 800af02:	ee23 6aa3 	vmul.f32	s12, s7, s7
 800af06:	ee13 6a90 	vmov	r6, s7
 800af0a:	eea6 0a22 	vfma.f32	s0, s12, s5
 800af0e:	f426 667f 	bic.w	r6, r6, #4080	; 0xff0
 800af12:	f026 060f 	bic.w	r6, r6, #15
 800af16:	ee05 6a10 	vmov	s10, r6
 800af1a:	eee0 0a06 	vfma.f32	s1, s0, s12
 800af1e:	1978      	adds	r0, r7, r5
 800af20:	4475      	add	r5, lr
 800af22:	eef1 2a45 	vneg.f32	s5, s10
 800af26:	eee2 6aa4 	vfma.f32	s13, s5, s9
 800af2a:	eef0 4a41 	vmov.f32	s9, s2
 800af2e:	eee0 4a86 	vfma.f32	s9, s1, s12
 800af32:	eee2 6a87 	vfma.f32	s13, s5, s14
 800af36:	eee4 1a86 	vfma.f32	s3, s9, s12
 800af3a:	ee66 5aa5 	vmul.f32	s11, s13, s11
 800af3e:	eef0 6a42 	vmov.f32	s13, s4
 800af42:	eee1 6a86 	vfma.f32	s13, s3, s12
 800af46:	ee33 7a85 	vadd.f32	s14, s7, s10
 800af4a:	ee26 6a06 	vmul.f32	s12, s12, s12
 800af4e:	ee27 7a25 	vmul.f32	s14, s14, s11
 800af52:	eef0 4a08 	vmov.f32	s9, #8
 800af56:	eea6 7a26 	vfma.f32	s14, s12, s13
 800af5a:	eef0 6a64 	vmov.f32	s13, s9
 800af5e:	eee5 6a05 	vfma.f32	s13, s10, s10
 800af62:	edd0 1a00 	vldr	s3, [r0]
 800af66:	ed95 2a00 	vldr	s4, [r5]
 800af6a:	ee36 6a87 	vadd.f32	s12, s13, s14
 800af6e:	ee06 2a90 	vmov	s13, r2
 800af72:	ee16 2a10 	vmov	r2, s12
 800af76:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800af7a:	f022 020f 	bic.w	r2, r2, #15
 800af7e:	ee06 2a10 	vmov	s12, r2
 800af82:	ee76 4a64 	vsub.f32	s9, s12, s9
 800af86:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800af8a:	eee2 4a85 	vfma.f32	s9, s5, s10
 800af8e:	ee37 7a64 	vsub.f32	s14, s14, s9
 800af92:	ee27 7a23 	vmul.f32	s14, s14, s7
 800af96:	eea5 7a86 	vfma.f32	s14, s11, s12
 800af9a:	eef0 5a47 	vmov.f32	s11, s14
 800af9e:	eee5 5a06 	vfma.f32	s11, s10, s12
 800afa2:	ee15 2a90 	vmov	r2, s11
 800afa6:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800afaa:	f022 020f 	bic.w	r2, r2, #15
 800afae:	ee05 2a10 	vmov	s10, r2
 800afb2:	eea2 5a86 	vfma.f32	s10, s5, s12
 800afb6:	ee05 2a90 	vmov	s11, r2
 800afba:	ee37 7a45 	vsub.f32	s14, s14, s10
 800afbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afc2:	eee5 7a83 	vfma.f32	s15, s11, s6
 800afc6:	ee77 7aa1 	vadd.f32	s15, s15, s3
 800afca:	eeb0 7a67 	vmov.f32	s14, s15
 800afce:	eea5 7a84 	vfma.f32	s14, s11, s8
 800afd2:	ee37 7a02 	vadd.f32	s14, s14, s4
 800afd6:	ee37 7a26 	vadd.f32	s14, s14, s13
 800afda:	ee17 2a10 	vmov	r2, s14
 800afde:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800afe2:	f022 020f 	bic.w	r2, r2, #15
 800afe6:	ee07 2a10 	vmov	s14, r2
 800afea:	ee77 6a66 	vsub.f32	s13, s14, s13
 800afee:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800aff2:	eea5 7ac4 	vfms.f32	s14, s11, s8
 800aff6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800affa:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800affe:	f024 040f 	bic.w	r4, r4, #15
 800b002:	ee07 1a10 	vmov	s14, r1
 800b006:	ee06 4a90 	vmov	s13, r4
 800b00a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b00e:	ee77 6a66 	vsub.f32	s13, s14, s13
 800b012:	ee06 4a10 	vmov	s12, r4
 800b016:	ee07 2a10 	vmov	s14, r2
 800b01a:	ee27 7a06 	vmul.f32	s14, s14, s12
 800b01e:	ee06 2a10 	vmov	s12, r2
 800b022:	eee6 7a86 	vfma.f32	s15, s13, s12
 800b026:	f109 39ff 	add.w	r9, r9, #4294967295
 800b02a:	ea59 0303 	orrs.w	r3, r9, r3
 800b02e:	eeb7 8a00 	vmov.f32	s16, #112	; 0x70
 800b032:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b036:	eebf 6a00 	vmov.f32	s12, #240	; 0xf0
 800b03a:	ee16 3a90 	vmov	r3, s13
 800b03e:	bf08      	it	eq
 800b040:	eeb0 8a46 	vmoveq.f32	s16, s12
 800b044:	2b00      	cmp	r3, #0
 800b046:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b04a:	f340 80b8 	ble.w	800b1be <__ieee754_powf+0x4ee>
 800b04e:	f1b2 4f86 	cmp.w	r2, #1124073472	; 0x43000000
 800b052:	f300 8087 	bgt.w	800b164 <__ieee754_powf+0x494>
 800b056:	d07a      	beq.n	800b14e <__ieee754_powf+0x47e>
 800b058:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 800b05c:	f300 808b 	bgt.w	800b176 <__ieee754_powf+0x4a6>
 800b060:	2200      	movs	r2, #0
 800b062:	4611      	mov	r1, r2
 800b064:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b068:	f023 030f 	bic.w	r3, r3, #15
 800b06c:	ee06 3a10 	vmov	s12, r3
 800b070:	eddf 6a6a 	vldr	s13, [pc, #424]	; 800b21c <__ieee754_powf+0x54c>
 800b074:	eddf 5a6a 	vldr	s11, [pc, #424]	; 800b220 <__ieee754_powf+0x550>
 800b078:	ed9f 3a6a 	vldr	s6, [pc, #424]	; 800b224 <__ieee754_powf+0x554>
 800b07c:	ed9f 2a6a 	vldr	s4, [pc, #424]	; 800b228 <__ieee754_powf+0x558>
 800b080:	eddf 3a6a 	vldr	s7, [pc, #424]	; 800b22c <__ieee754_powf+0x55c>
 800b084:	ed9f 4a6a 	vldr	s8, [pc, #424]	; 800b230 <__ieee754_powf+0x560>
 800b088:	eddf 4a6a 	vldr	s9, [pc, #424]	; 800b234 <__ieee754_powf+0x564>
 800b08c:	ed9f 5a6a 	vldr	s10, [pc, #424]	; 800b238 <__ieee754_powf+0x568>
 800b090:	ee36 7a47 	vsub.f32	s14, s12, s14
 800b094:	eef0 2a00 	vmov.f32	s5, #0
 800b098:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b09c:	ee26 7a26 	vmul.f32	s14, s12, s13
 800b0a0:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800b0a4:	eef7 5a00 	vmov.f32	s11, #112	; 0x70
 800b0a8:	eef0 6a47 	vmov.f32	s13, s14
 800b0ac:	eee6 6a03 	vfma.f32	s13, s12, s6
 800b0b0:	eef0 7a47 	vmov.f32	s15, s14
 800b0b4:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800b0b8:	eef0 1a66 	vmov.f32	s3, s13
 800b0bc:	eee7 3a02 	vfma.f32	s7, s14, s4
 800b0c0:	eee6 1a43 	vfms.f32	s3, s12, s6
 800b0c4:	eea3 4a87 	vfma.f32	s8, s7, s14
 800b0c8:	eeb0 6a66 	vmov.f32	s12, s13
 800b0cc:	eee4 4a07 	vfma.f32	s9, s8, s14
 800b0d0:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800b0d4:	eea4 5a87 	vfma.f32	s10, s9, s14
 800b0d8:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800b0dc:	eea5 6a47 	vfms.f32	s12, s10, s14
 800b0e0:	ee26 7a86 	vmul.f32	s14, s13, s12
 800b0e4:	ee36 6a62 	vsub.f32	s12, s12, s5
 800b0e8:	ee87 7a06 	vdiv.f32	s14, s14, s12
 800b0ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0f0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b0f4:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800b0f8:	ee17 3a90 	vmov	r3, s15
 800b0fc:	4413      	add	r3, r2
 800b0fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b102:	f2c0 80e4 	blt.w	800b2ce <__ieee754_powf+0x5fe>
 800b106:	ee07 3a90 	vmov	s15, r3
 800b10a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800b10e:	ee17 0a90 	vmov	r0, s15
 800b112:	e5fd      	b.n	800ad10 <__ieee754_powf+0x40>
 800b114:	f002 0201 	and.w	r2, r2, #1
 800b118:	f1c2 0902 	rsb	r9, r2, #2
 800b11c:	e604      	b.n	800ad28 <__ieee754_powf+0x58>
 800b11e:	eef1 7a67 	vneg.f32	s15, s15
 800b122:	ee17 0a90 	vmov	r0, s15
 800b126:	e5f3      	b.n	800ad10 <__ieee754_powf+0x40>
 800b128:	4a44      	ldr	r2, [pc, #272]	; (800b23c <__ieee754_powf+0x56c>)
 800b12a:	4297      	cmp	r7, r2
 800b12c:	f340 809e 	ble.w	800b26c <__ieee754_powf+0x59c>
 800b130:	2c00      	cmp	r4, #0
 800b132:	f77f ae20 	ble.w	800ad76 <__ieee754_powf+0xa6>
 800b136:	eddf 7a42 	vldr	s15, [pc, #264]	; 800b240 <__ieee754_powf+0x570>
 800b13a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b13e:	ee17 0a90 	vmov	r0, s15
 800b142:	e5e5      	b.n	800ad10 <__ieee754_powf+0x40>
 800b144:	2600      	movs	r6, #0
 800b146:	4635      	mov	r5, r6
 800b148:	e6a8      	b.n	800ae9c <__ieee754_powf+0x1cc>
 800b14a:	2000      	movs	r0, #0
 800b14c:	e692      	b.n	800ae74 <__ieee754_powf+0x1a4>
 800b14e:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 800b244 <__ieee754_powf+0x574>
 800b152:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800b156:	ee37 6a86 	vadd.f32	s12, s15, s12
 800b15a:	eeb4 6ae6 	vcmpe.f32	s12, s13
 800b15e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b162:	dd08      	ble.n	800b176 <__ieee754_powf+0x4a6>
 800b164:	eddf 7a36 	vldr	s15, [pc, #216]	; 800b240 <__ieee754_powf+0x570>
 800b168:	ee28 8a27 	vmul.f32	s16, s16, s15
 800b16c:	ee68 7a27 	vmul.f32	s15, s16, s15
 800b170:	ee17 0a90 	vmov	r0, s15
 800b174:	e5cc      	b.n	800ad10 <__ieee754_powf+0x40>
 800b176:	15d2      	asrs	r2, r2, #23
 800b178:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 800b17c:	3a7e      	subs	r2, #126	; 0x7e
 800b17e:	fa41 f202 	asr.w	r2, r1, r2
 800b182:	441a      	add	r2, r3
 800b184:	f3c2 50c7 	ubfx	r0, r2, #23, #8
 800b188:	4c2f      	ldr	r4, [pc, #188]	; (800b248 <__ieee754_powf+0x578>)
 800b18a:	f1a0 057f 	sub.w	r5, r0, #127	; 0x7f
 800b18e:	412c      	asrs	r4, r5
 800b190:	f3c2 0116 	ubfx	r1, r2, #0, #23
 800b194:	ea22 0204 	bic.w	r2, r2, r4
 800b198:	ee06 2a90 	vmov	s13, r2
 800b19c:	f1c0 0096 	rsb	r0, r0, #150	; 0x96
 800b1a0:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800b1a4:	ee37 7a66 	vsub.f32	s14, s14, s13
 800b1a8:	4101      	asrs	r1, r0
 800b1aa:	ea81 71e3 	eor.w	r1, r1, r3, asr #31
 800b1ae:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b1b2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800b1b6:	05ca      	lsls	r2, r1, #23
 800b1b8:	ee16 3a90 	vmov	r3, s13
 800b1bc:	e752      	b.n	800b064 <__ieee754_powf+0x394>
 800b1be:	4923      	ldr	r1, [pc, #140]	; (800b24c <__ieee754_powf+0x57c>)
 800b1c0:	428a      	cmp	r2, r1
 800b1c2:	dc08      	bgt.n	800b1d6 <__ieee754_powf+0x506>
 800b1c4:	f47f af48 	bne.w	800b058 <__ieee754_powf+0x388>
 800b1c8:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800b1cc:	eef4 7ae6 	vcmpe.f32	s15, s13
 800b1d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1d4:	d8cf      	bhi.n	800b176 <__ieee754_powf+0x4a6>
 800b1d6:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800b250 <__ieee754_powf+0x580>
 800b1da:	ee28 8a27 	vmul.f32	s16, s16, s15
 800b1de:	ee68 7a27 	vmul.f32	s15, s16, s15
 800b1e2:	ee17 0a90 	vmov	r0, s15
 800b1e6:	e593      	b.n	800ad10 <__ieee754_powf+0x40>
 800b1e8:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800b1ec:	2501      	movs	r5, #1
 800b1ee:	e655      	b.n	800ae9c <__ieee754_powf+0x1cc>
 800b1f0:	001cc471 	.word	0x001cc471
 800b1f4:	005db3d6 	.word	0x005db3d6
 800b1f8:	3e53f142 	.word	0x3e53f142
 800b1fc:	3e6c3255 	.word	0x3e6c3255
 800b200:	3e8ba305 	.word	0x3e8ba305
 800b204:	3edb6db7 	.word	0x3edb6db7
 800b208:	3f19999a 	.word	0x3f19999a
 800b20c:	3f76384f 	.word	0x3f76384f
 800b210:	369dc3a0 	.word	0x369dc3a0
 800b214:	0800e1a0 	.word	0x0800e1a0
 800b218:	3f763800 	.word	0x3f763800
 800b21c:	35bfbe8c 	.word	0x35bfbe8c
 800b220:	3f317218 	.word	0x3f317218
 800b224:	3f317200 	.word	0x3f317200
 800b228:	3331bb4c 	.word	0x3331bb4c
 800b22c:	b5ddea0e 	.word	0xb5ddea0e
 800b230:	388ab355 	.word	0x388ab355
 800b234:	bb360b61 	.word	0xbb360b61
 800b238:	3e2aaaab 	.word	0x3e2aaaab
 800b23c:	3f800007 	.word	0x3f800007
 800b240:	7149f2ca 	.word	0x7149f2ca
 800b244:	3338aa3c 	.word	0x3338aa3c
 800b248:	007fffff 	.word	0x007fffff
 800b24c:	43160000 	.word	0x43160000
 800b250:	0da24260 	.word	0x0da24260
 800b254:	0800e1a8 	.word	0x0800e1a8
 800b258:	0800e198 	.word	0x0800e198
 800b25c:	3eaaaaab 	.word	0x3eaaaaab
 800b260:	3fb8aa3b 	.word	0x3fb8aa3b
 800b264:	3fb8aa00 	.word	0x3fb8aa00
 800b268:	36eca570 	.word	0x36eca570
 800b26c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 800b270:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b274:	ed1f 6a07 	vldr	s12, [pc, #-28]	; 800b25c <__ieee754_powf+0x58c>
 800b278:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800b260 <__ieee754_powf+0x590>
 800b27c:	ed5f 4a06 	vldr	s9, [pc, #-24]	; 800b268 <__ieee754_powf+0x598>
 800b280:	ed5f 5a08 	vldr	s11, [pc, #-32]	; 800b264 <__ieee754_powf+0x594>
 800b284:	eeb1 5a67 	vneg.f32	s10, s15
 800b288:	eef5 6a00 	vmov.f32	s13, #80	; 0x50
 800b28c:	eea5 6a26 	vfma.f32	s12, s10, s13
 800b290:	eef6 6a00 	vmov.f32	s13, #96	; 0x60
 800b294:	eee6 6a67 	vfms.f32	s13, s12, s15
 800b298:	eeb0 6a66 	vmov.f32	s12, s13
 800b29c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800b2a0:	ee66 6a86 	vmul.f32	s13, s13, s12
 800b2a4:	ee27 7a66 	vnmul.f32	s14, s14, s13
 800b2a8:	eea7 7aa4 	vfma.f32	s14, s15, s9
 800b2ac:	eef0 6a47 	vmov.f32	s13, s14
 800b2b0:	eee7 6aa5 	vfma.f32	s13, s15, s11
 800b2b4:	ee16 2a90 	vmov	r2, s13
 800b2b8:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800b2bc:	f022 020f 	bic.w	r2, r2, #15
 800b2c0:	ee07 2a90 	vmov	s15, r2
 800b2c4:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b2c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b2cc:	e695      	b.n	800affa <__ieee754_powf+0x32a>
 800b2ce:	ee17 0a90 	vmov	r0, s15
 800b2d2:	f000 f9f5 	bl	800b6c0 <scalbnf>
 800b2d6:	ee07 0a90 	vmov	s15, r0
 800b2da:	e716      	b.n	800b10a <__ieee754_powf+0x43a>

0800b2dc <__ieee754_sqrtf>:
 800b2dc:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800b2e0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b2e4:	b470      	push	{r4, r5, r6}
 800b2e6:	ee07 0a90 	vmov	s15, r0
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	d232      	bcs.n	800b354 <__ieee754_sqrtf+0x78>
 800b2ee:	b36a      	cbz	r2, 800b34c <__ieee754_sqrtf+0x70>
 800b2f0:	2800      	cmp	r0, #0
 800b2f2:	db41      	blt.n	800b378 <__ieee754_sqrtf+0x9c>
 800b2f4:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800b2f8:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800b2fc:	d330      	bcc.n	800b360 <__ieee754_sqrtf+0x84>
 800b2fe:	f1a1 027f 	sub.w	r2, r1, #127	; 0x7f
 800b302:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b306:	07d1      	lsls	r1, r2, #31
 800b308:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b30c:	bf48      	it	mi
 800b30e:	005b      	lslmi	r3, r3, #1
 800b310:	2400      	movs	r4, #0
 800b312:	1056      	asrs	r6, r2, #1
 800b314:	005b      	lsls	r3, r3, #1
 800b316:	4625      	mov	r5, r4
 800b318:	2119      	movs	r1, #25
 800b31a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b31e:	18a8      	adds	r0, r5, r2
 800b320:	4298      	cmp	r0, r3
 800b322:	dc02      	bgt.n	800b32a <__ieee754_sqrtf+0x4e>
 800b324:	1a1b      	subs	r3, r3, r0
 800b326:	1885      	adds	r5, r0, r2
 800b328:	4414      	add	r4, r2
 800b32a:	3901      	subs	r1, #1
 800b32c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b330:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b334:	d1f3      	bne.n	800b31e <__ieee754_sqrtf+0x42>
 800b336:	b113      	cbz	r3, 800b33e <__ieee754_sqrtf+0x62>
 800b338:	f004 0301 	and.w	r3, r4, #1
 800b33c:	441c      	add	r4, r3
 800b33e:	1064      	asrs	r4, r4, #1
 800b340:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800b344:	eb04 53c6 	add.w	r3, r4, r6, lsl #23
 800b348:	ee07 3a90 	vmov	s15, r3
 800b34c:	ee17 0a90 	vmov	r0, s15
 800b350:	bc70      	pop	{r4, r5, r6}
 800b352:	4770      	bx	lr
 800b354:	eee7 7aa7 	vfma.f32	s15, s15, s15
 800b358:	bc70      	pop	{r4, r5, r6}
 800b35a:	ee17 0a90 	vmov	r0, s15
 800b35e:	4770      	bx	lr
 800b360:	f410 0200 	ands.w	r2, r0, #8388608	; 0x800000
 800b364:	d10d      	bne.n	800b382 <__ieee754_sqrtf+0xa6>
 800b366:	005b      	lsls	r3, r3, #1
 800b368:	0218      	lsls	r0, r3, #8
 800b36a:	f102 0201 	add.w	r2, r2, #1
 800b36e:	d5fa      	bpl.n	800b366 <__ieee754_sqrtf+0x8a>
 800b370:	f1c2 0201 	rsb	r2, r2, #1
 800b374:	4411      	add	r1, r2
 800b376:	e7c2      	b.n	800b2fe <__ieee754_sqrtf+0x22>
 800b378:	ee77 7ae7 	vsub.f32	s15, s15, s15
 800b37c:	eec7 7aa7 	vdiv.f32	s15, s15, s15
 800b380:	e7e4      	b.n	800b34c <__ieee754_sqrtf+0x70>
 800b382:	2201      	movs	r2, #1
 800b384:	4411      	add	r1, r2
 800b386:	e7ba      	b.n	800b2fe <__ieee754_sqrtf+0x22>

0800b388 <matherr>:
 800b388:	2000      	movs	r0, #0
 800b38a:	4770      	bx	lr

0800b38c <nan>:
 800b38c:	2000      	movs	r0, #0
 800b38e:	4901      	ldr	r1, [pc, #4]	; (800b394 <nan+0x8>)
 800b390:	4770      	bx	lr
 800b392:	bf00      	nop
 800b394:	7ff80000 	.word	0x7ff80000

0800b398 <rint>:
 800b398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b39a:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
 800b39e:	f2ae 35ff 	subw	r5, lr, #1023	; 0x3ff
 800b3a2:	2d13      	cmp	r5, #19
 800b3a4:	b083      	sub	sp, #12
 800b3a6:	4602      	mov	r2, r0
 800b3a8:	460b      	mov	r3, r1
 800b3aa:	460c      	mov	r4, r1
 800b3ac:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800b3b0:	4607      	mov	r7, r0
 800b3b2:	dc2e      	bgt.n	800b412 <rint+0x7a>
 800b3b4:	2d00      	cmp	r5, #0
 800b3b6:	db48      	blt.n	800b44a <rint+0xb2>
 800b3b8:	493b      	ldr	r1, [pc, #236]	; (800b4a8 <rint+0x110>)
 800b3ba:	4129      	asrs	r1, r5
 800b3bc:	ea01 0003 	and.w	r0, r1, r3
 800b3c0:	4310      	orrs	r0, r2
 800b3c2:	d02b      	beq.n	800b41c <rint+0x84>
 800b3c4:	0849      	lsrs	r1, r1, #1
 800b3c6:	400b      	ands	r3, r1
 800b3c8:	ea53 0702 	orrs.w	r7, r3, r2
 800b3cc:	d00c      	beq.n	800b3e8 <rint+0x50>
 800b3ce:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b3d2:	2d13      	cmp	r5, #19
 800b3d4:	ea24 0101 	bic.w	r1, r4, r1
 800b3d8:	fa43 f405 	asr.w	r4, r3, r5
 800b3dc:	ea44 0401 	orr.w	r4, r4, r1
 800b3e0:	bf0c      	ite	eq
 800b3e2:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
 800b3e6:	2700      	movne	r7, #0
 800b3e8:	4930      	ldr	r1, [pc, #192]	; (800b4ac <rint+0x114>)
 800b3ea:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800b3ee:	4623      	mov	r3, r4
 800b3f0:	e9d6 4500 	ldrd	r4, r5, [r6]
 800b3f4:	463a      	mov	r2, r7
 800b3f6:	4620      	mov	r0, r4
 800b3f8:	4629      	mov	r1, r5
 800b3fa:	f000 f9ed 	bl	800b7d8 <__adddf3>
 800b3fe:	e9cd 0100 	strd	r0, r1, [sp]
 800b402:	4622      	mov	r2, r4
 800b404:	462b      	mov	r3, r5
 800b406:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b40a:	f000 f9e3 	bl	800b7d4 <__aeabi_dsub>
 800b40e:	b003      	add	sp, #12
 800b410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b412:	2d33      	cmp	r5, #51	; 0x33
 800b414:	dd06      	ble.n	800b424 <rint+0x8c>
 800b416:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800b41a:	d041      	beq.n	800b4a0 <rint+0x108>
 800b41c:	4610      	mov	r0, r2
 800b41e:	4619      	mov	r1, r3
 800b420:	b003      	add	sp, #12
 800b422:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b424:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
 800b428:	f04f 31ff 	mov.w	r1, #4294967295
 800b42c:	fa21 f10e 	lsr.w	r1, r1, lr
 800b430:	4201      	tst	r1, r0
 800b432:	d0f3      	beq.n	800b41c <rint+0x84>
 800b434:	0849      	lsrs	r1, r1, #1
 800b436:	4201      	tst	r1, r0
 800b438:	d0d6      	beq.n	800b3e8 <rint+0x50>
 800b43a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b43e:	ea20 0101 	bic.w	r1, r0, r1
 800b442:	fa43 f70e 	asr.w	r7, r3, lr
 800b446:	430f      	orrs	r7, r1
 800b448:	e7ce      	b.n	800b3e8 <rint+0x50>
 800b44a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b44e:	4301      	orrs	r1, r0
 800b450:	d0e4      	beq.n	800b41c <rint+0x84>
 800b452:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800b456:	ea41 0c00 	orr.w	ip, r1, r0
 800b45a:	f1cc 0100 	rsb	r1, ip, #0
 800b45e:	ea41 0c0c 	orr.w	ip, r1, ip
 800b462:	4912      	ldr	r1, [pc, #72]	; (800b4ac <rint+0x114>)
 800b464:	0c5c      	lsrs	r4, r3, #17
 800b466:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
 800b46a:	f40c 2c00 	and.w	ip, ip, #524288	; 0x80000
 800b46e:	0464      	lsls	r4, r4, #17
 800b470:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b474:	ea4c 0304 	orr.w	r3, ip, r4
 800b478:	e9d1 4500 	ldrd	r4, r5, [r1]
 800b47c:	4620      	mov	r0, r4
 800b47e:	4629      	mov	r1, r5
 800b480:	f000 f9aa 	bl	800b7d8 <__adddf3>
 800b484:	e9cd 0100 	strd	r0, r1, [sp]
 800b488:	4622      	mov	r2, r4
 800b48a:	462b      	mov	r3, r5
 800b48c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b490:	f000 f9a0 	bl	800b7d4 <__aeabi_dsub>
 800b494:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800b498:	ea44 73c6 	orr.w	r3, r4, r6, lsl #31
 800b49c:	4619      	mov	r1, r3
 800b49e:	e7bf      	b.n	800b420 <rint+0x88>
 800b4a0:	f000 f99a 	bl	800b7d8 <__adddf3>
 800b4a4:	e7bc      	b.n	800b420 <rint+0x88>
 800b4a6:	bf00      	nop
 800b4a8:	000fffff 	.word	0x000fffff
 800b4ac:	0800e1b0 	.word	0x0800e1b0

0800b4b0 <atanf>:
 800b4b0:	b538      	push	{r3, r4, r5, lr}
 800b4b2:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800b4b6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800b4ba:	ee07 0a90 	vmov	s15, r0
 800b4be:	4605      	mov	r5, r0
 800b4c0:	db0d      	blt.n	800b4de <atanf+0x2e>
 800b4c2:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800b4c6:	dc5c      	bgt.n	800b582 <atanf+0xd2>
 800b4c8:	eddf 7a55 	vldr	s15, [pc, #340]	; 800b620 <atanf+0x170>
 800b4cc:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800b624 <atanf+0x174>
 800b4d0:	2800      	cmp	r0, #0
 800b4d2:	bfd8      	it	le
 800b4d4:	eef0 7a47 	vmovle.f32	s15, s14
 800b4d8:	ee17 0a90 	vmov	r0, s15
 800b4dc:	bd38      	pop	{r3, r4, r5, pc}
 800b4de:	4b52      	ldr	r3, [pc, #328]	; (800b628 <atanf+0x178>)
 800b4e0:	429c      	cmp	r4, r3
 800b4e2:	dc61      	bgt.n	800b5a8 <atanf+0xf8>
 800b4e4:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800b4e8:	db50      	blt.n	800b58c <atanf+0xdc>
 800b4ea:	f04f 33ff 	mov.w	r3, #4294967295
 800b4ee:	ee67 5aa7 	vmul.f32	s11, s15, s15
 800b4f2:	ed9f 1a4e 	vldr	s2, [pc, #312]	; 800b62c <atanf+0x17c>
 800b4f6:	ed9f 2a4e 	vldr	s4, [pc, #312]	; 800b630 <atanf+0x180>
 800b4fa:	ed9f 3a4e 	vldr	s6, [pc, #312]	; 800b634 <atanf+0x184>
 800b4fe:	eddf 1a4e 	vldr	s3, [pc, #312]	; 800b638 <atanf+0x188>
 800b502:	eddf 2a4e 	vldr	s5, [pc, #312]	; 800b63c <atanf+0x18c>
 800b506:	ed9f 4a4e 	vldr	s8, [pc, #312]	; 800b640 <atanf+0x190>
 800b50a:	eddf 3a4e 	vldr	s7, [pc, #312]	; 800b644 <atanf+0x194>
 800b50e:	ed9f 5a4e 	vldr	s10, [pc, #312]	; 800b648 <atanf+0x198>
 800b512:	eddf 4a4e 	vldr	s9, [pc, #312]	; 800b64c <atanf+0x19c>
 800b516:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 800b650 <atanf+0x1a0>
 800b51a:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b654 <atanf+0x1a4>
 800b51e:	ee25 7aa5 	vmul.f32	s14, s11, s11
 800b522:	1c5a      	adds	r2, r3, #1
 800b524:	eea7 2a01 	vfma.f32	s4, s14, s2
 800b528:	eee7 2a21 	vfma.f32	s5, s14, s3
 800b52c:	eea2 3a07 	vfma.f32	s6, s4, s14
 800b530:	eee2 3a87 	vfma.f32	s7, s5, s14
 800b534:	eea3 4a07 	vfma.f32	s8, s6, s14
 800b538:	eee3 4a87 	vfma.f32	s9, s7, s14
 800b53c:	eea4 5a07 	vfma.f32	s10, s8, s14
 800b540:	eee4 6a87 	vfma.f32	s13, s9, s14
 800b544:	eea5 6a07 	vfma.f32	s12, s10, s14
 800b548:	ee26 7a87 	vmul.f32	s14, s13, s14
 800b54c:	ee66 6a25 	vmul.f32	s13, s12, s11
 800b550:	d041      	beq.n	800b5d6 <atanf+0x126>
 800b552:	4a41      	ldr	r2, [pc, #260]	; (800b658 <atanf+0x1a8>)
 800b554:	4941      	ldr	r1, [pc, #260]	; (800b65c <atanf+0x1ac>)
 800b556:	009b      	lsls	r3, r3, #2
 800b558:	441a      	add	r2, r3
 800b55a:	ee76 6a87 	vadd.f32	s13, s13, s14
 800b55e:	ed92 7a00 	vldr	s14, [r2]
 800b562:	ee96 7aa7 	vfnms.f32	s14, s13, s15
 800b566:	440b      	add	r3, r1
 800b568:	2d00      	cmp	r5, #0
 800b56a:	edd3 6a00 	vldr	s13, [r3]
 800b56e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b572:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b576:	bfb8      	it	lt
 800b578:	eef1 7a67 	vneglt.f32	s15, s15
 800b57c:	ee17 0a90 	vmov	r0, s15
 800b580:	bd38      	pop	{r3, r4, r5, pc}
 800b582:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b586:	ee17 0a90 	vmov	r0, s15
 800b58a:	bd38      	pop	{r3, r4, r5, pc}
 800b58c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800b660 <atanf+0x1b0>
 800b590:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b594:	eef7 6a00 	vmov.f32	s13, #112	; 0x70
 800b598:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800b59c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5a0:	dda3      	ble.n	800b4ea <atanf+0x3a>
 800b5a2:	ee17 0a90 	vmov	r0, s15
 800b5a6:	bd38      	pop	{r3, r4, r5, pc}
 800b5a8:	f000 f860 	bl	800b66c <fabsf>
 800b5ac:	4b2d      	ldr	r3, [pc, #180]	; (800b664 <atanf+0x1b4>)
 800b5ae:	429c      	cmp	r4, r3
 800b5b0:	ee07 0a10 	vmov	s14, r0
 800b5b4:	dc14      	bgt.n	800b5e0 <atanf+0x130>
 800b5b6:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800b5ba:	429c      	cmp	r4, r3
 800b5bc:	dc25      	bgt.n	800b60a <atanf+0x15a>
 800b5be:	eef0 7a00 	vmov.f32	s15, #0
 800b5c2:	eeff 6a00 	vmov.f32	s13, #240	; 0xf0
 800b5c6:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b5d0:	eec6 7aa7 	vdiv.f32	s15, s13, s15
 800b5d4:	e78b      	b.n	800b4ee <atanf+0x3e>
 800b5d6:	ee76 6a87 	vadd.f32	s13, s13, s14
 800b5da:	eee6 7ae7 	vfms.f32	s15, s13, s15
 800b5de:	e77b      	b.n	800b4d8 <atanf+0x28>
 800b5e0:	4b21      	ldr	r3, [pc, #132]	; (800b668 <atanf+0x1b8>)
 800b5e2:	429c      	cmp	r4, r3
 800b5e4:	dc0b      	bgt.n	800b5fe <atanf+0x14e>
 800b5e6:	eef7 7a08 	vmov.f32	s15, #120	; 0x78
 800b5ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x70
 800b5ee:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b5f2:	2302      	movs	r3, #2
 800b5f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b5f8:	eec7 7aa6 	vdiv.f32	s15, s15, s13
 800b5fc:	e777      	b.n	800b4ee <atanf+0x3e>
 800b5fe:	eeff 7a00 	vmov.f32	s15, #240	; 0xf0
 800b602:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800b606:	2303      	movs	r3, #3
 800b608:	e771      	b.n	800b4ee <atanf+0x3e>
 800b60a:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 800b60e:	ee77 6a67 	vsub.f32	s13, s14, s15
 800b612:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b616:	2301      	movs	r3, #1
 800b618:	eec6 7aa7 	vdiv.f32	s15, s13, s15
 800b61c:	e767      	b.n	800b4ee <atanf+0x3e>
 800b61e:	bf00      	nop
 800b620:	3fc90fdb 	.word	0x3fc90fdb
 800b624:	bfc90fdb 	.word	0xbfc90fdb
 800b628:	3edfffff 	.word	0x3edfffff
 800b62c:	3c8569d7 	.word	0x3c8569d7
 800b630:	3d4bda59 	.word	0x3d4bda59
 800b634:	3d886b35 	.word	0x3d886b35
 800b638:	bd15a221 	.word	0xbd15a221
 800b63c:	bd6ef16b 	.word	0xbd6ef16b
 800b640:	3dba2e6e 	.word	0x3dba2e6e
 800b644:	bd9d8795 	.word	0xbd9d8795
 800b648:	3e124925 	.word	0x3e124925
 800b64c:	bde38e38 	.word	0xbde38e38
 800b650:	3eaaaaab 	.word	0x3eaaaaab
 800b654:	be4ccccd 	.word	0xbe4ccccd
 800b658:	0800e1c0 	.word	0x0800e1c0
 800b65c:	0800e1d0 	.word	0x0800e1d0
 800b660:	7149f2ca 	.word	0x7149f2ca
 800b664:	3f97ffff 	.word	0x3f97ffff
 800b668:	401bffff 	.word	0x401bffff

0800b66c <fabsf>:
 800b66c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b670:	4770      	bx	lr
 800b672:	bf00      	nop

0800b674 <finitef>:
 800b674:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b678:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800b67c:	bfac      	ite	ge
 800b67e:	2000      	movge	r0, #0
 800b680:	2001      	movlt	r0, #1
 800b682:	4770      	bx	lr

0800b684 <__fpclassifyf>:
 800b684:	f030 4000 	bics.w	r0, r0, #2147483648	; 0x80000000
 800b688:	d101      	bne.n	800b68e <__fpclassifyf+0xa>
 800b68a:	2002      	movs	r0, #2
 800b68c:	4770      	bx	lr
 800b68e:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800b692:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800b696:	d201      	bcs.n	800b69c <__fpclassifyf+0x18>
 800b698:	2004      	movs	r0, #4
 800b69a:	4770      	bx	lr
 800b69c:	4b05      	ldr	r3, [pc, #20]	; (800b6b4 <__fpclassifyf+0x30>)
 800b69e:	1e42      	subs	r2, r0, #1
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	d801      	bhi.n	800b6a8 <__fpclassifyf+0x24>
 800b6a4:	2003      	movs	r0, #3
 800b6a6:	4770      	bx	lr
 800b6a8:	f1a0 40ff 	sub.w	r0, r0, #2139095040	; 0x7f800000
 800b6ac:	fab0 f080 	clz	r0, r0
 800b6b0:	0940      	lsrs	r0, r0, #5
 800b6b2:	4770      	bx	lr
 800b6b4:	007ffffe 	.word	0x007ffffe

0800b6b8 <nanf>:
 800b6b8:	4800      	ldr	r0, [pc, #0]	; (800b6bc <nanf+0x4>)
 800b6ba:	4770      	bx	lr
 800b6bc:	7fc00000 	.word	0x7fc00000

0800b6c0 <scalbnf>:
 800b6c0:	b500      	push	{lr}
 800b6c2:	ed2d 8b02 	vpush	{d8}
 800b6c6:	b083      	sub	sp, #12
 800b6c8:	9001      	str	r0, [sp, #4]
 800b6ca:	9b01      	ldr	r3, [sp, #4]
 800b6cc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800b6d0:	d023      	beq.n	800b71a <scalbnf+0x5a>
 800b6d2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b6d6:	d215      	bcs.n	800b704 <scalbnf+0x44>
 800b6d8:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800b6dc:	d326      	bcc.n	800b72c <scalbnf+0x6c>
 800b6de:	0dd2      	lsrs	r2, r2, #23
 800b6e0:	440a      	add	r2, r1
 800b6e2:	2afe      	cmp	r2, #254	; 0xfe
 800b6e4:	dc3c      	bgt.n	800b760 <scalbnf+0xa0>
 800b6e6:	2a00      	cmp	r2, #0
 800b6e8:	dd30      	ble.n	800b74c <scalbnf+0x8c>
 800b6ea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b6ee:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b6f2:	ee07 3a90 	vmov	s15, r3
 800b6f6:	ee17 0a90 	vmov	r0, s15
 800b6fa:	b003      	add	sp, #12
 800b6fc:	ecbd 8b02 	vpop	{d8}
 800b700:	f85d fb04 	ldr.w	pc, [sp], #4
 800b704:	ee07 0a90 	vmov	s15, r0
 800b708:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b70c:	ee17 0a90 	vmov	r0, s15
 800b710:	b003      	add	sp, #12
 800b712:	ecbd 8b02 	vpop	{d8}
 800b716:	f85d fb04 	ldr.w	pc, [sp], #4
 800b71a:	eddd 7a01 	vldr	s15, [sp, #4]
 800b71e:	ee17 0a90 	vmov	r0, s15
 800b722:	b003      	add	sp, #12
 800b724:	ecbd 8b02 	vpop	{d8}
 800b728:	f85d fb04 	ldr.w	pc, [sp], #4
 800b72c:	ed9d 7a01 	vldr	s14, [sp, #4]
 800b730:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800b7ac <scalbnf+0xec>
 800b734:	4b1e      	ldr	r3, [pc, #120]	; (800b7b0 <scalbnf+0xf0>)
 800b736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b73a:	4299      	cmp	r1, r3
 800b73c:	edcd 7a01 	vstr	s15, [sp, #4]
 800b740:	db20      	blt.n	800b784 <scalbnf+0xc4>
 800b742:	9b01      	ldr	r3, [sp, #4]
 800b744:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b748:	3a19      	subs	r2, #25
 800b74a:	e7c9      	b.n	800b6e0 <scalbnf+0x20>
 800b74c:	f112 0f16 	cmn.w	r2, #22
 800b750:	da1f      	bge.n	800b792 <scalbnf+0xd2>
 800b752:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b756:	4299      	cmp	r1, r3
 800b758:	dc02      	bgt.n	800b760 <scalbnf+0xa0>
 800b75a:	ed9f 8a16 	vldr	s16, [pc, #88]	; 800b7b4 <scalbnf+0xf4>
 800b75e:	e001      	b.n	800b764 <scalbnf+0xa4>
 800b760:	ed9f 8a15 	vldr	s16, [pc, #84]	; 800b7b8 <scalbnf+0xf8>
 800b764:	9901      	ldr	r1, [sp, #4]
 800b766:	ee18 0a10 	vmov	r0, s16
 800b76a:	f000 f829 	bl	800b7c0 <copysignf>
 800b76e:	ee07 0a90 	vmov	s15, r0
 800b772:	ee67 7a88 	vmul.f32	s15, s15, s16
 800b776:	ee17 0a90 	vmov	r0, s15
 800b77a:	b003      	add	sp, #12
 800b77c:	ecbd 8b02 	vpop	{d8}
 800b780:	f85d fb04 	ldr.w	pc, [sp], #4
 800b784:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800b7b4 <scalbnf+0xf4>
 800b788:	ed9d 7a01 	vldr	s14, [sp, #4]
 800b78c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b790:	e7bc      	b.n	800b70c <scalbnf+0x4c>
 800b792:	3219      	adds	r2, #25
 800b794:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b798:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b79c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800b7bc <scalbnf+0xfc>
 800b7a0:	ee07 3a90 	vmov	s15, r3
 800b7a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b7a8:	e7b0      	b.n	800b70c <scalbnf+0x4c>
 800b7aa:	bf00      	nop
 800b7ac:	4c000000 	.word	0x4c000000
 800b7b0:	ffff3cb0 	.word	0xffff3cb0
 800b7b4:	0da24260 	.word	0x0da24260
 800b7b8:	7149f2ca 	.word	0x7149f2ca
 800b7bc:	33000000 	.word	0x33000000

0800b7c0 <copysignf>:
 800b7c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800b7c4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b7c8:	4308      	orrs	r0, r1
 800b7ca:	4770      	bx	lr

0800b7cc <__aeabi_drsub>:
 800b7cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800b7d0:	e002      	b.n	800b7d8 <__adddf3>
 800b7d2:	bf00      	nop

0800b7d4 <__aeabi_dsub>:
 800b7d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800b7d8 <__adddf3>:
 800b7d8:	b530      	push	{r4, r5, lr}
 800b7da:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800b7de:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800b7e2:	ea94 0f05 	teq	r4, r5
 800b7e6:	bf08      	it	eq
 800b7e8:	ea90 0f02 	teqeq	r0, r2
 800b7ec:	bf1f      	itttt	ne
 800b7ee:	ea54 0c00 	orrsne.w	ip, r4, r0
 800b7f2:	ea55 0c02 	orrsne.w	ip, r5, r2
 800b7f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800b7fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800b7fe:	f000 80e2 	beq.w	800b9c6 <__adddf3+0x1ee>
 800b802:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800b806:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800b80a:	bfb8      	it	lt
 800b80c:	426d      	neglt	r5, r5
 800b80e:	dd0c      	ble.n	800b82a <__adddf3+0x52>
 800b810:	442c      	add	r4, r5
 800b812:	ea80 0202 	eor.w	r2, r0, r2
 800b816:	ea81 0303 	eor.w	r3, r1, r3
 800b81a:	ea82 0000 	eor.w	r0, r2, r0
 800b81e:	ea83 0101 	eor.w	r1, r3, r1
 800b822:	ea80 0202 	eor.w	r2, r0, r2
 800b826:	ea81 0303 	eor.w	r3, r1, r3
 800b82a:	2d36      	cmp	r5, #54	; 0x36
 800b82c:	bf88      	it	hi
 800b82e:	bd30      	pophi	{r4, r5, pc}
 800b830:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800b834:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800b838:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800b83c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800b840:	d002      	beq.n	800b848 <__adddf3+0x70>
 800b842:	4240      	negs	r0, r0
 800b844:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800b848:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800b84c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800b850:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800b854:	d002      	beq.n	800b85c <__adddf3+0x84>
 800b856:	4252      	negs	r2, r2
 800b858:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800b85c:	ea94 0f05 	teq	r4, r5
 800b860:	f000 80a7 	beq.w	800b9b2 <__adddf3+0x1da>
 800b864:	f1a4 0401 	sub.w	r4, r4, #1
 800b868:	f1d5 0e20 	rsbs	lr, r5, #32
 800b86c:	db0d      	blt.n	800b88a <__adddf3+0xb2>
 800b86e:	fa02 fc0e 	lsl.w	ip, r2, lr
 800b872:	fa22 f205 	lsr.w	r2, r2, r5
 800b876:	1880      	adds	r0, r0, r2
 800b878:	f141 0100 	adc.w	r1, r1, #0
 800b87c:	fa03 f20e 	lsl.w	r2, r3, lr
 800b880:	1880      	adds	r0, r0, r2
 800b882:	fa43 f305 	asr.w	r3, r3, r5
 800b886:	4159      	adcs	r1, r3
 800b888:	e00e      	b.n	800b8a8 <__adddf3+0xd0>
 800b88a:	f1a5 0520 	sub.w	r5, r5, #32
 800b88e:	f10e 0e20 	add.w	lr, lr, #32
 800b892:	2a01      	cmp	r2, #1
 800b894:	fa03 fc0e 	lsl.w	ip, r3, lr
 800b898:	bf28      	it	cs
 800b89a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800b89e:	fa43 f305 	asr.w	r3, r3, r5
 800b8a2:	18c0      	adds	r0, r0, r3
 800b8a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800b8a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800b8ac:	d507      	bpl.n	800b8be <__adddf3+0xe6>
 800b8ae:	f04f 0e00 	mov.w	lr, #0
 800b8b2:	f1dc 0c00 	rsbs	ip, ip, #0
 800b8b6:	eb7e 0000 	sbcs.w	r0, lr, r0
 800b8ba:	eb6e 0101 	sbc.w	r1, lr, r1
 800b8be:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800b8c2:	d31b      	bcc.n	800b8fc <__adddf3+0x124>
 800b8c4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800b8c8:	d30c      	bcc.n	800b8e4 <__adddf3+0x10c>
 800b8ca:	0849      	lsrs	r1, r1, #1
 800b8cc:	ea5f 0030 	movs.w	r0, r0, rrx
 800b8d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800b8d4:	f104 0401 	add.w	r4, r4, #1
 800b8d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800b8dc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800b8e0:	f080 809a 	bcs.w	800ba18 <__adddf3+0x240>
 800b8e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800b8e8:	bf08      	it	eq
 800b8ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800b8ee:	f150 0000 	adcs.w	r0, r0, #0
 800b8f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800b8f6:	ea41 0105 	orr.w	r1, r1, r5
 800b8fa:	bd30      	pop	{r4, r5, pc}
 800b8fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800b900:	4140      	adcs	r0, r0
 800b902:	eb41 0101 	adc.w	r1, r1, r1
 800b906:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800b90a:	f1a4 0401 	sub.w	r4, r4, #1
 800b90e:	d1e9      	bne.n	800b8e4 <__adddf3+0x10c>
 800b910:	f091 0f00 	teq	r1, #0
 800b914:	bf04      	itt	eq
 800b916:	4601      	moveq	r1, r0
 800b918:	2000      	moveq	r0, #0
 800b91a:	fab1 f381 	clz	r3, r1
 800b91e:	bf08      	it	eq
 800b920:	3320      	addeq	r3, #32
 800b922:	f1a3 030b 	sub.w	r3, r3, #11
 800b926:	f1b3 0220 	subs.w	r2, r3, #32
 800b92a:	da0c      	bge.n	800b946 <__adddf3+0x16e>
 800b92c:	320c      	adds	r2, #12
 800b92e:	dd08      	ble.n	800b942 <__adddf3+0x16a>
 800b930:	f102 0c14 	add.w	ip, r2, #20
 800b934:	f1c2 020c 	rsb	r2, r2, #12
 800b938:	fa01 f00c 	lsl.w	r0, r1, ip
 800b93c:	fa21 f102 	lsr.w	r1, r1, r2
 800b940:	e00c      	b.n	800b95c <__adddf3+0x184>
 800b942:	f102 0214 	add.w	r2, r2, #20
 800b946:	bfd8      	it	le
 800b948:	f1c2 0c20 	rsble	ip, r2, #32
 800b94c:	fa01 f102 	lsl.w	r1, r1, r2
 800b950:	fa20 fc0c 	lsr.w	ip, r0, ip
 800b954:	bfdc      	itt	le
 800b956:	ea41 010c 	orrle.w	r1, r1, ip
 800b95a:	4090      	lslle	r0, r2
 800b95c:	1ae4      	subs	r4, r4, r3
 800b95e:	bfa2      	ittt	ge
 800b960:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800b964:	4329      	orrge	r1, r5
 800b966:	bd30      	popge	{r4, r5, pc}
 800b968:	ea6f 0404 	mvn.w	r4, r4
 800b96c:	3c1f      	subs	r4, #31
 800b96e:	da1c      	bge.n	800b9aa <__adddf3+0x1d2>
 800b970:	340c      	adds	r4, #12
 800b972:	dc0e      	bgt.n	800b992 <__adddf3+0x1ba>
 800b974:	f104 0414 	add.w	r4, r4, #20
 800b978:	f1c4 0220 	rsb	r2, r4, #32
 800b97c:	fa20 f004 	lsr.w	r0, r0, r4
 800b980:	fa01 f302 	lsl.w	r3, r1, r2
 800b984:	ea40 0003 	orr.w	r0, r0, r3
 800b988:	fa21 f304 	lsr.w	r3, r1, r4
 800b98c:	ea45 0103 	orr.w	r1, r5, r3
 800b990:	bd30      	pop	{r4, r5, pc}
 800b992:	f1c4 040c 	rsb	r4, r4, #12
 800b996:	f1c4 0220 	rsb	r2, r4, #32
 800b99a:	fa20 f002 	lsr.w	r0, r0, r2
 800b99e:	fa01 f304 	lsl.w	r3, r1, r4
 800b9a2:	ea40 0003 	orr.w	r0, r0, r3
 800b9a6:	4629      	mov	r1, r5
 800b9a8:	bd30      	pop	{r4, r5, pc}
 800b9aa:	fa21 f004 	lsr.w	r0, r1, r4
 800b9ae:	4629      	mov	r1, r5
 800b9b0:	bd30      	pop	{r4, r5, pc}
 800b9b2:	f094 0f00 	teq	r4, #0
 800b9b6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800b9ba:	bf06      	itte	eq
 800b9bc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800b9c0:	3401      	addeq	r4, #1
 800b9c2:	3d01      	subne	r5, #1
 800b9c4:	e74e      	b.n	800b864 <__adddf3+0x8c>
 800b9c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800b9ca:	bf18      	it	ne
 800b9cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800b9d0:	d029      	beq.n	800ba26 <__adddf3+0x24e>
 800b9d2:	ea94 0f05 	teq	r4, r5
 800b9d6:	bf08      	it	eq
 800b9d8:	ea90 0f02 	teqeq	r0, r2
 800b9dc:	d005      	beq.n	800b9ea <__adddf3+0x212>
 800b9de:	ea54 0c00 	orrs.w	ip, r4, r0
 800b9e2:	bf04      	itt	eq
 800b9e4:	4619      	moveq	r1, r3
 800b9e6:	4610      	moveq	r0, r2
 800b9e8:	bd30      	pop	{r4, r5, pc}
 800b9ea:	ea91 0f03 	teq	r1, r3
 800b9ee:	bf1e      	ittt	ne
 800b9f0:	2100      	movne	r1, #0
 800b9f2:	2000      	movne	r0, #0
 800b9f4:	bd30      	popne	{r4, r5, pc}
 800b9f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800b9fa:	d105      	bne.n	800ba08 <__adddf3+0x230>
 800b9fc:	0040      	lsls	r0, r0, #1
 800b9fe:	4149      	adcs	r1, r1
 800ba00:	bf28      	it	cs
 800ba02:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800ba06:	bd30      	pop	{r4, r5, pc}
 800ba08:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800ba0c:	bf3c      	itt	cc
 800ba0e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800ba12:	bd30      	popcc	{r4, r5, pc}
 800ba14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800ba18:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800ba1c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ba20:	f04f 0000 	mov.w	r0, #0
 800ba24:	bd30      	pop	{r4, r5, pc}
 800ba26:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800ba2a:	bf1a      	itte	ne
 800ba2c:	4619      	movne	r1, r3
 800ba2e:	4610      	movne	r0, r2
 800ba30:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800ba34:	bf1c      	itt	ne
 800ba36:	460b      	movne	r3, r1
 800ba38:	4602      	movne	r2, r0
 800ba3a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800ba3e:	bf06      	itte	eq
 800ba40:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800ba44:	ea91 0f03 	teqeq	r1, r3
 800ba48:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800ba4c:	bd30      	pop	{r4, r5, pc}
 800ba4e:	bf00      	nop

0800ba50 <__aeabi_ui2d>:
 800ba50:	f090 0f00 	teq	r0, #0
 800ba54:	bf04      	itt	eq
 800ba56:	2100      	moveq	r1, #0
 800ba58:	4770      	bxeq	lr
 800ba5a:	b530      	push	{r4, r5, lr}
 800ba5c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800ba60:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800ba64:	f04f 0500 	mov.w	r5, #0
 800ba68:	f04f 0100 	mov.w	r1, #0
 800ba6c:	e750      	b.n	800b910 <__adddf3+0x138>
 800ba6e:	bf00      	nop

0800ba70 <__aeabi_i2d>:
 800ba70:	f090 0f00 	teq	r0, #0
 800ba74:	bf04      	itt	eq
 800ba76:	2100      	moveq	r1, #0
 800ba78:	4770      	bxeq	lr
 800ba7a:	b530      	push	{r4, r5, lr}
 800ba7c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800ba80:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800ba84:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800ba88:	bf48      	it	mi
 800ba8a:	4240      	negmi	r0, r0
 800ba8c:	f04f 0100 	mov.w	r1, #0
 800ba90:	e73e      	b.n	800b910 <__adddf3+0x138>
 800ba92:	bf00      	nop

0800ba94 <__aeabi_f2d>:
 800ba94:	0042      	lsls	r2, r0, #1
 800ba96:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800ba9a:	ea4f 0131 	mov.w	r1, r1, rrx
 800ba9e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800baa2:	bf1f      	itttt	ne
 800baa4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800baa8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800baac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800bab0:	4770      	bxne	lr
 800bab2:	f092 0f00 	teq	r2, #0
 800bab6:	bf14      	ite	ne
 800bab8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800babc:	4770      	bxeq	lr
 800babe:	b530      	push	{r4, r5, lr}
 800bac0:	f44f 7460 	mov.w	r4, #896	; 0x380
 800bac4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800bac8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800bacc:	e720      	b.n	800b910 <__adddf3+0x138>
 800bace:	bf00      	nop

0800bad0 <__aeabi_ul2d>:
 800bad0:	ea50 0201 	orrs.w	r2, r0, r1
 800bad4:	bf08      	it	eq
 800bad6:	4770      	bxeq	lr
 800bad8:	b530      	push	{r4, r5, lr}
 800bada:	f04f 0500 	mov.w	r5, #0
 800bade:	e00a      	b.n	800baf6 <__aeabi_l2d+0x16>

0800bae0 <__aeabi_l2d>:
 800bae0:	ea50 0201 	orrs.w	r2, r0, r1
 800bae4:	bf08      	it	eq
 800bae6:	4770      	bxeq	lr
 800bae8:	b530      	push	{r4, r5, lr}
 800baea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800baee:	d502      	bpl.n	800baf6 <__aeabi_l2d+0x16>
 800baf0:	4240      	negs	r0, r0
 800baf2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800baf6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800bafa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800bafe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800bb02:	f43f aedc 	beq.w	800b8be <__adddf3+0xe6>
 800bb06:	f04f 0203 	mov.w	r2, #3
 800bb0a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800bb0e:	bf18      	it	ne
 800bb10:	3203      	addne	r2, #3
 800bb12:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800bb16:	bf18      	it	ne
 800bb18:	3203      	addne	r2, #3
 800bb1a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800bb1e:	f1c2 0320 	rsb	r3, r2, #32
 800bb22:	fa00 fc03 	lsl.w	ip, r0, r3
 800bb26:	fa20 f002 	lsr.w	r0, r0, r2
 800bb2a:	fa01 fe03 	lsl.w	lr, r1, r3
 800bb2e:	ea40 000e 	orr.w	r0, r0, lr
 800bb32:	fa21 f102 	lsr.w	r1, r1, r2
 800bb36:	4414      	add	r4, r2
 800bb38:	e6c1      	b.n	800b8be <__adddf3+0xe6>
 800bb3a:	bf00      	nop

0800bb3c <__aeabi_dmul>:
 800bb3c:	b570      	push	{r4, r5, r6, lr}
 800bb3e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800bb42:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800bb46:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800bb4a:	bf1d      	ittte	ne
 800bb4c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800bb50:	ea94 0f0c 	teqne	r4, ip
 800bb54:	ea95 0f0c 	teqne	r5, ip
 800bb58:	f000 f8de 	bleq	800bd18 <__aeabi_dmul+0x1dc>
 800bb5c:	442c      	add	r4, r5
 800bb5e:	ea81 0603 	eor.w	r6, r1, r3
 800bb62:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800bb66:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800bb6a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800bb6e:	bf18      	it	ne
 800bb70:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800bb74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800bb78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bb7c:	d038      	beq.n	800bbf0 <__aeabi_dmul+0xb4>
 800bb7e:	fba0 ce02 	umull	ip, lr, r0, r2
 800bb82:	f04f 0500 	mov.w	r5, #0
 800bb86:	fbe1 e502 	umlal	lr, r5, r1, r2
 800bb8a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800bb8e:	fbe0 e503 	umlal	lr, r5, r0, r3
 800bb92:	f04f 0600 	mov.w	r6, #0
 800bb96:	fbe1 5603 	umlal	r5, r6, r1, r3
 800bb9a:	f09c 0f00 	teq	ip, #0
 800bb9e:	bf18      	it	ne
 800bba0:	f04e 0e01 	orrne.w	lr, lr, #1
 800bba4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800bba8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800bbac:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800bbb0:	d204      	bcs.n	800bbbc <__aeabi_dmul+0x80>
 800bbb2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800bbb6:	416d      	adcs	r5, r5
 800bbb8:	eb46 0606 	adc.w	r6, r6, r6
 800bbbc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800bbc0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800bbc4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800bbc8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800bbcc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800bbd0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800bbd4:	bf88      	it	hi
 800bbd6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800bbda:	d81e      	bhi.n	800bc1a <__aeabi_dmul+0xde>
 800bbdc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800bbe0:	bf08      	it	eq
 800bbe2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800bbe6:	f150 0000 	adcs.w	r0, r0, #0
 800bbea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800bbee:	bd70      	pop	{r4, r5, r6, pc}
 800bbf0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800bbf4:	ea46 0101 	orr.w	r1, r6, r1
 800bbf8:	ea40 0002 	orr.w	r0, r0, r2
 800bbfc:	ea81 0103 	eor.w	r1, r1, r3
 800bc00:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800bc04:	bfc2      	ittt	gt
 800bc06:	ebd4 050c 	rsbsgt	r5, r4, ip
 800bc0a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800bc0e:	bd70      	popgt	{r4, r5, r6, pc}
 800bc10:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800bc14:	f04f 0e00 	mov.w	lr, #0
 800bc18:	3c01      	subs	r4, #1
 800bc1a:	f300 80ab 	bgt.w	800bd74 <__aeabi_dmul+0x238>
 800bc1e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800bc22:	bfde      	ittt	le
 800bc24:	2000      	movle	r0, #0
 800bc26:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800bc2a:	bd70      	pople	{r4, r5, r6, pc}
 800bc2c:	f1c4 0400 	rsb	r4, r4, #0
 800bc30:	3c20      	subs	r4, #32
 800bc32:	da35      	bge.n	800bca0 <__aeabi_dmul+0x164>
 800bc34:	340c      	adds	r4, #12
 800bc36:	dc1b      	bgt.n	800bc70 <__aeabi_dmul+0x134>
 800bc38:	f104 0414 	add.w	r4, r4, #20
 800bc3c:	f1c4 0520 	rsb	r5, r4, #32
 800bc40:	fa00 f305 	lsl.w	r3, r0, r5
 800bc44:	fa20 f004 	lsr.w	r0, r0, r4
 800bc48:	fa01 f205 	lsl.w	r2, r1, r5
 800bc4c:	ea40 0002 	orr.w	r0, r0, r2
 800bc50:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800bc54:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800bc58:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800bc5c:	fa21 f604 	lsr.w	r6, r1, r4
 800bc60:	eb42 0106 	adc.w	r1, r2, r6
 800bc64:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800bc68:	bf08      	it	eq
 800bc6a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800bc6e:	bd70      	pop	{r4, r5, r6, pc}
 800bc70:	f1c4 040c 	rsb	r4, r4, #12
 800bc74:	f1c4 0520 	rsb	r5, r4, #32
 800bc78:	fa00 f304 	lsl.w	r3, r0, r4
 800bc7c:	fa20 f005 	lsr.w	r0, r0, r5
 800bc80:	fa01 f204 	lsl.w	r2, r1, r4
 800bc84:	ea40 0002 	orr.w	r0, r0, r2
 800bc88:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800bc8c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800bc90:	f141 0100 	adc.w	r1, r1, #0
 800bc94:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800bc98:	bf08      	it	eq
 800bc9a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800bc9e:	bd70      	pop	{r4, r5, r6, pc}
 800bca0:	f1c4 0520 	rsb	r5, r4, #32
 800bca4:	fa00 f205 	lsl.w	r2, r0, r5
 800bca8:	ea4e 0e02 	orr.w	lr, lr, r2
 800bcac:	fa20 f304 	lsr.w	r3, r0, r4
 800bcb0:	fa01 f205 	lsl.w	r2, r1, r5
 800bcb4:	ea43 0302 	orr.w	r3, r3, r2
 800bcb8:	fa21 f004 	lsr.w	r0, r1, r4
 800bcbc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800bcc0:	fa21 f204 	lsr.w	r2, r1, r4
 800bcc4:	ea20 0002 	bic.w	r0, r0, r2
 800bcc8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800bccc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800bcd0:	bf08      	it	eq
 800bcd2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800bcd6:	bd70      	pop	{r4, r5, r6, pc}
 800bcd8:	f094 0f00 	teq	r4, #0
 800bcdc:	d10f      	bne.n	800bcfe <__aeabi_dmul+0x1c2>
 800bcde:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800bce2:	0040      	lsls	r0, r0, #1
 800bce4:	eb41 0101 	adc.w	r1, r1, r1
 800bce8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800bcec:	bf08      	it	eq
 800bcee:	3c01      	subeq	r4, #1
 800bcf0:	d0f7      	beq.n	800bce2 <__aeabi_dmul+0x1a6>
 800bcf2:	ea41 0106 	orr.w	r1, r1, r6
 800bcf6:	f095 0f00 	teq	r5, #0
 800bcfa:	bf18      	it	ne
 800bcfc:	4770      	bxne	lr
 800bcfe:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800bd02:	0052      	lsls	r2, r2, #1
 800bd04:	eb43 0303 	adc.w	r3, r3, r3
 800bd08:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800bd0c:	bf08      	it	eq
 800bd0e:	3d01      	subeq	r5, #1
 800bd10:	d0f7      	beq.n	800bd02 <__aeabi_dmul+0x1c6>
 800bd12:	ea43 0306 	orr.w	r3, r3, r6
 800bd16:	4770      	bx	lr
 800bd18:	ea94 0f0c 	teq	r4, ip
 800bd1c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800bd20:	bf18      	it	ne
 800bd22:	ea95 0f0c 	teqne	r5, ip
 800bd26:	d00c      	beq.n	800bd42 <__aeabi_dmul+0x206>
 800bd28:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800bd2c:	bf18      	it	ne
 800bd2e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800bd32:	d1d1      	bne.n	800bcd8 <__aeabi_dmul+0x19c>
 800bd34:	ea81 0103 	eor.w	r1, r1, r3
 800bd38:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800bd3c:	f04f 0000 	mov.w	r0, #0
 800bd40:	bd70      	pop	{r4, r5, r6, pc}
 800bd42:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800bd46:	bf06      	itte	eq
 800bd48:	4610      	moveq	r0, r2
 800bd4a:	4619      	moveq	r1, r3
 800bd4c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800bd50:	d019      	beq.n	800bd86 <__aeabi_dmul+0x24a>
 800bd52:	ea94 0f0c 	teq	r4, ip
 800bd56:	d102      	bne.n	800bd5e <__aeabi_dmul+0x222>
 800bd58:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800bd5c:	d113      	bne.n	800bd86 <__aeabi_dmul+0x24a>
 800bd5e:	ea95 0f0c 	teq	r5, ip
 800bd62:	d105      	bne.n	800bd70 <__aeabi_dmul+0x234>
 800bd64:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800bd68:	bf1c      	itt	ne
 800bd6a:	4610      	movne	r0, r2
 800bd6c:	4619      	movne	r1, r3
 800bd6e:	d10a      	bne.n	800bd86 <__aeabi_dmul+0x24a>
 800bd70:	ea81 0103 	eor.w	r1, r1, r3
 800bd74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800bd78:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800bd7c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bd80:	f04f 0000 	mov.w	r0, #0
 800bd84:	bd70      	pop	{r4, r5, r6, pc}
 800bd86:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800bd8a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800bd8e:	bd70      	pop	{r4, r5, r6, pc}

0800bd90 <__aeabi_ddiv>:
 800bd90:	b570      	push	{r4, r5, r6, lr}
 800bd92:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800bd96:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800bd9a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800bd9e:	bf1d      	ittte	ne
 800bda0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800bda4:	ea94 0f0c 	teqne	r4, ip
 800bda8:	ea95 0f0c 	teqne	r5, ip
 800bdac:	f000 f8a7 	bleq	800befe <__aeabi_ddiv+0x16e>
 800bdb0:	eba4 0405 	sub.w	r4, r4, r5
 800bdb4:	ea81 0e03 	eor.w	lr, r1, r3
 800bdb8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800bdbc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800bdc0:	f000 8088 	beq.w	800bed4 <__aeabi_ddiv+0x144>
 800bdc4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800bdc8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800bdcc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800bdd0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800bdd4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800bdd8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800bddc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800bde0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800bde4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800bde8:	429d      	cmp	r5, r3
 800bdea:	bf08      	it	eq
 800bdec:	4296      	cmpeq	r6, r2
 800bdee:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800bdf2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800bdf6:	d202      	bcs.n	800bdfe <__aeabi_ddiv+0x6e>
 800bdf8:	085b      	lsrs	r3, r3, #1
 800bdfa:	ea4f 0232 	mov.w	r2, r2, rrx
 800bdfe:	1ab6      	subs	r6, r6, r2
 800be00:	eb65 0503 	sbc.w	r5, r5, r3
 800be04:	085b      	lsrs	r3, r3, #1
 800be06:	ea4f 0232 	mov.w	r2, r2, rrx
 800be0a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800be0e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800be12:	ebb6 0e02 	subs.w	lr, r6, r2
 800be16:	eb75 0e03 	sbcs.w	lr, r5, r3
 800be1a:	bf22      	ittt	cs
 800be1c:	1ab6      	subcs	r6, r6, r2
 800be1e:	4675      	movcs	r5, lr
 800be20:	ea40 000c 	orrcs.w	r0, r0, ip
 800be24:	085b      	lsrs	r3, r3, #1
 800be26:	ea4f 0232 	mov.w	r2, r2, rrx
 800be2a:	ebb6 0e02 	subs.w	lr, r6, r2
 800be2e:	eb75 0e03 	sbcs.w	lr, r5, r3
 800be32:	bf22      	ittt	cs
 800be34:	1ab6      	subcs	r6, r6, r2
 800be36:	4675      	movcs	r5, lr
 800be38:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800be3c:	085b      	lsrs	r3, r3, #1
 800be3e:	ea4f 0232 	mov.w	r2, r2, rrx
 800be42:	ebb6 0e02 	subs.w	lr, r6, r2
 800be46:	eb75 0e03 	sbcs.w	lr, r5, r3
 800be4a:	bf22      	ittt	cs
 800be4c:	1ab6      	subcs	r6, r6, r2
 800be4e:	4675      	movcs	r5, lr
 800be50:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800be54:	085b      	lsrs	r3, r3, #1
 800be56:	ea4f 0232 	mov.w	r2, r2, rrx
 800be5a:	ebb6 0e02 	subs.w	lr, r6, r2
 800be5e:	eb75 0e03 	sbcs.w	lr, r5, r3
 800be62:	bf22      	ittt	cs
 800be64:	1ab6      	subcs	r6, r6, r2
 800be66:	4675      	movcs	r5, lr
 800be68:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800be6c:	ea55 0e06 	orrs.w	lr, r5, r6
 800be70:	d018      	beq.n	800bea4 <__aeabi_ddiv+0x114>
 800be72:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800be76:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800be7a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800be7e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800be82:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800be86:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800be8a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800be8e:	d1c0      	bne.n	800be12 <__aeabi_ddiv+0x82>
 800be90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800be94:	d10b      	bne.n	800beae <__aeabi_ddiv+0x11e>
 800be96:	ea41 0100 	orr.w	r1, r1, r0
 800be9a:	f04f 0000 	mov.w	r0, #0
 800be9e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800bea2:	e7b6      	b.n	800be12 <__aeabi_ddiv+0x82>
 800bea4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800bea8:	bf04      	itt	eq
 800beaa:	4301      	orreq	r1, r0
 800beac:	2000      	moveq	r0, #0
 800beae:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800beb2:	bf88      	it	hi
 800beb4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800beb8:	f63f aeaf 	bhi.w	800bc1a <__aeabi_dmul+0xde>
 800bebc:	ebb5 0c03 	subs.w	ip, r5, r3
 800bec0:	bf04      	itt	eq
 800bec2:	ebb6 0c02 	subseq.w	ip, r6, r2
 800bec6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800beca:	f150 0000 	adcs.w	r0, r0, #0
 800bece:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800bed2:	bd70      	pop	{r4, r5, r6, pc}
 800bed4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800bed8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800bedc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800bee0:	bfc2      	ittt	gt
 800bee2:	ebd4 050c 	rsbsgt	r5, r4, ip
 800bee6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800beea:	bd70      	popgt	{r4, r5, r6, pc}
 800beec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800bef0:	f04f 0e00 	mov.w	lr, #0
 800bef4:	3c01      	subs	r4, #1
 800bef6:	e690      	b.n	800bc1a <__aeabi_dmul+0xde>
 800bef8:	ea45 0e06 	orr.w	lr, r5, r6
 800befc:	e68d      	b.n	800bc1a <__aeabi_dmul+0xde>
 800befe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800bf02:	ea94 0f0c 	teq	r4, ip
 800bf06:	bf08      	it	eq
 800bf08:	ea95 0f0c 	teqeq	r5, ip
 800bf0c:	f43f af3b 	beq.w	800bd86 <__aeabi_dmul+0x24a>
 800bf10:	ea94 0f0c 	teq	r4, ip
 800bf14:	d10a      	bne.n	800bf2c <__aeabi_ddiv+0x19c>
 800bf16:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800bf1a:	f47f af34 	bne.w	800bd86 <__aeabi_dmul+0x24a>
 800bf1e:	ea95 0f0c 	teq	r5, ip
 800bf22:	f47f af25 	bne.w	800bd70 <__aeabi_dmul+0x234>
 800bf26:	4610      	mov	r0, r2
 800bf28:	4619      	mov	r1, r3
 800bf2a:	e72c      	b.n	800bd86 <__aeabi_dmul+0x24a>
 800bf2c:	ea95 0f0c 	teq	r5, ip
 800bf30:	d106      	bne.n	800bf40 <__aeabi_ddiv+0x1b0>
 800bf32:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800bf36:	f43f aefd 	beq.w	800bd34 <__aeabi_dmul+0x1f8>
 800bf3a:	4610      	mov	r0, r2
 800bf3c:	4619      	mov	r1, r3
 800bf3e:	e722      	b.n	800bd86 <__aeabi_dmul+0x24a>
 800bf40:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800bf44:	bf18      	it	ne
 800bf46:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800bf4a:	f47f aec5 	bne.w	800bcd8 <__aeabi_dmul+0x19c>
 800bf4e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800bf52:	f47f af0d 	bne.w	800bd70 <__aeabi_dmul+0x234>
 800bf56:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800bf5a:	f47f aeeb 	bne.w	800bd34 <__aeabi_dmul+0x1f8>
 800bf5e:	e712      	b.n	800bd86 <__aeabi_dmul+0x24a>

0800bf60 <__gedf2>:
 800bf60:	f04f 3cff 	mov.w	ip, #4294967295
 800bf64:	e006      	b.n	800bf74 <__cmpdf2+0x4>
 800bf66:	bf00      	nop

0800bf68 <__ledf2>:
 800bf68:	f04f 0c01 	mov.w	ip, #1
 800bf6c:	e002      	b.n	800bf74 <__cmpdf2+0x4>
 800bf6e:	bf00      	nop

0800bf70 <__cmpdf2>:
 800bf70:	f04f 0c01 	mov.w	ip, #1
 800bf74:	f84d cd04 	str.w	ip, [sp, #-4]!
 800bf78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800bf7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800bf80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800bf84:	bf18      	it	ne
 800bf86:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800bf8a:	d01b      	beq.n	800bfc4 <__cmpdf2+0x54>
 800bf8c:	b001      	add	sp, #4
 800bf8e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800bf92:	bf0c      	ite	eq
 800bf94:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800bf98:	ea91 0f03 	teqne	r1, r3
 800bf9c:	bf02      	ittt	eq
 800bf9e:	ea90 0f02 	teqeq	r0, r2
 800bfa2:	2000      	moveq	r0, #0
 800bfa4:	4770      	bxeq	lr
 800bfa6:	f110 0f00 	cmn.w	r0, #0
 800bfaa:	ea91 0f03 	teq	r1, r3
 800bfae:	bf58      	it	pl
 800bfb0:	4299      	cmppl	r1, r3
 800bfb2:	bf08      	it	eq
 800bfb4:	4290      	cmpeq	r0, r2
 800bfb6:	bf2c      	ite	cs
 800bfb8:	17d8      	asrcs	r0, r3, #31
 800bfba:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800bfbe:	f040 0001 	orr.w	r0, r0, #1
 800bfc2:	4770      	bx	lr
 800bfc4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800bfc8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800bfcc:	d102      	bne.n	800bfd4 <__cmpdf2+0x64>
 800bfce:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800bfd2:	d107      	bne.n	800bfe4 <__cmpdf2+0x74>
 800bfd4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800bfd8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800bfdc:	d1d6      	bne.n	800bf8c <__cmpdf2+0x1c>
 800bfde:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800bfe2:	d0d3      	beq.n	800bf8c <__cmpdf2+0x1c>
 800bfe4:	f85d 0b04 	ldr.w	r0, [sp], #4
 800bfe8:	4770      	bx	lr
 800bfea:	bf00      	nop

0800bfec <__aeabi_cdrcmple>:
 800bfec:	4684      	mov	ip, r0
 800bfee:	4610      	mov	r0, r2
 800bff0:	4662      	mov	r2, ip
 800bff2:	468c      	mov	ip, r1
 800bff4:	4619      	mov	r1, r3
 800bff6:	4663      	mov	r3, ip
 800bff8:	e000      	b.n	800bffc <__aeabi_cdcmpeq>
 800bffa:	bf00      	nop

0800bffc <__aeabi_cdcmpeq>:
 800bffc:	b501      	push	{r0, lr}
 800bffe:	f7ff ffb7 	bl	800bf70 <__cmpdf2>
 800c002:	2800      	cmp	r0, #0
 800c004:	bf48      	it	mi
 800c006:	f110 0f00 	cmnmi.w	r0, #0
 800c00a:	bd01      	pop	{r0, pc}

0800c00c <__aeabi_dcmpeq>:
 800c00c:	f84d ed08 	str.w	lr, [sp, #-8]!
 800c010:	f7ff fff4 	bl	800bffc <__aeabi_cdcmpeq>
 800c014:	bf0c      	ite	eq
 800c016:	2001      	moveq	r0, #1
 800c018:	2000      	movne	r0, #0
 800c01a:	f85d fb08 	ldr.w	pc, [sp], #8
 800c01e:	bf00      	nop

0800c020 <__aeabi_dcmplt>:
 800c020:	f84d ed08 	str.w	lr, [sp, #-8]!
 800c024:	f7ff ffea 	bl	800bffc <__aeabi_cdcmpeq>
 800c028:	bf34      	ite	cc
 800c02a:	2001      	movcc	r0, #1
 800c02c:	2000      	movcs	r0, #0
 800c02e:	f85d fb08 	ldr.w	pc, [sp], #8
 800c032:	bf00      	nop

0800c034 <__aeabi_dcmple>:
 800c034:	f84d ed08 	str.w	lr, [sp, #-8]!
 800c038:	f7ff ffe0 	bl	800bffc <__aeabi_cdcmpeq>
 800c03c:	bf94      	ite	ls
 800c03e:	2001      	movls	r0, #1
 800c040:	2000      	movhi	r0, #0
 800c042:	f85d fb08 	ldr.w	pc, [sp], #8
 800c046:	bf00      	nop

0800c048 <__aeabi_dcmpge>:
 800c048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800c04c:	f7ff ffce 	bl	800bfec <__aeabi_cdrcmple>
 800c050:	bf94      	ite	ls
 800c052:	2001      	movls	r0, #1
 800c054:	2000      	movhi	r0, #0
 800c056:	f85d fb08 	ldr.w	pc, [sp], #8
 800c05a:	bf00      	nop

0800c05c <__aeabi_dcmpgt>:
 800c05c:	f84d ed08 	str.w	lr, [sp, #-8]!
 800c060:	f7ff ffc4 	bl	800bfec <__aeabi_cdrcmple>
 800c064:	bf34      	ite	cc
 800c066:	2001      	movcc	r0, #1
 800c068:	2000      	movcs	r0, #0
 800c06a:	f85d fb08 	ldr.w	pc, [sp], #8
 800c06e:	bf00      	nop

0800c070 <__aeabi_d2iz>:
 800c070:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800c074:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800c078:	d215      	bcs.n	800c0a6 <__aeabi_d2iz+0x36>
 800c07a:	d511      	bpl.n	800c0a0 <__aeabi_d2iz+0x30>
 800c07c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800c080:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800c084:	d912      	bls.n	800c0ac <__aeabi_d2iz+0x3c>
 800c086:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800c08a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c08e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800c092:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800c096:	fa23 f002 	lsr.w	r0, r3, r2
 800c09a:	bf18      	it	ne
 800c09c:	4240      	negne	r0, r0
 800c09e:	4770      	bx	lr
 800c0a0:	f04f 0000 	mov.w	r0, #0
 800c0a4:	4770      	bx	lr
 800c0a6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800c0aa:	d105      	bne.n	800c0b8 <__aeabi_d2iz+0x48>
 800c0ac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800c0b0:	bf08      	it	eq
 800c0b2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800c0b6:	4770      	bx	lr
 800c0b8:	f04f 0000 	mov.w	r0, #0
 800c0bc:	4770      	bx	lr
 800c0be:	bf00      	nop

0800c0c0 <__aeabi_d2f>:
 800c0c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800c0c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800c0c8:	bf24      	itt	cs
 800c0ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800c0ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800c0d2:	d90d      	bls.n	800c0f0 <__aeabi_d2f+0x30>
 800c0d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800c0d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800c0dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800c0e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800c0e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800c0e8:	bf08      	it	eq
 800c0ea:	f020 0001 	biceq.w	r0, r0, #1
 800c0ee:	4770      	bx	lr
 800c0f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800c0f4:	d121      	bne.n	800c13a <__aeabi_d2f+0x7a>
 800c0f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800c0fa:	bfbc      	itt	lt
 800c0fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800c100:	4770      	bxlt	lr
 800c102:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c106:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800c10a:	f1c2 0218 	rsb	r2, r2, #24
 800c10e:	f1c2 0c20 	rsb	ip, r2, #32
 800c112:	fa10 f30c 	lsls.w	r3, r0, ip
 800c116:	fa20 f002 	lsr.w	r0, r0, r2
 800c11a:	bf18      	it	ne
 800c11c:	f040 0001 	orrne.w	r0, r0, #1
 800c120:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800c124:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800c128:	fa03 fc0c 	lsl.w	ip, r3, ip
 800c12c:	ea40 000c 	orr.w	r0, r0, ip
 800c130:	fa23 f302 	lsr.w	r3, r3, r2
 800c134:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c138:	e7cc      	b.n	800c0d4 <__aeabi_d2f+0x14>
 800c13a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800c13e:	d107      	bne.n	800c150 <__aeabi_d2f+0x90>
 800c140:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800c144:	bf1e      	ittt	ne
 800c146:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800c14a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800c14e:	4770      	bxne	lr
 800c150:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800c154:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800c158:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800c15c:	4770      	bx	lr
 800c15e:	bf00      	nop

0800c160 <__errno>:
 800c160:	4b01      	ldr	r3, [pc, #4]	; (800c168 <__errno+0x8>)
 800c162:	6818      	ldr	r0, [r3, #0]
 800c164:	4770      	bx	lr
 800c166:	bf00      	nop
 800c168:	20000384 	.word	0x20000384

0800c16c <__libc_init_array>:
 800c16c:	b570      	push	{r4, r5, r6, lr}
 800c16e:	4b0e      	ldr	r3, [pc, #56]	; (800c1a8 <__libc_init_array+0x3c>)
 800c170:	4c0e      	ldr	r4, [pc, #56]	; (800c1ac <__libc_init_array+0x40>)
 800c172:	1ae4      	subs	r4, r4, r3
 800c174:	10a4      	asrs	r4, r4, #2
 800c176:	2500      	movs	r5, #0
 800c178:	461e      	mov	r6, r3
 800c17a:	42a5      	cmp	r5, r4
 800c17c:	d004      	beq.n	800c188 <__libc_init_array+0x1c>
 800c17e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c182:	4798      	blx	r3
 800c184:	3501      	adds	r5, #1
 800c186:	e7f8      	b.n	800c17a <__libc_init_array+0xe>
 800c188:	f7fb f84a 	bl	8007220 <_init>
 800c18c:	4c08      	ldr	r4, [pc, #32]	; (800c1b0 <__libc_init_array+0x44>)
 800c18e:	4b09      	ldr	r3, [pc, #36]	; (800c1b4 <__libc_init_array+0x48>)
 800c190:	1ae4      	subs	r4, r4, r3
 800c192:	10a4      	asrs	r4, r4, #2
 800c194:	2500      	movs	r5, #0
 800c196:	461e      	mov	r6, r3
 800c198:	42a5      	cmp	r5, r4
 800c19a:	d004      	beq.n	800c1a6 <__libc_init_array+0x3a>
 800c19c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c1a0:	4798      	blx	r3
 800c1a2:	3501      	adds	r5, #1
 800c1a4:	e7f8      	b.n	800c198 <__libc_init_array+0x2c>
 800c1a6:	bd70      	pop	{r4, r5, r6, pc}
 800c1a8:	200003c0 	.word	0x200003c0
 800c1ac:	200003c0 	.word	0x200003c0
 800c1b0:	200003c0 	.word	0x200003c0
 800c1b4:	200003c0 	.word	0x200003c0

0800c1b8 <malloc>:
 800c1b8:	4b02      	ldr	r3, [pc, #8]	; (800c1c4 <malloc+0xc>)
 800c1ba:	4601      	mov	r1, r0
 800c1bc:	6818      	ldr	r0, [r3, #0]
 800c1be:	f000 b817 	b.w	800c1f0 <_malloc_r>
 800c1c2:	bf00      	nop
 800c1c4:	20000384 	.word	0x20000384

0800c1c8 <memcpy>:
 800c1c8:	b510      	push	{r4, lr}
 800c1ca:	1e43      	subs	r3, r0, #1
 800c1cc:	440a      	add	r2, r1
 800c1ce:	4291      	cmp	r1, r2
 800c1d0:	d004      	beq.n	800c1dc <memcpy+0x14>
 800c1d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c1da:	e7f8      	b.n	800c1ce <memcpy+0x6>
 800c1dc:	bd10      	pop	{r4, pc}

0800c1de <memset>:
 800c1de:	4402      	add	r2, r0
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	4293      	cmp	r3, r2
 800c1e4:	d002      	beq.n	800c1ec <memset+0xe>
 800c1e6:	f803 1b01 	strb.w	r1, [r3], #1
 800c1ea:	e7fa      	b.n	800c1e2 <memset+0x4>
 800c1ec:	4770      	bx	lr
	...

0800c1f0 <_malloc_r>:
 800c1f0:	b570      	push	{r4, r5, r6, lr}
 800c1f2:	1ccc      	adds	r4, r1, #3
 800c1f4:	f024 0403 	bic.w	r4, r4, #3
 800c1f8:	3408      	adds	r4, #8
 800c1fa:	2c0c      	cmp	r4, #12
 800c1fc:	bf38      	it	cc
 800c1fe:	240c      	movcc	r4, #12
 800c200:	2c00      	cmp	r4, #0
 800c202:	4606      	mov	r6, r0
 800c204:	da03      	bge.n	800c20e <_malloc_r+0x1e>
 800c206:	230c      	movs	r3, #12
 800c208:	6033      	str	r3, [r6, #0]
 800c20a:	2000      	movs	r0, #0
 800c20c:	bd70      	pop	{r4, r5, r6, pc}
 800c20e:	428c      	cmp	r4, r1
 800c210:	d3f9      	bcc.n	800c206 <_malloc_r+0x16>
 800c212:	4a20      	ldr	r2, [pc, #128]	; (800c294 <_malloc_r+0xa4>)
 800c214:	6813      	ldr	r3, [r2, #0]
 800c216:	4610      	mov	r0, r2
 800c218:	4619      	mov	r1, r3
 800c21a:	b1a1      	cbz	r1, 800c246 <_malloc_r+0x56>
 800c21c:	680a      	ldr	r2, [r1, #0]
 800c21e:	1b12      	subs	r2, r2, r4
 800c220:	d40e      	bmi.n	800c240 <_malloc_r+0x50>
 800c222:	2a0b      	cmp	r2, #11
 800c224:	d903      	bls.n	800c22e <_malloc_r+0x3e>
 800c226:	600a      	str	r2, [r1, #0]
 800c228:	188b      	adds	r3, r1, r2
 800c22a:	508c      	str	r4, [r1, r2]
 800c22c:	e01f      	b.n	800c26e <_malloc_r+0x7e>
 800c22e:	428b      	cmp	r3, r1
 800c230:	bf0d      	iteet	eq
 800c232:	685a      	ldreq	r2, [r3, #4]
 800c234:	684a      	ldrne	r2, [r1, #4]
 800c236:	605a      	strne	r2, [r3, #4]
 800c238:	6002      	streq	r2, [r0, #0]
 800c23a:	bf18      	it	ne
 800c23c:	460b      	movne	r3, r1
 800c23e:	e016      	b.n	800c26e <_malloc_r+0x7e>
 800c240:	460b      	mov	r3, r1
 800c242:	6849      	ldr	r1, [r1, #4]
 800c244:	e7e9      	b.n	800c21a <_malloc_r+0x2a>
 800c246:	4d14      	ldr	r5, [pc, #80]	; (800c298 <_malloc_r+0xa8>)
 800c248:	682b      	ldr	r3, [r5, #0]
 800c24a:	b91b      	cbnz	r3, 800c254 <_malloc_r+0x64>
 800c24c:	4630      	mov	r0, r6
 800c24e:	f000 fb99 	bl	800c984 <_sbrk_r>
 800c252:	6028      	str	r0, [r5, #0]
 800c254:	4630      	mov	r0, r6
 800c256:	4621      	mov	r1, r4
 800c258:	f000 fb94 	bl	800c984 <_sbrk_r>
 800c25c:	1c42      	adds	r2, r0, #1
 800c25e:	4603      	mov	r3, r0
 800c260:	d0d1      	beq.n	800c206 <_malloc_r+0x16>
 800c262:	1cc5      	adds	r5, r0, #3
 800c264:	f025 0503 	bic.w	r5, r5, #3
 800c268:	4285      	cmp	r5, r0
 800c26a:	d10a      	bne.n	800c282 <_malloc_r+0x92>
 800c26c:	601c      	str	r4, [r3, #0]
 800c26e:	f103 000b 	add.w	r0, r3, #11
 800c272:	1d1a      	adds	r2, r3, #4
 800c274:	f020 0007 	bic.w	r0, r0, #7
 800c278:	1a82      	subs	r2, r0, r2
 800c27a:	d00a      	beq.n	800c292 <_malloc_r+0xa2>
 800c27c:	4251      	negs	r1, r2
 800c27e:	5099      	str	r1, [r3, r2]
 800c280:	bd70      	pop	{r4, r5, r6, pc}
 800c282:	4630      	mov	r0, r6
 800c284:	1ae9      	subs	r1, r5, r3
 800c286:	f000 fb7d 	bl	800c984 <_sbrk_r>
 800c28a:	3001      	adds	r0, #1
 800c28c:	d0bb      	beq.n	800c206 <_malloc_r+0x16>
 800c28e:	462b      	mov	r3, r5
 800c290:	e7ec      	b.n	800c26c <_malloc_r+0x7c>
 800c292:	bd70      	pop	{r4, r5, r6, pc}
 800c294:	20000558 	.word	0x20000558
 800c298:	20000554 	.word	0x20000554

0800c29c <__cvt>:
 800c29c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2a0:	b088      	sub	sp, #32
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800c2a6:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c2a8:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800c2aa:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800c2ae:	461d      	mov	r5, r3
 800c2b0:	bfb8      	it	lt
 800c2b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c2b6:	f027 0720 	bic.w	r7, r7, #32
 800c2ba:	bfb6      	itet	lt
 800c2bc:	461d      	movlt	r5, r3
 800c2be:	2300      	movge	r3, #0
 800c2c0:	232d      	movlt	r3, #45	; 0x2d
 800c2c2:	4614      	mov	r4, r2
 800c2c4:	bfb8      	it	lt
 800c2c6:	4614      	movlt	r4, r2
 800c2c8:	2f46      	cmp	r7, #70	; 0x46
 800c2ca:	700b      	strb	r3, [r1, #0]
 800c2cc:	d003      	beq.n	800c2d6 <__cvt+0x3a>
 800c2ce:	2f45      	cmp	r7, #69	; 0x45
 800c2d0:	d103      	bne.n	800c2da <__cvt+0x3e>
 800c2d2:	3601      	adds	r6, #1
 800c2d4:	e001      	b.n	800c2da <__cvt+0x3e>
 800c2d6:	2303      	movs	r3, #3
 800c2d8:	e000      	b.n	800c2dc <__cvt+0x40>
 800c2da:	2302      	movs	r3, #2
 800c2dc:	e88d 0448 	stmia.w	sp, {r3, r6, sl}
 800c2e0:	ab06      	add	r3, sp, #24
 800c2e2:	9303      	str	r3, [sp, #12]
 800c2e4:	ab07      	add	r3, sp, #28
 800c2e6:	9304      	str	r3, [sp, #16]
 800c2e8:	4622      	mov	r2, r4
 800c2ea:	462b      	mov	r3, r5
 800c2ec:	f000 fbf0 	bl	800cad0 <_dtoa_r>
 800c2f0:	2f47      	cmp	r7, #71	; 0x47
 800c2f2:	4680      	mov	r8, r0
 800c2f4:	d102      	bne.n	800c2fc <__cvt+0x60>
 800c2f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c2f8:	07db      	lsls	r3, r3, #31
 800c2fa:	d526      	bpl.n	800c34a <__cvt+0xae>
 800c2fc:	2f46      	cmp	r7, #70	; 0x46
 800c2fe:	eb08 0906 	add.w	r9, r8, r6
 800c302:	d111      	bne.n	800c328 <__cvt+0x8c>
 800c304:	f898 3000 	ldrb.w	r3, [r8]
 800c308:	2b30      	cmp	r3, #48	; 0x30
 800c30a:	d10a      	bne.n	800c322 <__cvt+0x86>
 800c30c:	4620      	mov	r0, r4
 800c30e:	4629      	mov	r1, r5
 800c310:	2200      	movs	r2, #0
 800c312:	2300      	movs	r3, #0
 800c314:	f7ff fe7a 	bl	800c00c <__aeabi_dcmpeq>
 800c318:	b918      	cbnz	r0, 800c322 <__cvt+0x86>
 800c31a:	f1c6 0601 	rsb	r6, r6, #1
 800c31e:	f8ca 6000 	str.w	r6, [sl]
 800c322:	f8da 3000 	ldr.w	r3, [sl]
 800c326:	4499      	add	r9, r3
 800c328:	4620      	mov	r0, r4
 800c32a:	4629      	mov	r1, r5
 800c32c:	2200      	movs	r2, #0
 800c32e:	2300      	movs	r3, #0
 800c330:	f7ff fe6c 	bl	800c00c <__aeabi_dcmpeq>
 800c334:	b108      	cbz	r0, 800c33a <__cvt+0x9e>
 800c336:	f8cd 901c 	str.w	r9, [sp, #28]
 800c33a:	9b07      	ldr	r3, [sp, #28]
 800c33c:	454b      	cmp	r3, r9
 800c33e:	d204      	bcs.n	800c34a <__cvt+0xae>
 800c340:	1c5a      	adds	r2, r3, #1
 800c342:	9207      	str	r2, [sp, #28]
 800c344:	2230      	movs	r2, #48	; 0x30
 800c346:	701a      	strb	r2, [r3, #0]
 800c348:	e7f7      	b.n	800c33a <__cvt+0x9e>
 800c34a:	9b07      	ldr	r3, [sp, #28]
 800c34c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c34e:	ebc8 0303 	rsb	r3, r8, r3
 800c352:	4640      	mov	r0, r8
 800c354:	6013      	str	r3, [r2, #0]
 800c356:	b008      	add	sp, #32
 800c358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c35c <__exponent>:
 800c35c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c35e:	4603      	mov	r3, r0
 800c360:	2900      	cmp	r1, #0
 800c362:	bfb8      	it	lt
 800c364:	4249      	neglt	r1, r1
 800c366:	f803 2b02 	strb.w	r2, [r3], #2
 800c36a:	bfb4      	ite	lt
 800c36c:	222d      	movlt	r2, #45	; 0x2d
 800c36e:	222b      	movge	r2, #43	; 0x2b
 800c370:	2909      	cmp	r1, #9
 800c372:	7042      	strb	r2, [r0, #1]
 800c374:	dd19      	ble.n	800c3aa <__exponent+0x4e>
 800c376:	f10d 0407 	add.w	r4, sp, #7
 800c37a:	4626      	mov	r6, r4
 800c37c:	220a      	movs	r2, #10
 800c37e:	fb91 f5f2 	sdiv	r5, r1, r2
 800c382:	fb02 1115 	mls	r1, r2, r5, r1
 800c386:	3130      	adds	r1, #48	; 0x30
 800c388:	2d09      	cmp	r5, #9
 800c38a:	f804 1d01 	strb.w	r1, [r4, #-1]!
 800c38e:	4629      	mov	r1, r5
 800c390:	dcf4      	bgt.n	800c37c <__exponent+0x20>
 800c392:	3130      	adds	r1, #48	; 0x30
 800c394:	1e65      	subs	r5, r4, #1
 800c396:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c39a:	42b5      	cmp	r5, r6
 800c39c:	461a      	mov	r2, r3
 800c39e:	d20a      	bcs.n	800c3b6 <__exponent+0x5a>
 800c3a0:	f815 2b01 	ldrb.w	r2, [r5], #1
 800c3a4:	f803 2b01 	strb.w	r2, [r3], #1
 800c3a8:	e7f7      	b.n	800c39a <__exponent+0x3e>
 800c3aa:	2430      	movs	r4, #48	; 0x30
 800c3ac:	461a      	mov	r2, r3
 800c3ae:	4421      	add	r1, r4
 800c3b0:	f802 4b02 	strb.w	r4, [r2], #2
 800c3b4:	7059      	strb	r1, [r3, #1]
 800c3b6:	1a10      	subs	r0, r2, r0
 800c3b8:	b002      	add	sp, #8
 800c3ba:	bd70      	pop	{r4, r5, r6, pc}

0800c3bc <_printf_float>:
 800c3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3c0:	b091      	sub	sp, #68	; 0x44
 800c3c2:	468b      	mov	fp, r1
 800c3c4:	4615      	mov	r5, r2
 800c3c6:	461e      	mov	r6, r3
 800c3c8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800c3ca:	4604      	mov	r4, r0
 800c3cc:	f001 f944 	bl	800d658 <_localeconv_r>
 800c3d0:	f8d0 a000 	ldr.w	sl, [r0]
 800c3d4:	4650      	mov	r0, sl
 800c3d6:	f000 fae5 	bl	800c9a4 <strlen>
 800c3da:	2300      	movs	r3, #0
 800c3dc:	930e      	str	r3, [sp, #56]	; 0x38
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	9009      	str	r0, [sp, #36]	; 0x24
 800c3e2:	3307      	adds	r3, #7
 800c3e4:	f023 0307 	bic.w	r3, r3, #7
 800c3e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c3ec:	f103 0208 	add.w	r2, r3, #8
 800c3f0:	f89b 8018 	ldrb.w	r8, [fp, #24]
 800c3f4:	603a      	str	r2, [r7, #0]
 800c3f6:	e9cb 0112 	strd	r0, r1, [fp, #72]	; 0x48
 800c3fa:	f000 fa99 	bl	800c930 <__fpclassifyd>
 800c3fe:	2801      	cmp	r0, #1
 800c400:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 800c404:	d119      	bne.n	800c43a <_printf_float+0x7e>
 800c406:	2200      	movs	r2, #0
 800c408:	2300      	movs	r3, #0
 800c40a:	f7ff fe09 	bl	800c020 <__aeabi_dcmplt>
 800c40e:	b110      	cbz	r0, 800c416 <_printf_float+0x5a>
 800c410:	232d      	movs	r3, #45	; 0x2d
 800c412:	f88b 3043 	strb.w	r3, [fp, #67]	; 0x43
 800c416:	4ba0      	ldr	r3, [pc, #640]	; (800c698 <_printf_float+0x2dc>)
 800c418:	4fa0      	ldr	r7, [pc, #640]	; (800c69c <_printf_float+0x2e0>)
 800c41a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c41e:	bf88      	it	hi
 800c420:	461f      	movhi	r7, r3
 800c422:	2303      	movs	r3, #3
 800c424:	f8cb 3010 	str.w	r3, [fp, #16]
 800c428:	f8db 3000 	ldr.w	r3, [fp]
 800c42c:	f023 0304 	bic.w	r3, r3, #4
 800c430:	f8cb 3000 	str.w	r3, [fp]
 800c434:	f04f 0900 	mov.w	r9, #0
 800c438:	e0a1      	b.n	800c57e <_printf_float+0x1c2>
 800c43a:	f000 fa79 	bl	800c930 <__fpclassifyd>
 800c43e:	f8db 3000 	ldr.w	r3, [fp]
 800c442:	b948      	cbnz	r0, 800c458 <_printf_float+0x9c>
 800c444:	4a96      	ldr	r2, [pc, #600]	; (800c6a0 <_printf_float+0x2e4>)
 800c446:	4f97      	ldr	r7, [pc, #604]	; (800c6a4 <_printf_float+0x2e8>)
 800c448:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c44c:	bf88      	it	hi
 800c44e:	4617      	movhi	r7, r2
 800c450:	2203      	movs	r2, #3
 800c452:	f8cb 2010 	str.w	r2, [fp, #16]
 800c456:	e7e9      	b.n	800c42c <_printf_float+0x70>
 800c458:	f8db 2004 	ldr.w	r2, [fp, #4]
 800c45c:	ed9b 7b12 	vldr	d7, [fp, #72]	; 0x48
 800c460:	1c57      	adds	r7, r2, #1
 800c462:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c466:	d101      	bne.n	800c46c <_printf_float+0xb0>
 800c468:	2206      	movs	r2, #6
 800c46a:	e009      	b.n	800c480 <_printf_float+0xc4>
 800c46c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 800c470:	d002      	beq.n	800c478 <_printf_float+0xbc>
 800c472:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c476:	d105      	bne.n	800c484 <_printf_float+0xc8>
 800c478:	2a00      	cmp	r2, #0
 800c47a:	f040 81c7 	bne.w	800c80c <_printf_float+0x450>
 800c47e:	2201      	movs	r2, #1
 800c480:	f8cb 2004 	str.w	r2, [fp, #4]
 800c484:	f8db 2004 	ldr.w	r2, [fp, #4]
 800c488:	f8cd 8010 	str.w	r8, [sp, #16]
 800c48c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c490:	e88d 000c 	stmia.w	sp, {r2, r3}
 800c494:	f8cb 3000 	str.w	r3, [fp]
 800c498:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800c49c:	9302      	str	r3, [sp, #8]
 800c49e:	ab0d      	add	r3, sp, #52	; 0x34
 800c4a0:	9303      	str	r3, [sp, #12]
 800c4a2:	ab0e      	add	r3, sp, #56	; 0x38
 800c4a4:	9305      	str	r3, [sp, #20]
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	9306      	str	r3, [sp, #24]
 800c4aa:	4620      	mov	r0, r4
 800c4ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c4b0:	f7ff fef4 	bl	800c29c <__cvt>
 800c4b4:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800c4b8:	2b47      	cmp	r3, #71	; 0x47
 800c4ba:	4607      	mov	r7, r0
 800c4bc:	d10a      	bne.n	800c4d4 <_printf_float+0x118>
 800c4be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c4c0:	1cd8      	adds	r0, r3, #3
 800c4c2:	db03      	blt.n	800c4cc <_printf_float+0x110>
 800c4c4:	f8db 2004 	ldr.w	r2, [fp, #4]
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	dd37      	ble.n	800c53c <_printf_float+0x180>
 800c4cc:	f1a8 0802 	sub.w	r8, r8, #2
 800c4d0:	fa5f f888 	uxtb.w	r8, r8
 800c4d4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800c4d8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c4da:	d815      	bhi.n	800c508 <_printf_float+0x14c>
 800c4dc:	3901      	subs	r1, #1
 800c4de:	4642      	mov	r2, r8
 800c4e0:	f10b 0050 	add.w	r0, fp, #80	; 0x50
 800c4e4:	910d      	str	r1, [sp, #52]	; 0x34
 800c4e6:	f7ff ff39 	bl	800c35c <__exponent>
 800c4ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c4ec:	1883      	adds	r3, r0, r2
 800c4ee:	2a01      	cmp	r2, #1
 800c4f0:	4681      	mov	r9, r0
 800c4f2:	f8cb 3010 	str.w	r3, [fp, #16]
 800c4f6:	dc03      	bgt.n	800c500 <_printf_float+0x144>
 800c4f8:	f8db 2000 	ldr.w	r2, [fp]
 800c4fc:	07d1      	lsls	r1, r2, #31
 800c4fe:	d538      	bpl.n	800c572 <_printf_float+0x1b6>
 800c500:	3301      	adds	r3, #1
 800c502:	f8cb 3010 	str.w	r3, [fp, #16]
 800c506:	e034      	b.n	800c572 <_printf_float+0x1b6>
 800c508:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800c50c:	d118      	bne.n	800c540 <_printf_float+0x184>
 800c50e:	2900      	cmp	r1, #0
 800c510:	f8db 3004 	ldr.w	r3, [fp, #4]
 800c514:	dd09      	ble.n	800c52a <_printf_float+0x16e>
 800c516:	f8cb 1010 	str.w	r1, [fp, #16]
 800c51a:	b91b      	cbnz	r3, 800c524 <_printf_float+0x168>
 800c51c:	f8db 2000 	ldr.w	r2, [fp]
 800c520:	07d2      	lsls	r2, r2, #31
 800c522:	d521      	bpl.n	800c568 <_printf_float+0x1ac>
 800c524:	3301      	adds	r3, #1
 800c526:	440b      	add	r3, r1
 800c528:	e01c      	b.n	800c564 <_printf_float+0x1a8>
 800c52a:	b91b      	cbnz	r3, 800c534 <_printf_float+0x178>
 800c52c:	f8db 2000 	ldr.w	r2, [fp]
 800c530:	07d0      	lsls	r0, r2, #31
 800c532:	d501      	bpl.n	800c538 <_printf_float+0x17c>
 800c534:	3302      	adds	r3, #2
 800c536:	e015      	b.n	800c564 <_printf_float+0x1a8>
 800c538:	2301      	movs	r3, #1
 800c53a:	e013      	b.n	800c564 <_printf_float+0x1a8>
 800c53c:	f04f 0867 	mov.w	r8, #103	; 0x67
 800c540:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c542:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c544:	4293      	cmp	r3, r2
 800c546:	db07      	blt.n	800c558 <_printf_float+0x19c>
 800c548:	f8db 2000 	ldr.w	r2, [fp]
 800c54c:	f8cb 3010 	str.w	r3, [fp, #16]
 800c550:	07d1      	lsls	r1, r2, #31
 800c552:	d509      	bpl.n	800c568 <_printf_float+0x1ac>
 800c554:	3301      	adds	r3, #1
 800c556:	e005      	b.n	800c564 <_printf_float+0x1a8>
 800c558:	2b00      	cmp	r3, #0
 800c55a:	bfd4      	ite	le
 800c55c:	f1c3 0302 	rsble	r3, r3, #2
 800c560:	2301      	movgt	r3, #1
 800c562:	4413      	add	r3, r2
 800c564:	f8cb 3010 	str.w	r3, [fp, #16]
 800c568:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c56a:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 800c56e:	f04f 0900 	mov.w	r9, #0
 800c572:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800c576:	b113      	cbz	r3, 800c57e <_printf_float+0x1c2>
 800c578:	232d      	movs	r3, #45	; 0x2d
 800c57a:	f88b 3043 	strb.w	r3, [fp, #67]	; 0x43
 800c57e:	9600      	str	r6, [sp, #0]
 800c580:	4620      	mov	r0, r4
 800c582:	4659      	mov	r1, fp
 800c584:	aa0f      	add	r2, sp, #60	; 0x3c
 800c586:	462b      	mov	r3, r5
 800c588:	f000 f95c 	bl	800c844 <_printf_common>
 800c58c:	3001      	adds	r0, #1
 800c58e:	d102      	bne.n	800c596 <_printf_float+0x1da>
 800c590:	f04f 30ff 	mov.w	r0, #4294967295
 800c594:	e152      	b.n	800c83c <_printf_float+0x480>
 800c596:	f8db 3000 	ldr.w	r3, [fp]
 800c59a:	055a      	lsls	r2, r3, #21
 800c59c:	d405      	bmi.n	800c5aa <_printf_float+0x1ee>
 800c59e:	4620      	mov	r0, r4
 800c5a0:	4629      	mov	r1, r5
 800c5a2:	463a      	mov	r2, r7
 800c5a4:	f8db 3010 	ldr.w	r3, [fp, #16]
 800c5a8:	e108      	b.n	800c7bc <_printf_float+0x400>
 800c5aa:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800c5ae:	f240 80d0 	bls.w	800c752 <_printf_float+0x396>
 800c5b2:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	f7ff fd27 	bl	800c00c <__aeabi_dcmpeq>
 800c5be:	b350      	cbz	r0, 800c616 <_printf_float+0x25a>
 800c5c0:	4620      	mov	r0, r4
 800c5c2:	4629      	mov	r1, r5
 800c5c4:	4a38      	ldr	r2, [pc, #224]	; (800c6a8 <_printf_float+0x2ec>)
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	47b0      	blx	r6
 800c5ca:	3001      	adds	r0, #1
 800c5cc:	d0e0      	beq.n	800c590 <_printf_float+0x1d4>
 800c5ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c5d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c5d2:	429a      	cmp	r2, r3
 800c5d4:	db09      	blt.n	800c5ea <_printf_float+0x22e>
 800c5d6:	f8db 3000 	ldr.w	r3, [fp]
 800c5da:	07d8      	lsls	r0, r3, #31
 800c5dc:	d405      	bmi.n	800c5ea <_printf_float+0x22e>
 800c5de:	f8db 3000 	ldr.w	r3, [fp]
 800c5e2:	079f      	lsls	r7, r3, #30
 800c5e4:	f100 8110 	bmi.w	800c808 <_printf_float+0x44c>
 800c5e8:	e107      	b.n	800c7fa <_printf_float+0x43e>
 800c5ea:	4620      	mov	r0, r4
 800c5ec:	4629      	mov	r1, r5
 800c5ee:	4652      	mov	r2, sl
 800c5f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5f2:	47b0      	blx	r6
 800c5f4:	3001      	adds	r0, #1
 800c5f6:	d0cb      	beq.n	800c590 <_printf_float+0x1d4>
 800c5f8:	2700      	movs	r7, #0
 800c5fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c5fc:	3b01      	subs	r3, #1
 800c5fe:	429f      	cmp	r7, r3
 800c600:	daed      	bge.n	800c5de <_printf_float+0x222>
 800c602:	4620      	mov	r0, r4
 800c604:	4629      	mov	r1, r5
 800c606:	f10b 021a 	add.w	r2, fp, #26
 800c60a:	2301      	movs	r3, #1
 800c60c:	47b0      	blx	r6
 800c60e:	3001      	adds	r0, #1
 800c610:	d0be      	beq.n	800c590 <_printf_float+0x1d4>
 800c612:	3701      	adds	r7, #1
 800c614:	e7f1      	b.n	800c5fa <_printf_float+0x23e>
 800c616:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c618:	2b00      	cmp	r3, #0
 800c61a:	dc29      	bgt.n	800c670 <_printf_float+0x2b4>
 800c61c:	4620      	mov	r0, r4
 800c61e:	4629      	mov	r1, r5
 800c620:	4a21      	ldr	r2, [pc, #132]	; (800c6a8 <_printf_float+0x2ec>)
 800c622:	2301      	movs	r3, #1
 800c624:	47b0      	blx	r6
 800c626:	3001      	adds	r0, #1
 800c628:	d0b2      	beq.n	800c590 <_printf_float+0x1d4>
 800c62a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c62c:	b92b      	cbnz	r3, 800c63a <_printf_float+0x27e>
 800c62e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c630:	b91b      	cbnz	r3, 800c63a <_printf_float+0x27e>
 800c632:	f8db 3000 	ldr.w	r3, [fp]
 800c636:	07d9      	lsls	r1, r3, #31
 800c638:	d5d1      	bpl.n	800c5de <_printf_float+0x222>
 800c63a:	4620      	mov	r0, r4
 800c63c:	4629      	mov	r1, r5
 800c63e:	4652      	mov	r2, sl
 800c640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c642:	47b0      	blx	r6
 800c644:	3001      	adds	r0, #1
 800c646:	d0a3      	beq.n	800c590 <_printf_float+0x1d4>
 800c648:	f04f 0800 	mov.w	r8, #0
 800c64c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c64e:	425b      	negs	r3, r3
 800c650:	4598      	cmp	r8, r3
 800c652:	4620      	mov	r0, r4
 800c654:	4629      	mov	r1, r5
 800c656:	da08      	bge.n	800c66a <_printf_float+0x2ae>
 800c658:	f10b 021a 	add.w	r2, fp, #26
 800c65c:	2301      	movs	r3, #1
 800c65e:	47b0      	blx	r6
 800c660:	3001      	adds	r0, #1
 800c662:	d095      	beq.n	800c590 <_printf_float+0x1d4>
 800c664:	f108 0801 	add.w	r8, r8, #1
 800c668:	e7f0      	b.n	800c64c <_printf_float+0x290>
 800c66a:	463a      	mov	r2, r7
 800c66c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c66e:	e0a5      	b.n	800c7bc <_printf_float+0x400>
 800c670:	f8db 2058 	ldr.w	r2, [fp, #88]	; 0x58
 800c674:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c676:	429a      	cmp	r2, r3
 800c678:	bfa8      	it	ge
 800c67a:	461a      	movge	r2, r3
 800c67c:	2a00      	cmp	r2, #0
 800c67e:	4691      	mov	r9, r2
 800c680:	dc02      	bgt.n	800c688 <_printf_float+0x2cc>
 800c682:	f04f 0800 	mov.w	r8, #0
 800c686:	e01c      	b.n	800c6c2 <_printf_float+0x306>
 800c688:	4620      	mov	r0, r4
 800c68a:	4629      	mov	r1, r5
 800c68c:	463a      	mov	r2, r7
 800c68e:	464b      	mov	r3, r9
 800c690:	47b0      	blx	r6
 800c692:	3001      	adds	r0, #1
 800c694:	d1f5      	bne.n	800c682 <_printf_float+0x2c6>
 800c696:	e77b      	b.n	800c590 <_printf_float+0x1d4>
 800c698:	0800e1e6 	.word	0x0800e1e6
 800c69c:	0800e1e2 	.word	0x0800e1e2
 800c6a0:	0800e1ee 	.word	0x0800e1ee
 800c6a4:	0800e1ea 	.word	0x0800e1ea
 800c6a8:	0800e1f2 	.word	0x0800e1f2
 800c6ac:	4620      	mov	r0, r4
 800c6ae:	4629      	mov	r1, r5
 800c6b0:	f10b 021a 	add.w	r2, fp, #26
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	47b0      	blx	r6
 800c6b8:	3001      	adds	r0, #1
 800c6ba:	f43f af69 	beq.w	800c590 <_printf_float+0x1d4>
 800c6be:	f108 0801 	add.w	r8, r8, #1
 800c6c2:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 800c6c6:	f1b9 0f00 	cmp.w	r9, #0
 800c6ca:	bfac      	ite	ge
 800c6cc:	ebc9 0203 	rsbge	r2, r9, r3
 800c6d0:	461a      	movlt	r2, r3
 800c6d2:	4590      	cmp	r8, r2
 800c6d4:	dbea      	blt.n	800c6ac <_printf_float+0x2f0>
 800c6d6:	eb07 0803 	add.w	r8, r7, r3
 800c6da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c6dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c6de:	429a      	cmp	r2, r3
 800c6e0:	db10      	blt.n	800c704 <_printf_float+0x348>
 800c6e2:	f8db 3000 	ldr.w	r3, [fp]
 800c6e6:	07da      	lsls	r2, r3, #31
 800c6e8:	d40c      	bmi.n	800c704 <_printf_float+0x348>
 800c6ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c6ec:	4417      	add	r7, r2
 800c6ee:	ebc8 0307 	rsb	r3, r8, r7
 800c6f2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800c6f4:	1bd2      	subs	r2, r2, r7
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	bfa8      	it	ge
 800c6fa:	4613      	movge	r3, r2
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	461f      	mov	r7, r3
 800c700:	dc08      	bgt.n	800c714 <_printf_float+0x358>
 800c702:	e00e      	b.n	800c722 <_printf_float+0x366>
 800c704:	4620      	mov	r0, r4
 800c706:	4629      	mov	r1, r5
 800c708:	4652      	mov	r2, sl
 800c70a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c70c:	47b0      	blx	r6
 800c70e:	3001      	adds	r0, #1
 800c710:	d1eb      	bne.n	800c6ea <_printf_float+0x32e>
 800c712:	e73d      	b.n	800c590 <_printf_float+0x1d4>
 800c714:	4620      	mov	r0, r4
 800c716:	4629      	mov	r1, r5
 800c718:	4642      	mov	r2, r8
 800c71a:	47b0      	blx	r6
 800c71c:	3001      	adds	r0, #1
 800c71e:	f43f af37 	beq.w	800c590 <_printf_float+0x1d4>
 800c722:	f04f 0800 	mov.w	r8, #0
 800c726:	e00a      	b.n	800c73e <_printf_float+0x382>
 800c728:	4620      	mov	r0, r4
 800c72a:	4629      	mov	r1, r5
 800c72c:	f10b 021a 	add.w	r2, fp, #26
 800c730:	2301      	movs	r3, #1
 800c732:	47b0      	blx	r6
 800c734:	3001      	adds	r0, #1
 800c736:	f43f af2b 	beq.w	800c590 <_printf_float+0x1d4>
 800c73a:	f108 0801 	add.w	r8, r8, #1
 800c73e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c740:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c742:	2f00      	cmp	r7, #0
 800c744:	eba3 0302 	sub.w	r3, r3, r2
 800c748:	bfa8      	it	ge
 800c74a:	1bdb      	subge	r3, r3, r7
 800c74c:	4598      	cmp	r8, r3
 800c74e:	dbeb      	blt.n	800c728 <_printf_float+0x36c>
 800c750:	e745      	b.n	800c5de <_printf_float+0x222>
 800c752:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c754:	2a01      	cmp	r2, #1
 800c756:	dc01      	bgt.n	800c75c <_printf_float+0x3a0>
 800c758:	07db      	lsls	r3, r3, #31
 800c75a:	d536      	bpl.n	800c7ca <_printf_float+0x40e>
 800c75c:	4620      	mov	r0, r4
 800c75e:	4629      	mov	r1, r5
 800c760:	463a      	mov	r2, r7
 800c762:	2301      	movs	r3, #1
 800c764:	47b0      	blx	r6
 800c766:	3001      	adds	r0, #1
 800c768:	f43f af12 	beq.w	800c590 <_printf_float+0x1d4>
 800c76c:	4620      	mov	r0, r4
 800c76e:	4629      	mov	r1, r5
 800c770:	4652      	mov	r2, sl
 800c772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c774:	47b0      	blx	r6
 800c776:	3001      	adds	r0, #1
 800c778:	f43f af0a 	beq.w	800c590 <_printf_float+0x1d4>
 800c77c:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 800c780:	2200      	movs	r2, #0
 800c782:	2300      	movs	r3, #0
 800c784:	f7ff fc42 	bl	800c00c <__aeabi_dcmpeq>
 800c788:	b9e8      	cbnz	r0, 800c7c6 <_printf_float+0x40a>
 800c78a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c78c:	4620      	mov	r0, r4
 800c78e:	4629      	mov	r1, r5
 800c790:	1c7a      	adds	r2, r7, #1
 800c792:	3b01      	subs	r3, #1
 800c794:	e01d      	b.n	800c7d2 <_printf_float+0x416>
 800c796:	4620      	mov	r0, r4
 800c798:	4629      	mov	r1, r5
 800c79a:	f10b 021a 	add.w	r2, fp, #26
 800c79e:	2301      	movs	r3, #1
 800c7a0:	47b0      	blx	r6
 800c7a2:	3001      	adds	r0, #1
 800c7a4:	f43f aef4 	beq.w	800c590 <_printf_float+0x1d4>
 800c7a8:	3701      	adds	r7, #1
 800c7aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c7ac:	3b01      	subs	r3, #1
 800c7ae:	429f      	cmp	r7, r3
 800c7b0:	dbf1      	blt.n	800c796 <_printf_float+0x3da>
 800c7b2:	4620      	mov	r0, r4
 800c7b4:	4629      	mov	r1, r5
 800c7b6:	f10b 0250 	add.w	r2, fp, #80	; 0x50
 800c7ba:	464b      	mov	r3, r9
 800c7bc:	47b0      	blx	r6
 800c7be:	3001      	adds	r0, #1
 800c7c0:	f47f af0d 	bne.w	800c5de <_printf_float+0x222>
 800c7c4:	e6e4      	b.n	800c590 <_printf_float+0x1d4>
 800c7c6:	2700      	movs	r7, #0
 800c7c8:	e7ef      	b.n	800c7aa <_printf_float+0x3ee>
 800c7ca:	4620      	mov	r0, r4
 800c7cc:	4629      	mov	r1, r5
 800c7ce:	463a      	mov	r2, r7
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	47b0      	blx	r6
 800c7d4:	3001      	adds	r0, #1
 800c7d6:	d1ec      	bne.n	800c7b2 <_printf_float+0x3f6>
 800c7d8:	e6da      	b.n	800c590 <_printf_float+0x1d4>
 800c7da:	4620      	mov	r0, r4
 800c7dc:	4629      	mov	r1, r5
 800c7de:	f10b 0219 	add.w	r2, fp, #25
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	47b0      	blx	r6
 800c7e6:	3001      	adds	r0, #1
 800c7e8:	f43f aed2 	beq.w	800c590 <_printf_float+0x1d4>
 800c7ec:	3701      	adds	r7, #1
 800c7ee:	f8db 300c 	ldr.w	r3, [fp, #12]
 800c7f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c7f4:	1a9b      	subs	r3, r3, r2
 800c7f6:	429f      	cmp	r7, r3
 800c7f8:	dbef      	blt.n	800c7da <_printf_float+0x41e>
 800c7fa:	f8db 000c 	ldr.w	r0, [fp, #12]
 800c7fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c800:	4298      	cmp	r0, r3
 800c802:	bfb8      	it	lt
 800c804:	4618      	movlt	r0, r3
 800c806:	e019      	b.n	800c83c <_printf_float+0x480>
 800c808:	2700      	movs	r7, #0
 800c80a:	e7f0      	b.n	800c7ee <_printf_float+0x432>
 800c80c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c810:	e88d 000c 	stmia.w	sp, {r2, r3}
 800c814:	f8cb 3000 	str.w	r3, [fp]
 800c818:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800c81c:	9302      	str	r3, [sp, #8]
 800c81e:	ab0d      	add	r3, sp, #52	; 0x34
 800c820:	9303      	str	r3, [sp, #12]
 800c822:	ab0e      	add	r3, sp, #56	; 0x38
 800c824:	9305      	str	r3, [sp, #20]
 800c826:	2300      	movs	r3, #0
 800c828:	9306      	str	r3, [sp, #24]
 800c82a:	f8cd 8010 	str.w	r8, [sp, #16]
 800c82e:	4620      	mov	r0, r4
 800c830:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c834:	f7ff fd32 	bl	800c29c <__cvt>
 800c838:	4607      	mov	r7, r0
 800c83a:	e640      	b.n	800c4be <_printf_float+0x102>
 800c83c:	b011      	add	sp, #68	; 0x44
 800c83e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c842:	bf00      	nop

0800c844 <_printf_common>:
 800c844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c848:	4691      	mov	r9, r2
 800c84a:	461f      	mov	r7, r3
 800c84c:	688a      	ldr	r2, [r1, #8]
 800c84e:	690b      	ldr	r3, [r1, #16]
 800c850:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c854:	4293      	cmp	r3, r2
 800c856:	bfb8      	it	lt
 800c858:	4613      	movlt	r3, r2
 800c85a:	f8c9 3000 	str.w	r3, [r9]
 800c85e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c862:	4606      	mov	r6, r0
 800c864:	460c      	mov	r4, r1
 800c866:	b112      	cbz	r2, 800c86e <_printf_common+0x2a>
 800c868:	3301      	adds	r3, #1
 800c86a:	f8c9 3000 	str.w	r3, [r9]
 800c86e:	6823      	ldr	r3, [r4, #0]
 800c870:	0699      	lsls	r1, r3, #26
 800c872:	bf42      	ittt	mi
 800c874:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c878:	3302      	addmi	r3, #2
 800c87a:	f8c9 3000 	strmi.w	r3, [r9]
 800c87e:	6825      	ldr	r5, [r4, #0]
 800c880:	f015 0506 	ands.w	r5, r5, #6
 800c884:	d01c      	beq.n	800c8c0 <_printf_common+0x7c>
 800c886:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c88a:	6822      	ldr	r2, [r4, #0]
 800c88c:	3300      	adds	r3, #0
 800c88e:	bf18      	it	ne
 800c890:	2301      	movne	r3, #1
 800c892:	0692      	lsls	r2, r2, #26
 800c894:	d51f      	bpl.n	800c8d6 <_printf_common+0x92>
 800c896:	18e1      	adds	r1, r4, r3
 800c898:	1c5a      	adds	r2, r3, #1
 800c89a:	2030      	movs	r0, #48	; 0x30
 800c89c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c8a0:	4422      	add	r2, r4
 800c8a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c8a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c8aa:	3302      	adds	r3, #2
 800c8ac:	e013      	b.n	800c8d6 <_printf_common+0x92>
 800c8ae:	4630      	mov	r0, r6
 800c8b0:	4639      	mov	r1, r7
 800c8b2:	f104 0219 	add.w	r2, r4, #25
 800c8b6:	2301      	movs	r3, #1
 800c8b8:	47c0      	blx	r8
 800c8ba:	3001      	adds	r0, #1
 800c8bc:	d007      	beq.n	800c8ce <_printf_common+0x8a>
 800c8be:	3501      	adds	r5, #1
 800c8c0:	68e3      	ldr	r3, [r4, #12]
 800c8c2:	f8d9 2000 	ldr.w	r2, [r9]
 800c8c6:	1a9b      	subs	r3, r3, r2
 800c8c8:	429d      	cmp	r5, r3
 800c8ca:	dbf0      	blt.n	800c8ae <_printf_common+0x6a>
 800c8cc:	e7db      	b.n	800c886 <_printf_common+0x42>
 800c8ce:	f04f 30ff 	mov.w	r0, #4294967295
 800c8d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8d6:	4630      	mov	r0, r6
 800c8d8:	4639      	mov	r1, r7
 800c8da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c8de:	47c0      	blx	r8
 800c8e0:	3001      	adds	r0, #1
 800c8e2:	d0f4      	beq.n	800c8ce <_printf_common+0x8a>
 800c8e4:	6822      	ldr	r2, [r4, #0]
 800c8e6:	f8d9 5000 	ldr.w	r5, [r9]
 800c8ea:	68e3      	ldr	r3, [r4, #12]
 800c8ec:	f002 0206 	and.w	r2, r2, #6
 800c8f0:	2a04      	cmp	r2, #4
 800c8f2:	bf08      	it	eq
 800c8f4:	1b5d      	subeq	r5, r3, r5
 800c8f6:	6922      	ldr	r2, [r4, #16]
 800c8f8:	68a3      	ldr	r3, [r4, #8]
 800c8fa:	bf0c      	ite	eq
 800c8fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c900:	2500      	movne	r5, #0
 800c902:	4293      	cmp	r3, r2
 800c904:	bfc4      	itt	gt
 800c906:	1a9b      	subgt	r3, r3, r2
 800c908:	18ed      	addgt	r5, r5, r3
 800c90a:	f04f 0900 	mov.w	r9, #0
 800c90e:	45a9      	cmp	r9, r5
 800c910:	da0a      	bge.n	800c928 <_printf_common+0xe4>
 800c912:	4630      	mov	r0, r6
 800c914:	4639      	mov	r1, r7
 800c916:	f104 021a 	add.w	r2, r4, #26
 800c91a:	2301      	movs	r3, #1
 800c91c:	47c0      	blx	r8
 800c91e:	3001      	adds	r0, #1
 800c920:	d0d5      	beq.n	800c8ce <_printf_common+0x8a>
 800c922:	f109 0901 	add.w	r9, r9, #1
 800c926:	e7f2      	b.n	800c90e <_printf_common+0xca>
 800c928:	2000      	movs	r0, #0
 800c92a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0800c930 <__fpclassifyd>:
 800c930:	460a      	mov	r2, r1
 800c932:	f031 4100 	bics.w	r1, r1, #2147483648	; 0x80000000
 800c936:	b510      	push	{r4, lr}
 800c938:	4603      	mov	r3, r0
 800c93a:	d01b      	beq.n	800c974 <__fpclassifyd+0x44>
 800c93c:	480f      	ldr	r0, [pc, #60]	; (800c97c <__fpclassifyd+0x4c>)
 800c93e:	f5a2 1480 	sub.w	r4, r2, #1048576	; 0x100000
 800c942:	4284      	cmp	r4, r0
 800c944:	d910      	bls.n	800c968 <__fpclassifyd+0x38>
 800c946:	f102 42ff 	add.w	r2, r2, #2139095040	; 0x7f800000
 800c94a:	480c      	ldr	r0, [pc, #48]	; (800c97c <__fpclassifyd+0x4c>)
 800c94c:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 800c950:	4282      	cmp	r2, r0
 800c952:	d909      	bls.n	800c968 <__fpclassifyd+0x38>
 800c954:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c958:	d308      	bcc.n	800c96c <__fpclassifyd+0x3c>
 800c95a:	4a09      	ldr	r2, [pc, #36]	; (800c980 <__fpclassifyd+0x50>)
 800c95c:	4291      	cmp	r1, r2
 800c95e:	d107      	bne.n	800c970 <__fpclassifyd+0x40>
 800c960:	fab3 f083 	clz	r0, r3
 800c964:	0940      	lsrs	r0, r0, #5
 800c966:	bd10      	pop	{r4, pc}
 800c968:	2004      	movs	r0, #4
 800c96a:	bd10      	pop	{r4, pc}
 800c96c:	2003      	movs	r0, #3
 800c96e:	bd10      	pop	{r4, pc}
 800c970:	2000      	movs	r0, #0
 800c972:	bd10      	pop	{r4, pc}
 800c974:	2800      	cmp	r0, #0
 800c976:	d1e6      	bne.n	800c946 <__fpclassifyd+0x16>
 800c978:	2002      	movs	r0, #2
 800c97a:	bd10      	pop	{r4, pc}
 800c97c:	7fdfffff 	.word	0x7fdfffff
 800c980:	7ff00000 	.word	0x7ff00000

0800c984 <_sbrk_r>:
 800c984:	b538      	push	{r3, r4, r5, lr}
 800c986:	4c06      	ldr	r4, [pc, #24]	; (800c9a0 <_sbrk_r+0x1c>)
 800c988:	2300      	movs	r3, #0
 800c98a:	4605      	mov	r5, r0
 800c98c:	4608      	mov	r0, r1
 800c98e:	6023      	str	r3, [r4, #0]
 800c990:	f7fa fc12 	bl	80071b8 <_sbrk>
 800c994:	1c43      	adds	r3, r0, #1
 800c996:	d102      	bne.n	800c99e <_sbrk_r+0x1a>
 800c998:	6823      	ldr	r3, [r4, #0]
 800c99a:	b103      	cbz	r3, 800c99e <_sbrk_r+0x1a>
 800c99c:	602b      	str	r3, [r5, #0]
 800c99e:	bd38      	pop	{r3, r4, r5, pc}
 800c9a0:	20000cb0 	.word	0x20000cb0

0800c9a4 <strlen>:
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9aa:	2a00      	cmp	r2, #0
 800c9ac:	d1fb      	bne.n	800c9a6 <strlen+0x2>
 800c9ae:	1a18      	subs	r0, r3, r0
 800c9b0:	3801      	subs	r0, #1
 800c9b2:	4770      	bx	lr

0800c9b4 <quorem>:
 800c9b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9b8:	6903      	ldr	r3, [r0, #16]
 800c9ba:	690c      	ldr	r4, [r1, #16]
 800c9bc:	42a3      	cmp	r3, r4
 800c9be:	4680      	mov	r8, r0
 800c9c0:	f2c0 8081 	blt.w	800cac6 <quorem+0x112>
 800c9c4:	3c01      	subs	r4, #1
 800c9c6:	f101 0714 	add.w	r7, r1, #20
 800c9ca:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800c9ce:	f100 0614 	add.w	r6, r0, #20
 800c9d2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c9d6:	eb06 030e 	add.w	r3, r6, lr
 800c9da:	9301      	str	r3, [sp, #4]
 800c9dc:	3501      	adds	r5, #1
 800c9de:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800c9e2:	fbb3 f5f5 	udiv	r5, r3, r5
 800c9e6:	eb07 090e 	add.w	r9, r7, lr
 800c9ea:	b3c5      	cbz	r5, 800ca5e <quorem+0xaa>
 800c9ec:	f04f 0a00 	mov.w	sl, #0
 800c9f0:	4638      	mov	r0, r7
 800c9f2:	46b4      	mov	ip, r6
 800c9f4:	46d3      	mov	fp, sl
 800c9f6:	f850 3b04 	ldr.w	r3, [r0], #4
 800c9fa:	b29a      	uxth	r2, r3
 800c9fc:	0c1b      	lsrs	r3, r3, #16
 800c9fe:	fb02 a205 	mla	r2, r2, r5, sl
 800ca02:	436b      	muls	r3, r5
 800ca04:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ca08:	b292      	uxth	r2, r2
 800ca0a:	ebc2 020b 	rsb	r2, r2, fp
 800ca0e:	f8bc b000 	ldrh.w	fp, [ip]
 800ca12:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ca16:	fa12 f28b 	uxtah	r2, r2, fp
 800ca1a:	fa1f fb83 	uxth.w	fp, r3
 800ca1e:	f8dc 3000 	ldr.w	r3, [ip]
 800ca22:	ebcb 4313 	rsb	r3, fp, r3, lsr #16
 800ca26:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800ca2a:	b292      	uxth	r2, r2
 800ca2c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ca30:	4548      	cmp	r0, r9
 800ca32:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ca36:	f84c 2b04 	str.w	r2, [ip], #4
 800ca3a:	d9dc      	bls.n	800c9f6 <quorem+0x42>
 800ca3c:	f856 300e 	ldr.w	r3, [r6, lr]
 800ca40:	b96b      	cbnz	r3, 800ca5e <quorem+0xaa>
 800ca42:	9b01      	ldr	r3, [sp, #4]
 800ca44:	3b04      	subs	r3, #4
 800ca46:	42b3      	cmp	r3, r6
 800ca48:	461a      	mov	r2, r3
 800ca4a:	d802      	bhi.n	800ca52 <quorem+0x9e>
 800ca4c:	f8c8 4010 	str.w	r4, [r8, #16]
 800ca50:	e005      	b.n	800ca5e <quorem+0xaa>
 800ca52:	6812      	ldr	r2, [r2, #0]
 800ca54:	3b04      	subs	r3, #4
 800ca56:	2a00      	cmp	r2, #0
 800ca58:	d1f8      	bne.n	800ca4c <quorem+0x98>
 800ca5a:	3c01      	subs	r4, #1
 800ca5c:	e7f3      	b.n	800ca46 <quorem+0x92>
 800ca5e:	4640      	mov	r0, r8
 800ca60:	f001 f811 	bl	800da86 <__mcmp>
 800ca64:	2800      	cmp	r0, #0
 800ca66:	db2c      	blt.n	800cac2 <quorem+0x10e>
 800ca68:	3501      	adds	r5, #1
 800ca6a:	4630      	mov	r0, r6
 800ca6c:	f04f 0e00 	mov.w	lr, #0
 800ca70:	f857 1b04 	ldr.w	r1, [r7], #4
 800ca74:	f8d0 c000 	ldr.w	ip, [r0]
 800ca78:	b28a      	uxth	r2, r1
 800ca7a:	ebc2 030e 	rsb	r3, r2, lr
 800ca7e:	0c09      	lsrs	r1, r1, #16
 800ca80:	fa13 f38c 	uxtah	r3, r3, ip
 800ca84:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
 800ca88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ca8c:	b29b      	uxth	r3, r3
 800ca8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca92:	454f      	cmp	r7, r9
 800ca94:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800ca98:	f840 3b04 	str.w	r3, [r0], #4
 800ca9c:	d9e8      	bls.n	800ca70 <quorem+0xbc>
 800ca9e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800caa2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800caa6:	b962      	cbnz	r2, 800cac2 <quorem+0x10e>
 800caa8:	3b04      	subs	r3, #4
 800caaa:	42b3      	cmp	r3, r6
 800caac:	461a      	mov	r2, r3
 800caae:	d802      	bhi.n	800cab6 <quorem+0x102>
 800cab0:	f8c8 4010 	str.w	r4, [r8, #16]
 800cab4:	e005      	b.n	800cac2 <quorem+0x10e>
 800cab6:	6812      	ldr	r2, [r2, #0]
 800cab8:	3b04      	subs	r3, #4
 800caba:	2a00      	cmp	r2, #0
 800cabc:	d1f8      	bne.n	800cab0 <quorem+0xfc>
 800cabe:	3c01      	subs	r4, #1
 800cac0:	e7f3      	b.n	800caaa <quorem+0xf6>
 800cac2:	4628      	mov	r0, r5
 800cac4:	e000      	b.n	800cac8 <quorem+0x114>
 800cac6:	2000      	movs	r0, #0
 800cac8:	b003      	add	sp, #12
 800caca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800cad0 <_dtoa_r>:
 800cad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cad4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cad6:	b097      	sub	sp, #92	; 0x5c
 800cad8:	4682      	mov	sl, r0
 800cada:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800cadc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cae0:	b945      	cbnz	r5, 800caf4 <_dtoa_r+0x24>
 800cae2:	2010      	movs	r0, #16
 800cae4:	f7ff fb68 	bl	800c1b8 <malloc>
 800cae8:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 800caec:	6045      	str	r5, [r0, #4]
 800caee:	6085      	str	r5, [r0, #8]
 800caf0:	6005      	str	r5, [r0, #0]
 800caf2:	60c5      	str	r5, [r0, #12]
 800caf4:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800caf8:	6819      	ldr	r1, [r3, #0]
 800cafa:	b159      	cbz	r1, 800cb14 <_dtoa_r+0x44>
 800cafc:	685a      	ldr	r2, [r3, #4]
 800cafe:	604a      	str	r2, [r1, #4]
 800cb00:	2301      	movs	r3, #1
 800cb02:	4093      	lsls	r3, r2
 800cb04:	608b      	str	r3, [r1, #8]
 800cb06:	4650      	mov	r0, sl
 800cb08:	f000 fddf 	bl	800d6ca <_Bfree>
 800cb0c:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800cb10:	2200      	movs	r2, #0
 800cb12:	601a      	str	r2, [r3, #0]
 800cb14:	9b03      	ldr	r3, [sp, #12]
 800cb16:	4aa2      	ldr	r2, [pc, #648]	; (800cda0 <_dtoa_r+0x2d0>)
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	bfbf      	itttt	lt
 800cb1c:	2301      	movlt	r3, #1
 800cb1e:	6023      	strlt	r3, [r4, #0]
 800cb20:	9b03      	ldrlt	r3, [sp, #12]
 800cb22:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800cb26:	bfb8      	it	lt
 800cb28:	9303      	strlt	r3, [sp, #12]
 800cb2a:	9f03      	ldr	r7, [sp, #12]
 800cb2c:	bfa4      	itt	ge
 800cb2e:	2300      	movge	r3, #0
 800cb30:	6023      	strge	r3, [r4, #0]
 800cb32:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 800cb36:	0d1b      	lsrs	r3, r3, #20
 800cb38:	051b      	lsls	r3, r3, #20
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	d11d      	bne.n	800cb7a <_dtoa_r+0xaa>
 800cb3e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800cb40:	f242 730f 	movw	r3, #9999	; 0x270f
 800cb44:	6013      	str	r3, [r2, #0]
 800cb46:	9b02      	ldr	r3, [sp, #8]
 800cb48:	b943      	cbnz	r3, 800cb5c <_dtoa_r+0x8c>
 800cb4a:	4a96      	ldr	r2, [pc, #600]	; (800cda4 <_dtoa_r+0x2d4>)
 800cb4c:	4b96      	ldr	r3, [pc, #600]	; (800cda8 <_dtoa_r+0x2d8>)
 800cb4e:	f3c7 0013 	ubfx	r0, r7, #0, #20
 800cb52:	2800      	cmp	r0, #0
 800cb54:	bf14      	ite	ne
 800cb56:	4618      	movne	r0, r3
 800cb58:	4610      	moveq	r0, r2
 800cb5a:	e000      	b.n	800cb5e <_dtoa_r+0x8e>
 800cb5c:	4892      	ldr	r0, [pc, #584]	; (800cda8 <_dtoa_r+0x2d8>)
 800cb5e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	f000 8573 	beq.w	800d64c <_dtoa_r+0xb7c>
 800cb66:	78c3      	ldrb	r3, [r0, #3]
 800cb68:	b113      	cbz	r3, 800cb70 <_dtoa_r+0xa0>
 800cb6a:	f100 0308 	add.w	r3, r0, #8
 800cb6e:	e000      	b.n	800cb72 <_dtoa_r+0xa2>
 800cb70:	1cc3      	adds	r3, r0, #3
 800cb72:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800cb74:	6013      	str	r3, [r2, #0]
 800cb76:	f000 bd69 	b.w	800d64c <_dtoa_r+0xb7c>
 800cb7a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cb7e:	2200      	movs	r2, #0
 800cb80:	4620      	mov	r0, r4
 800cb82:	4629      	mov	r1, r5
 800cb84:	2300      	movs	r3, #0
 800cb86:	f7ff fa41 	bl	800c00c <__aeabi_dcmpeq>
 800cb8a:	4680      	mov	r8, r0
 800cb8c:	b158      	cbz	r0, 800cba6 <_dtoa_r+0xd6>
 800cb8e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800cb90:	2301      	movs	r3, #1
 800cb92:	6013      	str	r3, [r2, #0]
 800cb94:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	f000 8546 	beq.w	800d628 <_dtoa_r+0xb58>
 800cb9c:	4883      	ldr	r0, [pc, #524]	; (800cdac <_dtoa_r+0x2dc>)
 800cb9e:	6018      	str	r0, [r3, #0]
 800cba0:	3801      	subs	r0, #1
 800cba2:	f000 bd53 	b.w	800d64c <_dtoa_r+0xb7c>
 800cba6:	ab15      	add	r3, sp, #84	; 0x54
 800cba8:	9300      	str	r3, [sp, #0]
 800cbaa:	ab14      	add	r3, sp, #80	; 0x50
 800cbac:	9301      	str	r3, [sp, #4]
 800cbae:	4650      	mov	r0, sl
 800cbb0:	4622      	mov	r2, r4
 800cbb2:	462b      	mov	r3, r5
 800cbb4:	f000 ffe2 	bl	800db7c <__d2b>
 800cbb8:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800cbbc:	9007      	str	r0, [sp, #28]
 800cbbe:	b15e      	cbz	r6, 800cbd8 <_dtoa_r+0x108>
 800cbc0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800cbc4:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800cbc8:	4620      	mov	r0, r4
 800cbca:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800cbce:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 800cbd2:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800cbd6:	e01d      	b.n	800cc14 <_dtoa_r+0x144>
 800cbd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cbda:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800cbdc:	441e      	add	r6, r3
 800cbde:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 800cbe2:	429e      	cmp	r6, r3
 800cbe4:	bfad      	iteet	ge
 800cbe6:	9a02      	ldrge	r2, [sp, #8]
 800cbe8:	4b71      	ldrlt	r3, [pc, #452]	; (800cdb0 <_dtoa_r+0x2e0>)
 800cbea:	9a02      	ldrlt	r2, [sp, #8]
 800cbec:	f206 4312 	addwge	r3, r6, #1042	; 0x412
 800cbf0:	bfa3      	ittte	ge
 800cbf2:	fa22 f003 	lsrge.w	r0, r2, r3
 800cbf6:	4b6f      	ldrge	r3, [pc, #444]	; (800cdb4 <_dtoa_r+0x2e4>)
 800cbf8:	1b9b      	subge	r3, r3, r6
 800cbfa:	1b9b      	sublt	r3, r3, r6
 800cbfc:	bfaa      	itet	ge
 800cbfe:	409f      	lslge	r7, r3
 800cc00:	fa02 f003 	lsllt.w	r0, r2, r3
 800cc04:	4338      	orrge	r0, r7
 800cc06:	f7fe ff23 	bl	800ba50 <__aeabi_ui2d>
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800cc10:	3e01      	subs	r6, #1
 800cc12:	9313      	str	r3, [sp, #76]	; 0x4c
 800cc14:	2200      	movs	r2, #0
 800cc16:	4b68      	ldr	r3, [pc, #416]	; (800cdb8 <_dtoa_r+0x2e8>)
 800cc18:	f7fe fddc 	bl	800b7d4 <__aeabi_dsub>
 800cc1c:	a35a      	add	r3, pc, #360	; (adr r3, 800cd88 <_dtoa_r+0x2b8>)
 800cc1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc22:	f7fe ff8b 	bl	800bb3c <__aeabi_dmul>
 800cc26:	a35a      	add	r3, pc, #360	; (adr r3, 800cd90 <_dtoa_r+0x2c0>)
 800cc28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc2c:	f7fe fdd4 	bl	800b7d8 <__adddf3>
 800cc30:	4604      	mov	r4, r0
 800cc32:	4630      	mov	r0, r6
 800cc34:	460d      	mov	r5, r1
 800cc36:	f7fe ff1b 	bl	800ba70 <__aeabi_i2d>
 800cc3a:	a357      	add	r3, pc, #348	; (adr r3, 800cd98 <_dtoa_r+0x2c8>)
 800cc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc40:	f7fe ff7c 	bl	800bb3c <__aeabi_dmul>
 800cc44:	4602      	mov	r2, r0
 800cc46:	460b      	mov	r3, r1
 800cc48:	4620      	mov	r0, r4
 800cc4a:	4629      	mov	r1, r5
 800cc4c:	f7fe fdc4 	bl	800b7d8 <__adddf3>
 800cc50:	4604      	mov	r4, r0
 800cc52:	460d      	mov	r5, r1
 800cc54:	f7ff fa0c 	bl	800c070 <__aeabi_d2iz>
 800cc58:	4629      	mov	r1, r5
 800cc5a:	4683      	mov	fp, r0
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	4620      	mov	r0, r4
 800cc60:	2300      	movs	r3, #0
 800cc62:	f7ff f9dd 	bl	800c020 <__aeabi_dcmplt>
 800cc66:	b158      	cbz	r0, 800cc80 <_dtoa_r+0x1b0>
 800cc68:	4658      	mov	r0, fp
 800cc6a:	f7fe ff01 	bl	800ba70 <__aeabi_i2d>
 800cc6e:	4602      	mov	r2, r0
 800cc70:	460b      	mov	r3, r1
 800cc72:	4620      	mov	r0, r4
 800cc74:	4629      	mov	r1, r5
 800cc76:	f7ff f9c9 	bl	800c00c <__aeabi_dcmpeq>
 800cc7a:	b908      	cbnz	r0, 800cc80 <_dtoa_r+0x1b0>
 800cc7c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cc80:	f1bb 0f16 	cmp.w	fp, #22
 800cc84:	d80d      	bhi.n	800cca2 <_dtoa_r+0x1d2>
 800cc86:	4b4d      	ldr	r3, [pc, #308]	; (800cdbc <_dtoa_r+0x2ec>)
 800cc88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cc8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cc90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc94:	f7ff f9e2 	bl	800c05c <__aeabi_dcmpgt>
 800cc98:	b130      	cbz	r0, 800cca8 <_dtoa_r+0x1d8>
 800cc9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cc9e:	2300      	movs	r3, #0
 800cca0:	e000      	b.n	800cca4 <_dtoa_r+0x1d4>
 800cca2:	2301      	movs	r3, #1
 800cca4:	9312      	str	r3, [sp, #72]	; 0x48
 800cca6:	e000      	b.n	800ccaa <_dtoa_r+0x1da>
 800cca8:	9012      	str	r0, [sp, #72]	; 0x48
 800ccaa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ccac:	1b9e      	subs	r6, r3, r6
 800ccae:	1e73      	subs	r3, r6, #1
 800ccb0:	930a      	str	r3, [sp, #40]	; 0x28
 800ccb2:	bf45      	ittet	mi
 800ccb4:	425b      	negmi	r3, r3
 800ccb6:	9309      	strmi	r3, [sp, #36]	; 0x24
 800ccb8:	2300      	movpl	r3, #0
 800ccba:	2300      	movmi	r3, #0
 800ccbc:	bf4c      	ite	mi
 800ccbe:	930a      	strmi	r3, [sp, #40]	; 0x28
 800ccc0:	9309      	strpl	r3, [sp, #36]	; 0x24
 800ccc2:	f1bb 0f00 	cmp.w	fp, #0
 800ccc6:	db07      	blt.n	800ccd8 <_dtoa_r+0x208>
 800ccc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccca:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 800ccce:	445b      	add	r3, fp
 800ccd0:	930a      	str	r3, [sp, #40]	; 0x28
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	930b      	str	r3, [sp, #44]	; 0x2c
 800ccd6:	e008      	b.n	800ccea <_dtoa_r+0x21a>
 800ccd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccda:	ebcb 0303 	rsb	r3, fp, r3
 800ccde:	9309      	str	r3, [sp, #36]	; 0x24
 800cce0:	f1cb 0300 	rsb	r3, fp, #0
 800cce4:	930b      	str	r3, [sp, #44]	; 0x2c
 800cce6:	2300      	movs	r3, #0
 800cce8:	930d      	str	r3, [sp, #52]	; 0x34
 800ccea:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ccec:	2b09      	cmp	r3, #9
 800ccee:	d828      	bhi.n	800cd42 <_dtoa_r+0x272>
 800ccf0:	2b05      	cmp	r3, #5
 800ccf2:	bfc4      	itt	gt
 800ccf4:	3b04      	subgt	r3, #4
 800ccf6:	9320      	strgt	r3, [sp, #128]	; 0x80
 800ccf8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ccfa:	f1a3 0302 	sub.w	r3, r3, #2
 800ccfe:	bfcc      	ite	gt
 800cd00:	2500      	movgt	r5, #0
 800cd02:	2501      	movle	r5, #1
 800cd04:	2b03      	cmp	r3, #3
 800cd06:	d821      	bhi.n	800cd4c <_dtoa_r+0x27c>
 800cd08:	e8df f003 	tbb	[pc, r3]
 800cd0c:	10040e02 	.word	0x10040e02
 800cd10:	2300      	movs	r3, #0
 800cd12:	e000      	b.n	800cd16 <_dtoa_r+0x246>
 800cd14:	2301      	movs	r3, #1
 800cd16:	930c      	str	r3, [sp, #48]	; 0x30
 800cd18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	dc20      	bgt.n	800cd60 <_dtoa_r+0x290>
 800cd1e:	2301      	movs	r3, #1
 800cd20:	9306      	str	r3, [sp, #24]
 800cd22:	9305      	str	r3, [sp, #20]
 800cd24:	461a      	mov	r2, r3
 800cd26:	e019      	b.n	800cd5c <_dtoa_r+0x28c>
 800cd28:	2300      	movs	r3, #0
 800cd2a:	e000      	b.n	800cd2e <_dtoa_r+0x25e>
 800cd2c:	2301      	movs	r3, #1
 800cd2e:	930c      	str	r3, [sp, #48]	; 0x30
 800cd30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd32:	445b      	add	r3, fp
 800cd34:	9306      	str	r3, [sp, #24]
 800cd36:	3301      	adds	r3, #1
 800cd38:	2b01      	cmp	r3, #1
 800cd3a:	9305      	str	r3, [sp, #20]
 800cd3c:	bfb8      	it	lt
 800cd3e:	2301      	movlt	r3, #1
 800cd40:	e011      	b.n	800cd66 <_dtoa_r+0x296>
 800cd42:	2501      	movs	r5, #1
 800cd44:	2300      	movs	r3, #0
 800cd46:	9320      	str	r3, [sp, #128]	; 0x80
 800cd48:	950c      	str	r5, [sp, #48]	; 0x30
 800cd4a:	e001      	b.n	800cd50 <_dtoa_r+0x280>
 800cd4c:	2301      	movs	r3, #1
 800cd4e:	930c      	str	r3, [sp, #48]	; 0x30
 800cd50:	f04f 33ff 	mov.w	r3, #4294967295
 800cd54:	9306      	str	r3, [sp, #24]
 800cd56:	9305      	str	r3, [sp, #20]
 800cd58:	2200      	movs	r2, #0
 800cd5a:	2312      	movs	r3, #18
 800cd5c:	9221      	str	r2, [sp, #132]	; 0x84
 800cd5e:	e002      	b.n	800cd66 <_dtoa_r+0x296>
 800cd60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd62:	9306      	str	r3, [sp, #24]
 800cd64:	9305      	str	r3, [sp, #20]
 800cd66:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	6062      	str	r2, [r4, #4]
 800cd6e:	2104      	movs	r1, #4
 800cd70:	f101 0214 	add.w	r2, r1, #20
 800cd74:	429a      	cmp	r2, r3
 800cd76:	d823      	bhi.n	800cdc0 <_dtoa_r+0x2f0>
 800cd78:	6862      	ldr	r2, [r4, #4]
 800cd7a:	3201      	adds	r2, #1
 800cd7c:	6062      	str	r2, [r4, #4]
 800cd7e:	0049      	lsls	r1, r1, #1
 800cd80:	e7f6      	b.n	800cd70 <_dtoa_r+0x2a0>
 800cd82:	bf00      	nop
 800cd84:	f3af 8000 	nop.w
 800cd88:	636f4361 	.word	0x636f4361
 800cd8c:	3fd287a7 	.word	0x3fd287a7
 800cd90:	8b60c8b3 	.word	0x8b60c8b3
 800cd94:	3fc68a28 	.word	0x3fc68a28
 800cd98:	509f79fb 	.word	0x509f79fb
 800cd9c:	3fd34413 	.word	0x3fd34413
 800cda0:	7ff00000 	.word	0x7ff00000
 800cda4:	0800e1f4 	.word	0x0800e1f4
 800cda8:	0800e1fd 	.word	0x0800e1fd
 800cdac:	0800e1f3 	.word	0x0800e1f3
 800cdb0:	fffffbee 	.word	0xfffffbee
 800cdb4:	fffffc0e 	.word	0xfffffc0e
 800cdb8:	3ff80000 	.word	0x3ff80000
 800cdbc:	0800e210 	.word	0x0800e210
 800cdc0:	4650      	mov	r0, sl
 800cdc2:	6861      	ldr	r1, [r4, #4]
 800cdc4:	f000 fc4c 	bl	800d660 <_Balloc>
 800cdc8:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800cdcc:	6020      	str	r0, [r4, #0]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	9308      	str	r3, [sp, #32]
 800cdd2:	9b05      	ldr	r3, [sp, #20]
 800cdd4:	2b0e      	cmp	r3, #14
 800cdd6:	f200 814b 	bhi.w	800d070 <_dtoa_r+0x5a0>
 800cdda:	2d00      	cmp	r5, #0
 800cddc:	f000 8148 	beq.w	800d070 <_dtoa_r+0x5a0>
 800cde0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cde4:	f1bb 0f00 	cmp.w	fp, #0
 800cde8:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800cdec:	dd31      	ble.n	800ce52 <_dtoa_r+0x382>
 800cdee:	4ab3      	ldr	r2, [pc, #716]	; (800d0bc <_dtoa_r+0x5ec>)
 800cdf0:	f00b 030f 	and.w	r3, fp, #15
 800cdf4:	ea4f 172b 	mov.w	r7, fp, asr #4
 800cdf8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cdfc:	06f8      	lsls	r0, r7, #27
 800cdfe:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ce02:	d50c      	bpl.n	800ce1e <_dtoa_r+0x34e>
 800ce04:	4bae      	ldr	r3, [pc, #696]	; (800d0c0 <_dtoa_r+0x5f0>)
 800ce06:	ec51 0b17 	vmov	r0, r1, d7
 800ce0a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ce0e:	f7fe ffbf 	bl	800bd90 <__aeabi_ddiv>
 800ce12:	f007 070f 	and.w	r7, r7, #15
 800ce16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce1a:	2603      	movs	r6, #3
 800ce1c:	e000      	b.n	800ce20 <_dtoa_r+0x350>
 800ce1e:	2602      	movs	r6, #2
 800ce20:	f8df 829c 	ldr.w	r8, [pc, #668]	; 800d0c0 <_dtoa_r+0x5f0>
 800ce24:	b177      	cbz	r7, 800ce44 <_dtoa_r+0x374>
 800ce26:	07f9      	lsls	r1, r7, #31
 800ce28:	d508      	bpl.n	800ce3c <_dtoa_r+0x36c>
 800ce2a:	4620      	mov	r0, r4
 800ce2c:	4629      	mov	r1, r5
 800ce2e:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ce32:	f7fe fe83 	bl	800bb3c <__aeabi_dmul>
 800ce36:	3601      	adds	r6, #1
 800ce38:	4604      	mov	r4, r0
 800ce3a:	460d      	mov	r5, r1
 800ce3c:	107f      	asrs	r7, r7, #1
 800ce3e:	f108 0808 	add.w	r8, r8, #8
 800ce42:	e7ef      	b.n	800ce24 <_dtoa_r+0x354>
 800ce44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce48:	4622      	mov	r2, r4
 800ce4a:	462b      	mov	r3, r5
 800ce4c:	f7fe ffa0 	bl	800bd90 <__aeabi_ddiv>
 800ce50:	e01b      	b.n	800ce8a <_dtoa_r+0x3ba>
 800ce52:	f1cb 0400 	rsb	r4, fp, #0
 800ce56:	b1dc      	cbz	r4, 800ce90 <_dtoa_r+0x3c0>
 800ce58:	4b98      	ldr	r3, [pc, #608]	; (800d0bc <_dtoa_r+0x5ec>)
 800ce5a:	4d99      	ldr	r5, [pc, #612]	; (800d0c0 <_dtoa_r+0x5f0>)
 800ce5c:	f004 020f 	and.w	r2, r4, #15
 800ce60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce64:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ce68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce6c:	f7fe fe66 	bl	800bb3c <__aeabi_dmul>
 800ce70:	1124      	asrs	r4, r4, #4
 800ce72:	2602      	movs	r6, #2
 800ce74:	b14c      	cbz	r4, 800ce8a <_dtoa_r+0x3ba>
 800ce76:	07e2      	lsls	r2, r4, #31
 800ce78:	d504      	bpl.n	800ce84 <_dtoa_r+0x3b4>
 800ce7a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ce7e:	3601      	adds	r6, #1
 800ce80:	f7fe fe5c 	bl	800bb3c <__aeabi_dmul>
 800ce84:	1064      	asrs	r4, r4, #1
 800ce86:	3508      	adds	r5, #8
 800ce88:	e7f4      	b.n	800ce74 <_dtoa_r+0x3a4>
 800ce8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce8e:	e000      	b.n	800ce92 <_dtoa_r+0x3c2>
 800ce90:	2602      	movs	r6, #2
 800ce92:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ce94:	b1db      	cbz	r3, 800cece <_dtoa_r+0x3fe>
 800ce96:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	4620      	mov	r0, r4
 800ce9e:	4629      	mov	r1, r5
 800cea0:	4b88      	ldr	r3, [pc, #544]	; (800d0c4 <_dtoa_r+0x5f4>)
 800cea2:	f7ff f8bd 	bl	800c020 <__aeabi_dcmplt>
 800cea6:	b190      	cbz	r0, 800cece <_dtoa_r+0x3fe>
 800cea8:	9b05      	ldr	r3, [sp, #20]
 800ceaa:	b183      	cbz	r3, 800cece <_dtoa_r+0x3fe>
 800ceac:	9b06      	ldr	r3, [sp, #24]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	f340 80da 	ble.w	800d068 <_dtoa_r+0x598>
 800ceb4:	4629      	mov	r1, r5
 800ceb6:	4620      	mov	r0, r4
 800ceb8:	2200      	movs	r2, #0
 800ceba:	4b83      	ldr	r3, [pc, #524]	; (800d0c8 <_dtoa_r+0x5f8>)
 800cebc:	f7fe fe3e 	bl	800bb3c <__aeabi_dmul>
 800cec0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800cec4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cec8:	3601      	adds	r6, #1
 800ceca:	9d06      	ldr	r5, [sp, #24]
 800cecc:	e001      	b.n	800ced2 <_dtoa_r+0x402>
 800cece:	9d05      	ldr	r5, [sp, #20]
 800ced0:	465f      	mov	r7, fp
 800ced2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ced6:	4630      	mov	r0, r6
 800ced8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800cedc:	f7fe fdc8 	bl	800ba70 <__aeabi_i2d>
 800cee0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800cee4:	f7fe fe2a 	bl	800bb3c <__aeabi_dmul>
 800cee8:	2200      	movs	r2, #0
 800ceea:	4b78      	ldr	r3, [pc, #480]	; (800d0cc <_dtoa_r+0x5fc>)
 800ceec:	f7fe fc74 	bl	800b7d8 <__adddf3>
 800cef0:	4680      	mov	r8, r0
 800cef2:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 800cef6:	b9cd      	cbnz	r5, 800cf2c <_dtoa_r+0x45c>
 800cef8:	2200      	movs	r2, #0
 800cefa:	4b75      	ldr	r3, [pc, #468]	; (800d0d0 <_dtoa_r+0x600>)
 800cefc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800cf00:	f7fe fc68 	bl	800b7d4 <__aeabi_dsub>
 800cf04:	4642      	mov	r2, r8
 800cf06:	464b      	mov	r3, r9
 800cf08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf0c:	f7ff f8a6 	bl	800c05c <__aeabi_dcmpgt>
 800cf10:	2800      	cmp	r0, #0
 800cf12:	f040 8246 	bne.w	800d3a2 <_dtoa_r+0x8d2>
 800cf16:	4642      	mov	r2, r8
 800cf18:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800cf1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf20:	f7ff f87e 	bl	800c020 <__aeabi_dcmplt>
 800cf24:	2800      	cmp	r0, #0
 800cf26:	f040 8236 	bne.w	800d396 <_dtoa_r+0x8c6>
 800cf2a:	e09d      	b.n	800d068 <_dtoa_r+0x598>
 800cf2c:	4b63      	ldr	r3, [pc, #396]	; (800d0bc <_dtoa_r+0x5ec>)
 800cf2e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cf30:	1e6a      	subs	r2, r5, #1
 800cf32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf36:	2900      	cmp	r1, #0
 800cf38:	d049      	beq.n	800cfce <_dtoa_r+0x4fe>
 800cf3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf3e:	2000      	movs	r0, #0
 800cf40:	4964      	ldr	r1, [pc, #400]	; (800d0d4 <_dtoa_r+0x604>)
 800cf42:	f7fe ff25 	bl	800bd90 <__aeabi_ddiv>
 800cf46:	4642      	mov	r2, r8
 800cf48:	464b      	mov	r3, r9
 800cf4a:	f7fe fc43 	bl	800b7d4 <__aeabi_dsub>
 800cf4e:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 800cf52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf56:	9c08      	ldr	r4, [sp, #32]
 800cf58:	4649      	mov	r1, r9
 800cf5a:	4640      	mov	r0, r8
 800cf5c:	f7ff f888 	bl	800c070 <__aeabi_d2iz>
 800cf60:	4606      	mov	r6, r0
 800cf62:	f7fe fd85 	bl	800ba70 <__aeabi_i2d>
 800cf66:	4602      	mov	r2, r0
 800cf68:	460b      	mov	r3, r1
 800cf6a:	4640      	mov	r0, r8
 800cf6c:	4649      	mov	r1, r9
 800cf6e:	f7fe fc31 	bl	800b7d4 <__aeabi_dsub>
 800cf72:	3630      	adds	r6, #48	; 0x30
 800cf74:	f804 6b01 	strb.w	r6, [r4], #1
 800cf78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cf7c:	4680      	mov	r8, r0
 800cf7e:	4689      	mov	r9, r1
 800cf80:	f7ff f84e 	bl	800c020 <__aeabi_dcmplt>
 800cf84:	2800      	cmp	r0, #0
 800cf86:	f040 8340 	bne.w	800d60a <_dtoa_r+0xb3a>
 800cf8a:	4642      	mov	r2, r8
 800cf8c:	464b      	mov	r3, r9
 800cf8e:	2000      	movs	r0, #0
 800cf90:	494c      	ldr	r1, [pc, #304]	; (800d0c4 <_dtoa_r+0x5f4>)
 800cf92:	f7fe fc1f 	bl	800b7d4 <__aeabi_dsub>
 800cf96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cf9a:	f7ff f841 	bl	800c020 <__aeabi_dcmplt>
 800cf9e:	2800      	cmp	r0, #0
 800cfa0:	f040 80d3 	bne.w	800d14a <_dtoa_r+0x67a>
 800cfa4:	9b08      	ldr	r3, [sp, #32]
 800cfa6:	1ae3      	subs	r3, r4, r3
 800cfa8:	42ab      	cmp	r3, r5
 800cfaa:	da5d      	bge.n	800d068 <_dtoa_r+0x598>
 800cfac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	4b45      	ldr	r3, [pc, #276]	; (800d0c8 <_dtoa_r+0x5f8>)
 800cfb4:	f7fe fdc2 	bl	800bb3c <__aeabi_dmul>
 800cfb8:	2200      	movs	r2, #0
 800cfba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cfbe:	4b42      	ldr	r3, [pc, #264]	; (800d0c8 <_dtoa_r+0x5f8>)
 800cfc0:	4640      	mov	r0, r8
 800cfc2:	4649      	mov	r1, r9
 800cfc4:	f7fe fdba 	bl	800bb3c <__aeabi_dmul>
 800cfc8:	4680      	mov	r8, r0
 800cfca:	4689      	mov	r9, r1
 800cfcc:	e7c4      	b.n	800cf58 <_dtoa_r+0x488>
 800cfce:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cfd2:	4642      	mov	r2, r8
 800cfd4:	464b      	mov	r3, r9
 800cfd6:	f7fe fdb1 	bl	800bb3c <__aeabi_dmul>
 800cfda:	9b08      	ldr	r3, [sp, #32]
 800cfdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cfe0:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 800cfe4:	195c      	adds	r4, r3, r5
 800cfe6:	461d      	mov	r5, r3
 800cfe8:	4649      	mov	r1, r9
 800cfea:	4640      	mov	r0, r8
 800cfec:	f7ff f840 	bl	800c070 <__aeabi_d2iz>
 800cff0:	4606      	mov	r6, r0
 800cff2:	f7fe fd3d 	bl	800ba70 <__aeabi_i2d>
 800cff6:	3630      	adds	r6, #48	; 0x30
 800cff8:	4602      	mov	r2, r0
 800cffa:	460b      	mov	r3, r1
 800cffc:	4640      	mov	r0, r8
 800cffe:	4649      	mov	r1, r9
 800d000:	f7fe fbe8 	bl	800b7d4 <__aeabi_dsub>
 800d004:	f805 6b01 	strb.w	r6, [r5], #1
 800d008:	42a5      	cmp	r5, r4
 800d00a:	4680      	mov	r8, r0
 800d00c:	4689      	mov	r9, r1
 800d00e:	d124      	bne.n	800d05a <_dtoa_r+0x58a>
 800d010:	2200      	movs	r2, #0
 800d012:	4b30      	ldr	r3, [pc, #192]	; (800d0d4 <_dtoa_r+0x604>)
 800d014:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d018:	f7fe fbde 	bl	800b7d8 <__adddf3>
 800d01c:	4602      	mov	r2, r0
 800d01e:	460b      	mov	r3, r1
 800d020:	4640      	mov	r0, r8
 800d022:	4649      	mov	r1, r9
 800d024:	f7ff f81a 	bl	800c05c <__aeabi_dcmpgt>
 800d028:	2800      	cmp	r0, #0
 800d02a:	f040 808e 	bne.w	800d14a <_dtoa_r+0x67a>
 800d02e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d032:	2000      	movs	r0, #0
 800d034:	4927      	ldr	r1, [pc, #156]	; (800d0d4 <_dtoa_r+0x604>)
 800d036:	f7fe fbcd 	bl	800b7d4 <__aeabi_dsub>
 800d03a:	4602      	mov	r2, r0
 800d03c:	460b      	mov	r3, r1
 800d03e:	4640      	mov	r0, r8
 800d040:	4649      	mov	r1, r9
 800d042:	f7fe ffed 	bl	800c020 <__aeabi_dcmplt>
 800d046:	b178      	cbz	r0, 800d068 <_dtoa_r+0x598>
 800d048:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800d04c:	2b30      	cmp	r3, #48	; 0x30
 800d04e:	f104 32ff 	add.w	r2, r4, #4294967295
 800d052:	f040 82da 	bne.w	800d60a <_dtoa_r+0xb3a>
 800d056:	4614      	mov	r4, r2
 800d058:	e7f6      	b.n	800d048 <_dtoa_r+0x578>
 800d05a:	2200      	movs	r2, #0
 800d05c:	4b1a      	ldr	r3, [pc, #104]	; (800d0c8 <_dtoa_r+0x5f8>)
 800d05e:	f7fe fd6d 	bl	800bb3c <__aeabi_dmul>
 800d062:	4680      	mov	r8, r0
 800d064:	4689      	mov	r9, r1
 800d066:	e7bf      	b.n	800cfe8 <_dtoa_r+0x518>
 800d068:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d06c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d070:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d072:	2b00      	cmp	r3, #0
 800d074:	f2c0 808b 	blt.w	800d18e <_dtoa_r+0x6be>
 800d078:	f1bb 0f0e 	cmp.w	fp, #14
 800d07c:	f300 8087 	bgt.w	800d18e <_dtoa_r+0x6be>
 800d080:	4b0e      	ldr	r3, [pc, #56]	; (800d0bc <_dtoa_r+0x5ec>)
 800d082:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d086:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d08a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	da23      	bge.n	800d0d8 <_dtoa_r+0x608>
 800d090:	9b05      	ldr	r3, [sp, #20]
 800d092:	2b00      	cmp	r3, #0
 800d094:	dc20      	bgt.n	800d0d8 <_dtoa_r+0x608>
 800d096:	f040 817d 	bne.w	800d394 <_dtoa_r+0x8c4>
 800d09a:	4630      	mov	r0, r6
 800d09c:	2200      	movs	r2, #0
 800d09e:	4b0c      	ldr	r3, [pc, #48]	; (800d0d0 <_dtoa_r+0x600>)
 800d0a0:	4639      	mov	r1, r7
 800d0a2:	f7fe fd4b 	bl	800bb3c <__aeabi_dmul>
 800d0a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d0aa:	f7fe ffcd 	bl	800c048 <__aeabi_dcmpge>
 800d0ae:	9d05      	ldr	r5, [sp, #20]
 800d0b0:	462e      	mov	r6, r5
 800d0b2:	2800      	cmp	r0, #0
 800d0b4:	f040 8170 	bne.w	800d398 <_dtoa_r+0x8c8>
 800d0b8:	e175      	b.n	800d3a6 <_dtoa_r+0x8d6>
 800d0ba:	bf00      	nop
 800d0bc:	0800e210 	.word	0x0800e210
 800d0c0:	0800e2d8 	.word	0x0800e2d8
 800d0c4:	3ff00000 	.word	0x3ff00000
 800d0c8:	40240000 	.word	0x40240000
 800d0cc:	401c0000 	.word	0x401c0000
 800d0d0:	40140000 	.word	0x40140000
 800d0d4:	3fe00000 	.word	0x3fe00000
 800d0d8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d0dc:	9c08      	ldr	r4, [sp, #32]
 800d0de:	4632      	mov	r2, r6
 800d0e0:	463b      	mov	r3, r7
 800d0e2:	4640      	mov	r0, r8
 800d0e4:	4649      	mov	r1, r9
 800d0e6:	f7fe fe53 	bl	800bd90 <__aeabi_ddiv>
 800d0ea:	f7fe ffc1 	bl	800c070 <__aeabi_d2iz>
 800d0ee:	4605      	mov	r5, r0
 800d0f0:	f7fe fcbe 	bl	800ba70 <__aeabi_i2d>
 800d0f4:	4632      	mov	r2, r6
 800d0f6:	463b      	mov	r3, r7
 800d0f8:	f7fe fd20 	bl	800bb3c <__aeabi_dmul>
 800d0fc:	460b      	mov	r3, r1
 800d0fe:	4602      	mov	r2, r0
 800d100:	4649      	mov	r1, r9
 800d102:	4640      	mov	r0, r8
 800d104:	f7fe fb66 	bl	800b7d4 <__aeabi_dsub>
 800d108:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 800d10c:	9b08      	ldr	r3, [sp, #32]
 800d10e:	f804 eb01 	strb.w	lr, [r4], #1
 800d112:	ebc3 0e04 	rsb	lr, r3, r4
 800d116:	9b05      	ldr	r3, [sp, #20]
 800d118:	459e      	cmp	lr, r3
 800d11a:	d12b      	bne.n	800d174 <_dtoa_r+0x6a4>
 800d11c:	4602      	mov	r2, r0
 800d11e:	460b      	mov	r3, r1
 800d120:	f7fe fb5a 	bl	800b7d8 <__adddf3>
 800d124:	4632      	mov	r2, r6
 800d126:	463b      	mov	r3, r7
 800d128:	4680      	mov	r8, r0
 800d12a:	4689      	mov	r9, r1
 800d12c:	f7fe ff96 	bl	800c05c <__aeabi_dcmpgt>
 800d130:	b970      	cbnz	r0, 800d150 <_dtoa_r+0x680>
 800d132:	4640      	mov	r0, r8
 800d134:	4649      	mov	r1, r9
 800d136:	4632      	mov	r2, r6
 800d138:	463b      	mov	r3, r7
 800d13a:	f7fe ff67 	bl	800c00c <__aeabi_dcmpeq>
 800d13e:	2800      	cmp	r0, #0
 800d140:	f000 8264 	beq.w	800d60c <_dtoa_r+0xb3c>
 800d144:	07eb      	lsls	r3, r5, #31
 800d146:	d403      	bmi.n	800d150 <_dtoa_r+0x680>
 800d148:	e260      	b.n	800d60c <_dtoa_r+0xb3c>
 800d14a:	46bb      	mov	fp, r7
 800d14c:	e000      	b.n	800d150 <_dtoa_r+0x680>
 800d14e:	461c      	mov	r4, r3
 800d150:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 800d154:	2a39      	cmp	r2, #57	; 0x39
 800d156:	f104 33ff 	add.w	r3, r4, #4294967295
 800d15a:	d107      	bne.n	800d16c <_dtoa_r+0x69c>
 800d15c:	9a08      	ldr	r2, [sp, #32]
 800d15e:	4293      	cmp	r3, r2
 800d160:	d1f5      	bne.n	800d14e <_dtoa_r+0x67e>
 800d162:	2330      	movs	r3, #48	; 0x30
 800d164:	7013      	strb	r3, [r2, #0]
 800d166:	f10b 0b01 	add.w	fp, fp, #1
 800d16a:	4613      	mov	r3, r2
 800d16c:	781a      	ldrb	r2, [r3, #0]
 800d16e:	3201      	adds	r2, #1
 800d170:	701a      	strb	r2, [r3, #0]
 800d172:	e24b      	b.n	800d60c <_dtoa_r+0xb3c>
 800d174:	2200      	movs	r2, #0
 800d176:	4ba4      	ldr	r3, [pc, #656]	; (800d408 <_dtoa_r+0x938>)
 800d178:	f7fe fce0 	bl	800bb3c <__aeabi_dmul>
 800d17c:	2200      	movs	r2, #0
 800d17e:	2300      	movs	r3, #0
 800d180:	4680      	mov	r8, r0
 800d182:	4689      	mov	r9, r1
 800d184:	f7fe ff42 	bl	800c00c <__aeabi_dcmpeq>
 800d188:	2800      	cmp	r0, #0
 800d18a:	d0a8      	beq.n	800d0de <_dtoa_r+0x60e>
 800d18c:	e23e      	b.n	800d60c <_dtoa_r+0xb3c>
 800d18e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d190:	2a00      	cmp	r2, #0
 800d192:	d032      	beq.n	800d1fa <_dtoa_r+0x72a>
 800d194:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d196:	2a01      	cmp	r2, #1
 800d198:	dc0a      	bgt.n	800d1b0 <_dtoa_r+0x6e0>
 800d19a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d19c:	b112      	cbz	r2, 800d1a4 <_dtoa_r+0x6d4>
 800d19e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d1a2:	e002      	b.n	800d1aa <_dtoa_r+0x6da>
 800d1a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d1a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d1aa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800d1ac:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800d1ae:	e018      	b.n	800d1e2 <_dtoa_r+0x712>
 800d1b0:	9b05      	ldr	r3, [sp, #20]
 800d1b2:	1e5d      	subs	r5, r3, #1
 800d1b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d1b6:	42ab      	cmp	r3, r5
 800d1b8:	bfbf      	itttt	lt
 800d1ba:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800d1bc:	950b      	strlt	r5, [sp, #44]	; 0x2c
 800d1be:	1aea      	sublt	r2, r5, r3
 800d1c0:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800d1c2:	bfb6      	itet	lt
 800d1c4:	189b      	addlt	r3, r3, r2
 800d1c6:	1b5d      	subge	r5, r3, r5
 800d1c8:	930d      	strlt	r3, [sp, #52]	; 0x34
 800d1ca:	9b05      	ldr	r3, [sp, #20]
 800d1cc:	bfb8      	it	lt
 800d1ce:	2500      	movlt	r5, #0
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	bfb9      	ittee	lt
 800d1d4:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
 800d1d6:	9a05      	ldrlt	r2, [sp, #20]
 800d1d8:	9c09      	ldrge	r4, [sp, #36]	; 0x24
 800d1da:	9b05      	ldrge	r3, [sp, #20]
 800d1dc:	bfbc      	itt	lt
 800d1de:	1a9c      	sublt	r4, r3, r2
 800d1e0:	2300      	movlt	r3, #0
 800d1e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d1e4:	441a      	add	r2, r3
 800d1e6:	9209      	str	r2, [sp, #36]	; 0x24
 800d1e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d1ea:	4650      	mov	r0, sl
 800d1ec:	441a      	add	r2, r3
 800d1ee:	2101      	movs	r1, #1
 800d1f0:	920a      	str	r2, [sp, #40]	; 0x28
 800d1f2:	f000 fb0c 	bl	800d80e <__i2b>
 800d1f6:	4606      	mov	r6, r0
 800d1f8:	e002      	b.n	800d200 <_dtoa_r+0x730>
 800d1fa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800d1fc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800d1fe:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d200:	b164      	cbz	r4, 800d21c <_dtoa_r+0x74c>
 800d202:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d204:	2b00      	cmp	r3, #0
 800d206:	dd09      	ble.n	800d21c <_dtoa_r+0x74c>
 800d208:	42a3      	cmp	r3, r4
 800d20a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d20c:	bfa8      	it	ge
 800d20e:	4623      	movge	r3, r4
 800d210:	1ad2      	subs	r2, r2, r3
 800d212:	9209      	str	r2, [sp, #36]	; 0x24
 800d214:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d216:	1ae4      	subs	r4, r4, r3
 800d218:	1ad3      	subs	r3, r2, r3
 800d21a:	930a      	str	r3, [sp, #40]	; 0x28
 800d21c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d21e:	2b00      	cmp	r3, #0
 800d220:	dd20      	ble.n	800d264 <_dtoa_r+0x794>
 800d222:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d224:	b1c3      	cbz	r3, 800d258 <_dtoa_r+0x788>
 800d226:	2d00      	cmp	r5, #0
 800d228:	dd10      	ble.n	800d24c <_dtoa_r+0x77c>
 800d22a:	4631      	mov	r1, r6
 800d22c:	462a      	mov	r2, r5
 800d22e:	4650      	mov	r0, sl
 800d230:	f000 fb88 	bl	800d944 <__pow5mult>
 800d234:	4606      	mov	r6, r0
 800d236:	4631      	mov	r1, r6
 800d238:	9a07      	ldr	r2, [sp, #28]
 800d23a:	4650      	mov	r0, sl
 800d23c:	f000 faf0 	bl	800d820 <__multiply>
 800d240:	9907      	ldr	r1, [sp, #28]
 800d242:	4607      	mov	r7, r0
 800d244:	4650      	mov	r0, sl
 800d246:	f000 fa40 	bl	800d6ca <_Bfree>
 800d24a:	9707      	str	r7, [sp, #28]
 800d24c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d24e:	1b5a      	subs	r2, r3, r5
 800d250:	d008      	beq.n	800d264 <_dtoa_r+0x794>
 800d252:	4650      	mov	r0, sl
 800d254:	9907      	ldr	r1, [sp, #28]
 800d256:	e002      	b.n	800d25e <_dtoa_r+0x78e>
 800d258:	9907      	ldr	r1, [sp, #28]
 800d25a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d25c:	4650      	mov	r0, sl
 800d25e:	f000 fb71 	bl	800d944 <__pow5mult>
 800d262:	9007      	str	r0, [sp, #28]
 800d264:	4650      	mov	r0, sl
 800d266:	2101      	movs	r1, #1
 800d268:	f000 fad1 	bl	800d80e <__i2b>
 800d26c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d26e:	2b00      	cmp	r3, #0
 800d270:	4605      	mov	r5, r0
 800d272:	dd0a      	ble.n	800d28a <_dtoa_r+0x7ba>
 800d274:	4629      	mov	r1, r5
 800d276:	461a      	mov	r2, r3
 800d278:	4650      	mov	r0, sl
 800d27a:	f000 fb63 	bl	800d944 <__pow5mult>
 800d27e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d280:	2b01      	cmp	r3, #1
 800d282:	4605      	mov	r5, r0
 800d284:	dd04      	ble.n	800d290 <_dtoa_r+0x7c0>
 800d286:	2700      	movs	r7, #0
 800d288:	e01b      	b.n	800d2c2 <_dtoa_r+0x7f2>
 800d28a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d28c:	2b01      	cmp	r3, #1
 800d28e:	dc13      	bgt.n	800d2b8 <_dtoa_r+0x7e8>
 800d290:	9b02      	ldr	r3, [sp, #8]
 800d292:	b98b      	cbnz	r3, 800d2b8 <_dtoa_r+0x7e8>
 800d294:	9b03      	ldr	r3, [sp, #12]
 800d296:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d29a:	b97b      	cbnz	r3, 800d2bc <_dtoa_r+0x7ec>
 800d29c:	9b03      	ldr	r3, [sp, #12]
 800d29e:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 800d2a2:	0d3f      	lsrs	r7, r7, #20
 800d2a4:	053f      	lsls	r7, r7, #20
 800d2a6:	b157      	cbz	r7, 800d2be <_dtoa_r+0x7ee>
 800d2a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2aa:	3301      	adds	r3, #1
 800d2ac:	9309      	str	r3, [sp, #36]	; 0x24
 800d2ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2b0:	3301      	adds	r3, #1
 800d2b2:	930a      	str	r3, [sp, #40]	; 0x28
 800d2b4:	2701      	movs	r7, #1
 800d2b6:	e002      	b.n	800d2be <_dtoa_r+0x7ee>
 800d2b8:	2700      	movs	r7, #0
 800d2ba:	e000      	b.n	800d2be <_dtoa_r+0x7ee>
 800d2bc:	9f02      	ldr	r7, [sp, #8]
 800d2be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d2c0:	b143      	cbz	r3, 800d2d4 <_dtoa_r+0x804>
 800d2c2:	692b      	ldr	r3, [r5, #16]
 800d2c4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800d2c8:	6918      	ldr	r0, [r3, #16]
 800d2ca:	f000 fa53 	bl	800d774 <__hi0bits>
 800d2ce:	f1c0 0020 	rsb	r0, r0, #32
 800d2d2:	e000      	b.n	800d2d6 <_dtoa_r+0x806>
 800d2d4:	2001      	movs	r0, #1
 800d2d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2d8:	4418      	add	r0, r3
 800d2da:	f010 001f 	ands.w	r0, r0, #31
 800d2de:	d008      	beq.n	800d2f2 <_dtoa_r+0x822>
 800d2e0:	f1c0 0320 	rsb	r3, r0, #32
 800d2e4:	2b04      	cmp	r3, #4
 800d2e6:	dd02      	ble.n	800d2ee <_dtoa_r+0x81e>
 800d2e8:	f1c0 001c 	rsb	r0, r0, #28
 800d2ec:	e002      	b.n	800d2f4 <_dtoa_r+0x824>
 800d2ee:	d008      	beq.n	800d302 <_dtoa_r+0x832>
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	301c      	adds	r0, #28
 800d2f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2f6:	4403      	add	r3, r0
 800d2f8:	9309      	str	r3, [sp, #36]	; 0x24
 800d2fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2fc:	4403      	add	r3, r0
 800d2fe:	4404      	add	r4, r0
 800d300:	930a      	str	r3, [sp, #40]	; 0x28
 800d302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d304:	2b00      	cmp	r3, #0
 800d306:	dd05      	ble.n	800d314 <_dtoa_r+0x844>
 800d308:	4650      	mov	r0, sl
 800d30a:	9907      	ldr	r1, [sp, #28]
 800d30c:	461a      	mov	r2, r3
 800d30e:	f000 fb67 	bl	800d9e0 <__lshift>
 800d312:	9007      	str	r0, [sp, #28]
 800d314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d316:	2b00      	cmp	r3, #0
 800d318:	dd05      	ble.n	800d326 <_dtoa_r+0x856>
 800d31a:	4629      	mov	r1, r5
 800d31c:	4650      	mov	r0, sl
 800d31e:	461a      	mov	r2, r3
 800d320:	f000 fb5e 	bl	800d9e0 <__lshift>
 800d324:	4605      	mov	r5, r0
 800d326:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d328:	b1eb      	cbz	r3, 800d366 <_dtoa_r+0x896>
 800d32a:	9807      	ldr	r0, [sp, #28]
 800d32c:	4629      	mov	r1, r5
 800d32e:	f000 fbaa 	bl	800da86 <__mcmp>
 800d332:	2800      	cmp	r0, #0
 800d334:	da17      	bge.n	800d366 <_dtoa_r+0x896>
 800d336:	2300      	movs	r3, #0
 800d338:	4650      	mov	r0, sl
 800d33a:	9907      	ldr	r1, [sp, #28]
 800d33c:	220a      	movs	r2, #10
 800d33e:	f000 f9db 	bl	800d6f8 <__multadd>
 800d342:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d344:	9007      	str	r0, [sp, #28]
 800d346:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	f000 8170 	beq.w	800d630 <_dtoa_r+0xb60>
 800d350:	4631      	mov	r1, r6
 800d352:	2300      	movs	r3, #0
 800d354:	4650      	mov	r0, sl
 800d356:	220a      	movs	r2, #10
 800d358:	f000 f9ce 	bl	800d6f8 <__multadd>
 800d35c:	9b06      	ldr	r3, [sp, #24]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	4606      	mov	r6, r0
 800d362:	dc33      	bgt.n	800d3cc <_dtoa_r+0x8fc>
 800d364:	e16d      	b.n	800d642 <_dtoa_r+0xb72>
 800d366:	9b05      	ldr	r3, [sp, #20]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	dc26      	bgt.n	800d3ba <_dtoa_r+0x8ea>
 800d36c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d36e:	2b02      	cmp	r3, #2
 800d370:	dd23      	ble.n	800d3ba <_dtoa_r+0x8ea>
 800d372:	9b05      	ldr	r3, [sp, #20]
 800d374:	9306      	str	r3, [sp, #24]
 800d376:	9b06      	ldr	r3, [sp, #24]
 800d378:	b973      	cbnz	r3, 800d398 <_dtoa_r+0x8c8>
 800d37a:	4629      	mov	r1, r5
 800d37c:	2205      	movs	r2, #5
 800d37e:	4650      	mov	r0, sl
 800d380:	f000 f9ba 	bl	800d6f8 <__multadd>
 800d384:	4605      	mov	r5, r0
 800d386:	4629      	mov	r1, r5
 800d388:	9807      	ldr	r0, [sp, #28]
 800d38a:	f000 fb7c 	bl	800da86 <__mcmp>
 800d38e:	2800      	cmp	r0, #0
 800d390:	dc09      	bgt.n	800d3a6 <_dtoa_r+0x8d6>
 800d392:	e001      	b.n	800d398 <_dtoa_r+0x8c8>
 800d394:	2500      	movs	r5, #0
 800d396:	462e      	mov	r6, r5
 800d398:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d39a:	9c08      	ldr	r4, [sp, #32]
 800d39c:	ea6f 0b03 	mvn.w	fp, r3
 800d3a0:	e008      	b.n	800d3b4 <_dtoa_r+0x8e4>
 800d3a2:	46bb      	mov	fp, r7
 800d3a4:	462e      	mov	r6, r5
 800d3a6:	9b08      	ldr	r3, [sp, #32]
 800d3a8:	9a08      	ldr	r2, [sp, #32]
 800d3aa:	1c5c      	adds	r4, r3, #1
 800d3ac:	2331      	movs	r3, #49	; 0x31
 800d3ae:	7013      	strb	r3, [r2, #0]
 800d3b0:	f10b 0b01 	add.w	fp, fp, #1
 800d3b4:	46b1      	mov	r9, r6
 800d3b6:	2600      	movs	r6, #0
 800d3b8:	e114      	b.n	800d5e4 <_dtoa_r+0xb14>
 800d3ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d3bc:	b923      	cbnz	r3, 800d3c8 <_dtoa_r+0x8f8>
 800d3be:	9b05      	ldr	r3, [sp, #20]
 800d3c0:	9306      	str	r3, [sp, #24]
 800d3c2:	9f08      	ldr	r7, [sp, #32]
 800d3c4:	9c07      	ldr	r4, [sp, #28]
 800d3c6:	e0cc      	b.n	800d562 <_dtoa_r+0xa92>
 800d3c8:	9b05      	ldr	r3, [sp, #20]
 800d3ca:	9306      	str	r3, [sp, #24]
 800d3cc:	2c00      	cmp	r4, #0
 800d3ce:	dd05      	ble.n	800d3dc <_dtoa_r+0x90c>
 800d3d0:	4631      	mov	r1, r6
 800d3d2:	4650      	mov	r0, sl
 800d3d4:	4622      	mov	r2, r4
 800d3d6:	f000 fb03 	bl	800d9e0 <__lshift>
 800d3da:	4606      	mov	r6, r0
 800d3dc:	b1b7      	cbz	r7, 800d40c <_dtoa_r+0x93c>
 800d3de:	6871      	ldr	r1, [r6, #4]
 800d3e0:	4650      	mov	r0, sl
 800d3e2:	f000 f93d 	bl	800d660 <_Balloc>
 800d3e6:	6932      	ldr	r2, [r6, #16]
 800d3e8:	3202      	adds	r2, #2
 800d3ea:	4604      	mov	r4, r0
 800d3ec:	f106 010c 	add.w	r1, r6, #12
 800d3f0:	0092      	lsls	r2, r2, #2
 800d3f2:	300c      	adds	r0, #12
 800d3f4:	f7fe fee8 	bl	800c1c8 <memcpy>
 800d3f8:	4650      	mov	r0, sl
 800d3fa:	4621      	mov	r1, r4
 800d3fc:	2201      	movs	r2, #1
 800d3fe:	f000 faef 	bl	800d9e0 <__lshift>
 800d402:	4681      	mov	r9, r0
 800d404:	e003      	b.n	800d40e <_dtoa_r+0x93e>
 800d406:	bf00      	nop
 800d408:	40240000 	.word	0x40240000
 800d40c:	46b1      	mov	r9, r6
 800d40e:	9f08      	ldr	r7, [sp, #32]
 800d410:	9c07      	ldr	r4, [sp, #28]
 800d412:	4629      	mov	r1, r5
 800d414:	4620      	mov	r0, r4
 800d416:	f7ff facd 	bl	800c9b4 <quorem>
 800d41a:	4631      	mov	r1, r6
 800d41c:	9009      	str	r0, [sp, #36]	; 0x24
 800d41e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d422:	4620      	mov	r0, r4
 800d424:	f000 fb2f 	bl	800da86 <__mcmp>
 800d428:	464a      	mov	r2, r9
 800d42a:	9005      	str	r0, [sp, #20]
 800d42c:	4629      	mov	r1, r5
 800d42e:	4650      	mov	r0, sl
 800d430:	f000 fb45 	bl	800dabe <__mdiff>
 800d434:	68c2      	ldr	r2, [r0, #12]
 800d436:	4603      	mov	r3, r0
 800d438:	b93a      	cbnz	r2, 800d44a <_dtoa_r+0x97a>
 800d43a:	4619      	mov	r1, r3
 800d43c:	4620      	mov	r0, r4
 800d43e:	9307      	str	r3, [sp, #28]
 800d440:	f000 fb21 	bl	800da86 <__mcmp>
 800d444:	9b07      	ldr	r3, [sp, #28]
 800d446:	4602      	mov	r2, r0
 800d448:	e000      	b.n	800d44c <_dtoa_r+0x97c>
 800d44a:	2201      	movs	r2, #1
 800d44c:	4650      	mov	r0, sl
 800d44e:	4619      	mov	r1, r3
 800d450:	9207      	str	r2, [sp, #28]
 800d452:	f000 f93a 	bl	800d6ca <_Bfree>
 800d456:	9a07      	ldr	r2, [sp, #28]
 800d458:	b9a2      	cbnz	r2, 800d484 <_dtoa_r+0x9b4>
 800d45a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d45c:	b993      	cbnz	r3, 800d484 <_dtoa_r+0x9b4>
 800d45e:	9b02      	ldr	r3, [sp, #8]
 800d460:	f003 0301 	and.w	r3, r3, #1
 800d464:	b973      	cbnz	r3, 800d484 <_dtoa_r+0x9b4>
 800d466:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d46a:	463b      	mov	r3, r7
 800d46c:	9407      	str	r4, [sp, #28]
 800d46e:	d040      	beq.n	800d4f2 <_dtoa_r+0xa22>
 800d470:	9b05      	ldr	r3, [sp, #20]
 800d472:	2b00      	cmp	r3, #0
 800d474:	bfc8      	it	gt
 800d476:	9b09      	ldrgt	r3, [sp, #36]	; 0x24
 800d478:	f107 0401 	add.w	r4, r7, #1
 800d47c:	bfc8      	it	gt
 800d47e:	f103 0831 	addgt.w	r8, r3, #49	; 0x31
 800d482:	e03d      	b.n	800d500 <_dtoa_r+0xa30>
 800d484:	9b05      	ldr	r3, [sp, #20]
 800d486:	2b00      	cmp	r3, #0
 800d488:	da04      	bge.n	800d494 <_dtoa_r+0x9c4>
 800d48a:	2a00      	cmp	r2, #0
 800d48c:	46c4      	mov	ip, r8
 800d48e:	9407      	str	r4, [sp, #28]
 800d490:	dc08      	bgt.n	800d4a4 <_dtoa_r+0x9d4>
 800d492:	e021      	b.n	800d4d8 <_dtoa_r+0xa08>
 800d494:	d124      	bne.n	800d4e0 <_dtoa_r+0xa10>
 800d496:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d498:	bb13      	cbnz	r3, 800d4e0 <_dtoa_r+0xa10>
 800d49a:	9b02      	ldr	r3, [sp, #8]
 800d49c:	f003 0301 	and.w	r3, r3, #1
 800d4a0:	b9f3      	cbnz	r3, 800d4e0 <_dtoa_r+0xa10>
 800d4a2:	e7f2      	b.n	800d48a <_dtoa_r+0x9ba>
 800d4a4:	4621      	mov	r1, r4
 800d4a6:	2201      	movs	r2, #1
 800d4a8:	4650      	mov	r0, sl
 800d4aa:	9705      	str	r7, [sp, #20]
 800d4ac:	f8cd 8008 	str.w	r8, [sp, #8]
 800d4b0:	f000 fa96 	bl	800d9e0 <__lshift>
 800d4b4:	4629      	mov	r1, r5
 800d4b6:	9007      	str	r0, [sp, #28]
 800d4b8:	f000 fae5 	bl	800da86 <__mcmp>
 800d4bc:	2800      	cmp	r0, #0
 800d4be:	f8dd c008 	ldr.w	ip, [sp, #8]
 800d4c2:	9b05      	ldr	r3, [sp, #20]
 800d4c4:	dc03      	bgt.n	800d4ce <_dtoa_r+0x9fe>
 800d4c6:	d107      	bne.n	800d4d8 <_dtoa_r+0xa08>
 800d4c8:	f018 0f01 	tst.w	r8, #1
 800d4cc:	d004      	beq.n	800d4d8 <_dtoa_r+0xa08>
 800d4ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d4d2:	d00e      	beq.n	800d4f2 <_dtoa_r+0xa22>
 800d4d4:	f108 0c01 	add.w	ip, r8, #1
 800d4d8:	1c7c      	adds	r4, r7, #1
 800d4da:	f887 c000 	strb.w	ip, [r7]
 800d4de:	e081      	b.n	800d5e4 <_dtoa_r+0xb14>
 800d4e0:	2a00      	cmp	r2, #0
 800d4e2:	f107 0201 	add.w	r2, r7, #1
 800d4e6:	dd0e      	ble.n	800d506 <_dtoa_r+0xa36>
 800d4e8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d4ec:	463b      	mov	r3, r7
 800d4ee:	9407      	str	r4, [sp, #28]
 800d4f0:	d103      	bne.n	800d4fa <_dtoa_r+0xa2a>
 800d4f2:	2239      	movs	r2, #57	; 0x39
 800d4f4:	3701      	adds	r7, #1
 800d4f6:	701a      	strb	r2, [r3, #0]
 800d4f8:	e057      	b.n	800d5aa <_dtoa_r+0xada>
 800d4fa:	4614      	mov	r4, r2
 800d4fc:	f108 0801 	add.w	r8, r8, #1
 800d500:	f887 8000 	strb.w	r8, [r7]
 800d504:	e06e      	b.n	800d5e4 <_dtoa_r+0xb14>
 800d506:	9b08      	ldr	r3, [sp, #32]
 800d508:	f802 8c01 	strb.w	r8, [r2, #-1]
 800d50c:	1ad3      	subs	r3, r2, r3
 800d50e:	4617      	mov	r7, r2
 800d510:	9a06      	ldr	r2, [sp, #24]
 800d512:	4293      	cmp	r3, r2
 800d514:	d03a      	beq.n	800d58c <_dtoa_r+0xabc>
 800d516:	4621      	mov	r1, r4
 800d518:	220a      	movs	r2, #10
 800d51a:	2300      	movs	r3, #0
 800d51c:	4650      	mov	r0, sl
 800d51e:	f000 f8eb 	bl	800d6f8 <__multadd>
 800d522:	454e      	cmp	r6, r9
 800d524:	4604      	mov	r4, r0
 800d526:	4631      	mov	r1, r6
 800d528:	4650      	mov	r0, sl
 800d52a:	f04f 020a 	mov.w	r2, #10
 800d52e:	f04f 0300 	mov.w	r3, #0
 800d532:	d104      	bne.n	800d53e <_dtoa_r+0xa6e>
 800d534:	f000 f8e0 	bl	800d6f8 <__multadd>
 800d538:	4606      	mov	r6, r0
 800d53a:	4681      	mov	r9, r0
 800d53c:	e769      	b.n	800d412 <_dtoa_r+0x942>
 800d53e:	f000 f8db 	bl	800d6f8 <__multadd>
 800d542:	4649      	mov	r1, r9
 800d544:	4606      	mov	r6, r0
 800d546:	220a      	movs	r2, #10
 800d548:	4650      	mov	r0, sl
 800d54a:	2300      	movs	r3, #0
 800d54c:	f000 f8d4 	bl	800d6f8 <__multadd>
 800d550:	4681      	mov	r9, r0
 800d552:	e75e      	b.n	800d412 <_dtoa_r+0x942>
 800d554:	4621      	mov	r1, r4
 800d556:	4650      	mov	r0, sl
 800d558:	220a      	movs	r2, #10
 800d55a:	2300      	movs	r3, #0
 800d55c:	f000 f8cc 	bl	800d6f8 <__multadd>
 800d560:	4604      	mov	r4, r0
 800d562:	4620      	mov	r0, r4
 800d564:	4629      	mov	r1, r5
 800d566:	f7ff fa25 	bl	800c9b4 <quorem>
 800d56a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d56e:	f807 8b01 	strb.w	r8, [r7], #1
 800d572:	9b08      	ldr	r3, [sp, #32]
 800d574:	9a06      	ldr	r2, [sp, #24]
 800d576:	1afb      	subs	r3, r7, r3
 800d578:	4293      	cmp	r3, r2
 800d57a:	dbeb      	blt.n	800d554 <_dtoa_r+0xa84>
 800d57c:	9b08      	ldr	r3, [sp, #32]
 800d57e:	2a01      	cmp	r2, #1
 800d580:	bfac      	ite	ge
 800d582:	189b      	addge	r3, r3, r2
 800d584:	3301      	addlt	r3, #1
 800d586:	46b1      	mov	r9, r6
 800d588:	461f      	mov	r7, r3
 800d58a:	2600      	movs	r6, #0
 800d58c:	4621      	mov	r1, r4
 800d58e:	2201      	movs	r2, #1
 800d590:	4650      	mov	r0, sl
 800d592:	f000 fa25 	bl	800d9e0 <__lshift>
 800d596:	4629      	mov	r1, r5
 800d598:	9007      	str	r0, [sp, #28]
 800d59a:	f000 fa74 	bl	800da86 <__mcmp>
 800d59e:	2800      	cmp	r0, #0
 800d5a0:	dc03      	bgt.n	800d5aa <_dtoa_r+0xada>
 800d5a2:	d116      	bne.n	800d5d2 <_dtoa_r+0xb02>
 800d5a4:	f018 0f01 	tst.w	r8, #1
 800d5a8:	d013      	beq.n	800d5d2 <_dtoa_r+0xb02>
 800d5aa:	463c      	mov	r4, r7
 800d5ac:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800d5b0:	2b39      	cmp	r3, #57	; 0x39
 800d5b2:	f104 32ff 	add.w	r2, r4, #4294967295
 800d5b6:	d109      	bne.n	800d5cc <_dtoa_r+0xafc>
 800d5b8:	9b08      	ldr	r3, [sp, #32]
 800d5ba:	429a      	cmp	r2, r3
 800d5bc:	d104      	bne.n	800d5c8 <_dtoa_r+0xaf8>
 800d5be:	f10b 0b01 	add.w	fp, fp, #1
 800d5c2:	2331      	movs	r3, #49	; 0x31
 800d5c4:	9a08      	ldr	r2, [sp, #32]
 800d5c6:	e002      	b.n	800d5ce <_dtoa_r+0xafe>
 800d5c8:	4614      	mov	r4, r2
 800d5ca:	e7ef      	b.n	800d5ac <_dtoa_r+0xadc>
 800d5cc:	3301      	adds	r3, #1
 800d5ce:	7013      	strb	r3, [r2, #0]
 800d5d0:	e008      	b.n	800d5e4 <_dtoa_r+0xb14>
 800d5d2:	463c      	mov	r4, r7
 800d5d4:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800d5d8:	2b30      	cmp	r3, #48	; 0x30
 800d5da:	f104 32ff 	add.w	r2, r4, #4294967295
 800d5de:	d101      	bne.n	800d5e4 <_dtoa_r+0xb14>
 800d5e0:	4614      	mov	r4, r2
 800d5e2:	e7f7      	b.n	800d5d4 <_dtoa_r+0xb04>
 800d5e4:	4650      	mov	r0, sl
 800d5e6:	4629      	mov	r1, r5
 800d5e8:	f000 f86f 	bl	800d6ca <_Bfree>
 800d5ec:	f1b9 0f00 	cmp.w	r9, #0
 800d5f0:	d00c      	beq.n	800d60c <_dtoa_r+0xb3c>
 800d5f2:	b12e      	cbz	r6, 800d600 <_dtoa_r+0xb30>
 800d5f4:	454e      	cmp	r6, r9
 800d5f6:	d003      	beq.n	800d600 <_dtoa_r+0xb30>
 800d5f8:	4650      	mov	r0, sl
 800d5fa:	4631      	mov	r1, r6
 800d5fc:	f000 f865 	bl	800d6ca <_Bfree>
 800d600:	4650      	mov	r0, sl
 800d602:	4649      	mov	r1, r9
 800d604:	f000 f861 	bl	800d6ca <_Bfree>
 800d608:	e000      	b.n	800d60c <_dtoa_r+0xb3c>
 800d60a:	46bb      	mov	fp, r7
 800d60c:	4650      	mov	r0, sl
 800d60e:	9907      	ldr	r1, [sp, #28]
 800d610:	f000 f85b 	bl	800d6ca <_Bfree>
 800d614:	2300      	movs	r3, #0
 800d616:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d618:	7023      	strb	r3, [r4, #0]
 800d61a:	f10b 0301 	add.w	r3, fp, #1
 800d61e:	6013      	str	r3, [r2, #0]
 800d620:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d622:	b11b      	cbz	r3, 800d62c <_dtoa_r+0xb5c>
 800d624:	601c      	str	r4, [r3, #0]
 800d626:	e001      	b.n	800d62c <_dtoa_r+0xb5c>
 800d628:	480a      	ldr	r0, [pc, #40]	; (800d654 <_dtoa_r+0xb84>)
 800d62a:	e00f      	b.n	800d64c <_dtoa_r+0xb7c>
 800d62c:	9808      	ldr	r0, [sp, #32]
 800d62e:	e00d      	b.n	800d64c <_dtoa_r+0xb7c>
 800d630:	9b06      	ldr	r3, [sp, #24]
 800d632:	2b00      	cmp	r3, #0
 800d634:	f73f aec5 	bgt.w	800d3c2 <_dtoa_r+0x8f2>
 800d638:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d63a:	2b02      	cmp	r3, #2
 800d63c:	f73f ae9b 	bgt.w	800d376 <_dtoa_r+0x8a6>
 800d640:	e6bf      	b.n	800d3c2 <_dtoa_r+0x8f2>
 800d642:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d644:	2b02      	cmp	r3, #2
 800d646:	f73f ae96 	bgt.w	800d376 <_dtoa_r+0x8a6>
 800d64a:	e6bf      	b.n	800d3cc <_dtoa_r+0x8fc>
 800d64c:	b017      	add	sp, #92	; 0x5c
 800d64e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d652:	bf00      	nop
 800d654:	0800e1f2 	.word	0x0800e1f2

0800d658 <_localeconv_r>:
 800d658:	4800      	ldr	r0, [pc, #0]	; (800d65c <_localeconv_r+0x4>)
 800d65a:	4770      	bx	lr
 800d65c:	20000388 	.word	0x20000388

0800d660 <_Balloc>:
 800d660:	b570      	push	{r4, r5, r6, lr}
 800d662:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d664:	4604      	mov	r4, r0
 800d666:	460e      	mov	r6, r1
 800d668:	b93d      	cbnz	r5, 800d67a <_Balloc+0x1a>
 800d66a:	2010      	movs	r0, #16
 800d66c:	f7fe fda4 	bl	800c1b8 <malloc>
 800d670:	6260      	str	r0, [r4, #36]	; 0x24
 800d672:	6045      	str	r5, [r0, #4]
 800d674:	6085      	str	r5, [r0, #8]
 800d676:	6005      	str	r5, [r0, #0]
 800d678:	60c5      	str	r5, [r0, #12]
 800d67a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d67c:	68eb      	ldr	r3, [r5, #12]
 800d67e:	b143      	cbz	r3, 800d692 <_Balloc+0x32>
 800d680:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d682:	68db      	ldr	r3, [r3, #12]
 800d684:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d688:	b178      	cbz	r0, 800d6aa <_Balloc+0x4a>
 800d68a:	6802      	ldr	r2, [r0, #0]
 800d68c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800d690:	e017      	b.n	800d6c2 <_Balloc+0x62>
 800d692:	4620      	mov	r0, r4
 800d694:	2104      	movs	r1, #4
 800d696:	2221      	movs	r2, #33	; 0x21
 800d698:	f000 fac2 	bl	800dc20 <_calloc_r>
 800d69c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d69e:	60e8      	str	r0, [r5, #12]
 800d6a0:	68db      	ldr	r3, [r3, #12]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d1ec      	bne.n	800d680 <_Balloc+0x20>
 800d6a6:	2000      	movs	r0, #0
 800d6a8:	bd70      	pop	{r4, r5, r6, pc}
 800d6aa:	2101      	movs	r1, #1
 800d6ac:	fa01 f506 	lsl.w	r5, r1, r6
 800d6b0:	1d6a      	adds	r2, r5, #5
 800d6b2:	4620      	mov	r0, r4
 800d6b4:	0092      	lsls	r2, r2, #2
 800d6b6:	f000 fab3 	bl	800dc20 <_calloc_r>
 800d6ba:	2800      	cmp	r0, #0
 800d6bc:	d0f3      	beq.n	800d6a6 <_Balloc+0x46>
 800d6be:	6046      	str	r6, [r0, #4]
 800d6c0:	6085      	str	r5, [r0, #8]
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	6103      	str	r3, [r0, #16]
 800d6c6:	60c3      	str	r3, [r0, #12]
 800d6c8:	bd70      	pop	{r4, r5, r6, pc}

0800d6ca <_Bfree>:
 800d6ca:	b570      	push	{r4, r5, r6, lr}
 800d6cc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d6ce:	4606      	mov	r6, r0
 800d6d0:	460d      	mov	r5, r1
 800d6d2:	b93c      	cbnz	r4, 800d6e4 <_Bfree+0x1a>
 800d6d4:	2010      	movs	r0, #16
 800d6d6:	f7fe fd6f 	bl	800c1b8 <malloc>
 800d6da:	6270      	str	r0, [r6, #36]	; 0x24
 800d6dc:	6044      	str	r4, [r0, #4]
 800d6de:	6084      	str	r4, [r0, #8]
 800d6e0:	6004      	str	r4, [r0, #0]
 800d6e2:	60c4      	str	r4, [r0, #12]
 800d6e4:	b13d      	cbz	r5, 800d6f6 <_Bfree+0x2c>
 800d6e6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d6e8:	686a      	ldr	r2, [r5, #4]
 800d6ea:	68db      	ldr	r3, [r3, #12]
 800d6ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d6f0:	6029      	str	r1, [r5, #0]
 800d6f2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800d6f6:	bd70      	pop	{r4, r5, r6, pc}

0800d6f8 <__multadd>:
 800d6f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6fc:	690f      	ldr	r7, [r1, #16]
 800d6fe:	4698      	mov	r8, r3
 800d700:	4606      	mov	r6, r0
 800d702:	460c      	mov	r4, r1
 800d704:	f101 0e14 	add.w	lr, r1, #20
 800d708:	2300      	movs	r3, #0
 800d70a:	f8de 0000 	ldr.w	r0, [lr]
 800d70e:	b285      	uxth	r5, r0
 800d710:	0c01      	lsrs	r1, r0, #16
 800d712:	fb02 8505 	mla	r5, r2, r5, r8
 800d716:	4351      	muls	r1, r2
 800d718:	eb01 4115 	add.w	r1, r1, r5, lsr #16
 800d71c:	3301      	adds	r3, #1
 800d71e:	b2ad      	uxth	r5, r5
 800d720:	ea4f 4811 	mov.w	r8, r1, lsr #16
 800d724:	42bb      	cmp	r3, r7
 800d726:	eb05 4101 	add.w	r1, r5, r1, lsl #16
 800d72a:	f84e 1b04 	str.w	r1, [lr], #4
 800d72e:	dbec      	blt.n	800d70a <__multadd+0x12>
 800d730:	f1b8 0f00 	cmp.w	r8, #0
 800d734:	d01b      	beq.n	800d76e <__multadd+0x76>
 800d736:	68a3      	ldr	r3, [r4, #8]
 800d738:	429f      	cmp	r7, r3
 800d73a:	db12      	blt.n	800d762 <__multadd+0x6a>
 800d73c:	6861      	ldr	r1, [r4, #4]
 800d73e:	4630      	mov	r0, r6
 800d740:	3101      	adds	r1, #1
 800d742:	f7ff ff8d 	bl	800d660 <_Balloc>
 800d746:	6922      	ldr	r2, [r4, #16]
 800d748:	3202      	adds	r2, #2
 800d74a:	f104 010c 	add.w	r1, r4, #12
 800d74e:	4605      	mov	r5, r0
 800d750:	0092      	lsls	r2, r2, #2
 800d752:	300c      	adds	r0, #12
 800d754:	f7fe fd38 	bl	800c1c8 <memcpy>
 800d758:	4621      	mov	r1, r4
 800d75a:	4630      	mov	r0, r6
 800d75c:	f7ff ffb5 	bl	800d6ca <_Bfree>
 800d760:	462c      	mov	r4, r5
 800d762:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 800d766:	3701      	adds	r7, #1
 800d768:	f8c3 8014 	str.w	r8, [r3, #20]
 800d76c:	6127      	str	r7, [r4, #16]
 800d76e:	4620      	mov	r0, r4
 800d770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d774 <__hi0bits>:
 800d774:	0c03      	lsrs	r3, r0, #16
 800d776:	041b      	lsls	r3, r3, #16
 800d778:	b913      	cbnz	r3, 800d780 <__hi0bits+0xc>
 800d77a:	0400      	lsls	r0, r0, #16
 800d77c:	2310      	movs	r3, #16
 800d77e:	e000      	b.n	800d782 <__hi0bits+0xe>
 800d780:	2300      	movs	r3, #0
 800d782:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d786:	bf04      	itt	eq
 800d788:	0200      	lsleq	r0, r0, #8
 800d78a:	3308      	addeq	r3, #8
 800d78c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d790:	bf04      	itt	eq
 800d792:	0100      	lsleq	r0, r0, #4
 800d794:	3304      	addeq	r3, #4
 800d796:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d79a:	bf04      	itt	eq
 800d79c:	0080      	lsleq	r0, r0, #2
 800d79e:	3302      	addeq	r3, #2
 800d7a0:	2800      	cmp	r0, #0
 800d7a2:	db03      	blt.n	800d7ac <__hi0bits+0x38>
 800d7a4:	0042      	lsls	r2, r0, #1
 800d7a6:	d503      	bpl.n	800d7b0 <__hi0bits+0x3c>
 800d7a8:	1c58      	adds	r0, r3, #1
 800d7aa:	4770      	bx	lr
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	4770      	bx	lr
 800d7b0:	2020      	movs	r0, #32
 800d7b2:	4770      	bx	lr

0800d7b4 <__lo0bits>:
 800d7b4:	6803      	ldr	r3, [r0, #0]
 800d7b6:	f013 0207 	ands.w	r2, r3, #7
 800d7ba:	d00b      	beq.n	800d7d4 <__lo0bits+0x20>
 800d7bc:	07d9      	lsls	r1, r3, #31
 800d7be:	d422      	bmi.n	800d806 <__lo0bits+0x52>
 800d7c0:	079a      	lsls	r2, r3, #30
 800d7c2:	bf4b      	itete	mi
 800d7c4:	085b      	lsrmi	r3, r3, #1
 800d7c6:	089b      	lsrpl	r3, r3, #2
 800d7c8:	6003      	strmi	r3, [r0, #0]
 800d7ca:	6003      	strpl	r3, [r0, #0]
 800d7cc:	bf4c      	ite	mi
 800d7ce:	2001      	movmi	r0, #1
 800d7d0:	2002      	movpl	r0, #2
 800d7d2:	4770      	bx	lr
 800d7d4:	b299      	uxth	r1, r3
 800d7d6:	b909      	cbnz	r1, 800d7dc <__lo0bits+0x28>
 800d7d8:	0c1b      	lsrs	r3, r3, #16
 800d7da:	2210      	movs	r2, #16
 800d7dc:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d7e0:	bf04      	itt	eq
 800d7e2:	0a1b      	lsreq	r3, r3, #8
 800d7e4:	3208      	addeq	r2, #8
 800d7e6:	0719      	lsls	r1, r3, #28
 800d7e8:	bf04      	itt	eq
 800d7ea:	091b      	lsreq	r3, r3, #4
 800d7ec:	3204      	addeq	r2, #4
 800d7ee:	0799      	lsls	r1, r3, #30
 800d7f0:	bf04      	itt	eq
 800d7f2:	089b      	lsreq	r3, r3, #2
 800d7f4:	3202      	addeq	r2, #2
 800d7f6:	07d9      	lsls	r1, r3, #31
 800d7f8:	d402      	bmi.n	800d800 <__lo0bits+0x4c>
 800d7fa:	085b      	lsrs	r3, r3, #1
 800d7fc:	d005      	beq.n	800d80a <__lo0bits+0x56>
 800d7fe:	3201      	adds	r2, #1
 800d800:	6003      	str	r3, [r0, #0]
 800d802:	4610      	mov	r0, r2
 800d804:	4770      	bx	lr
 800d806:	2000      	movs	r0, #0
 800d808:	4770      	bx	lr
 800d80a:	2020      	movs	r0, #32
 800d80c:	4770      	bx	lr

0800d80e <__i2b>:
 800d80e:	b510      	push	{r4, lr}
 800d810:	460c      	mov	r4, r1
 800d812:	2101      	movs	r1, #1
 800d814:	f7ff ff24 	bl	800d660 <_Balloc>
 800d818:	2201      	movs	r2, #1
 800d81a:	6144      	str	r4, [r0, #20]
 800d81c:	6102      	str	r2, [r0, #16]
 800d81e:	bd10      	pop	{r4, pc}

0800d820 <__multiply>:
 800d820:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d824:	4614      	mov	r4, r2
 800d826:	690a      	ldr	r2, [r1, #16]
 800d828:	6923      	ldr	r3, [r4, #16]
 800d82a:	429a      	cmp	r2, r3
 800d82c:	bfb8      	it	lt
 800d82e:	460b      	movlt	r3, r1
 800d830:	4688      	mov	r8, r1
 800d832:	bfbc      	itt	lt
 800d834:	46a0      	movlt	r8, r4
 800d836:	461c      	movlt	r4, r3
 800d838:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d83c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d840:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d844:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d848:	eb07 0609 	add.w	r6, r7, r9
 800d84c:	429e      	cmp	r6, r3
 800d84e:	bfc8      	it	gt
 800d850:	3101      	addgt	r1, #1
 800d852:	f7ff ff05 	bl	800d660 <_Balloc>
 800d856:	f100 0514 	add.w	r5, r0, #20
 800d85a:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 800d85e:	462b      	mov	r3, r5
 800d860:	4563      	cmp	r3, ip
 800d862:	d203      	bcs.n	800d86c <__multiply+0x4c>
 800d864:	2200      	movs	r2, #0
 800d866:	f843 2b04 	str.w	r2, [r3], #4
 800d86a:	e7f9      	b.n	800d860 <__multiply+0x40>
 800d86c:	f104 0214 	add.w	r2, r4, #20
 800d870:	f108 0114 	add.w	r1, r8, #20
 800d874:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800d878:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800d87c:	9300      	str	r3, [sp, #0]
 800d87e:	9b00      	ldr	r3, [sp, #0]
 800d880:	9201      	str	r2, [sp, #4]
 800d882:	429a      	cmp	r2, r3
 800d884:	d257      	bcs.n	800d936 <__multiply+0x116>
 800d886:	f8b2 b000 	ldrh.w	fp, [r2]
 800d88a:	f1bb 0f00 	cmp.w	fp, #0
 800d88e:	d023      	beq.n	800d8d8 <__multiply+0xb8>
 800d890:	4689      	mov	r9, r1
 800d892:	46ae      	mov	lr, r5
 800d894:	f04f 0800 	mov.w	r8, #0
 800d898:	f859 4b04 	ldr.w	r4, [r9], #4
 800d89c:	f8be a000 	ldrh.w	sl, [lr]
 800d8a0:	b2a3      	uxth	r3, r4
 800d8a2:	fb0b a303 	mla	r3, fp, r3, sl
 800d8a6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d8aa:	f8de 4000 	ldr.w	r4, [lr]
 800d8ae:	4443      	add	r3, r8
 800d8b0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d8b4:	fb0b 840a 	mla	r4, fp, sl, r8
 800d8b8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800d8bc:	46f2      	mov	sl, lr
 800d8be:	b29b      	uxth	r3, r3
 800d8c0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d8c4:	454f      	cmp	r7, r9
 800d8c6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d8ca:	f84a 3b04 	str.w	r3, [sl], #4
 800d8ce:	d901      	bls.n	800d8d4 <__multiply+0xb4>
 800d8d0:	46d6      	mov	lr, sl
 800d8d2:	e7e1      	b.n	800d898 <__multiply+0x78>
 800d8d4:	f8ce 8004 	str.w	r8, [lr, #4]
 800d8d8:	9b01      	ldr	r3, [sp, #4]
 800d8da:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800d8de:	3204      	adds	r2, #4
 800d8e0:	f1ba 0f00 	cmp.w	sl, #0
 800d8e4:	d021      	beq.n	800d92a <__multiply+0x10a>
 800d8e6:	682b      	ldr	r3, [r5, #0]
 800d8e8:	462c      	mov	r4, r5
 800d8ea:	4689      	mov	r9, r1
 800d8ec:	f04f 0800 	mov.w	r8, #0
 800d8f0:	f8b9 e000 	ldrh.w	lr, [r9]
 800d8f4:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 800d8f8:	fb0a be0e 	mla	lr, sl, lr, fp
 800d8fc:	44f0      	add	r8, lr
 800d8fe:	46a3      	mov	fp, r4
 800d900:	b29b      	uxth	r3, r3
 800d902:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800d906:	f84b 3b04 	str.w	r3, [fp], #4
 800d90a:	f859 3b04 	ldr.w	r3, [r9], #4
 800d90e:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 800d912:	0c1b      	lsrs	r3, r3, #16
 800d914:	fb0a e303 	mla	r3, sl, r3, lr
 800d918:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 800d91c:	45b9      	cmp	r9, r7
 800d91e:	ea4f 4813 	mov.w	r8, r3, lsr #16
 800d922:	d201      	bcs.n	800d928 <__multiply+0x108>
 800d924:	465c      	mov	r4, fp
 800d926:	e7e3      	b.n	800d8f0 <__multiply+0xd0>
 800d928:	6063      	str	r3, [r4, #4]
 800d92a:	3504      	adds	r5, #4
 800d92c:	e7a7      	b.n	800d87e <__multiply+0x5e>
 800d92e:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 800d932:	b913      	cbnz	r3, 800d93a <__multiply+0x11a>
 800d934:	3e01      	subs	r6, #1
 800d936:	2e00      	cmp	r6, #0
 800d938:	dcf9      	bgt.n	800d92e <__multiply+0x10e>
 800d93a:	6106      	str	r6, [r0, #16]
 800d93c:	b003      	add	sp, #12
 800d93e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800d944 <__pow5mult>:
 800d944:	f012 0303 	ands.w	r3, r2, #3
 800d948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d94c:	4606      	mov	r6, r0
 800d94e:	460f      	mov	r7, r1
 800d950:	4615      	mov	r5, r2
 800d952:	d007      	beq.n	800d964 <__pow5mult+0x20>
 800d954:	3b01      	subs	r3, #1
 800d956:	4a21      	ldr	r2, [pc, #132]	; (800d9dc <__pow5mult+0x98>)
 800d958:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d95c:	2300      	movs	r3, #0
 800d95e:	f7ff fecb 	bl	800d6f8 <__multadd>
 800d962:	4607      	mov	r7, r0
 800d964:	10ad      	asrs	r5, r5, #2
 800d966:	d035      	beq.n	800d9d4 <__pow5mult+0x90>
 800d968:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d96a:	b93c      	cbnz	r4, 800d97c <__pow5mult+0x38>
 800d96c:	2010      	movs	r0, #16
 800d96e:	f7fe fc23 	bl	800c1b8 <malloc>
 800d972:	6270      	str	r0, [r6, #36]	; 0x24
 800d974:	6044      	str	r4, [r0, #4]
 800d976:	6084      	str	r4, [r0, #8]
 800d978:	6004      	str	r4, [r0, #0]
 800d97a:	60c4      	str	r4, [r0, #12]
 800d97c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d980:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d984:	b97c      	cbnz	r4, 800d9a6 <__pow5mult+0x62>
 800d986:	4630      	mov	r0, r6
 800d988:	f240 2171 	movw	r1, #625	; 0x271
 800d98c:	f7ff ff3f 	bl	800d80e <__i2b>
 800d990:	2300      	movs	r3, #0
 800d992:	f8c8 0008 	str.w	r0, [r8, #8]
 800d996:	4604      	mov	r4, r0
 800d998:	6003      	str	r3, [r0, #0]
 800d99a:	e004      	b.n	800d9a6 <__pow5mult+0x62>
 800d99c:	106d      	asrs	r5, r5, #1
 800d99e:	d019      	beq.n	800d9d4 <__pow5mult+0x90>
 800d9a0:	6820      	ldr	r0, [r4, #0]
 800d9a2:	b170      	cbz	r0, 800d9c2 <__pow5mult+0x7e>
 800d9a4:	4604      	mov	r4, r0
 800d9a6:	07eb      	lsls	r3, r5, #31
 800d9a8:	d5f8      	bpl.n	800d99c <__pow5mult+0x58>
 800d9aa:	4639      	mov	r1, r7
 800d9ac:	4622      	mov	r2, r4
 800d9ae:	4630      	mov	r0, r6
 800d9b0:	f7ff ff36 	bl	800d820 <__multiply>
 800d9b4:	4639      	mov	r1, r7
 800d9b6:	4680      	mov	r8, r0
 800d9b8:	4630      	mov	r0, r6
 800d9ba:	f7ff fe86 	bl	800d6ca <_Bfree>
 800d9be:	4647      	mov	r7, r8
 800d9c0:	e7ec      	b.n	800d99c <__pow5mult+0x58>
 800d9c2:	4630      	mov	r0, r6
 800d9c4:	4621      	mov	r1, r4
 800d9c6:	4622      	mov	r2, r4
 800d9c8:	f7ff ff2a 	bl	800d820 <__multiply>
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	6020      	str	r0, [r4, #0]
 800d9d0:	6003      	str	r3, [r0, #0]
 800d9d2:	e7e7      	b.n	800d9a4 <__pow5mult+0x60>
 800d9d4:	4638      	mov	r0, r7
 800d9d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9da:	bf00      	nop
 800d9dc:	0800e300 	.word	0x0800e300

0800d9e0 <__lshift>:
 800d9e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9e4:	460c      	mov	r4, r1
 800d9e6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d9ea:	6923      	ldr	r3, [r4, #16]
 800d9ec:	6849      	ldr	r1, [r1, #4]
 800d9ee:	eb0a 0903 	add.w	r9, sl, r3
 800d9f2:	68a3      	ldr	r3, [r4, #8]
 800d9f4:	4607      	mov	r7, r0
 800d9f6:	4616      	mov	r6, r2
 800d9f8:	f109 0501 	add.w	r5, r9, #1
 800d9fc:	429d      	cmp	r5, r3
 800d9fe:	dd02      	ble.n	800da06 <__lshift+0x26>
 800da00:	3101      	adds	r1, #1
 800da02:	005b      	lsls	r3, r3, #1
 800da04:	e7fa      	b.n	800d9fc <__lshift+0x1c>
 800da06:	4638      	mov	r0, r7
 800da08:	f7ff fe2a 	bl	800d660 <_Balloc>
 800da0c:	2300      	movs	r3, #0
 800da0e:	4680      	mov	r8, r0
 800da10:	f100 0114 	add.w	r1, r0, #20
 800da14:	4553      	cmp	r3, sl
 800da16:	da04      	bge.n	800da22 <__lshift+0x42>
 800da18:	2200      	movs	r2, #0
 800da1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800da1e:	3301      	adds	r3, #1
 800da20:	e7f8      	b.n	800da14 <__lshift+0x34>
 800da22:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 800da26:	6920      	ldr	r0, [r4, #16]
 800da28:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800da2c:	f016 021f 	ands.w	r2, r6, #31
 800da30:	f104 0114 	add.w	r1, r4, #20
 800da34:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800da38:	d014      	beq.n	800da64 <__lshift+0x84>
 800da3a:	f1c2 0c20 	rsb	ip, r2, #32
 800da3e:	2000      	movs	r0, #0
 800da40:	680e      	ldr	r6, [r1, #0]
 800da42:	4096      	lsls	r6, r2
 800da44:	4330      	orrs	r0, r6
 800da46:	469a      	mov	sl, r3
 800da48:	f843 0b04 	str.w	r0, [r3], #4
 800da4c:	f851 0b04 	ldr.w	r0, [r1], #4
 800da50:	4571      	cmp	r1, lr
 800da52:	fa20 f00c 	lsr.w	r0, r0, ip
 800da56:	d3f3      	bcc.n	800da40 <__lshift+0x60>
 800da58:	f8ca 0004 	str.w	r0, [sl, #4]
 800da5c:	b148      	cbz	r0, 800da72 <__lshift+0x92>
 800da5e:	f109 0502 	add.w	r5, r9, #2
 800da62:	e006      	b.n	800da72 <__lshift+0x92>
 800da64:	3b04      	subs	r3, #4
 800da66:	f851 2b04 	ldr.w	r2, [r1], #4
 800da6a:	f843 2f04 	str.w	r2, [r3, #4]!
 800da6e:	4571      	cmp	r1, lr
 800da70:	d3f9      	bcc.n	800da66 <__lshift+0x86>
 800da72:	3d01      	subs	r5, #1
 800da74:	4638      	mov	r0, r7
 800da76:	f8c8 5010 	str.w	r5, [r8, #16]
 800da7a:	4621      	mov	r1, r4
 800da7c:	f7ff fe25 	bl	800d6ca <_Bfree>
 800da80:	4640      	mov	r0, r8
 800da82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800da86 <__mcmp>:
 800da86:	6903      	ldr	r3, [r0, #16]
 800da88:	690a      	ldr	r2, [r1, #16]
 800da8a:	1a9b      	subs	r3, r3, r2
 800da8c:	b510      	push	{r4, lr}
 800da8e:	d111      	bne.n	800dab4 <__mcmp+0x2e>
 800da90:	0092      	lsls	r2, r2, #2
 800da92:	3014      	adds	r0, #20
 800da94:	3114      	adds	r1, #20
 800da96:	1883      	adds	r3, r0, r2
 800da98:	440a      	add	r2, r1
 800da9a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800da9e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800daa2:	428c      	cmp	r4, r1
 800daa4:	d002      	beq.n	800daac <__mcmp+0x26>
 800daa6:	d307      	bcc.n	800dab8 <__mcmp+0x32>
 800daa8:	2001      	movs	r0, #1
 800daaa:	bd10      	pop	{r4, pc}
 800daac:	4283      	cmp	r3, r0
 800daae:	d8f4      	bhi.n	800da9a <__mcmp+0x14>
 800dab0:	2000      	movs	r0, #0
 800dab2:	bd10      	pop	{r4, pc}
 800dab4:	4618      	mov	r0, r3
 800dab6:	bd10      	pop	{r4, pc}
 800dab8:	f04f 30ff 	mov.w	r0, #4294967295
 800dabc:	bd10      	pop	{r4, pc}

0800dabe <__mdiff>:
 800dabe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dac2:	4607      	mov	r7, r0
 800dac4:	460c      	mov	r4, r1
 800dac6:	4608      	mov	r0, r1
 800dac8:	4611      	mov	r1, r2
 800daca:	4615      	mov	r5, r2
 800dacc:	f7ff ffdb 	bl	800da86 <__mcmp>
 800dad0:	1e06      	subs	r6, r0, #0
 800dad2:	d108      	bne.n	800dae6 <__mdiff+0x28>
 800dad4:	4638      	mov	r0, r7
 800dad6:	4631      	mov	r1, r6
 800dad8:	f7ff fdc2 	bl	800d660 <_Balloc>
 800dadc:	2301      	movs	r3, #1
 800dade:	6103      	str	r3, [r0, #16]
 800dae0:	6146      	str	r6, [r0, #20]
 800dae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dae6:	bfbc      	itt	lt
 800dae8:	4623      	movlt	r3, r4
 800daea:	462c      	movlt	r4, r5
 800daec:	4638      	mov	r0, r7
 800daee:	6861      	ldr	r1, [r4, #4]
 800daf0:	bfba      	itte	lt
 800daf2:	461d      	movlt	r5, r3
 800daf4:	2601      	movlt	r6, #1
 800daf6:	2600      	movge	r6, #0
 800daf8:	f7ff fdb2 	bl	800d660 <_Balloc>
 800dafc:	692b      	ldr	r3, [r5, #16]
 800dafe:	60c6      	str	r6, [r0, #12]
 800db00:	6926      	ldr	r6, [r4, #16]
 800db02:	f105 0914 	add.w	r9, r5, #20
 800db06:	3414      	adds	r4, #20
 800db08:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 800db0c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800db10:	f100 0514 	add.w	r5, r0, #20
 800db14:	f04f 0c00 	mov.w	ip, #0
 800db18:	f854 3b04 	ldr.w	r3, [r4], #4
 800db1c:	f859 2b04 	ldr.w	r2, [r9], #4
 800db20:	fa1c f183 	uxtah	r1, ip, r3
 800db24:	fa1f fe82 	uxth.w	lr, r2
 800db28:	0c12      	lsrs	r2, r2, #16
 800db2a:	ebce 0101 	rsb	r1, lr, r1
 800db2e:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 800db32:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800db36:	b289      	uxth	r1, r1
 800db38:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800db3c:	45c8      	cmp	r8, r9
 800db3e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800db42:	46a6      	mov	lr, r4
 800db44:	f845 3b04 	str.w	r3, [r5], #4
 800db48:	d8e6      	bhi.n	800db18 <__mdiff+0x5a>
 800db4a:	45be      	cmp	lr, r7
 800db4c:	d20e      	bcs.n	800db6c <__mdiff+0xae>
 800db4e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800db52:	fa1c f482 	uxtah	r4, ip, r2
 800db56:	0c12      	lsrs	r2, r2, #16
 800db58:	eb02 4224 	add.w	r2, r2, r4, asr #16
 800db5c:	b2a4      	uxth	r4, r4
 800db5e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800db62:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 800db66:	f845 2b04 	str.w	r2, [r5], #4
 800db6a:	e7ee      	b.n	800db4a <__mdiff+0x8c>
 800db6c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800db70:	b90b      	cbnz	r3, 800db76 <__mdiff+0xb8>
 800db72:	3e01      	subs	r6, #1
 800db74:	e7fa      	b.n	800db6c <__mdiff+0xae>
 800db76:	6106      	str	r6, [r0, #16]
 800db78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800db7c <__d2b>:
 800db7c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800db80:	2101      	movs	r1, #1
 800db82:	461d      	mov	r5, r3
 800db84:	9f08      	ldr	r7, [sp, #32]
 800db86:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800db88:	4614      	mov	r4, r2
 800db8a:	f7ff fd69 	bl	800d660 <_Balloc>
 800db8e:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800db92:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800db96:	4680      	mov	r8, r0
 800db98:	b10d      	cbz	r5, 800db9e <__d2b+0x22>
 800db9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800db9e:	9301      	str	r3, [sp, #4]
 800dba0:	b1ec      	cbz	r4, 800dbde <__d2b+0x62>
 800dba2:	a802      	add	r0, sp, #8
 800dba4:	f840 4d08 	str.w	r4, [r0, #-8]!
 800dba8:	f7ff fe04 	bl	800d7b4 <__lo0bits>
 800dbac:	9b00      	ldr	r3, [sp, #0]
 800dbae:	b150      	cbz	r0, 800dbc6 <__d2b+0x4a>
 800dbb0:	9a01      	ldr	r2, [sp, #4]
 800dbb2:	f1c0 0120 	rsb	r1, r0, #32
 800dbb6:	fa02 f101 	lsl.w	r1, r2, r1
 800dbba:	430b      	orrs	r3, r1
 800dbbc:	40c2      	lsrs	r2, r0
 800dbbe:	f8c8 3014 	str.w	r3, [r8, #20]
 800dbc2:	9201      	str	r2, [sp, #4]
 800dbc4:	e001      	b.n	800dbca <__d2b+0x4e>
 800dbc6:	f8c8 3014 	str.w	r3, [r8, #20]
 800dbca:	9b01      	ldr	r3, [sp, #4]
 800dbcc:	f8c8 3018 	str.w	r3, [r8, #24]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	bf14      	ite	ne
 800dbd4:	2402      	movne	r4, #2
 800dbd6:	2401      	moveq	r4, #1
 800dbd8:	f8c8 4010 	str.w	r4, [r8, #16]
 800dbdc:	e009      	b.n	800dbf2 <__d2b+0x76>
 800dbde:	a801      	add	r0, sp, #4
 800dbe0:	f7ff fde8 	bl	800d7b4 <__lo0bits>
 800dbe4:	2401      	movs	r4, #1
 800dbe6:	9b01      	ldr	r3, [sp, #4]
 800dbe8:	f8c8 3014 	str.w	r3, [r8, #20]
 800dbec:	f8c8 4010 	str.w	r4, [r8, #16]
 800dbf0:	3020      	adds	r0, #32
 800dbf2:	b135      	cbz	r5, 800dc02 <__d2b+0x86>
 800dbf4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dbf8:	4405      	add	r5, r0
 800dbfa:	603d      	str	r5, [r7, #0]
 800dbfc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dc00:	e009      	b.n	800dc16 <__d2b+0x9a>
 800dc02:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800dc06:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dc0a:	6038      	str	r0, [r7, #0]
 800dc0c:	6918      	ldr	r0, [r3, #16]
 800dc0e:	f7ff fdb1 	bl	800d774 <__hi0bits>
 800dc12:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 800dc16:	6030      	str	r0, [r6, #0]
 800dc18:	4640      	mov	r0, r8
 800dc1a:	b002      	add	sp, #8
 800dc1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dc20 <_calloc_r>:
 800dc20:	b538      	push	{r3, r4, r5, lr}
 800dc22:	fb02 f401 	mul.w	r4, r2, r1
 800dc26:	4621      	mov	r1, r4
 800dc28:	f7fe fae2 	bl	800c1f0 <_malloc_r>
 800dc2c:	4605      	mov	r5, r0
 800dc2e:	b118      	cbz	r0, 800dc38 <_calloc_r+0x18>
 800dc30:	2100      	movs	r1, #0
 800dc32:	4622      	mov	r2, r4
 800dc34:	f7fe fad3 	bl	800c1de <memset>
 800dc38:	4628      	mov	r0, r5
 800dc3a:	bd38      	pop	{r3, r4, r5, pc}

0800dc3c <Driver_USBD0>:
 800dc3c:	5d81 0800 5de9 0800 6025 0800 6061 0800     .]...]..%`..a`..
 800dc4c:	6095 0800 60c9 0800 62d9 0800 64f9 0800     .`...`...b...d..
 800dc5c:	67ed 0800 6325 0800 612d 0800 61b9 0800     .g..%c..-a...a..
 800dc6c:	6231 0800 6471 0800 695d 0800 6989 0800     1b..qd..]i...i..

0800dc7c <g_xmc_vadc_group_array>:
 800dc7c:	4400 4000 4800 4000 4c00 4000 5000 4000     .D.@.H.@.L.@.P.@

0800dc8c <device_descriptor>:
 800dc8c:	0112 0110 0002 4000 058b 0058 0001 0201     .......@..X.....
 800dc9c:	0100 0000                                   ....

0800dca0 <configuration_descriptor>:
 800dca0:	0209 003e 0102 8000 0932 0004 0100 0202     ..>.....2.......
 800dcb0:	0001 2405 1000 0401 0224 0506 0624 0100     ...$....$...$...
 800dcc0:	0507 0381 0008 09ff 0104 0200 000a 0000     ................
 800dcd0:	0507 0203 0040 0701 8205 4002 0100 0000     ....@......@....

0800dce0 <language_string>:
 800dce0:	0304 0409 0000 0000 0000 0000 0000 0000     ................
	...

0800dd48 <manufacturer_string>:
 800dd48:	0312 0049 006e 0066 0069 006e 0065 006f     ..I.n.f.i.n.e.o.
 800dd58:	006e 0000 0000 0000 0000 0000 0000 0000     n...............
	...

0800ddb0 <product_string>:
 800ddb0:	0310 0049 0046 0058 0020 0043 0044 0043     ..I.F.X. .C.D.C.
	...

0800de18 <Bluetooth_Handle_channel_config>:
 800de18:	c200 0001 0808 1001 0000 0000               ............

0800de24 <Bluetooth_Handle_tx_pin_config>:
 800de24:	0088 0000 0001 0000 0002 0000               ............

0800de30 <Bluetooth_Handle_tx_pin>:
 800de30:	8500 4802 0001 0000 de24 0800               ...H....$...

0800de3c <Bluetooth_Handle_config>:
 800de3c:	de18 0800 8a5d 0800 0000 0000 0000 0000     ....]...........
	...
 800de58:	de30 0800 0200 0002 0005 0000               0...........

0800de64 <Bluetooth_Handle_rx_pin_config>:
 800de64:	0000 0000 0001 0000 0002 0000               ............

0800de70 <RemoteControl_Handle_channel_config>:
 800de70:	c200 0001 0808 1001 0000 0000               ............

0800de7c <RemoteControl_Handle_tx_pin_config>:
 800de7c:	0090 0000 0001 0000 0002 0000               ............

0800de88 <RemoteControl_Handle_tx_pin>:
 800de88:	8200 4802 000e 0000 de7c 0800               ...H....|...

0800de94 <RemoteControl_Handle_config>:
 800de94:	de70 0800 8ae1 0800 0000 0000 0000 0000     p...............
	...
 800deb0:	de88 0800 0200 0002 0005 0000               ............

0800debc <RemoteControl_Handle_rx_pin_config>:
 800debc:	0000 0000 0001 0000 0002 0000               ............

0800dec8 <PWM_OUTPUT_1_timer_handle>:
 800dec8:	0000 0000 0003 0000                         ........

0800ded0 <PWM_OUTPUT_1_event0_config>:
 800ded0:	0000 0001                                   ....

0800ded4 <PWM_OUTPUT_1_event1_config>:
 800ded4:	0000 0001                                   ....

0800ded8 <PWM_OUTPUT_1_event2_config>:
 800ded8:	0000 0001                                   ....

0800dedc <PWM_OUTPUT_1_ch1_out0_config>:
 800dedc:	0098 0000 0000 0001 0004 0000               ............

0800dee8 <PWM_OUTPUT_1_config_handle>:
 800dee8:	0000 8234 7bb2 0000 0000 0000 0000 0000     ..4..{..........
 800def8:	0000 0000 ded0 0800 ded4 0800 ded8 0800     ................
	...
 800df14:	0000 0100 0000 0000 0000 2000 dec8 0800     ........... ....
 800df24:	0001 0000 8100 4802 0000 0000 dedc 0800     .......H........
 800df34:	0248 2000                                   H.. 

0800df38 <PWM_OUTPUT_2_timer_handle>:
 800df38:	0000 0000 0003 0000                         ........

0800df40 <PWM_OUTPUT_2_event0_config>:
 800df40:	0000 0001                                   ....

0800df44 <PWM_OUTPUT_2_event1_config>:
 800df44:	0000 0001                                   ....

0800df48 <PWM_OUTPUT_2_event2_config>:
 800df48:	0000 0001                                   ....

0800df4c <PWM_OUTPUT_2_ch1_out0_config>:
 800df4c:	0098 0000 0000 0001 0004 0000               ............

0800df58 <PWM_OUTPUT_2_config_handle>:
 800df58:	0000 8234 7bb2 0000 0000 0000 0000 0000     ..4..{..........
 800df68:	0000 0000 df40 0800 df44 0800 df48 0800     ....@...D...H...
	...
 800df84:	0000 0100 0000 0000 0000 1000 df38 0800     ............8...
 800df94:	0001 0000 8100 4802 0001 0000 df4c 0800     .......H....L...
 800dfa4:	0248 2000                                   H.. 

0800dfa8 <PWM_OUTPUT_3_timer_handle>:
 800dfa8:	0000 0000 0003 0000                         ........

0800dfb0 <PWM_OUTPUT_3_event0_config>:
 800dfb0:	0000 0001                                   ....

0800dfb4 <PWM_OUTPUT_3_event1_config>:
 800dfb4:	0000 0001                                   ....

0800dfb8 <PWM_OUTPUT_3_event2_config>:
 800dfb8:	0000 0001                                   ....

0800dfbc <PWM_OUTPUT_3_ch1_out0_config>:
 800dfbc:	0098 0000 0000 0001 0004 0000               ............

0800dfc8 <PWM_OUTPUT_3_config_handle>:
 800dfc8:	0000 8234 7bb2 0000 0000 0000 0000 0000     ..4..{..........
 800dfd8:	0000 0000 dfb0 0800 dfb4 0800 dfb8 0800     ................
	...
 800dff4:	0000 0100 0000 0000 0000 0800 dfa8 0800     ................
 800e004:	0001 0000 8100 4802 0002 0000 dfbc 0800     .......H........
 800e014:	0248 2000                                   H.. 

0800e018 <PWM_OUTPUT_4_timer_handle>:
 800e018:	0000 0000 0003 0000                         ........

0800e020 <PWM_OUTPUT_4_event0_config>:
 800e020:	0000 0001                                   ....

0800e024 <PWM_OUTPUT_4_event1_config>:
 800e024:	0000 0001                                   ....

0800e028 <PWM_OUTPUT_4_event2_config>:
 800e028:	0000 0001                                   ....

0800e02c <PWM_OUTPUT_4_ch1_out0_config>:
 800e02c:	0098 0000 0000 0001 0004 0000               ............

0800e038 <PWM_OUTPUT_4_config_handle>:
 800e038:	0000 8234 7bb2 0000 0000 0000 0000 0000     ..4..{..........
 800e048:	0000 0000 e020 0800 e024 0800 e028 0800     .... ...$...(...
	...
 800e064:	0000 0100 0000 0000 0000 0400 e018 0800     ................
 800e074:	0001 0000 8100 4802 0003 0000 e02c 0800     .......H....,...
 800e084:	0248 2000                                   H.. 

0800e088 <Util_Timer_ISR_Handle>:
 800e088:	0238 0100                                   8...

0800e08c <Bluetooth_RX_ISR_Handle>:
 800e08c:	0859 0100                                   Y...

0800e090 <RemoteControl_RX_ISR_Handle>:
 800e090:	075a 0100                                   Z...

0800e094 <DPS310_Ext_Int_ISR_Handle>:
 800e094:	0c08 0100                                   ....

0800e098 <MPU9X50_Ext_Int_ISR_Handle>:
 800e098:	0a05 0000                                   ....

0800e09c <Control_Timer_ISR_Handle>:
 800e09c:	0539 0100                                   9...

0800e0a0 <MagnetometerCal_Timer_ISR_Handle>:
 800e0a0:	3f3b 0100                                   ;?..

0800e0a4 <GeneralPurpose_Timer_ISR_Handle>:
 800e0a4:	1432 0100                                   2...

0800e0a8 <group_init_handle0>:
	...

0800e0bc <group_init_handle1>:
	...

0800e0d0 <group_init_handle2>:
	...

0800e0e4 <group_init_handle3>:
	...

0800e0f8 <global_config>:
 800e0f8:	0000 0000 0003 0000 0000 0000 0000 0000     ................
	...

0800e110 <DPS310_ERU_Out_OGU_Config>:
 800e110:	0010 0000                                   ....

0800e114 <MPU9X50_ERU_Out_OGU_Config>:
 800e114:	0010 0000                                   ....

0800e118 <DPS310_ERU_In_ETL_Config>:
 800e118:	0000 0000 003b 0000                         ....;...

0800e120 <MPU9X50_ERU_In_ETL_Config>:
 800e120:	0000 0000 0007 0000                         ........

0800e128 <DPS310_Ext_Int_Pin>:
 800e128:	8100 4802 0000 0000 0000 0000 0000 0000     ...H............
 800e138:	000f 0000                                   ....

0800e13c <MPU9X50_Ext_Int_Pin>:
 800e13c:	8000 4802 0000 0000 0000 0000 0000 0000     ...H............
 800e14c:	0005 0000 0250 0104 0000 0001 0000 0000     ....P...........
 800e15c:	0000 0001 0101 0101                         ........

0800e164 <global_iclass_config>:
 800e164:	0000 0000                                   ....

0800e168 <backgnd_rs_intr_handle>:
 800e168:	0010 0000 001e 0000 0000 0000               ............

0800e174 <backgnd_config>:
 800e174:	0005 0000 4200 0000 000c 0000 7361 6e69     .....B......asin
 800e184:	0066 0000 6f70 6677 0000 0000 7173 7472     f...powf....sqrt
 800e194:	0066 0000                                   f...

0800e198 <dp_h>:
 800e198:	0000 0000 c000 3f15                         .......?

0800e1a0 <dp_l>:
 800e1a0:	0000 0000 cfdc 35d1                         .......5

0800e1a8 <bp>:
 800e1a8:	0000 3f80 0000 3fc0                         ...?...?

0800e1b0 <TWO52>:
 800e1b0:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

0800e1c0 <atanlo>:
 800e1c0:	3769 31ac 2168 3322 0fb4 3314 2168 33a2     i7.1h!"3...3h!.3

0800e1d0 <atanhi>:
 800e1d0:	6338 3eed 0fda 3f49 985e 3f7b 0fda 3fc9     8c.>..I?^.{?...?
 800e1e0:	0043 4e49 0046 6e69 0066 414e 004e 616e     C.INF.inf.NAN.na
 800e1f0:	006e 0030 6e49 6966 696e 7974 4e00 4e61     n.0.Infinity.NaN
 800e200:	5000 534f 5849 2e00 0000 0000 0000 0000     .POSIX..........

0800e210 <__mprec_tens>:
 800e210:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 800e220:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 800e230:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 800e240:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 800e250:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 800e260:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 800e270:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 800e280:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 800e290:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 800e2a0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 800e2b0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 800e2c0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 800e2d0:	9db4 79d9 7843 44ea                         ...yCx.D

0800e2d8 <__mprec_bigtens>:
 800e2d8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 800e2e8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 800e2f8:	bf3c 7f73 4fdd 7515                         <.s..O.u

0800e300 <p05.5277>:
 800e300:	0005 0000 0019 0000 007d 0000               ........}...
