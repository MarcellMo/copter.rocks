   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_mat_cmplx_mult_f32.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.arm_mat_cmplx_mult_f32,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_mat_cmplx_mult_f32
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_mat_cmplx_mult_f32:
  26              	.LFB139:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c"
   1:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** /* ----------------------------------------------------------------------      
   2:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** * Copyright (C) 2010-2014 ARM Limited. All rights reserved. 
   3:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** *      
   4:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** * $Date:        12. March 2014
   5:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** * $Revision: 	V1.4.4
   6:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** *      
   7:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** * Project:      CMSIS DSP Library 
   8:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** * Title:	    arm_mat_cmplx_mult_f32.c      
   9:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** *      
  10:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** * Description:  Floating-point matrix multiplication.      
  11:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** *      
  12:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** * Target Processor:          Cortex-M4/Cortex-M3/Cortex-M0
  13:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** *
  14:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** * Redistribution and use in source and binary forms, with or without 
  15:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** * modification, are permitted provided that the following conditions
  16:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** * are met:
  17:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** *   - Redistributions of source code must retain the above copyright
  18:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** *     notice, this list of conditions and the following disclaimer.
  19:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** *   - Redistributions in binary form must reproduce the above copyright
  20:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** *     notice, this list of conditions and the following disclaimer in
  21:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** *     the documentation and/or other materials provided with the 
  22:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** *     distribution.
  23:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** *   - Neither the name of ARM LIMITED nor the names of its contributors
  24:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** *     may be used to endorse or promote products derived from this
  25:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** *     software without specific prior written permission.
  26:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** *
  27:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  28:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  29:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  30:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE 
  31:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  32:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  33:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  34:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  35:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  36:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** * POSSIBILITY OF SUCH DAMAGE.    
  39:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** * -------------------------------------------------------------------- */
  40:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  41:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
  42:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** /**      
  43:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * @ingroup groupMatrix      
  44:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  */
  45:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
  46:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** /**      
  47:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * @defgroup CmplxMatrixMult  Complex Matrix Multiplication     
  48:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  *     
  49:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * Complex Matrix multiplication is only defined if the number of columns of the      
  50:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * first matrix equals the number of rows of the second matrix.      
  51:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * Multiplying an <code>M x N</code> matrix with an <code>N x P</code> matrix results      
  52:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * in an <code>M x P</code> matrix.      
  53:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * When matrix size checking is enabled, the functions check: (1) that the inner dimensions of     
  54:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * <code>pSrcA</code> and <code>pSrcB</code> are equal; and (2) that the size of the output      
  55:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * matrix equals the outer dimensions of <code>pSrcA</code> and <code>pSrcB</code>.      
  56:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  */
  57:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
  58:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
  59:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** /**      
  60:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * @addtogroup CmplxMatrixMult      
  61:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * @{      
  62:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  */
  63:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
  64:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** /**      
  65:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * @brief Floating-point Complex matrix multiplication.      
  66:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * @param[in]       *pSrcA points to the first input complex matrix structure      
  67:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * @param[in]       *pSrcB points to the second input complex matrix structure      
  68:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * @param[out]      *pDst points to output complex matrix structure      
  69:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * @return     		The function returns either      
  70:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of siz
  71:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  */
  72:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
  73:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** arm_status arm_mat_cmplx_mult_f32(
  74:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   const arm_matrix_instance_f32 * pSrcA,
  75:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   const arm_matrix_instance_f32 * pSrcB,
  76:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   arm_matrix_instance_f32 * pDst)
  77:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** {
  28              	 .loc 1 77 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33 0000 80B4     	 push {r7}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 4
  36              	 .cfi_offset 7,-4
  37 0002 9BB0     	 sub sp,sp,#108
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 112
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
  43 0006 F860     	 str r0,[r7,#12]
  44 0008 B960     	 str r1,[r7,#8]
  45 000a 7A60     	 str r2,[r7,#4]
  78:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A */
  46              	 .loc 1 78 0
  47 000c FB68     	 ldr r3,[r7,#12]
  48 000e 5B68     	 ldr r3,[r3,#4]
  49 0010 7B66     	 str r3,[r7,#100]
  79:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B */
  50              	 .loc 1 79 0
  51 0012 BB68     	 ldr r3,[r7,#8]
  52 0014 5B68     	 ldr r3,[r3,#4]
  53 0016 3B66     	 str r3,[r7,#96]
  80:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A  */
  54              	 .loc 1 80 0
  55 0018 FB68     	 ldr r3,[r7,#12]
  56 001a 5B68     	 ldr r3,[r3,#4]
  57 001c FB65     	 str r3,[r7,#92]
  81:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
  58              	 .loc 1 81 0
  59 001e 7B68     	 ldr r3,[r7,#4]
  60 0020 5B68     	 ldr r3,[r3,#4]
  61 0022 BB63     	 str r3,[r7,#56]
  82:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   float32_t *px;                                 /* Temporary output data matrix pointer */
  83:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A */
  62              	 .loc 1 83 0
  63 0024 FB68     	 ldr r3,[r7,#12]
  64 0026 1B88     	 ldrh r3,[r3]
  65 0028 FB86     	 strh r3,[r7,#54]
  84:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
  66              	 .loc 1 84 0
  67 002a BB68     	 ldr r3,[r7,#8]
  68 002c 5B88     	 ldrh r3,[r3,#2]
  69 002e BB86     	 strh r3,[r7,#52]
  85:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
  70              	 .loc 1 85 0
  71 0030 FB68     	 ldr r3,[r7,#12]
  72 0032 5B88     	 ldrh r3,[r3,#2]
  73 0034 7B86     	 strh r3,[r7,#50]
  86:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   float32_t sumReal1, sumImag1;                  /* accumulator */
  87:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   float32_t a0, b0, c0, d0;
  88:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   float32_t a1, b1, c1, d1;
  89:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   float32_t sumReal2, sumImag2;                  /* accumulator */
  90:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
  91:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
  92:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   /* Run the below code for Cortex-M4 and Cortex-M3 */
  93:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
  94:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   uint16_t col, i = 0u, j, row = numRowsA, colCnt;      /* loop counters */
  74              	 .loc 1 94 0
  75 0036 0023     	 movs r3,#0
  76 0038 A7F84430 	 strh r3,[r7,#68]
  77 003c FB8E     	 ldrh r3,[r7,#54]
  78 003e A7F84030 	 strh r3,[r7,#64]
  95:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   arm_status status;                             /* status of matrix multiplication */
  96:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
  97:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** #ifdef ARM_MATH_MATRIX_CHECK
  98:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
  99:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 100:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   /* Check for matrix mismatch condition */
 101:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   if((pSrcA->numCols != pSrcB->numRows) ||
  79              	 .loc 1 101 0
  80 0042 FB68     	 ldr r3,[r7,#12]
  81 0044 5A88     	 ldrh r2,[r3,#2]
  82 0046 BB68     	 ldr r3,[r7,#8]
  83 0048 1B88     	 ldrh r3,[r3]
  84 004a 9A42     	 cmp r2,r3
  85 004c 0BD1     	 bne .L2
 102:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****      (pSrcA->numRows != pDst->numRows) || (pSrcB->numCols != pDst->numCols))
  86              	 .loc 1 102 0 discriminator 1
  87 004e FB68     	 ldr r3,[r7,#12]
  88 0050 1A88     	 ldrh r2,[r3]
  89 0052 7B68     	 ldr r3,[r7,#4]
  90 0054 1B88     	 ldrh r3,[r3]
 101:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****      (pSrcA->numRows != pDst->numRows) || (pSrcB->numCols != pDst->numCols))
  91              	 .loc 1 101 0 discriminator 1
  92 0056 9A42     	 cmp r2,r3
  93 0058 05D1     	 bne .L2
  94              	 .loc 1 102 0
  95 005a BB68     	 ldr r3,[r7,#8]
  96 005c 5A88     	 ldrh r2,[r3,#2]
  97 005e 7B68     	 ldr r3,[r7,#4]
  98 0060 5B88     	 ldrh r3,[r3,#2]
  99 0062 9A42     	 cmp r2,r3
 100 0064 03D0     	 beq .L3
 101              	.L2:
 103:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   {
 104:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 105:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****     /* Set status as ARM_MATH_SIZE_MISMATCH */
 106:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****     status = ARM_MATH_SIZE_MISMATCH;
 102              	 .loc 1 106 0
 103 0066 FD23     	 movs r3,#253
 104 0068 87F83D30 	 strb r3,[r7,#61]
 105 006c D5E1     	 b .L4
 106              	.L3:
 107:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   }
 108:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   else
 109:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** #endif /*      #ifdef ARM_MATH_MATRIX_CHECK    */
 110:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 111:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   {
 112:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****     /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB *
 113:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****     /* row loop */
 114:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****     do
 115:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****     {
 116:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       /* Output pointer is set to starting address of the row being processed */
 117:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       px = pOut + 2 * i;
 107              	 .loc 1 117 0
 108 006e B7F84430 	 ldrh r3,[r7,#68]
 109 0072 DB00     	 lsls r3,r3,#3
 110 0074 1A46     	 mov r2,r3
 111 0076 BB6B     	 ldr r3,[r7,#56]
 112 0078 1344     	 add r3,r3,r2
 113 007a BB65     	 str r3,[r7,#88]
 118:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 119:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       /* For every row wise process, the column loop counter is to be initiated */
 120:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       col = numColsB;
 114              	 .loc 1 120 0
 115 007c BB8E     	 ldrh r3,[r7,#52]
 116 007e A7F84630 	 strh r3,[r7,#70]
 121:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 122:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       /* For every row wise process, the pIn2 pointer is set      
 123:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****        ** to the starting address of the pSrcB data */
 124:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       pIn2 = pSrcB->pData;
 117              	 .loc 1 124 0
 118 0082 BB68     	 ldr r3,[r7,#8]
 119 0084 5B68     	 ldr r3,[r3,#4]
 120 0086 3B66     	 str r3,[r7,#96]
 125:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 126:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       j = 0u;
 121              	 .loc 1 126 0
 122 0088 0023     	 movs r3,#0
 123 008a A7F84230 	 strh r3,[r7,#66]
 124              	.L9:
 127:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 128:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       /* column loop */
 129:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       do
 130:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       {
 131:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         /* Set the variable sum, that acts as accumulator, to zero */
 132:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         sumReal1 = 0.0f;
 125              	 .loc 1 132 0
 126 008e 4FF00003 	 mov r3,#0
 127 0092 7B65     	 str r3,[r7,#84]
 133:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         sumImag1 = 0.0f;
 128              	 .loc 1 133 0
 129 0094 4FF00003 	 mov r3,#0
 130 0098 3B65     	 str r3,[r7,#80]
 134:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 135:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         sumReal2 = 0.0f;
 131              	 .loc 1 135 0
 132 009a 4FF00003 	 mov r3,#0
 133 009e FB64     	 str r3,[r7,#76]
 136:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         sumImag2 = 0.0f;
 134              	 .loc 1 136 0
 135 00a0 4FF00003 	 mov r3,#0
 136 00a4 BB64     	 str r3,[r7,#72]
 137:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 138:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         /* Initiate the pointer pIn1 to point to the starting address of the column being processed
 139:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         pIn1 = pInA;
 137              	 .loc 1 139 0
 138 00a6 FB6D     	 ldr r3,[r7,#92]
 139 00a8 7B66     	 str r3,[r7,#100]
 140:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 141:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         /* Apply loop unrolling and compute 4 MACs simultaneously. */
 142:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         colCnt = numColsA >> 2;
 140              	 .loc 1 142 0
 141 00aa 7B8E     	 ldrh r3,[r7,#50]
 142 00ac 9B08     	 lsrs r3,r3,#2
 143 00ae FB87     	 strh r3,[r7,#62]
 143:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 144:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         /* matrix multiplication        */
 145:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         while(colCnt > 0u)
 144              	 .loc 1 145 0
 145 00b0 16E1     	 b .L5
 146              	.L6:
 146:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         {
 147:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 148:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* Reading real part of complex matrix A */
 149:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           a0 = *pIn1;
 147              	 .loc 1 149 0
 148 00b2 7B6E     	 ldr r3,[r7,#100]
 149 00b4 1B68     	 ldr r3,[r3]
 150 00b6 FB62     	 str r3,[r7,#44]
 150:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 151:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* Reading real part of complex matrix B */
 152:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           c0 = *pIn2;
 151              	 .loc 1 152 0
 152 00b8 3B6E     	 ldr r3,[r7,#96]
 153 00ba 1B68     	 ldr r3,[r3]
 154 00bc BB62     	 str r3,[r7,#40]
 153:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 154:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* Reading imaginary part of complex matrix A */
 155:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           b0 = *(pIn1 + 1u);
 155              	 .loc 1 155 0
 156 00be 7B6E     	 ldr r3,[r7,#100]
 157 00c0 5B68     	 ldr r3,[r3,#4]
 158 00c2 7B62     	 str r3,[r7,#36]
 156:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 157:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* Reading imaginary part of complex matrix B */
 158:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           d0 = *(pIn2 + 1u);
 159              	 .loc 1 158 0
 160 00c4 3B6E     	 ldr r3,[r7,#96]
 161 00c6 5B68     	 ldr r3,[r3,#4]
 162 00c8 3B62     	 str r3,[r7,#32]
 159:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 160:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumReal1 += a0 * c0;
 163              	 .loc 1 160 0
 164 00ca 97ED0B7A 	 flds s14,[r7,#44]
 165 00ce D7ED0A7A 	 flds s15,[r7,#40]
 166 00d2 67EE277A 	 fmuls s15,s14,s15
 167 00d6 97ED157A 	 flds s14,[r7,#84]
 168 00da 77EE277A 	 fadds s15,s14,s15
 169 00de C7ED157A 	 fsts s15,[r7,#84]
 161:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumImag1 += b0 * c0;
 170              	 .loc 1 161 0
 171 00e2 97ED097A 	 flds s14,[r7,#36]
 172 00e6 D7ED0A7A 	 flds s15,[r7,#40]
 173 00ea 67EE277A 	 fmuls s15,s14,s15
 174 00ee 97ED147A 	 flds s14,[r7,#80]
 175 00f2 77EE277A 	 fadds s15,s14,s15
 176 00f6 C7ED147A 	 fsts s15,[r7,#80]
 162:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 163:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           pIn1 += 2u;
 177              	 .loc 1 163 0
 178 00fa 7B6E     	 ldr r3,[r7,#100]
 179 00fc 0833     	 adds r3,r3,#8
 180 00fe 7B66     	 str r3,[r7,#100]
 164:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           pIn2 += 2 * numColsB;
 181              	 .loc 1 164 0
 182 0100 BB8E     	 ldrh r3,[r7,#52]
 183 0102 DB00     	 lsls r3,r3,#3
 184 0104 1A46     	 mov r2,r3
 185 0106 3B6E     	 ldr r3,[r7,#96]
 186 0108 1344     	 add r3,r3,r2
 187 010a 3B66     	 str r3,[r7,#96]
 165:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 166:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumReal2 -= b0 * d0;
 188              	 .loc 1 166 0
 189 010c 97ED097A 	 flds s14,[r7,#36]
 190 0110 D7ED087A 	 flds s15,[r7,#32]
 191 0114 67EE277A 	 fmuls s15,s14,s15
 192 0118 97ED137A 	 flds s14,[r7,#76]
 193 011c 77EE677A 	 fsubs s15,s14,s15
 194 0120 C7ED137A 	 fsts s15,[r7,#76]
 167:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumImag2 += a0 * d0;
 195              	 .loc 1 167 0
 196 0124 97ED0B7A 	 flds s14,[r7,#44]
 197 0128 D7ED087A 	 flds s15,[r7,#32]
 198 012c 67EE277A 	 fmuls s15,s14,s15
 199 0130 97ED127A 	 flds s14,[r7,#72]
 200 0134 77EE277A 	 fadds s15,s14,s15
 201 0138 C7ED127A 	 fsts s15,[r7,#72]
 168:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 169:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
 170:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 171:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           a1 = *pIn1;
 202              	 .loc 1 171 0
 203 013c 7B6E     	 ldr r3,[r7,#100]
 204 013e 1B68     	 ldr r3,[r3]
 205 0140 FB61     	 str r3,[r7,#28]
 172:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           c1 = *pIn2;
 206              	 .loc 1 172 0
 207 0142 3B6E     	 ldr r3,[r7,#96]
 208 0144 1B68     	 ldr r3,[r3]
 209 0146 BB61     	 str r3,[r7,#24]
 173:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 174:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           b1 = *(pIn1 + 1u);
 210              	 .loc 1 174 0
 211 0148 7B6E     	 ldr r3,[r7,#100]
 212 014a 5B68     	 ldr r3,[r3,#4]
 213 014c 7B61     	 str r3,[r7,#20]
 175:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           d1 = *(pIn2 + 1u);
 214              	 .loc 1 175 0
 215 014e 3B6E     	 ldr r3,[r7,#96]
 216 0150 5B68     	 ldr r3,[r3,#4]
 217 0152 3B61     	 str r3,[r7,#16]
 176:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 177:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumReal1 += a1 * c1;
 218              	 .loc 1 177 0
 219 0154 97ED077A 	 flds s14,[r7,#28]
 220 0158 D7ED067A 	 flds s15,[r7,#24]
 221 015c 67EE277A 	 fmuls s15,s14,s15
 222 0160 97ED157A 	 flds s14,[r7,#84]
 223 0164 77EE277A 	 fadds s15,s14,s15
 224 0168 C7ED157A 	 fsts s15,[r7,#84]
 178:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumImag1 += b1 * c1;
 225              	 .loc 1 178 0
 226 016c 97ED057A 	 flds s14,[r7,#20]
 227 0170 D7ED067A 	 flds s15,[r7,#24]
 228 0174 67EE277A 	 fmuls s15,s14,s15
 229 0178 97ED147A 	 flds s14,[r7,#80]
 230 017c 77EE277A 	 fadds s15,s14,s15
 231 0180 C7ED147A 	 fsts s15,[r7,#80]
 179:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 180:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           pIn1 += 2u;
 232              	 .loc 1 180 0
 233 0184 7B6E     	 ldr r3,[r7,#100]
 234 0186 0833     	 adds r3,r3,#8
 235 0188 7B66     	 str r3,[r7,#100]
 181:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           pIn2 += 2 * numColsB;
 236              	 .loc 1 181 0
 237 018a BB8E     	 ldrh r3,[r7,#52]
 238 018c DB00     	 lsls r3,r3,#3
 239 018e 1A46     	 mov r2,r3
 240 0190 3B6E     	 ldr r3,[r7,#96]
 241 0192 1344     	 add r3,r3,r2
 242 0194 3B66     	 str r3,[r7,#96]
 182:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 183:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumReal2 -= b1 * d1;
 243              	 .loc 1 183 0
 244 0196 97ED057A 	 flds s14,[r7,#20]
 245 019a D7ED047A 	 flds s15,[r7,#16]
 246 019e 67EE277A 	 fmuls s15,s14,s15
 247 01a2 97ED137A 	 flds s14,[r7,#76]
 248 01a6 77EE677A 	 fsubs s15,s14,s15
 249 01aa C7ED137A 	 fsts s15,[r7,#76]
 184:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumImag2 += a1 * d1;
 250              	 .loc 1 184 0
 251 01ae 97ED077A 	 flds s14,[r7,#28]
 252 01b2 D7ED047A 	 flds s15,[r7,#16]
 253 01b6 67EE277A 	 fmuls s15,s14,s15
 254 01ba 97ED127A 	 flds s14,[r7,#72]
 255 01be 77EE277A 	 fadds s15,s14,s15
 256 01c2 C7ED127A 	 fsts s15,[r7,#72]
 185:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 186:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           a0 = *pIn1;
 257              	 .loc 1 186 0
 258 01c6 7B6E     	 ldr r3,[r7,#100]
 259 01c8 1B68     	 ldr r3,[r3]
 260 01ca FB62     	 str r3,[r7,#44]
 187:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           c0 = *pIn2;
 261              	 .loc 1 187 0
 262 01cc 3B6E     	 ldr r3,[r7,#96]
 263 01ce 1B68     	 ldr r3,[r3]
 264 01d0 BB62     	 str r3,[r7,#40]
 188:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 189:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           b0 = *(pIn1 + 1u);
 265              	 .loc 1 189 0
 266 01d2 7B6E     	 ldr r3,[r7,#100]
 267 01d4 5B68     	 ldr r3,[r3,#4]
 268 01d6 7B62     	 str r3,[r7,#36]
 190:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           d0 = *(pIn2 + 1u);
 269              	 .loc 1 190 0
 270 01d8 3B6E     	 ldr r3,[r7,#96]
 271 01da 5B68     	 ldr r3,[r3,#4]
 272 01dc 3B62     	 str r3,[r7,#32]
 191:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 192:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumReal1 += a0 * c0;
 273              	 .loc 1 192 0
 274 01de 97ED0B7A 	 flds s14,[r7,#44]
 275 01e2 D7ED0A7A 	 flds s15,[r7,#40]
 276 01e6 67EE277A 	 fmuls s15,s14,s15
 277 01ea 97ED157A 	 flds s14,[r7,#84]
 278 01ee 77EE277A 	 fadds s15,s14,s15
 279 01f2 C7ED157A 	 fsts s15,[r7,#84]
 193:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumImag1 += b0 * c0;
 280              	 .loc 1 193 0
 281 01f6 97ED097A 	 flds s14,[r7,#36]
 282 01fa D7ED0A7A 	 flds s15,[r7,#40]
 283 01fe 67EE277A 	 fmuls s15,s14,s15
 284 0202 97ED147A 	 flds s14,[r7,#80]
 285 0206 77EE277A 	 fadds s15,s14,s15
 286 020a C7ED147A 	 fsts s15,[r7,#80]
 194:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 195:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           pIn1 += 2u;
 287              	 .loc 1 195 0
 288 020e 7B6E     	 ldr r3,[r7,#100]
 289 0210 0833     	 adds r3,r3,#8
 290 0212 7B66     	 str r3,[r7,#100]
 196:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           pIn2 += 2 * numColsB;
 291              	 .loc 1 196 0
 292 0214 BB8E     	 ldrh r3,[r7,#52]
 293 0216 DB00     	 lsls r3,r3,#3
 294 0218 1A46     	 mov r2,r3
 295 021a 3B6E     	 ldr r3,[r7,#96]
 296 021c 1344     	 add r3,r3,r2
 297 021e 3B66     	 str r3,[r7,#96]
 197:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 198:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumReal2 -= b0 * d0;
 298              	 .loc 1 198 0
 299 0220 97ED097A 	 flds s14,[r7,#36]
 300 0224 D7ED087A 	 flds s15,[r7,#32]
 301 0228 67EE277A 	 fmuls s15,s14,s15
 302 022c 97ED137A 	 flds s14,[r7,#76]
 303 0230 77EE677A 	 fsubs s15,s14,s15
 304 0234 C7ED137A 	 fsts s15,[r7,#76]
 199:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumImag2 += a0 * d0;
 305              	 .loc 1 199 0
 306 0238 97ED0B7A 	 flds s14,[r7,#44]
 307 023c D7ED087A 	 flds s15,[r7,#32]
 308 0240 67EE277A 	 fmuls s15,s14,s15
 309 0244 97ED127A 	 flds s14,[r7,#72]
 310 0248 77EE277A 	 fadds s15,s14,s15
 311 024c C7ED127A 	 fsts s15,[r7,#72]
 200:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 201:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
 202:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 203:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           a1 = *pIn1;
 312              	 .loc 1 203 0
 313 0250 7B6E     	 ldr r3,[r7,#100]
 314 0252 1B68     	 ldr r3,[r3]
 315 0254 FB61     	 str r3,[r7,#28]
 204:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           c1 = *pIn2;
 316              	 .loc 1 204 0
 317 0256 3B6E     	 ldr r3,[r7,#96]
 318 0258 1B68     	 ldr r3,[r3]
 319 025a BB61     	 str r3,[r7,#24]
 205:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 206:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           b1 = *(pIn1 + 1u);
 320              	 .loc 1 206 0
 321 025c 7B6E     	 ldr r3,[r7,#100]
 322 025e 5B68     	 ldr r3,[r3,#4]
 323 0260 7B61     	 str r3,[r7,#20]
 207:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           d1 = *(pIn2 + 1u);
 324              	 .loc 1 207 0
 325 0262 3B6E     	 ldr r3,[r7,#96]
 326 0264 5B68     	 ldr r3,[r3,#4]
 327 0266 3B61     	 str r3,[r7,#16]
 208:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 209:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumReal1 += a1 * c1;
 328              	 .loc 1 209 0
 329 0268 97ED077A 	 flds s14,[r7,#28]
 330 026c D7ED067A 	 flds s15,[r7,#24]
 331 0270 67EE277A 	 fmuls s15,s14,s15
 332 0274 97ED157A 	 flds s14,[r7,#84]
 333 0278 77EE277A 	 fadds s15,s14,s15
 334 027c C7ED157A 	 fsts s15,[r7,#84]
 210:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumImag1 += b1 * c1;
 335              	 .loc 1 210 0
 336 0280 97ED057A 	 flds s14,[r7,#20]
 337 0284 D7ED067A 	 flds s15,[r7,#24]
 338 0288 67EE277A 	 fmuls s15,s14,s15
 339 028c 97ED147A 	 flds s14,[r7,#80]
 340 0290 77EE277A 	 fadds s15,s14,s15
 341 0294 C7ED147A 	 fsts s15,[r7,#80]
 211:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 212:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           pIn1 += 2u;
 342              	 .loc 1 212 0
 343 0298 7B6E     	 ldr r3,[r7,#100]
 344 029a 0833     	 adds r3,r3,#8
 345 029c 7B66     	 str r3,[r7,#100]
 213:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           pIn2 += 2 * numColsB;
 346              	 .loc 1 213 0
 347 029e BB8E     	 ldrh r3,[r7,#52]
 348 02a0 DB00     	 lsls r3,r3,#3
 349 02a2 1A46     	 mov r2,r3
 350 02a4 3B6E     	 ldr r3,[r7,#96]
 351 02a6 1344     	 add r3,r3,r2
 352 02a8 3B66     	 str r3,[r7,#96]
 214:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 215:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumReal2 -= b1 * d1;
 353              	 .loc 1 215 0
 354 02aa 97ED057A 	 flds s14,[r7,#20]
 355 02ae D7ED047A 	 flds s15,[r7,#16]
 356 02b2 67EE277A 	 fmuls s15,s14,s15
 357 02b6 97ED137A 	 flds s14,[r7,#76]
 358 02ba 77EE677A 	 fsubs s15,s14,s15
 359 02be C7ED137A 	 fsts s15,[r7,#76]
 216:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumImag2 += a1 * d1;
 360              	 .loc 1 216 0
 361 02c2 97ED077A 	 flds s14,[r7,#28]
 362 02c6 D7ED047A 	 flds s15,[r7,#16]
 363 02ca 67EE277A 	 fmuls s15,s14,s15
 364 02ce 97ED127A 	 flds s14,[r7,#72]
 365 02d2 77EE277A 	 fadds s15,s14,s15
 366 02d6 C7ED127A 	 fsts s15,[r7,#72]
 217:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 218:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* Decrement the loop count */
 219:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           colCnt--;
 367              	 .loc 1 219 0
 368 02da FB8F     	 ldrh r3,[r7,#62]
 369 02dc 013B     	 subs r3,r3,#1
 370 02de FB87     	 strh r3,[r7,#62]
 371              	.L5:
 145:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         {
 372              	 .loc 1 145 0
 373 02e0 FB8F     	 ldrh r3,[r7,#62]
 374 02e2 002B     	 cmp r3,#0
 375 02e4 7FF4E5AE 	 bne .L6
 220:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         }
 221:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 222:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         /* If the columns of pSrcA is not a multiple of 4, compute any remaining MACs here.      
 223:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****          ** No loop unrolling is used. */
 224:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         colCnt = numColsA % 0x4u;
 376              	 .loc 1 224 0
 377 02e8 7B8E     	 ldrh r3,[r7,#50]
 378 02ea 03F00303 	 and r3,r3,#3
 379 02ee FB87     	 strh r3,[r7,#62]
 225:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 226:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         while(colCnt > 0u)
 380              	 .loc 1 226 0
 381 02f0 47E0     	 b .L7
 382              	.L8:
 227:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         {
 228:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
 229:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           a1 = *pIn1;
 383              	 .loc 1 229 0
 384 02f2 7B6E     	 ldr r3,[r7,#100]
 385 02f4 1B68     	 ldr r3,[r3]
 386 02f6 FB61     	 str r3,[r7,#28]
 230:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           c1 = *pIn2;
 387              	 .loc 1 230 0
 388 02f8 3B6E     	 ldr r3,[r7,#96]
 389 02fa 1B68     	 ldr r3,[r3]
 390 02fc BB61     	 str r3,[r7,#24]
 231:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 232:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           b1 = *(pIn1 + 1u);
 391              	 .loc 1 232 0
 392 02fe 7B6E     	 ldr r3,[r7,#100]
 393 0300 5B68     	 ldr r3,[r3,#4]
 394 0302 7B61     	 str r3,[r7,#20]
 233:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           d1 = *(pIn2 + 1u);
 395              	 .loc 1 233 0
 396 0304 3B6E     	 ldr r3,[r7,#96]
 397 0306 5B68     	 ldr r3,[r3,#4]
 398 0308 3B61     	 str r3,[r7,#16]
 234:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 235:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumReal1 += a1 * c1;
 399              	 .loc 1 235 0
 400 030a 97ED077A 	 flds s14,[r7,#28]
 401 030e D7ED067A 	 flds s15,[r7,#24]
 402 0312 67EE277A 	 fmuls s15,s14,s15
 403 0316 97ED157A 	 flds s14,[r7,#84]
 404 031a 77EE277A 	 fadds s15,s14,s15
 405 031e C7ED157A 	 fsts s15,[r7,#84]
 236:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumImag1 += b1 * c1;
 406              	 .loc 1 236 0
 407 0322 97ED057A 	 flds s14,[r7,#20]
 408 0326 D7ED067A 	 flds s15,[r7,#24]
 409 032a 67EE277A 	 fmuls s15,s14,s15
 410 032e 97ED147A 	 flds s14,[r7,#80]
 411 0332 77EE277A 	 fadds s15,s14,s15
 412 0336 C7ED147A 	 fsts s15,[r7,#80]
 237:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 238:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           pIn1 += 2u;
 413              	 .loc 1 238 0
 414 033a 7B6E     	 ldr r3,[r7,#100]
 415 033c 0833     	 adds r3,r3,#8
 416 033e 7B66     	 str r3,[r7,#100]
 239:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           pIn2 += 2 * numColsB;
 417              	 .loc 1 239 0
 418 0340 BB8E     	 ldrh r3,[r7,#52]
 419 0342 DB00     	 lsls r3,r3,#3
 420 0344 1A46     	 mov r2,r3
 421 0346 3B6E     	 ldr r3,[r7,#96]
 422 0348 1344     	 add r3,r3,r2
 423 034a 3B66     	 str r3,[r7,#96]
 240:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 241:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumReal2 -= b1 * d1;
 424              	 .loc 1 241 0
 425 034c 97ED057A 	 flds s14,[r7,#20]
 426 0350 D7ED047A 	 flds s15,[r7,#16]
 427 0354 67EE277A 	 fmuls s15,s14,s15
 428 0358 97ED137A 	 flds s14,[r7,#76]
 429 035c 77EE677A 	 fsubs s15,s14,s15
 430 0360 C7ED137A 	 fsts s15,[r7,#76]
 242:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumImag2 += a1 * d1;
 431              	 .loc 1 242 0
 432 0364 97ED077A 	 flds s14,[r7,#28]
 433 0368 D7ED047A 	 flds s15,[r7,#16]
 434 036c 67EE277A 	 fmuls s15,s14,s15
 435 0370 97ED127A 	 flds s14,[r7,#72]
 436 0374 77EE277A 	 fadds s15,s14,s15
 437 0378 C7ED127A 	 fsts s15,[r7,#72]
 243:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 244:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* Decrement the loop counter */
 245:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           colCnt--;
 438              	 .loc 1 245 0
 439 037c FB8F     	 ldrh r3,[r7,#62]
 440 037e 013B     	 subs r3,r3,#1
 441 0380 FB87     	 strh r3,[r7,#62]
 442              	.L7:
 226:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         {
 443              	 .loc 1 226 0
 444 0382 FB8F     	 ldrh r3,[r7,#62]
 445 0384 002B     	 cmp r3,#0
 446 0386 B4D1     	 bne .L8
 246:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         }
 247:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 248:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         sumReal1 += sumReal2;
 447              	 .loc 1 248 0
 448 0388 97ED157A 	 flds s14,[r7,#84]
 449 038c D7ED137A 	 flds s15,[r7,#76]
 450 0390 77EE277A 	 fadds s15,s14,s15
 451 0394 C7ED157A 	 fsts s15,[r7,#84]
 249:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         sumImag1 += sumImag2;
 452              	 .loc 1 249 0
 453 0398 97ED147A 	 flds s14,[r7,#80]
 454 039c D7ED127A 	 flds s15,[r7,#72]
 455 03a0 77EE277A 	 fadds s15,s14,s15
 456 03a4 C7ED147A 	 fsts s15,[r7,#80]
 250:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 251:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         /* Store the result in the destination buffer */
 252:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         *px++ = sumReal1;
 457              	 .loc 1 252 0
 458 03a8 BB6D     	 ldr r3,[r7,#88]
 459 03aa 1A1D     	 adds r2,r3,#4
 460 03ac BA65     	 str r2,[r7,#88]
 461 03ae 7A6D     	 ldr r2,[r7,#84]
 462 03b0 1A60     	 str r2,[r3]
 253:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         *px++ = sumImag1;
 463              	 .loc 1 253 0
 464 03b2 BB6D     	 ldr r3,[r7,#88]
 465 03b4 1A1D     	 adds r2,r3,#4
 466 03b6 BA65     	 str r2,[r7,#88]
 467 03b8 3A6D     	 ldr r2,[r7,#80]
 468 03ba 1A60     	 str r2,[r3]
 254:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 255:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         /* Update the pointer pIn2 to point to the  starting address of the next column */
 256:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         j++;
 469              	 .loc 1 256 0
 470 03bc B7F84230 	 ldrh r3,[r7,#66]
 471 03c0 0133     	 adds r3,r3,#1
 472 03c2 A7F84230 	 strh r3,[r7,#66]
 257:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         pIn2 = pSrcB->pData + 2u * j;
 473              	 .loc 1 257 0
 474 03c6 BB68     	 ldr r3,[r7,#8]
 475 03c8 5A68     	 ldr r2,[r3,#4]
 476 03ca B7F84230 	 ldrh r3,[r7,#66]
 477 03ce DB00     	 lsls r3,r3,#3
 478 03d0 1344     	 add r3,r3,r2
 479 03d2 3B66     	 str r3,[r7,#96]
 258:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 259:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         /* Decrement the column loop counter */
 260:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         col--;
 480              	 .loc 1 260 0
 481 03d4 B7F84630 	 ldrh r3,[r7,#70]
 482 03d8 013B     	 subs r3,r3,#1
 483 03da A7F84630 	 strh r3,[r7,#70]
 261:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 262:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       } while(col > 0u);
 484              	 .loc 1 262 0
 485 03de B7F84630 	 ldrh r3,[r7,#70]
 486 03e2 002B     	 cmp r3,#0
 487 03e4 7FF453AE 	 bne .L9
 263:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 264:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       /* Update the pointer pInA to point to the  starting address of the next row */
 265:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       i = i + numColsB;
 488              	 .loc 1 265 0
 489 03e8 B7F84420 	 ldrh r2,[r7,#68]
 490 03ec BB8E     	 ldrh r3,[r7,#52]
 491 03ee 1344     	 add r3,r3,r2
 492 03f0 A7F84430 	 strh r3,[r7,#68]
 266:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       pInA = pInA + 2 * numColsA;
 493              	 .loc 1 266 0
 494 03f4 7B8E     	 ldrh r3,[r7,#50]
 495 03f6 DB00     	 lsls r3,r3,#3
 496 03f8 1A46     	 mov r2,r3
 497 03fa FB6D     	 ldr r3,[r7,#92]
 498 03fc 1344     	 add r3,r3,r2
 499 03fe FB65     	 str r3,[r7,#92]
 267:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 268:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       /* Decrement the row loop counter */
 269:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       row--;
 500              	 .loc 1 269 0
 501 0400 B7F84030 	 ldrh r3,[r7,#64]
 502 0404 013B     	 subs r3,r3,#1
 503 0406 A7F84030 	 strh r3,[r7,#64]
 270:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 271:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****     } while(row > 0u);
 504              	 .loc 1 271 0
 505 040a B7F84030 	 ldrh r3,[r7,#64]
 506 040e 002B     	 cmp r3,#0
 507 0410 7FF42DAE 	 bne .L3
 272:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 273:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****     /* Set status as ARM_MATH_SUCCESS */
 274:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****     status = ARM_MATH_SUCCESS;
 508              	 .loc 1 274 0
 509 0414 0023     	 movs r3,#0
 510 0416 87F83D30 	 strb r3,[r7,#61]
 511              	.L4:
 275:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   }
 276:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 277:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   /* Return to application */
 278:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   return (status);
 512              	 .loc 1 278 0
 513 041a 97F83D30 	 ldrb r3,[r7,#61]
 514 041e 5BB2     	 sxtb r3,r3
 279:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** }
 515              	 .loc 1 279 0
 516 0420 1846     	 mov r0,r3
 517 0422 6C37     	 adds r7,r7,#108
 518              	.LCFI3:
 519              	 .cfi_def_cfa_offset 4
 520 0424 BD46     	 mov sp,r7
 521              	.LCFI4:
 522              	 .cfi_def_cfa_register 13
 523              	 
 524 0426 5DF8047B 	 ldr r7,[sp],#4
 525              	.LCFI5:
 526              	 .cfi_restore 7
 527              	 .cfi_def_cfa_offset 0
 528 042a 7047     	 bx lr
 529              	 .cfi_endproc
 530              	.LFE139:
 532              	 .text
 533              	.Letext0:
 534              	 .file 2 "c:\\davev4\\dave-4.1.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 535              	 .file 3 "c:\\davev4\\dave-4.1.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 536              	 .file 4 "C:\\Workspaces\\DAVE-4.1\\Flightcontroller_PWM_CopterRocks_Working\\Dave\\Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_mat_cmplx_mult_f32.c
    {standard input}:20     .text.arm_mat_cmplx_mult_f32:00000000 $t
    {standard input}:25     .text.arm_mat_cmplx_mult_f32:00000000 arm_mat_cmplx_mult_f32
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
