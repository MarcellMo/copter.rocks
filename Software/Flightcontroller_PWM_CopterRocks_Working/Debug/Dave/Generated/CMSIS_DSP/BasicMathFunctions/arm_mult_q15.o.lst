   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_mult_q15.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.arm_mult_q15,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_mult_q15
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_mult_q15:
  26              	.LFB139:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c"
   1:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** /* ----------------------------------------------------------------------    
   2:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** * Copyright (C) 2010-2014 ARM Limited. All rights reserved.    
   3:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** *    
   4:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** * $Date:        12. March 2014
   5:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** * $Revision: 	V1.4.4
   6:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** *    
   7:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** * Project: 	    CMSIS DSP Library    
   8:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** * Title:	    arm_mult_q15.c    
   9:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** *    
  10:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** * Description:	Q15 vector multiplication.    
  11:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** *    
  12:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** * Target Processor: Cortex-M4/Cortex-M3/Cortex-M0
  13:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** *  
  14:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** * Redistribution and use in source and binary forms, with or without 
  15:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** * modification, are permitted provided that the following conditions
  16:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** * are met:
  17:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** *   - Redistributions of source code must retain the above copyright
  18:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** *     notice, this list of conditions and the following disclaimer.
  19:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** *   - Redistributions in binary form must reproduce the above copyright
  20:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** *     notice, this list of conditions and the following disclaimer in
  21:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** *     the documentation and/or other materials provided with the 
  22:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** *     distribution.
  23:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** *   - Neither the name of ARM LIMITED nor the names of its contributors
  24:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** *     may be used to endorse or promote products derived from this
  25:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** *     software without specific prior written permission.
  26:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** *
  27:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  28:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  29:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  30:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE 
  31:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  32:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  33:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  34:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  35:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  36:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** * POSSIBILITY OF SUCH DAMAGE.   
  39:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** * -------------------------------------------------------------------- */
  40:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
  41:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  42:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
  43:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** /**    
  44:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  * @ingroup groupMath    
  45:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  */
  46:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
  47:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** /**    
  48:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  * @addtogroup BasicMult    
  49:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  * @{    
  50:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  */
  51:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
  52:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
  53:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** /**    
  54:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  * @brief           Q15 vector multiplication    
  55:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  * @param[in]       *pSrcA points to the first input vector    
  56:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  * @param[in]       *pSrcB points to the second input vector    
  57:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  * @param[out]      *pDst points to the output vector    
  58:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  * @param[in]       blockSize number of samples in each vector    
  59:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  * @return none.    
  60:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  *    
  61:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  * <b>Scaling and Overflow Behavior:</b>    
  62:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  * \par    
  63:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  * The function uses saturating arithmetic.    
  64:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  * Results outside of the allowable Q15 range [0x8000 0x7FFF] will be saturated.    
  65:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****  */
  66:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
  67:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** void arm_mult_q15(
  68:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   q15_t * pSrcA,
  69:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   q15_t * pSrcB,
  70:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   q15_t * pDst,
  71:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   uint32_t blockSize)
  72:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** {
  28              	 .loc 1 72 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33 0000 80B4     	 push {r7}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 4
  36              	 .cfi_offset 7,-4
  37 0002 A3B0     	 sub sp,sp,#140
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 144
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
  43 0006 F860     	 str r0,[r7,#12]
  44 0008 B960     	 str r1,[r7,#8]
  45 000a 7A60     	 str r2,[r7,#4]
  46 000c 3B60     	 str r3,[r7]
  73:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   uint32_t blkCnt;                               /* loop counters */
  74:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
  75:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** #ifndef ARM_MATH_CM0_FAMILY
  76:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
  77:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** /* Run the below code for Cortex-M4 and Cortex-M3 */
  78:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   q31_t inA1, inA2, inB1, inB2;                  /* temporary input variables */
  79:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   q15_t out1, out2, out3, out4;                  /* temporary output variables */
  80:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   q31_t mul1, mul2, mul3, mul4;                  /* temporary variables */
  81:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
  82:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   /* loop Unrolling */
  83:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   blkCnt = blockSize >> 2u;
  47              	 .loc 1 83 0
  48 000e 3B68     	 ldr r3,[r7]
  49 0010 9B08     	 lsrs r3,r3,#2
  50 0012 C7F88430 	 str r3,[r7,#132]
  84:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
  85:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.        
  86:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
  87:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   while(blkCnt > 0u)
  51              	 .loc 1 87 0
  52 0016 94E0     	 b .L2
  53              	.L3:
  88:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   {
  89:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     /* read two samples at a time from sourceA */
  90:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     inA1 = *__SIMD32(pSrcA)++;
  54              	 .loc 1 90 0
  55 0018 07F10C02 	 add r2,r7,#12
  56 001c 1368     	 ldr r3,[r2]
  57 001e 191D     	 adds r1,r3,#4
  58 0020 1160     	 str r1,[r2]
  59 0022 1B68     	 ldr r3,[r3]
  60 0024 C7F88030 	 str r3,[r7,#128]
  91:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     /* read two samples at a time from sourceB */
  92:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     inB1 = *__SIMD32(pSrcB)++;
  61              	 .loc 1 92 0
  62 0028 07F10802 	 add r2,r7,#8
  63 002c 1368     	 ldr r3,[r2]
  64 002e 191D     	 adds r1,r3,#4
  65 0030 1160     	 str r1,[r2]
  66 0032 1B68     	 ldr r3,[r3]
  67 0034 FB67     	 str r3,[r7,#124]
  93:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     /* read two samples at a time from sourceA */
  94:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     inA2 = *__SIMD32(pSrcA)++;
  68              	 .loc 1 94 0
  69 0036 07F10C02 	 add r2,r7,#12
  70 003a 1368     	 ldr r3,[r2]
  71 003c 191D     	 adds r1,r3,#4
  72 003e 1160     	 str r1,[r2]
  73 0040 1B68     	 ldr r3,[r3]
  74 0042 BB67     	 str r3,[r7,#120]
  95:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     /* read two samples at a time from sourceB */
  96:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     inB2 = *__SIMD32(pSrcB)++;
  75              	 .loc 1 96 0
  76 0044 07F10802 	 add r2,r7,#8
  77 0048 1368     	 ldr r3,[r2]
  78 004a 191D     	 adds r1,r3,#4
  79 004c 1160     	 str r1,[r2]
  80 004e 1B68     	 ldr r3,[r3]
  81 0050 7B67     	 str r3,[r7,#116]
  97:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
  98:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     /* multiply mul = sourceA * sourceB */
  99:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     mul1 = (q31_t) ((q15_t) (inA1 >> 16) * (q15_t) (inB1 >> 16));
  82              	 .loc 1 99 0
  83 0052 D7F88030 	 ldr r3,[r7,#128]
  84 0056 1B14     	 asrs r3,r3,#16
  85 0058 9BB2     	 uxth r3,r3
  86 005a 1BB2     	 sxth r3,r3
  87 005c FA6F     	 ldr r2,[r7,#124]
  88 005e 1214     	 asrs r2,r2,#16
  89 0060 92B2     	 uxth r2,r2
  90 0062 12B2     	 sxth r2,r2
  91 0064 02FB03F3 	 mul r3,r2,r3
  92 0068 3B67     	 str r3,[r7,#112]
 100:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     mul2 = (q31_t) ((q15_t) inA1 * (q15_t) inB1);
  93              	 .loc 1 100 0
  94 006a D7F88030 	 ldr r3,[r7,#128]
  95 006e 9BB2     	 uxth r3,r3
  96 0070 1BB2     	 sxth r3,r3
  97 0072 FA6F     	 ldr r2,[r7,#124]
  98 0074 92B2     	 uxth r2,r2
  99 0076 12B2     	 sxth r2,r2
 100 0078 02FB03F3 	 mul r3,r2,r3
 101 007c FB66     	 str r3,[r7,#108]
 101:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     mul3 = (q31_t) ((q15_t) (inA2 >> 16) * (q15_t) (inB2 >> 16));
 102              	 .loc 1 101 0
 103 007e BB6F     	 ldr r3,[r7,#120]
 104 0080 1B14     	 asrs r3,r3,#16
 105 0082 9BB2     	 uxth r3,r3
 106 0084 1BB2     	 sxth r3,r3
 107 0086 7A6F     	 ldr r2,[r7,#116]
 108 0088 1214     	 asrs r2,r2,#16
 109 008a 92B2     	 uxth r2,r2
 110 008c 12B2     	 sxth r2,r2
 111 008e 02FB03F3 	 mul r3,r2,r3
 112 0092 BB66     	 str r3,[r7,#104]
 102:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     mul4 = (q31_t) ((q15_t) inA2 * (q15_t) inB2);
 113              	 .loc 1 102 0
 114 0094 BB6F     	 ldr r3,[r7,#120]
 115 0096 9BB2     	 uxth r3,r3
 116 0098 1BB2     	 sxth r3,r3
 117 009a 7A6F     	 ldr r2,[r7,#116]
 118 009c 92B2     	 uxth r2,r2
 119 009e 12B2     	 sxth r2,r2
 120 00a0 02FB03F3 	 mul r3,r2,r3
 121 00a4 7B66     	 str r3,[r7,#100]
 122              	.LBB2:
 103:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
 104:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     /* saturate result to 16 bit */
 105:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     out1 = (q15_t) __SSAT(mul1 >> 15, 16);
 123              	 .loc 1 105 0
 124 00a6 3B6F     	 ldr r3,[r7,#112]
 125 00a8 DB13     	 asrs r3,r3,#15
 126 00aa 3B66     	 str r3,[r7,#96]
 127 00ac 3B6E     	 ldr r3,[r7,#96]
 128              	
 129 00ae 03F30F03 	 ssat r3,#16,r3
 130              	
 131              	 .thumb
 132 00b2 FB65     	 str r3,[r7,#92]
 133 00b4 FB6D     	 ldr r3,[r7,#92]
 134              	.LBE2:
 135 00b6 A7F85A30 	 strh r3,[r7,#90]
 136              	.LBB3:
 106:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     out2 = (q15_t) __SSAT(mul2 >> 15, 16);
 137              	 .loc 1 106 0
 138 00ba FB6E     	 ldr r3,[r7,#108]
 139 00bc DB13     	 asrs r3,r3,#15
 140 00be 7B65     	 str r3,[r7,#84]
 141 00c0 7B6D     	 ldr r3,[r7,#84]
 142              	
 143 00c2 03F30F03 	 ssat r3,#16,r3
 144              	
 145              	 .thumb
 146 00c6 3B65     	 str r3,[r7,#80]
 147 00c8 3B6D     	 ldr r3,[r7,#80]
 148              	.LBE3:
 149 00ca A7F84E30 	 strh r3,[r7,#78]
 150              	.LBB4:
 107:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     out3 = (q15_t) __SSAT(mul3 >> 15, 16);
 151              	 .loc 1 107 0
 152 00ce BB6E     	 ldr r3,[r7,#104]
 153 00d0 DB13     	 asrs r3,r3,#15
 154 00d2 BB64     	 str r3,[r7,#72]
 155 00d4 BB6C     	 ldr r3,[r7,#72]
 156              	
 157 00d6 03F30F03 	 ssat r3,#16,r3
 158              	
 159              	 .thumb
 160 00da 7B64     	 str r3,[r7,#68]
 161 00dc 7B6C     	 ldr r3,[r7,#68]
 162              	.LBE4:
 163 00de A7F84230 	 strh r3,[r7,#66]
 164              	.LBB5:
 108:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     out4 = (q15_t) __SSAT(mul4 >> 15, 16);
 165              	 .loc 1 108 0
 166 00e2 7B6E     	 ldr r3,[r7,#100]
 167 00e4 DB13     	 asrs r3,r3,#15
 168 00e6 FB63     	 str r3,[r7,#60]
 169 00e8 FB6B     	 ldr r3,[r7,#60]
 170              	
 171 00ea 03F30F03 	 ssat r3,#16,r3
 172              	
 173              	 .thumb
 174 00ee BB63     	 str r3,[r7,#56]
 175 00f0 BB6B     	 ldr r3,[r7,#56]
 176              	.LBE5:
 177 00f2 FB86     	 strh r3,[r7,#54]
 109:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
 110:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     /* store the result */
 111:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** #ifndef ARM_MATH_BIG_ENDIAN
 112:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
 113:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     *__SIMD32(pDst)++ = __PKHBT(out2, out1, 16);
 178              	 .loc 1 113 0
 179 00f4 3A1D     	 adds r2,r7,#4
 180 00f6 1368     	 ldr r3,[r2]
 181 00f8 191D     	 adds r1,r3,#4
 182 00fa 1160     	 str r1,[r2]
 183              	.LBB6:
 184 00fc B7F94E20 	 ldrsh r2,[r7,#78]
 185 0100 3A63     	 str r2,[r7,#48]
 186 0102 B7F95A20 	 ldrsh r2,[r7,#90]
 187 0106 FA62     	 str r2,[r7,#44]
 188 0108 3A6B     	 ldr r2,[r7,#48]
 189 010a F96A     	 ldr r1,[r7,#44]
 190              	
 191 010c C2EA0142 	 pkhbt r2,r2,r1,lsl#16
 192              	
 193              	 .thumb
 194 0110 BA62     	 str r2,[r7,#40]
 195 0112 BA6A     	 ldr r2,[r7,#40]
 196              	.LBE6:
 197 0114 1A60     	 str r2,[r3]
 114:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     *__SIMD32(pDst)++ = __PKHBT(out4, out3, 16);
 198              	 .loc 1 114 0
 199 0116 3A1D     	 adds r2,r7,#4
 200 0118 1368     	 ldr r3,[r2]
 201 011a 191D     	 adds r1,r3,#4
 202 011c 1160     	 str r1,[r2]
 203              	.LBB7:
 204 011e B7F93620 	 ldrsh r2,[r7,#54]
 205 0122 7A62     	 str r2,[r7,#36]
 206 0124 B7F94220 	 ldrsh r2,[r7,#66]
 207 0128 3A62     	 str r2,[r7,#32]
 208 012a 7A6A     	 ldr r2,[r7,#36]
 209 012c 396A     	 ldr r1,[r7,#32]
 210              	
 211 012e C2EA0142 	 pkhbt r2,r2,r1,lsl#16
 212              	
 213              	 .thumb
 214 0132 FA61     	 str r2,[r7,#28]
 215 0134 FA69     	 ldr r2,[r7,#28]
 216              	.LBE7:
 217 0136 1A60     	 str r2,[r3]
 115:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
 116:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** #else
 117:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
 118:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     *__SIMD32(pDst)++ = __PKHBT(out2, out1, 16);
 119:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     *__SIMD32(pDst)++ = __PKHBT(out4, out3, 16);
 120:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
 121:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** #endif //      #ifndef ARM_MATH_BIG_ENDIAN
 122:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
 123:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     /* Decrement the blockSize loop counter */
 124:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     blkCnt--;
 218              	 .loc 1 124 0
 219 0138 D7F88430 	 ldr r3,[r7,#132]
 220 013c 013B     	 subs r3,r3,#1
 221 013e C7F88430 	 str r3,[r7,#132]
 222              	.L2:
  87:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   {
 223              	 .loc 1 87 0
 224 0142 D7F88430 	 ldr r3,[r7,#132]
 225 0146 002B     	 cmp r3,#0
 226 0148 7FF466AF 	 bne .L3
 125:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   }
 126:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
 127:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
 128:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****    ** No loop unrolling is used. */
 129:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   blkCnt = blockSize % 0x4u;
 227              	 .loc 1 129 0
 228 014c 3B68     	 ldr r3,[r7]
 229 014e 03F00303 	 and r3,r3,#3
 230 0152 C7F88430 	 str r3,[r7,#132]
 130:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
 131:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** #else
 132:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
 133:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   /* Run the below code for Cortex-M0 */
 134:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
 135:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   /* Initialize blkCnt with number of samples */
 136:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   blkCnt = blockSize;
 137:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
 138:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** #endif /* #ifndef ARM_MATH_CM0_FAMILY */
 139:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
 140:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
 141:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   while(blkCnt > 0u)
 231              	 .loc 1 141 0
 232 0156 1CE0     	 b .L4
 233              	.L5:
 142:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   {
 143:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     /* C = A * B */
 144:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     /* Multiply the inputs and store the result in the destination buffer */
 145:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     *pDst++ = (q15_t) __SSAT((((q31_t) (*pSrcA++) * (*pSrcB++)) >> 15), 16);
 234              	 .loc 1 145 0
 235 0158 7B68     	 ldr r3,[r7,#4]
 236 015a 9A1C     	 adds r2,r3,#2
 237 015c 7A60     	 str r2,[r7,#4]
 238              	.LBB8:
 239 015e FA68     	 ldr r2,[r7,#12]
 240 0160 911C     	 adds r1,r2,#2
 241 0162 F960     	 str r1,[r7,#12]
 242 0164 1288     	 ldrh r2,[r2]
 243 0166 11B2     	 sxth r1,r2
 244 0168 BA68     	 ldr r2,[r7,#8]
 245 016a 901C     	 adds r0,r2,#2
 246 016c B860     	 str r0,[r7,#8]
 247 016e 1288     	 ldrh r2,[r2]
 248 0170 12B2     	 sxth r2,r2
 249 0172 02FB01F2 	 mul r2,r2,r1
 250 0176 D213     	 asrs r2,r2,#15
 251 0178 BA61     	 str r2,[r7,#24]
 252 017a BA69     	 ldr r2,[r7,#24]
 253              	
 254 017c 02F30F02 	 ssat r2,#16,r2
 255              	
 256              	 .thumb
 257 0180 7A61     	 str r2,[r7,#20]
 258 0182 7A69     	 ldr r2,[r7,#20]
 259              	.LBE8:
 260 0184 92B2     	 uxth r2,r2
 261 0186 1A80     	 strh r2,[r3]
 146:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** 
 147:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     /* Decrement the blockSize loop counter */
 148:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****     blkCnt--;
 262              	 .loc 1 148 0
 263 0188 D7F88430 	 ldr r3,[r7,#132]
 264 018c 013B     	 subs r3,r3,#1
 265 018e C7F88430 	 str r3,[r7,#132]
 266              	.L4:
 141:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   {
 267              	 .loc 1 141 0
 268 0192 D7F88430 	 ldr r3,[r7,#132]
 269 0196 002B     	 cmp r3,#0
 270 0198 DED1     	 bne .L5
 149:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c ****   }
 150:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q15.c **** }
 271              	 .loc 1 150 0
 272 019a 8C37     	 adds r7,r7,#140
 273              	.LCFI3:
 274              	 .cfi_def_cfa_offset 4
 275 019c BD46     	 mov sp,r7
 276              	.LCFI4:
 277              	 .cfi_def_cfa_register 13
 278              	 
 279 019e 5DF8047B 	 ldr r7,[sp],#4
 280              	.LCFI5:
 281              	 .cfi_restore 7
 282              	 .cfi_def_cfa_offset 0
 283 01a2 7047     	 bx lr
 284              	 .cfi_endproc
 285              	.LFE139:
 287              	 .text
 288              	.Letext0:
 289              	 .file 2 "c:\\davev4\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 290              	 .file 3 "c:\\davev4\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 291              	 .file 4 "C:/Workspaces/DAVE-4.3/WS_2016_09_02/Flightcontroller_PWM_CopterRocks_Working/Dave/Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_mult_q15.c
    {standard input}:20     .text.arm_mult_q15:00000000 $t
    {standard input}:25     .text.arm_mult_q15:00000000 arm_mult_q15
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
