   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_scale_q15.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.arm_scale_q15,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_scale_q15
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_scale_q15:
  26              	.LFB139:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c"
   1:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** /* ----------------------------------------------------------------------    
   2:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** * Copyright (C) 2010-2014 ARM Limited. All rights reserved.    
   3:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** *    
   4:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** * $Date:        12. March 2014
   5:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** * $Revision: 	V1.4.4
   6:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** *    
   7:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** * Project: 	    CMSIS DSP Library    
   8:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** * Title:		arm_scale_q15.c    
   9:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** *    
  10:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** * Description:	Multiplies a Q15 vector by a scalar.    
  11:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** *    
  12:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** * Target Processor: Cortex-M4/Cortex-M3/Cortex-M0
  13:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** *  
  14:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** * Redistribution and use in source and binary forms, with or without 
  15:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** * modification, are permitted provided that the following conditions
  16:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** * are met:
  17:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** *   - Redistributions of source code must retain the above copyright
  18:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** *     notice, this list of conditions and the following disclaimer.
  19:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** *   - Redistributions in binary form must reproduce the above copyright
  20:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** *     notice, this list of conditions and the following disclaimer in
  21:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** *     the documentation and/or other materials provided with the 
  22:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** *     distribution.
  23:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** *   - Neither the name of ARM LIMITED nor the names of its contributors
  24:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** *     may be used to endorse or promote products derived from this
  25:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** *     software without specific prior written permission.
  26:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** *
  27:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  28:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  29:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  30:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE 
  31:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  32:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  33:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  34:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  35:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  36:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** * POSSIBILITY OF SUCH DAMAGE.   
  39:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** * -------------------------------------------------------------------- */
  40:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
  41:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  42:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
  43:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** /**    
  44:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  * @ingroup groupMath    
  45:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  */
  46:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
  47:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** /**    
  48:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  * @addtogroup scale    
  49:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  * @{    
  50:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  */
  51:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
  52:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** /**    
  53:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  * @brief Multiplies a Q15 vector by a scalar.    
  54:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  * @param[in]       *pSrc points to the input vector    
  55:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  * @param[in]       scaleFract fractional portion of the scale value    
  56:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  * @param[in]       shift number of bits to shift the result by    
  57:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  * @param[out]      *pDst points to the output vector    
  58:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  * @param[in]       blockSize number of samples in the vector    
  59:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  * @return none.    
  60:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  *    
  61:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  * <b>Scaling and Overflow Behavior:</b>    
  62:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  * \par    
  63:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  * The input data <code>*pSrc</code> and <code>scaleFract</code> are in 1.15 format.    
  64:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  * These are multiplied to yield a 2.30 intermediate result and this is shifted with saturation to 
  65:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****  */
  66:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
  67:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
  68:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** void arm_scale_q15(
  69:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   q15_t * pSrc,
  70:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   q15_t scaleFract,
  71:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   int8_t shift,
  72:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   q15_t * pDst,
  73:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   uint32_t blockSize)
  74:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** {
  28              	 .loc 1 74 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33 0000 80B4     	 push {r7}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 4
  36              	 .cfi_offset 7,-4
  37 0002 A1B0     	 sub sp,sp,#132
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 136
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
  43 0006 F860     	 str r0,[r7,#12]
  44 0008 7B60     	 str r3,[r7,#4]
  45 000a 0B46     	 mov r3,r1
  46 000c 7B81     	 strh r3,[r7,#10]
  47 000e 1346     	 mov r3,r2
  48 0010 7B72     	 strb r3,[r7,#9]
  75:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   int8_t kShift = 15 - shift;                    /* shift to apply after scaling */
  49              	 .loc 1 75 0
  50 0012 7B7A     	 ldrb r3,[r7,#9]
  51 0014 C3F10F03 	 rsb r3,r3,#15
  52 0018 DBB2     	 uxtb r3,r3
  53 001a 87F87B30 	 strb r3,[r7,#123]
  76:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   uint32_t blkCnt;                               /* loop counter */
  77:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
  78:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** #ifndef ARM_MATH_CM0_FAMILY
  79:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
  80:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** /* Run the below code for Cortex-M4 and Cortex-M3 */
  81:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   q15_t in1, in2, in3, in4;
  82:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   q31_t inA1, inA2;                              /* Temporary variables */
  83:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   q31_t out1, out2, out3, out4;
  84:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
  85:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
  86:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   /*loop Unrolling */
  87:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   blkCnt = blockSize >> 2u;
  54              	 .loc 1 87 0
  55 001e D7F88830 	 ldr r3,[r7,#136]
  56 0022 9B08     	 lsrs r3,r3,#2
  57 0024 FB67     	 str r3,[r7,#124]
  88:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
  89:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.        
  90:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
  91:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   while(blkCnt > 0u)
  58              	 .loc 1 91 0
  59 0026 8EE0     	 b .L2
  60              	.L3:
  92:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   {
  93:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     /* Reading 2 inputs from memory */
  94:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     inA1 = *__SIMD32(pSrc)++;
  61              	 .loc 1 94 0
  62 0028 07F10C02 	 add r2,r7,#12
  63 002c 1368     	 ldr r3,[r2]
  64 002e 191D     	 adds r1,r3,#4
  65 0030 1160     	 str r1,[r2]
  66 0032 1B68     	 ldr r3,[r3]
  67 0034 7B67     	 str r3,[r7,#116]
  95:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     inA2 = *__SIMD32(pSrc)++;
  68              	 .loc 1 95 0
  69 0036 07F10C02 	 add r2,r7,#12
  70 003a 1368     	 ldr r3,[r2]
  71 003c 191D     	 adds r1,r3,#4
  72 003e 1160     	 str r1,[r2]
  73 0040 1B68     	 ldr r3,[r3]
  74 0042 3B67     	 str r3,[r7,#112]
  96:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
  97:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     /* C = A * scale */
  98:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     /* Scale the inputs and then store the 2 results in the destination buffer        
  99:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****      * in single cycle by packing the outputs */
 100:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     out1 = (q31_t) ((q15_t) (inA1 >> 16) * scaleFract);
  75              	 .loc 1 100 0
  76 0044 7B6F     	 ldr r3,[r7,#116]
  77 0046 1B14     	 asrs r3,r3,#16
  78 0048 9BB2     	 uxth r3,r3
  79 004a 1BB2     	 sxth r3,r3
  80 004c B7F90A20 	 ldrsh r2,[r7,#10]
  81 0050 02FB03F3 	 mul r3,r2,r3
  82 0054 FB66     	 str r3,[r7,#108]
 101:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     out2 = (q31_t) ((q15_t) inA1 * scaleFract);
  83              	 .loc 1 101 0
  84 0056 7B6F     	 ldr r3,[r7,#116]
  85 0058 9BB2     	 uxth r3,r3
  86 005a 1BB2     	 sxth r3,r3
  87 005c B7F90A20 	 ldrsh r2,[r7,#10]
  88 0060 02FB03F3 	 mul r3,r2,r3
  89 0064 BB66     	 str r3,[r7,#104]
 102:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     out3 = (q31_t) ((q15_t) (inA2 >> 16) * scaleFract);
  90              	 .loc 1 102 0
  91 0066 3B6F     	 ldr r3,[r7,#112]
  92 0068 1B14     	 asrs r3,r3,#16
  93 006a 9BB2     	 uxth r3,r3
  94 006c 1BB2     	 sxth r3,r3
  95 006e B7F90A20 	 ldrsh r2,[r7,#10]
  96 0072 02FB03F3 	 mul r3,r2,r3
  97 0076 7B66     	 str r3,[r7,#100]
 103:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     out4 = (q31_t) ((q15_t) inA2 * scaleFract);
  98              	 .loc 1 103 0
  99 0078 3B6F     	 ldr r3,[r7,#112]
 100 007a 9BB2     	 uxth r3,r3
 101 007c 1BB2     	 sxth r3,r3
 102 007e B7F90A20 	 ldrsh r2,[r7,#10]
 103 0082 02FB03F3 	 mul r3,r2,r3
 104 0086 3B66     	 str r3,[r7,#96]
 104:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
 105:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     /* apply shifting */
 106:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     out1 = out1 >> kShift;
 105              	 .loc 1 106 0
 106 0088 97F97B30 	 ldrsb r3,[r7,#123]
 107 008c FA6E     	 ldr r2,[r7,#108]
 108 008e 42FA03F3 	 asr r3,r2,r3
 109 0092 FB66     	 str r3,[r7,#108]
 107:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     out2 = out2 >> kShift;
 110              	 .loc 1 107 0
 111 0094 97F97B30 	 ldrsb r3,[r7,#123]
 112 0098 BA6E     	 ldr r2,[r7,#104]
 113 009a 42FA03F3 	 asr r3,r2,r3
 114 009e BB66     	 str r3,[r7,#104]
 108:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     out3 = out3 >> kShift;
 115              	 .loc 1 108 0
 116 00a0 97F97B30 	 ldrsb r3,[r7,#123]
 117 00a4 7A6E     	 ldr r2,[r7,#100]
 118 00a6 42FA03F3 	 asr r3,r2,r3
 119 00aa 7B66     	 str r3,[r7,#100]
 109:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     out4 = out4 >> kShift;
 120              	 .loc 1 109 0
 121 00ac 97F97B30 	 ldrsb r3,[r7,#123]
 122 00b0 3A6E     	 ldr r2,[r7,#96]
 123 00b2 42FA03F3 	 asr r3,r2,r3
 124 00b6 3B66     	 str r3,[r7,#96]
 125              	.LBB2:
 110:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
 111:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     /* saturate the output */
 112:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     in1 = (q15_t) (__SSAT(out1, 16));
 126              	 .loc 1 112 0
 127 00b8 FB6E     	 ldr r3,[r7,#108]
 128 00ba FB65     	 str r3,[r7,#92]
 129 00bc FB6D     	 ldr r3,[r7,#92]
 130              	
 131 00be 03F30F03 	 ssat r3,#16,r3
 132              	
 133              	 .thumb
 134 00c2 BB65     	 str r3,[r7,#88]
 135 00c4 BB6D     	 ldr r3,[r7,#88]
 136              	.LBE2:
 137 00c6 A7F85630 	 strh r3,[r7,#86]
 138              	.LBB3:
 113:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     in2 = (q15_t) (__SSAT(out2, 16));
 139              	 .loc 1 113 0
 140 00ca BB6E     	 ldr r3,[r7,#104]
 141 00cc 3B65     	 str r3,[r7,#80]
 142 00ce 3B6D     	 ldr r3,[r7,#80]
 143              	
 144 00d0 03F30F03 	 ssat r3,#16,r3
 145              	
 146              	 .thumb
 147 00d4 FB64     	 str r3,[r7,#76]
 148 00d6 FB6C     	 ldr r3,[r7,#76]
 149              	.LBE3:
 150 00d8 A7F84A30 	 strh r3,[r7,#74]
 151              	.LBB4:
 114:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     in3 = (q15_t) (__SSAT(out3, 16));
 152              	 .loc 1 114 0
 153 00dc 7B6E     	 ldr r3,[r7,#100]
 154 00de 7B64     	 str r3,[r7,#68]
 155 00e0 7B6C     	 ldr r3,[r7,#68]
 156              	
 157 00e2 03F30F03 	 ssat r3,#16,r3
 158              	
 159              	 .thumb
 160 00e6 3B64     	 str r3,[r7,#64]
 161 00e8 3B6C     	 ldr r3,[r7,#64]
 162              	.LBE4:
 163 00ea FB87     	 strh r3,[r7,#62]
 164              	.LBB5:
 115:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     in4 = (q15_t) (__SSAT(out4, 16));
 165              	 .loc 1 115 0
 166 00ec 3B6E     	 ldr r3,[r7,#96]
 167 00ee BB63     	 str r3,[r7,#56]
 168 00f0 BB6B     	 ldr r3,[r7,#56]
 169              	
 170 00f2 03F30F03 	 ssat r3,#16,r3
 171              	
 172              	 .thumb
 173 00f6 7B63     	 str r3,[r7,#52]
 174 00f8 7B6B     	 ldr r3,[r7,#52]
 175              	.LBE5:
 176 00fa 7B86     	 strh r3,[r7,#50]
 116:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
 117:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     /* store the result to destination */
 118:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     *__SIMD32(pDst)++ = __PKHBT(in2, in1, 16);
 177              	 .loc 1 118 0
 178 00fc 3A1D     	 adds r2,r7,#4
 179 00fe 1368     	 ldr r3,[r2]
 180 0100 191D     	 adds r1,r3,#4
 181 0102 1160     	 str r1,[r2]
 182              	.LBB6:
 183 0104 B7F94A20 	 ldrsh r2,[r7,#74]
 184 0108 FA62     	 str r2,[r7,#44]
 185 010a B7F95620 	 ldrsh r2,[r7,#86]
 186 010e BA62     	 str r2,[r7,#40]
 187 0110 FA6A     	 ldr r2,[r7,#44]
 188 0112 B96A     	 ldr r1,[r7,#40]
 189              	
 190 0114 C2EA0142 	 pkhbt r2,r2,r1,lsl#16
 191              	
 192              	 .thumb
 193 0118 7A62     	 str r2,[r7,#36]
 194 011a 7A6A     	 ldr r2,[r7,#36]
 195              	.LBE6:
 196 011c 1A60     	 str r2,[r3]
 119:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     *__SIMD32(pDst)++ = __PKHBT(in4, in3, 16);
 197              	 .loc 1 119 0
 198 011e 3A1D     	 adds r2,r7,#4
 199 0120 1368     	 ldr r3,[r2]
 200 0122 191D     	 adds r1,r3,#4
 201 0124 1160     	 str r1,[r2]
 202              	.LBB7:
 203 0126 B7F93220 	 ldrsh r2,[r7,#50]
 204 012a 3A62     	 str r2,[r7,#32]
 205 012c B7F93E20 	 ldrsh r2,[r7,#62]
 206 0130 FA61     	 str r2,[r7,#28]
 207 0132 3A6A     	 ldr r2,[r7,#32]
 208 0134 F969     	 ldr r1,[r7,#28]
 209              	
 210 0136 C2EA0142 	 pkhbt r2,r2,r1,lsl#16
 211              	
 212              	 .thumb
 213 013a BA61     	 str r2,[r7,#24]
 214 013c BA69     	 ldr r2,[r7,#24]
 215              	.LBE7:
 216 013e 1A60     	 str r2,[r3]
 120:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
 121:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     /* Decrement the loop counter */
 122:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     blkCnt--;
 217              	 .loc 1 122 0
 218 0140 FB6F     	 ldr r3,[r7,#124]
 219 0142 013B     	 subs r3,r3,#1
 220 0144 FB67     	 str r3,[r7,#124]
 221              	.L2:
  91:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   {
 222              	 .loc 1 91 0
 223 0146 FB6F     	 ldr r3,[r7,#124]
 224 0148 002B     	 cmp r3,#0
 225 014a 7FF46DAF 	 bne .L3
 123:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   }
 124:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
 125:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
 126:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****    ** No loop unrolling is used. */
 127:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   blkCnt = blockSize % 0x4u;
 226              	 .loc 1 127 0
 227 014e D7F88830 	 ldr r3,[r7,#136]
 228 0152 03F00303 	 and r3,r3,#3
 229 0156 FB67     	 str r3,[r7,#124]
 128:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
 129:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   while(blkCnt > 0u)
 230              	 .loc 1 129 0
 231 0158 1AE0     	 b .L4
 232              	.L5:
 130:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   {
 131:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     /* C = A * scale */
 132:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     /* Scale the input and then store the result in the destination buffer. */
 133:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     *pDst++ = (q15_t) (__SSAT(((*pSrc++) * scaleFract) >> kShift, 16));
 233              	 .loc 1 133 0
 234 015a 7B68     	 ldr r3,[r7,#4]
 235 015c 9A1C     	 adds r2,r3,#2
 236 015e 7A60     	 str r2,[r7,#4]
 237              	.LBB8:
 238 0160 FA68     	 ldr r2,[r7,#12]
 239 0162 911C     	 adds r1,r2,#2
 240 0164 F960     	 str r1,[r7,#12]
 241 0166 1288     	 ldrh r2,[r2]
 242 0168 12B2     	 sxth r2,r2
 243 016a B7F90A10 	 ldrsh r1,[r7,#10]
 244 016e 01FB02F1 	 mul r1,r1,r2
 245 0172 97F97B20 	 ldrsb r2,[r7,#123]
 246 0176 41FA02F2 	 asr r2,r1,r2
 247 017a 7A61     	 str r2,[r7,#20]
 248 017c 7A69     	 ldr r2,[r7,#20]
 249              	
 250 017e 02F30F02 	 ssat r2,#16,r2
 251              	
 252              	 .thumb
 253 0182 3A61     	 str r2,[r7,#16]
 254 0184 3A69     	 ldr r2,[r7,#16]
 255              	.LBE8:
 256 0186 92B2     	 uxth r2,r2
 257 0188 1A80     	 strh r2,[r3]
 134:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
 135:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     /* Decrement the loop counter */
 136:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     blkCnt--;
 258              	 .loc 1 136 0
 259 018a FB6F     	 ldr r3,[r7,#124]
 260 018c 013B     	 subs r3,r3,#1
 261 018e FB67     	 str r3,[r7,#124]
 262              	.L4:
 129:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   {
 263              	 .loc 1 129 0
 264 0190 FB6F     	 ldr r3,[r7,#124]
 265 0192 002B     	 cmp r3,#0
 266 0194 E1D1     	 bne .L5
 137:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   }
 138:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
 139:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** #else
 140:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
 141:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   /* Run the below code for Cortex-M0 */
 142:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
 143:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   /* Initialize blkCnt with number of samples */
 144:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   blkCnt = blockSize;
 145:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
 146:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   while(blkCnt > 0u)
 147:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   {
 148:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     /* C = A * scale */
 149:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     /* Scale the input and then store the result in the destination buffer. */
 150:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     *pDst++ = (q15_t) (__SSAT(((q31_t) * pSrc++ * scaleFract) >> kShift, 16));
 151:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
 152:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     /* Decrement the loop counter */
 153:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****     blkCnt--;
 154:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c ****   }
 155:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
 156:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** #endif /* #ifndef ARM_MATH_CM0_FAMILY */
 157:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** 
 158:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q15.c **** }
 267              	 .loc 1 158 0
 268 0196 8437     	 adds r7,r7,#132
 269              	.LCFI3:
 270              	 .cfi_def_cfa_offset 4
 271 0198 BD46     	 mov sp,r7
 272              	.LCFI4:
 273              	 .cfi_def_cfa_register 13
 274              	 
 275 019a 5DF8047B 	 ldr r7,[sp],#4
 276              	.LCFI5:
 277              	 .cfi_restore 7
 278              	 .cfi_def_cfa_offset 0
 279 019e 7047     	 bx lr
 280              	 .cfi_endproc
 281              	.LFE139:
 283              	 .text
 284              	.Letext0:
 285              	 .file 2 "c:\\davev4\\dave-4.1.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 286              	 .file 3 "c:\\davev4\\dave-4.1.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 287              	 .file 4 "C:\\Workspaces\\DAVE-4.1\\Flightcontroller_PWM_CopterRocks_Working\\Dave\\Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_scale_q15.c
    {standard input}:20     .text.arm_scale_q15:00000000 $t
    {standard input}:25     .text.arm_scale_q15:00000000 arm_scale_q15
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
